/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api;

import eZmaxAPI.ApiException;
import com.ezmax.api.model.CommonResponseError;
import com.ezmax.api.model.DiscussionCreateObjectV1Request;
import com.ezmax.api.model.DiscussionCreateObjectV1Response;
import com.ezmax.api.model.DiscussionDeleteObjectV1Response;
import com.ezmax.api.model.DiscussionGetObjectV2Response;
import com.ezmax.api.model.DiscussionPatchObjectV1Request;
import com.ezmax.api.model.DiscussionPatchObjectV1Response;
import com.ezmax.api.model.DiscussionUpdateDiscussionreadstatusV1Request;
import com.ezmax.api.model.DiscussionUpdateDiscussionreadstatusV1Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ObjectDiscussionApi
 */
@Disabled
public class ObjectDiscussionApiTest {

    private final ObjectDiscussionApi api = new ObjectDiscussionApi();

    /**
     * Create a new Discussion
     *
     * The endpoint allows to create one or many elements at once.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discussionCreateObjectV1Test() throws ApiException {
        DiscussionCreateObjectV1Request discussionCreateObjectV1Request = null;
        DiscussionCreateObjectV1Response response = api.discussionCreateObjectV1(discussionCreateObjectV1Request);
        // TODO: test validations
    }

    /**
     * Delete an existing Discussion
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discussionDeleteObjectV1Test() throws ApiException {
        Integer pkiDiscussionID = null;
        DiscussionDeleteObjectV1Response response = api.discussionDeleteObjectV1(pkiDiscussionID);
        // TODO: test validations
    }

    /**
     * Retrieve an existing Discussion
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discussionGetObjectV2Test() throws ApiException {
        Integer pkiDiscussionID = null;
        DiscussionGetObjectV2Response response = api.discussionGetObjectV2(pkiDiscussionID);
        // TODO: test validations
    }

    /**
     * Patch an existing Discussion
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discussionPatchObjectV1Test() throws ApiException {
        Integer pkiDiscussionID = null;
        DiscussionPatchObjectV1Request discussionPatchObjectV1Request = null;
        DiscussionPatchObjectV1Response response = api.discussionPatchObjectV1(pkiDiscussionID, discussionPatchObjectV1Request);
        // TODO: test validations
    }

    /**
     * Update the read status of the discussion
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discussionUpdateDiscussionreadstatusV1Test() throws ApiException {
        Integer pkiDiscussionID = null;
        DiscussionUpdateDiscussionreadstatusV1Request discussionUpdateDiscussionreadstatusV1Request = null;
        DiscussionUpdateDiscussionreadstatusV1Response response = api.discussionUpdateDiscussionreadstatusV1(pkiDiscussionID, discussionUpdateDiscussionreadstatusV1Request);
        // TODO: test validations
    }

}
