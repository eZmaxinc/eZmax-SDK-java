/*
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.7
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api;

import eZmaxAPI.ApiException;
import com.ezmax.api.model.CommonResponseError;
import com.ezmax.api.model.CommonResponseErrorSTemporaryFileUrl;
import com.ezmax.api.model.EzsigndocumentApplyEzsigntemplateV1Request;
import com.ezmax.api.model.EzsigndocumentApplyEzsigntemplateV1Response;
import com.ezmax.api.model.EzsigndocumentApplyEzsigntemplateV2Request;
import com.ezmax.api.model.EzsigndocumentApplyEzsigntemplateV2Response;
import com.ezmax.api.model.EzsigndocumentCreateObjectV1Request;
import com.ezmax.api.model.EzsigndocumentCreateObjectV1Response;
import com.ezmax.api.model.EzsigndocumentCreateObjectV2Request;
import com.ezmax.api.model.EzsigndocumentCreateObjectV2Response;
import com.ezmax.api.model.EzsigndocumentDeleteObjectV1Response;
import com.ezmax.api.model.EzsigndocumentEditEzsignformfieldgroupsV1Request;
import com.ezmax.api.model.EzsigndocumentEditEzsignformfieldgroupsV1Response;
import com.ezmax.api.model.EzsigndocumentEditEzsignsignaturesV1Request;
import com.ezmax.api.model.EzsigndocumentEditEzsignsignaturesV1Response;
import com.ezmax.api.model.EzsigndocumentEndPrematurelyV1Response;
import com.ezmax.api.model.EzsigndocumentGetDownloadUrlV1Response;
import com.ezmax.api.model.EzsigndocumentGetEzsignformfieldgroupsV1Response;
import com.ezmax.api.model.EzsigndocumentGetEzsignpagesV1Response;
import com.ezmax.api.model.EzsigndocumentGetEzsignsignaturesV1Response;
import com.ezmax.api.model.EzsigndocumentGetFormDataV1Response;
import com.ezmax.api.model.EzsigndocumentGetObjectV1Response;
import com.ezmax.api.model.EzsigndocumentGetTemporaryProofV1Response;
import com.ezmax.api.model.EzsigndocumentGetWordsPositionsV1Request;
import com.ezmax.api.model.EzsigndocumentGetWordsPositionsV1Response;
import com.ezmax.api.model.EzsigndocumentPatchObjectV1Request;
import com.ezmax.api.model.EzsigndocumentPatchObjectV1Response;
import java.io.File;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ObjectEzsigndocumentApi
 */
@Ignore
public class ObjectEzsigndocumentApiTest {

    private final ObjectEzsigndocumentApi api = new ObjectEzsigndocumentApi();

    
    /**
     * Apply an Ezsign Template to the Ezsigndocument.
     *
     * This function is deprecated. Please use *applyEzsigntemplate* instead which is doing the same thing but with a capital \&quot;E\&quot; to normalize the nomenclature.  This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ezsigndocumentApplyEzsigntemplateV1Test() throws ApiException {
        Integer pkiEzsigndocumentID = null;
        EzsigndocumentApplyEzsigntemplateV1Request ezsigndocumentApplyEzsigntemplateV1Request = null;
                EzsigndocumentApplyEzsigntemplateV1Response response = api.ezsigndocumentApplyEzsigntemplateV1(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateV1Request);
        // TODO: test validations
    }
    
    /**
     * Apply an Ezsign Template to the Ezsigndocument.
     *
     * This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ezsigndocumentApplyEzsigntemplateV2Test() throws ApiException {
        Integer pkiEzsigndocumentID = null;
        EzsigndocumentApplyEzsigntemplateV2Request ezsigndocumentApplyEzsigntemplateV2Request = null;
                EzsigndocumentApplyEzsigntemplateV2Response response = api.ezsigndocumentApplyEzsigntemplateV2(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateV2Request);
        // TODO: test validations
    }
    
    /**
     * Create a new Ezsigndocument
     *
     * The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ezsigndocumentCreateObjectV1Test() throws ApiException {
        List<EzsigndocumentCreateObjectV1Request> ezsigndocumentCreateObjectV1Request = null;
                EzsigndocumentCreateObjectV1Response response = api.ezsigndocumentCreateObjectV1(ezsigndocumentCreateObjectV1Request);
        // TODO: test validations
    }
    
    /**
     * Create a new Ezsigndocument
     *
     * The endpoint allows to create one or many elements at once.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ezsigndocumentCreateObjectV2Test() throws ApiException {
        EzsigndocumentCreateObjectV2Request ezsigndocumentCreateObjectV2Request = null;
                EzsigndocumentCreateObjectV2Response response = api.ezsigndocumentCreateObjectV2(ezsigndocumentCreateObjectV2Request);
        // TODO: test validations
    }
    
    /**
     * Delete an existing Ezsigndocument
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ezsigndocumentDeleteObjectV1Test() throws ApiException {
        Integer pkiEzsigndocumentID = null;
                EzsigndocumentDeleteObjectV1Response response = api.ezsigndocumentDeleteObjectV1(pkiEzsigndocumentID);
        // TODO: test validations
    }
    
    /**
     * Edit multiple Ezsignformfieldgroups
     *
     * Using this endpoint, you can edit multiple Ezsignformfieldgroups at the same time.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ezsigndocumentEditEzsignformfieldgroupsV1Test() throws ApiException {
        Integer pkiEzsigndocumentID = null;
        EzsigndocumentEditEzsignformfieldgroupsV1Request ezsigndocumentEditEzsignformfieldgroupsV1Request = null;
                EzsigndocumentEditEzsignformfieldgroupsV1Response response = api.ezsigndocumentEditEzsignformfieldgroupsV1(pkiEzsigndocumentID, ezsigndocumentEditEzsignformfieldgroupsV1Request);
        // TODO: test validations
    }
    
    /**
     * Edit multiple Ezsignsignatures
     *
     * Using this endpoint, you can edit multiple Ezsignsignatures at the same time.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ezsigndocumentEditEzsignsignaturesV1Test() throws ApiException {
        Integer pkiEzsigndocumentID = null;
        EzsigndocumentEditEzsignsignaturesV1Request ezsigndocumentEditEzsignsignaturesV1Request = null;
                EzsigndocumentEditEzsignsignaturesV1Response response = api.ezsigndocumentEditEzsignsignaturesV1(pkiEzsigndocumentID, ezsigndocumentEditEzsignsignaturesV1Request);
        // TODO: test validations
    }
    
    /**
     * End prematurely
     *
     * End prematurely an Ezsigndocument when some signatures are still required
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ezsigndocumentEndPrematurelyV1Test() throws ApiException {
        Integer pkiEzsigndocumentID = null;
        Object body = null;
                EzsigndocumentEndPrematurelyV1Response response = api.ezsigndocumentEndPrematurelyV1(pkiEzsigndocumentID, body);
        // TODO: test validations
    }
    
    /**
     * Retrieve a URL to download documents.
     *
     * This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ezsigndocumentGetDownloadUrlV1Test() throws ApiException {
        Integer pkiEzsigndocumentID = null;
        String eDocumentType = null;
                EzsigndocumentGetDownloadUrlV1Response response = api.ezsigndocumentGetDownloadUrlV1(pkiEzsigndocumentID, eDocumentType);
        // TODO: test validations
    }
    
    /**
     * Retrieve an existing Ezsigndocument&#39;s Ezsignformfieldgroups
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ezsigndocumentGetEzsignformfieldgroupsV1Test() throws ApiException {
        Integer pkiEzsigndocumentID = null;
                EzsigndocumentGetEzsignformfieldgroupsV1Response response = api.ezsigndocumentGetEzsignformfieldgroupsV1(pkiEzsigndocumentID);
        // TODO: test validations
    }
    
    /**
     * Retrieve an existing Ezsigndocument&#39;s Ezsignpages
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ezsigndocumentGetEzsignpagesV1Test() throws ApiException {
        Integer pkiEzsigndocumentID = null;
                EzsigndocumentGetEzsignpagesV1Response response = api.ezsigndocumentGetEzsignpagesV1(pkiEzsigndocumentID);
        // TODO: test validations
    }
    
    /**
     * Retrieve an existing Ezsigndocument&#39;s Ezsignsignatures
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ezsigndocumentGetEzsignsignaturesV1Test() throws ApiException {
        Integer pkiEzsigndocumentID = null;
                EzsigndocumentGetEzsignsignaturesV1Response response = api.ezsigndocumentGetEzsignsignaturesV1(pkiEzsigndocumentID);
        // TODO: test validations
    }
    
    /**
     * Retrieve an existing Ezsigndocument&#39;s Form Data
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ezsigndocumentGetFormDataV1Test() throws ApiException {
        Integer pkiEzsigndocumentID = null;
                EzsigndocumentGetFormDataV1Response response = api.ezsigndocumentGetFormDataV1(pkiEzsigndocumentID);
        // TODO: test validations
    }
    
    /**
     * Retrieve an existing Ezsigndocument
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ezsigndocumentGetObjectV1Test() throws ApiException {
        Integer pkiEzsigndocumentID = null;
                EzsigndocumentGetObjectV1Response response = api.ezsigndocumentGetObjectV1(pkiEzsigndocumentID);
        // TODO: test validations
    }
    
    /**
     * Retrieve the temporary proof
     *
     * Retrieve the temporary proof while the Ezsigndocument is being processed since the proof isn&#39;t available until the Ezsigndocument is completed
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ezsigndocumentGetTemporaryProofV1Test() throws ApiException {
        Integer pkiEzsigndocumentID = null;
                EzsigndocumentGetTemporaryProofV1Response response = api.ezsigndocumentGetTemporaryProofV1(pkiEzsigndocumentID);
        // TODO: test validations
    }
    
    /**
     * Retrieve positions X,Y of given words from a Ezsigndocument
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ezsigndocumentGetWordsPositionsV1Test() throws ApiException {
        Integer pkiEzsigndocumentID = null;
        EzsigndocumentGetWordsPositionsV1Request ezsigndocumentGetWordsPositionsV1Request = null;
                EzsigndocumentGetWordsPositionsV1Response response = api.ezsigndocumentGetWordsPositionsV1(pkiEzsigndocumentID, ezsigndocumentGetWordsPositionsV1Request);
        // TODO: test validations
    }
    
    /**
     * Patch an existing Ezsigndocument
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ezsigndocumentPatchObjectV1Test() throws ApiException {
        Integer pkiEzsigndocumentID = null;
        EzsigndocumentPatchObjectV1Request ezsigndocumentPatchObjectV1Request = null;
                EzsigndocumentPatchObjectV1Response response = api.ezsigndocumentPatchObjectV1(pkiEzsigndocumentID, ezsigndocumentPatchObjectV1Request);
        // TODO: test validations
    }
    
}
