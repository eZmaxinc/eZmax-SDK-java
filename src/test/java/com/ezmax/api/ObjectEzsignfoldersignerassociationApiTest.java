/*
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign application.  We provide SDKs for customers. They are generated using OpenAPI codegen, we encourage customers to use them as we also provide samples for them.  You can choose to build your own implementation manually or can use any compatible OpenAPI 3.0 generator like Swagger Codegen, OpenAPI codegen or any commercial generators.  If you need helping understanding how to use this API, don't waste too much time looking for it. Contact support-api@ezmax.ca, we're here to help. We are developpers so we know programmers don't like bad documentation. If you don't find what you need in the documentation, let us know, we'll improve it and put you rapidly up on track.
 *
 * The version of the OpenAPI document: 1.0.27
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api;

import eZmaxAPI.ApiException;
import com.ezmax.api.model.CommonResponseError;
import com.ezmax.api.model.EzsignfoldersignerassociationCreateObjectV1Request;
import com.ezmax.api.model.EzsignfoldersignerassociationCreateObjectV1Response;
import com.ezmax.api.model.EzsignfoldersignerassociationDeleteObjectV1Response;
import com.ezmax.api.model.EzsignfoldersignerassociationEditObjectV1Request;
import com.ezmax.api.model.EzsignfoldersignerassociationEditObjectV1Response;
import com.ezmax.api.model.EzsignfoldersignerassociationGetInPersonLoginUrlV1Response;
import com.ezmax.api.model.EzsignfoldersignerassociationGetObjectV1Response;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ObjectEzsignfoldersignerassociationApi
 */
@Ignore
public class ObjectEzsignfoldersignerassociationApiTest {

    private final ObjectEzsignfoldersignerassociationApi api = new ObjectEzsignfoldersignerassociationApi();

    
    /**
     * Create a new Ezsignfoldersignerassociation
     *
     * The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ezsignfoldersignerassociationCreateObjectV1Test() throws ApiException {
        List<EzsignfoldersignerassociationCreateObjectV1Request> ezsignfoldersignerassociationCreateObjectV1Request = null;
        EzsignfoldersignerassociationCreateObjectV1Response response = api.ezsignfoldersignerassociationCreateObjectV1(ezsignfoldersignerassociationCreateObjectV1Request);

        // TODO: test validations
    }
    
    /**
     * Delete an existing Ezsignfoldersignerassociation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ezsignfoldersignerassociationDeleteObjectV1Test() throws ApiException {
        Integer pkiEzsignfoldersignerassociationID = null;
        EzsignfoldersignerassociationDeleteObjectV1Response response = api.ezsignfoldersignerassociationDeleteObjectV1(pkiEzsignfoldersignerassociationID);

        // TODO: test validations
    }
    
    /**
     * Modify an existing Ezsignfoldersignerassociation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ezsignfoldersignerassociationEditObjectV1Test() throws ApiException {
        Integer pkiEzsignfoldersignerassociationID = null;
        EzsignfoldersignerassociationEditObjectV1Request ezsignfoldersignerassociationEditObjectV1Request = null;
        EzsignfoldersignerassociationEditObjectV1Response response = api.ezsignfoldersignerassociationEditObjectV1(pkiEzsignfoldersignerassociationID, ezsignfoldersignerassociationEditObjectV1Request);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Login Url to allow In-Person signing
     *
     * This endpoint returns a Login Url that can be used in a browser or embedded in an I-Frame to allow in person signing.  The signer Login type must be configured as In-Person.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ezsignfoldersignerassociationGetInPersonLoginUrlV1Test() throws ApiException {
        Integer pkiEzsignfoldersignerassociationID = null;
        EzsignfoldersignerassociationGetInPersonLoginUrlV1Response response = api.ezsignfoldersignerassociationGetInPersonLoginUrlV1(pkiEzsignfoldersignerassociationID);

        // TODO: test validations
    }
    
    /**
     * Retrieve an existing Ezsignfoldersignerassociation&#39;s children IDs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ezsignfoldersignerassociationGetObjectGetChildrenV1Test() throws ApiException {
        Integer pkiEzsignfoldersignerassociationID = null;
        api.ezsignfoldersignerassociationGetObjectGetChildrenV1(pkiEzsignfoldersignerassociationID);

        // TODO: test validations
    }
    
    /**
     * Retrieve an existing Ezsignfoldersignerassociation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ezsignfoldersignerassociationGetObjectV1Test() throws ApiException {
        Integer pkiEzsignfoldersignerassociationID = null;
        EzsignfoldersignerassociationGetObjectV1Response response = api.ezsignfoldersignerassociationGetObjectV1(pkiEzsignfoldersignerassociationID);

        // TODO: test validations
    }
    
}
