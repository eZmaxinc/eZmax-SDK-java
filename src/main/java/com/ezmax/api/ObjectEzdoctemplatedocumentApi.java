/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api;

import eZmaxAPI.ApiCallback;
import eZmaxAPI.ApiClient;
import eZmaxAPI.ApiException;
import eZmaxAPI.ApiResponse;
import eZmaxAPI.Configuration;
import eZmaxAPI.Pair;
import eZmaxAPI.ProgressRequestBody;
import eZmaxAPI.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ezmax.api.model.CommonResponseError;
import com.ezmax.api.model.EzdoctemplatedocumentCreateObjectV1Request;
import com.ezmax.api.model.EzdoctemplatedocumentCreateObjectV1Response;
import com.ezmax.api.model.EzdoctemplatedocumentEditObjectV1Request;
import com.ezmax.api.model.EzdoctemplatedocumentEditObjectV1Response;
import com.ezmax.api.model.EzdoctemplatedocumentGetAutocompleteV2Response;
import com.ezmax.api.model.EzdoctemplatedocumentGetListV1Response;
import com.ezmax.api.model.EzdoctemplatedocumentGetObjectV2Response;
import com.ezmax.api.model.EzdoctemplatedocumentPatchObjectV1Request;
import com.ezmax.api.model.EzdoctemplatedocumentPatchObjectV1Response;
import java.io.File;
import com.ezmax.api.model.HeaderAcceptLanguage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ObjectEzdoctemplatedocumentApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ObjectEzdoctemplatedocumentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ObjectEzdoctemplatedocumentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for ezdoctemplatedocumentCreateObjectV1
     * @param ezdoctemplatedocumentCreateObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezdoctemplatedocumentCreateObjectV1Call(EzdoctemplatedocumentCreateObjectV1Request ezdoctemplatedocumentCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezdoctemplatedocumentCreateObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezdoctemplatedocument";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezdoctemplatedocumentCreateObjectV1ValidateBeforeCall(EzdoctemplatedocumentCreateObjectV1Request ezdoctemplatedocumentCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ezdoctemplatedocumentCreateObjectV1Request' is set
        if (ezdoctemplatedocumentCreateObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezdoctemplatedocumentCreateObjectV1Request' when calling ezdoctemplatedocumentCreateObjectV1(Async)");
        }

        return ezdoctemplatedocumentCreateObjectV1Call(ezdoctemplatedocumentCreateObjectV1Request, _callback);

    }

    /**
     * Create a new Ezdoctemplatedocument
     * The endpoint allows to create one or many elements at once.
     * @param ezdoctemplatedocumentCreateObjectV1Request  (required)
     * @return EzdoctemplatedocumentCreateObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EzdoctemplatedocumentCreateObjectV1Response ezdoctemplatedocumentCreateObjectV1(EzdoctemplatedocumentCreateObjectV1Request ezdoctemplatedocumentCreateObjectV1Request) throws ApiException {
        ApiResponse<EzdoctemplatedocumentCreateObjectV1Response> localVarResp = ezdoctemplatedocumentCreateObjectV1WithHttpInfo(ezdoctemplatedocumentCreateObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Create a new Ezdoctemplatedocument
     * The endpoint allows to create one or many elements at once.
     * @param ezdoctemplatedocumentCreateObjectV1Request  (required)
     * @return ApiResponse&lt;EzdoctemplatedocumentCreateObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzdoctemplatedocumentCreateObjectV1Response> ezdoctemplatedocumentCreateObjectV1WithHttpInfo(EzdoctemplatedocumentCreateObjectV1Request ezdoctemplatedocumentCreateObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezdoctemplatedocumentCreateObjectV1ValidateBeforeCall(ezdoctemplatedocumentCreateObjectV1Request, null);
        Type localVarReturnType = new TypeToken<EzdoctemplatedocumentCreateObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Ezdoctemplatedocument (asynchronously)
     * The endpoint allows to create one or many elements at once.
     * @param ezdoctemplatedocumentCreateObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezdoctemplatedocumentCreateObjectV1Async(EzdoctemplatedocumentCreateObjectV1Request ezdoctemplatedocumentCreateObjectV1Request, final ApiCallback<EzdoctemplatedocumentCreateObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezdoctemplatedocumentCreateObjectV1ValidateBeforeCall(ezdoctemplatedocumentCreateObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<EzdoctemplatedocumentCreateObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezdoctemplatedocumentDownloadV1
     * @param pkiEzdoctemplatedocumentID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> The user has been redirected </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezdoctemplatedocumentDownloadV1Call(Integer pkiEzdoctemplatedocumentID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/ezdoctemplatedocument/{pkiEzdoctemplatedocumentID}/download"
            .replace("{" + "pkiEzdoctemplatedocumentID" + "}", localVarApiClient.escapeString(pkiEzdoctemplatedocumentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization", "Presigned" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezdoctemplatedocumentDownloadV1ValidateBeforeCall(Integer pkiEzdoctemplatedocumentID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiEzdoctemplatedocumentID' is set
        if (pkiEzdoctemplatedocumentID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzdoctemplatedocumentID' when calling ezdoctemplatedocumentDownloadV1(Async)");
        }

        return ezdoctemplatedocumentDownloadV1Call(pkiEzdoctemplatedocumentID, _callback);

    }

    /**
     * Retrieve the content
     * Using this endpoint, you can retrieve the content of an ezdoctemplatedocument.
     * @param pkiEzdoctemplatedocumentID  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> The user has been redirected </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public void ezdoctemplatedocumentDownloadV1(Integer pkiEzdoctemplatedocumentID) throws ApiException {
        ezdoctemplatedocumentDownloadV1WithHttpInfo(pkiEzdoctemplatedocumentID);
    }

    /**
     * Retrieve the content
     * Using this endpoint, you can retrieve the content of an ezdoctemplatedocument.
     * @param pkiEzdoctemplatedocumentID  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> The user has been redirected </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ezdoctemplatedocumentDownloadV1WithHttpInfo(Integer pkiEzdoctemplatedocumentID) throws ApiException {
        okhttp3.Call localVarCall = ezdoctemplatedocumentDownloadV1ValidateBeforeCall(pkiEzdoctemplatedocumentID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve the content (asynchronously)
     * Using this endpoint, you can retrieve the content of an ezdoctemplatedocument.
     * @param pkiEzdoctemplatedocumentID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> The user has been redirected </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezdoctemplatedocumentDownloadV1Async(Integer pkiEzdoctemplatedocumentID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezdoctemplatedocumentDownloadV1ValidateBeforeCall(pkiEzdoctemplatedocumentID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezdoctemplatedocumentEditObjectV1
     * @param pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument (required)
     * @param ezdoctemplatedocumentEditObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezdoctemplatedocumentEditObjectV1Call(Integer pkiEzdoctemplatedocumentID, EzdoctemplatedocumentEditObjectV1Request ezdoctemplatedocumentEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezdoctemplatedocumentEditObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezdoctemplatedocument/{pkiEzdoctemplatedocumentID}"
            .replace("{" + "pkiEzdoctemplatedocumentID" + "}", localVarApiClient.escapeString(pkiEzdoctemplatedocumentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezdoctemplatedocumentEditObjectV1ValidateBeforeCall(Integer pkiEzdoctemplatedocumentID, EzdoctemplatedocumentEditObjectV1Request ezdoctemplatedocumentEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiEzdoctemplatedocumentID' is set
        if (pkiEzdoctemplatedocumentID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzdoctemplatedocumentID' when calling ezdoctemplatedocumentEditObjectV1(Async)");
        }

        // verify the required parameter 'ezdoctemplatedocumentEditObjectV1Request' is set
        if (ezdoctemplatedocumentEditObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezdoctemplatedocumentEditObjectV1Request' when calling ezdoctemplatedocumentEditObjectV1(Async)");
        }

        return ezdoctemplatedocumentEditObjectV1Call(pkiEzdoctemplatedocumentID, ezdoctemplatedocumentEditObjectV1Request, _callback);

    }

    /**
     * Edit an existing Ezdoctemplatedocument
     * 
     * @param pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument (required)
     * @param ezdoctemplatedocumentEditObjectV1Request  (required)
     * @return EzdoctemplatedocumentEditObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzdoctemplatedocumentEditObjectV1Response ezdoctemplatedocumentEditObjectV1(Integer pkiEzdoctemplatedocumentID, EzdoctemplatedocumentEditObjectV1Request ezdoctemplatedocumentEditObjectV1Request) throws ApiException {
        ApiResponse<EzdoctemplatedocumentEditObjectV1Response> localVarResp = ezdoctemplatedocumentEditObjectV1WithHttpInfo(pkiEzdoctemplatedocumentID, ezdoctemplatedocumentEditObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Edit an existing Ezdoctemplatedocument
     * 
     * @param pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument (required)
     * @param ezdoctemplatedocumentEditObjectV1Request  (required)
     * @return ApiResponse&lt;EzdoctemplatedocumentEditObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzdoctemplatedocumentEditObjectV1Response> ezdoctemplatedocumentEditObjectV1WithHttpInfo(Integer pkiEzdoctemplatedocumentID, EzdoctemplatedocumentEditObjectV1Request ezdoctemplatedocumentEditObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezdoctemplatedocumentEditObjectV1ValidateBeforeCall(pkiEzdoctemplatedocumentID, ezdoctemplatedocumentEditObjectV1Request, null);
        Type localVarReturnType = new TypeToken<EzdoctemplatedocumentEditObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit an existing Ezdoctemplatedocument (asynchronously)
     * 
     * @param pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument (required)
     * @param ezdoctemplatedocumentEditObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezdoctemplatedocumentEditObjectV1Async(Integer pkiEzdoctemplatedocumentID, EzdoctemplatedocumentEditObjectV1Request ezdoctemplatedocumentEditObjectV1Request, final ApiCallback<EzdoctemplatedocumentEditObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezdoctemplatedocumentEditObjectV1ValidateBeforeCall(pkiEzdoctemplatedocumentID, ezdoctemplatedocumentEditObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<EzdoctemplatedocumentEditObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezdoctemplatedocumentGetAutocompleteV2
     * @param sSelector The type of Ezdoctemplatedocuments to return (required)
     * @param eType The type of Ezdoctemplatedocument (required)
     * @param fkiEzsignfoldertypeID Specify which fkiEzsignfoldertypeID we want to display. only used when eType &#x3D; Ezsignfoldertype (optional)
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezdoctemplatedocumentGetAutocompleteV2Call(String sSelector, String eType, String fkiEzsignfoldertypeID, String eFilterActive, String sQuery, HeaderAcceptLanguage acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/object/ezdoctemplatedocument/getAutocomplete/{sSelector}"
            .replace("{" + "sSelector" + "}", localVarApiClient.escapeString(sSelector.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fkiEzsignfoldertypeID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fkiEzsignfoldertypeID", fkiEzsignfoldertypeID));
        }

        if (eType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eType", eType));
        }

        if (eFilterActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eFilterActive", eFilterActive));
        }

        if (sQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sQuery", sQuery));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezdoctemplatedocumentGetAutocompleteV2ValidateBeforeCall(String sSelector, String eType, String fkiEzsignfoldertypeID, String eFilterActive, String sQuery, HeaderAcceptLanguage acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sSelector' is set
        if (sSelector == null) {
            throw new ApiException("Missing the required parameter 'sSelector' when calling ezdoctemplatedocumentGetAutocompleteV2(Async)");
        }

        // verify the required parameter 'eType' is set
        if (eType == null) {
            throw new ApiException("Missing the required parameter 'eType' when calling ezdoctemplatedocumentGetAutocompleteV2(Async)");
        }

        return ezdoctemplatedocumentGetAutocompleteV2Call(sSelector, eType, fkiEzsignfoldertypeID, eFilterActive, sQuery, acceptLanguage, _callback);

    }

    /**
     * Retrieve Ezdoctemplatedocuments and IDs
     * Get the list of Ezdoctemplatedocument to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Ezdoctemplatedocuments to return (required)
     * @param eType The type of Ezdoctemplatedocument (required)
     * @param fkiEzsignfoldertypeID Specify which fkiEzsignfoldertypeID we want to display. only used when eType &#x3D; Ezsignfoldertype (optional)
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return EzdoctemplatedocumentGetAutocompleteV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EzdoctemplatedocumentGetAutocompleteV2Response ezdoctemplatedocumentGetAutocompleteV2(String sSelector, String eType, String fkiEzsignfoldertypeID, String eFilterActive, String sQuery, HeaderAcceptLanguage acceptLanguage) throws ApiException {
        ApiResponse<EzdoctemplatedocumentGetAutocompleteV2Response> localVarResp = ezdoctemplatedocumentGetAutocompleteV2WithHttpInfo(sSelector, eType, fkiEzsignfoldertypeID, eFilterActive, sQuery, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Retrieve Ezdoctemplatedocuments and IDs
     * Get the list of Ezdoctemplatedocument to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Ezdoctemplatedocuments to return (required)
     * @param eType The type of Ezdoctemplatedocument (required)
     * @param fkiEzsignfoldertypeID Specify which fkiEzsignfoldertypeID we want to display. only used when eType &#x3D; Ezsignfoldertype (optional)
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return ApiResponse&lt;EzdoctemplatedocumentGetAutocompleteV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzdoctemplatedocumentGetAutocompleteV2Response> ezdoctemplatedocumentGetAutocompleteV2WithHttpInfo(String sSelector, String eType, String fkiEzsignfoldertypeID, String eFilterActive, String sQuery, HeaderAcceptLanguage acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = ezdoctemplatedocumentGetAutocompleteV2ValidateBeforeCall(sSelector, eType, fkiEzsignfoldertypeID, eFilterActive, sQuery, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<EzdoctemplatedocumentGetAutocompleteV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Ezdoctemplatedocuments and IDs (asynchronously)
     * Get the list of Ezdoctemplatedocument to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Ezdoctemplatedocuments to return (required)
     * @param eType The type of Ezdoctemplatedocument (required)
     * @param fkiEzsignfoldertypeID Specify which fkiEzsignfoldertypeID we want to display. only used when eType &#x3D; Ezsignfoldertype (optional)
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezdoctemplatedocumentGetAutocompleteV2Async(String sSelector, String eType, String fkiEzsignfoldertypeID, String eFilterActive, String sQuery, HeaderAcceptLanguage acceptLanguage, final ApiCallback<EzdoctemplatedocumentGetAutocompleteV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezdoctemplatedocumentGetAutocompleteV2ValidateBeforeCall(sSelector, eType, fkiEzsignfoldertypeID, eFilterActive, sQuery, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<EzdoctemplatedocumentGetAutocompleteV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezdoctemplatedocumentGetListV1
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezdoctemplatedocumentGetListV1Call(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/ezdoctemplatedocument/getList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eOrderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eOrderBy", eOrderBy));
        }

        if (iRowMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iRowMax", iRowMax));
        }

        if (iRowOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iRowOffset", iRowOffset));
        }

        if (sFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sFilter", sFilter));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezdoctemplatedocumentGetListV1ValidateBeforeCall(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter, final ApiCallback _callback) throws ApiException {
        return ezdoctemplatedocumentGetListV1Call(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, _callback);

    }

    /**
     * Retrieve Ezdoctemplatedocument list
     * 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return EzdoctemplatedocumentGetListV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public EzdoctemplatedocumentGetListV1Response ezdoctemplatedocumentGetListV1(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter) throws ApiException {
        ApiResponse<EzdoctemplatedocumentGetListV1Response> localVarResp = ezdoctemplatedocumentGetListV1WithHttpInfo(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter);
        return localVarResp.getData();
    }

    /**
     * Retrieve Ezdoctemplatedocument list
     * 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return ApiResponse&lt;EzdoctemplatedocumentGetListV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzdoctemplatedocumentGetListV1Response> ezdoctemplatedocumentGetListV1WithHttpInfo(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter) throws ApiException {
        okhttp3.Call localVarCall = ezdoctemplatedocumentGetListV1ValidateBeforeCall(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, null);
        Type localVarReturnType = new TypeToken<EzdoctemplatedocumentGetListV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Ezdoctemplatedocument list (asynchronously)
     * 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezdoctemplatedocumentGetListV1Async(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter, final ApiCallback<EzdoctemplatedocumentGetListV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezdoctemplatedocumentGetListV1ValidateBeforeCall(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, _callback);
        Type localVarReturnType = new TypeToken<EzdoctemplatedocumentGetListV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezdoctemplatedocumentGetObjectV2
     * @param pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezdoctemplatedocumentGetObjectV2Call(Integer pkiEzdoctemplatedocumentID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/object/ezdoctemplatedocument/{pkiEzdoctemplatedocumentID}"
            .replace("{" + "pkiEzdoctemplatedocumentID" + "}", localVarApiClient.escapeString(pkiEzdoctemplatedocumentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezdoctemplatedocumentGetObjectV2ValidateBeforeCall(Integer pkiEzdoctemplatedocumentID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiEzdoctemplatedocumentID' is set
        if (pkiEzdoctemplatedocumentID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzdoctemplatedocumentID' when calling ezdoctemplatedocumentGetObjectV2(Async)");
        }

        return ezdoctemplatedocumentGetObjectV2Call(pkiEzdoctemplatedocumentID, _callback);

    }

    /**
     * Retrieve an existing Ezdoctemplatedocument
     * 
     * @param pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument (required)
     * @return EzdoctemplatedocumentGetObjectV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzdoctemplatedocumentGetObjectV2Response ezdoctemplatedocumentGetObjectV2(Integer pkiEzdoctemplatedocumentID) throws ApiException {
        ApiResponse<EzdoctemplatedocumentGetObjectV2Response> localVarResp = ezdoctemplatedocumentGetObjectV2WithHttpInfo(pkiEzdoctemplatedocumentID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Ezdoctemplatedocument
     * 
     * @param pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument (required)
     * @return ApiResponse&lt;EzdoctemplatedocumentGetObjectV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzdoctemplatedocumentGetObjectV2Response> ezdoctemplatedocumentGetObjectV2WithHttpInfo(Integer pkiEzdoctemplatedocumentID) throws ApiException {
        okhttp3.Call localVarCall = ezdoctemplatedocumentGetObjectV2ValidateBeforeCall(pkiEzdoctemplatedocumentID, null);
        Type localVarReturnType = new TypeToken<EzdoctemplatedocumentGetObjectV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Ezdoctemplatedocument (asynchronously)
     * 
     * @param pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezdoctemplatedocumentGetObjectV2Async(Integer pkiEzdoctemplatedocumentID, final ApiCallback<EzdoctemplatedocumentGetObjectV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezdoctemplatedocumentGetObjectV2ValidateBeforeCall(pkiEzdoctemplatedocumentID, _callback);
        Type localVarReturnType = new TypeToken<EzdoctemplatedocumentGetObjectV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezdoctemplatedocumentPatchObjectV1
     * @param pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument (required)
     * @param ezdoctemplatedocumentPatchObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezdoctemplatedocumentPatchObjectV1Call(Integer pkiEzdoctemplatedocumentID, EzdoctemplatedocumentPatchObjectV1Request ezdoctemplatedocumentPatchObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezdoctemplatedocumentPatchObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezdoctemplatedocument/{pkiEzdoctemplatedocumentID}"
            .replace("{" + "pkiEzdoctemplatedocumentID" + "}", localVarApiClient.escapeString(pkiEzdoctemplatedocumentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezdoctemplatedocumentPatchObjectV1ValidateBeforeCall(Integer pkiEzdoctemplatedocumentID, EzdoctemplatedocumentPatchObjectV1Request ezdoctemplatedocumentPatchObjectV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiEzdoctemplatedocumentID' is set
        if (pkiEzdoctemplatedocumentID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzdoctemplatedocumentID' when calling ezdoctemplatedocumentPatchObjectV1(Async)");
        }

        // verify the required parameter 'ezdoctemplatedocumentPatchObjectV1Request' is set
        if (ezdoctemplatedocumentPatchObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezdoctemplatedocumentPatchObjectV1Request' when calling ezdoctemplatedocumentPatchObjectV1(Async)");
        }

        return ezdoctemplatedocumentPatchObjectV1Call(pkiEzdoctemplatedocumentID, ezdoctemplatedocumentPatchObjectV1Request, _callback);

    }

    /**
     * Patch an existing Ezdoctemplatedocument
     * 
     * @param pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument (required)
     * @param ezdoctemplatedocumentPatchObjectV1Request  (required)
     * @return EzdoctemplatedocumentPatchObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzdoctemplatedocumentPatchObjectV1Response ezdoctemplatedocumentPatchObjectV1(Integer pkiEzdoctemplatedocumentID, EzdoctemplatedocumentPatchObjectV1Request ezdoctemplatedocumentPatchObjectV1Request) throws ApiException {
        ApiResponse<EzdoctemplatedocumentPatchObjectV1Response> localVarResp = ezdoctemplatedocumentPatchObjectV1WithHttpInfo(pkiEzdoctemplatedocumentID, ezdoctemplatedocumentPatchObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Patch an existing Ezdoctemplatedocument
     * 
     * @param pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument (required)
     * @param ezdoctemplatedocumentPatchObjectV1Request  (required)
     * @return ApiResponse&lt;EzdoctemplatedocumentPatchObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzdoctemplatedocumentPatchObjectV1Response> ezdoctemplatedocumentPatchObjectV1WithHttpInfo(Integer pkiEzdoctemplatedocumentID, EzdoctemplatedocumentPatchObjectV1Request ezdoctemplatedocumentPatchObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezdoctemplatedocumentPatchObjectV1ValidateBeforeCall(pkiEzdoctemplatedocumentID, ezdoctemplatedocumentPatchObjectV1Request, null);
        Type localVarReturnType = new TypeToken<EzdoctemplatedocumentPatchObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch an existing Ezdoctemplatedocument (asynchronously)
     * 
     * @param pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument (required)
     * @param ezdoctemplatedocumentPatchObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezdoctemplatedocumentPatchObjectV1Async(Integer pkiEzdoctemplatedocumentID, EzdoctemplatedocumentPatchObjectV1Request ezdoctemplatedocumentPatchObjectV1Request, final ApiCallback<EzdoctemplatedocumentPatchObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezdoctemplatedocumentPatchObjectV1ValidateBeforeCall(pkiEzdoctemplatedocumentID, ezdoctemplatedocumentPatchObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<EzdoctemplatedocumentPatchObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
