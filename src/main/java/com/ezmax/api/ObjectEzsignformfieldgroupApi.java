/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api;

import eZmaxAPI.ApiCallback;
import eZmaxAPI.ApiClient;
import eZmaxAPI.ApiException;
import eZmaxAPI.ApiResponse;
import eZmaxAPI.Configuration;
import eZmaxAPI.Pair;
import eZmaxAPI.ProgressRequestBody;
import eZmaxAPI.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ezmax.api.model.CommonResponseError;
import com.ezmax.api.model.EzsignformfieldgroupCreateObjectV1Request;
import com.ezmax.api.model.EzsignformfieldgroupCreateObjectV1Response;
import com.ezmax.api.model.EzsignformfieldgroupDeleteObjectV1Response;
import com.ezmax.api.model.EzsignformfieldgroupEditObjectV1Request;
import com.ezmax.api.model.EzsignformfieldgroupEditObjectV1Response;
import com.ezmax.api.model.EzsignformfieldgroupGetObjectV2Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ObjectEzsignformfieldgroupApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ObjectEzsignformfieldgroupApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ObjectEzsignformfieldgroupApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for ezsignformfieldgroupCreateObjectV1
     * @param ezsignformfieldgroupCreateObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignformfieldgroupCreateObjectV1Call(EzsignformfieldgroupCreateObjectV1Request ezsignformfieldgroupCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezsignformfieldgroupCreateObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezsignformfieldgroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsignformfieldgroupCreateObjectV1ValidateBeforeCall(EzsignformfieldgroupCreateObjectV1Request ezsignformfieldgroupCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ezsignformfieldgroupCreateObjectV1Request' is set
        if (ezsignformfieldgroupCreateObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezsignformfieldgroupCreateObjectV1Request' when calling ezsignformfieldgroupCreateObjectV1(Async)");
        }

        return ezsignformfieldgroupCreateObjectV1Call(ezsignformfieldgroupCreateObjectV1Request, _callback);

    }

    /**
     * Create a new Ezsignformfieldgroup
     * The endpoint allows to create one or many elements at once.
     * @param ezsignformfieldgroupCreateObjectV1Request  (required)
     * @return EzsignformfieldgroupCreateObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EzsignformfieldgroupCreateObjectV1Response ezsignformfieldgroupCreateObjectV1(EzsignformfieldgroupCreateObjectV1Request ezsignformfieldgroupCreateObjectV1Request) throws ApiException {
        ApiResponse<EzsignformfieldgroupCreateObjectV1Response> localVarResp = ezsignformfieldgroupCreateObjectV1WithHttpInfo(ezsignformfieldgroupCreateObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Create a new Ezsignformfieldgroup
     * The endpoint allows to create one or many elements at once.
     * @param ezsignformfieldgroupCreateObjectV1Request  (required)
     * @return ApiResponse&lt;EzsignformfieldgroupCreateObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsignformfieldgroupCreateObjectV1Response> ezsignformfieldgroupCreateObjectV1WithHttpInfo(EzsignformfieldgroupCreateObjectV1Request ezsignformfieldgroupCreateObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezsignformfieldgroupCreateObjectV1ValidateBeforeCall(ezsignformfieldgroupCreateObjectV1Request, null);
        Type localVarReturnType = new TypeToken<EzsignformfieldgroupCreateObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Ezsignformfieldgroup (asynchronously)
     * The endpoint allows to create one or many elements at once.
     * @param ezsignformfieldgroupCreateObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignformfieldgroupCreateObjectV1Async(EzsignformfieldgroupCreateObjectV1Request ezsignformfieldgroupCreateObjectV1Request, final ApiCallback<EzsignformfieldgroupCreateObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsignformfieldgroupCreateObjectV1ValidateBeforeCall(ezsignformfieldgroupCreateObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<EzsignformfieldgroupCreateObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsignformfieldgroupDeleteObjectV1
     * @param pkiEzsignformfieldgroupID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignformfieldgroupDeleteObjectV1Call(Integer pkiEzsignformfieldgroupID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/ezsignformfieldgroup/{pkiEzsignformfieldgroupID}"
            .replace("{" + "pkiEzsignformfieldgroupID" + "}", localVarApiClient.escapeString(pkiEzsignformfieldgroupID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsignformfieldgroupDeleteObjectV1ValidateBeforeCall(Integer pkiEzsignformfieldgroupID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiEzsignformfieldgroupID' is set
        if (pkiEzsignformfieldgroupID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsignformfieldgroupID' when calling ezsignformfieldgroupDeleteObjectV1(Async)");
        }

        return ezsignformfieldgroupDeleteObjectV1Call(pkiEzsignformfieldgroupID, _callback);

    }

    /**
     * Delete an existing Ezsignformfieldgroup
     * 
     * @param pkiEzsignformfieldgroupID  (required)
     * @return EzsignformfieldgroupDeleteObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsignformfieldgroupDeleteObjectV1Response ezsignformfieldgroupDeleteObjectV1(Integer pkiEzsignformfieldgroupID) throws ApiException {
        ApiResponse<EzsignformfieldgroupDeleteObjectV1Response> localVarResp = ezsignformfieldgroupDeleteObjectV1WithHttpInfo(pkiEzsignformfieldgroupID);
        return localVarResp.getData();
    }

    /**
     * Delete an existing Ezsignformfieldgroup
     * 
     * @param pkiEzsignformfieldgroupID  (required)
     * @return ApiResponse&lt;EzsignformfieldgroupDeleteObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsignformfieldgroupDeleteObjectV1Response> ezsignformfieldgroupDeleteObjectV1WithHttpInfo(Integer pkiEzsignformfieldgroupID) throws ApiException {
        okhttp3.Call localVarCall = ezsignformfieldgroupDeleteObjectV1ValidateBeforeCall(pkiEzsignformfieldgroupID, null);
        Type localVarReturnType = new TypeToken<EzsignformfieldgroupDeleteObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an existing Ezsignformfieldgroup (asynchronously)
     * 
     * @param pkiEzsignformfieldgroupID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignformfieldgroupDeleteObjectV1Async(Integer pkiEzsignformfieldgroupID, final ApiCallback<EzsignformfieldgroupDeleteObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsignformfieldgroupDeleteObjectV1ValidateBeforeCall(pkiEzsignformfieldgroupID, _callback);
        Type localVarReturnType = new TypeToken<EzsignformfieldgroupDeleteObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsignformfieldgroupEditObjectV1
     * @param pkiEzsignformfieldgroupID  (required)
     * @param ezsignformfieldgroupEditObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignformfieldgroupEditObjectV1Call(Integer pkiEzsignformfieldgroupID, EzsignformfieldgroupEditObjectV1Request ezsignformfieldgroupEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezsignformfieldgroupEditObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezsignformfieldgroup/{pkiEzsignformfieldgroupID}"
            .replace("{" + "pkiEzsignformfieldgroupID" + "}", localVarApiClient.escapeString(pkiEzsignformfieldgroupID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsignformfieldgroupEditObjectV1ValidateBeforeCall(Integer pkiEzsignformfieldgroupID, EzsignformfieldgroupEditObjectV1Request ezsignformfieldgroupEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiEzsignformfieldgroupID' is set
        if (pkiEzsignformfieldgroupID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsignformfieldgroupID' when calling ezsignformfieldgroupEditObjectV1(Async)");
        }

        // verify the required parameter 'ezsignformfieldgroupEditObjectV1Request' is set
        if (ezsignformfieldgroupEditObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezsignformfieldgroupEditObjectV1Request' when calling ezsignformfieldgroupEditObjectV1(Async)");
        }

        return ezsignformfieldgroupEditObjectV1Call(pkiEzsignformfieldgroupID, ezsignformfieldgroupEditObjectV1Request, _callback);

    }

    /**
     * Edit an existing Ezsignformfieldgroup
     * 
     * @param pkiEzsignformfieldgroupID  (required)
     * @param ezsignformfieldgroupEditObjectV1Request  (required)
     * @return EzsignformfieldgroupEditObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsignformfieldgroupEditObjectV1Response ezsignformfieldgroupEditObjectV1(Integer pkiEzsignformfieldgroupID, EzsignformfieldgroupEditObjectV1Request ezsignformfieldgroupEditObjectV1Request) throws ApiException {
        ApiResponse<EzsignformfieldgroupEditObjectV1Response> localVarResp = ezsignformfieldgroupEditObjectV1WithHttpInfo(pkiEzsignformfieldgroupID, ezsignformfieldgroupEditObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Edit an existing Ezsignformfieldgroup
     * 
     * @param pkiEzsignformfieldgroupID  (required)
     * @param ezsignformfieldgroupEditObjectV1Request  (required)
     * @return ApiResponse&lt;EzsignformfieldgroupEditObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsignformfieldgroupEditObjectV1Response> ezsignformfieldgroupEditObjectV1WithHttpInfo(Integer pkiEzsignformfieldgroupID, EzsignformfieldgroupEditObjectV1Request ezsignformfieldgroupEditObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezsignformfieldgroupEditObjectV1ValidateBeforeCall(pkiEzsignformfieldgroupID, ezsignformfieldgroupEditObjectV1Request, null);
        Type localVarReturnType = new TypeToken<EzsignformfieldgroupEditObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit an existing Ezsignformfieldgroup (asynchronously)
     * 
     * @param pkiEzsignformfieldgroupID  (required)
     * @param ezsignformfieldgroupEditObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignformfieldgroupEditObjectV1Async(Integer pkiEzsignformfieldgroupID, EzsignformfieldgroupEditObjectV1Request ezsignformfieldgroupEditObjectV1Request, final ApiCallback<EzsignformfieldgroupEditObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsignformfieldgroupEditObjectV1ValidateBeforeCall(pkiEzsignformfieldgroupID, ezsignformfieldgroupEditObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<EzsignformfieldgroupEditObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsignformfieldgroupGetObjectV2
     * @param pkiEzsignformfieldgroupID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignformfieldgroupGetObjectV2Call(Integer pkiEzsignformfieldgroupID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/object/ezsignformfieldgroup/{pkiEzsignformfieldgroupID}"
            .replace("{" + "pkiEzsignformfieldgroupID" + "}", localVarApiClient.escapeString(pkiEzsignformfieldgroupID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsignformfieldgroupGetObjectV2ValidateBeforeCall(Integer pkiEzsignformfieldgroupID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiEzsignformfieldgroupID' is set
        if (pkiEzsignformfieldgroupID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsignformfieldgroupID' when calling ezsignformfieldgroupGetObjectV2(Async)");
        }

        return ezsignformfieldgroupGetObjectV2Call(pkiEzsignformfieldgroupID, _callback);

    }

    /**
     * Retrieve an existing Ezsignformfieldgroup
     * 
     * @param pkiEzsignformfieldgroupID  (required)
     * @return EzsignformfieldgroupGetObjectV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsignformfieldgroupGetObjectV2Response ezsignformfieldgroupGetObjectV2(Integer pkiEzsignformfieldgroupID) throws ApiException {
        ApiResponse<EzsignformfieldgroupGetObjectV2Response> localVarResp = ezsignformfieldgroupGetObjectV2WithHttpInfo(pkiEzsignformfieldgroupID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Ezsignformfieldgroup
     * 
     * @param pkiEzsignformfieldgroupID  (required)
     * @return ApiResponse&lt;EzsignformfieldgroupGetObjectV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsignformfieldgroupGetObjectV2Response> ezsignformfieldgroupGetObjectV2WithHttpInfo(Integer pkiEzsignformfieldgroupID) throws ApiException {
        okhttp3.Call localVarCall = ezsignformfieldgroupGetObjectV2ValidateBeforeCall(pkiEzsignformfieldgroupID, null);
        Type localVarReturnType = new TypeToken<EzsignformfieldgroupGetObjectV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Ezsignformfieldgroup (asynchronously)
     * 
     * @param pkiEzsignformfieldgroupID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignformfieldgroupGetObjectV2Async(Integer pkiEzsignformfieldgroupID, final ApiCallback<EzsignformfieldgroupGetObjectV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsignformfieldgroupGetObjectV2ValidateBeforeCall(pkiEzsignformfieldgroupID, _callback);
        Type localVarReturnType = new TypeToken<EzsignformfieldgroupGetObjectV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
