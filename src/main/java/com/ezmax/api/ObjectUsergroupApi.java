/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api;

import eZmaxAPI.ApiCallback;
import eZmaxAPI.ApiClient;
import eZmaxAPI.ApiException;
import eZmaxAPI.ApiResponse;
import eZmaxAPI.Configuration;
import eZmaxAPI.Pair;
import eZmaxAPI.ProgressRequestBody;
import eZmaxAPI.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ezmax.api.model.CommonResponseError;
import java.io.File;
import com.ezmax.api.model.HeaderAcceptLanguage;
import com.ezmax.api.model.UsergroupCreateObjectV1Request;
import com.ezmax.api.model.UsergroupCreateObjectV1Response;
import com.ezmax.api.model.UsergroupEditObjectV1Request;
import com.ezmax.api.model.UsergroupEditObjectV1Response;
import com.ezmax.api.model.UsergroupEditPermissionsV1Request;
import com.ezmax.api.model.UsergroupEditPermissionsV1Response;
import com.ezmax.api.model.UsergroupEditUsergroupdelegationsV1Request;
import com.ezmax.api.model.UsergroupEditUsergroupdelegationsV1Response;
import com.ezmax.api.model.UsergroupEditUsergroupmembershipsV1Request;
import com.ezmax.api.model.UsergroupEditUsergroupmembershipsV1Response;
import com.ezmax.api.model.UsergroupGetAutocompleteV2Response;
import com.ezmax.api.model.UsergroupGetListV1Response;
import com.ezmax.api.model.UsergroupGetObjectV2Response;
import com.ezmax.api.model.UsergroupGetPermissionsV1Response;
import com.ezmax.api.model.UsergroupGetUsergroupdelegationsV1Response;
import com.ezmax.api.model.UsergroupGetUsergroupmembershipsV1Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ObjectUsergroupApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ObjectUsergroupApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ObjectUsergroupApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for usergroupCreateObjectV1
     * @param usergroupCreateObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupCreateObjectV1Call(UsergroupCreateObjectV1Request usergroupCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usergroupCreateObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/usergroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usergroupCreateObjectV1ValidateBeforeCall(UsergroupCreateObjectV1Request usergroupCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'usergroupCreateObjectV1Request' is set
        if (usergroupCreateObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'usergroupCreateObjectV1Request' when calling usergroupCreateObjectV1(Async)");
        }

        return usergroupCreateObjectV1Call(usergroupCreateObjectV1Request, _callback);

    }

    /**
     * Create a new Usergroup
     * The endpoint allows to create one or many elements at once.
     * @param usergroupCreateObjectV1Request  (required)
     * @return UsergroupCreateObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public UsergroupCreateObjectV1Response usergroupCreateObjectV1(UsergroupCreateObjectV1Request usergroupCreateObjectV1Request) throws ApiException {
        ApiResponse<UsergroupCreateObjectV1Response> localVarResp = usergroupCreateObjectV1WithHttpInfo(usergroupCreateObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Create a new Usergroup
     * The endpoint allows to create one or many elements at once.
     * @param usergroupCreateObjectV1Request  (required)
     * @return ApiResponse&lt;UsergroupCreateObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsergroupCreateObjectV1Response> usergroupCreateObjectV1WithHttpInfo(UsergroupCreateObjectV1Request usergroupCreateObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = usergroupCreateObjectV1ValidateBeforeCall(usergroupCreateObjectV1Request, null);
        Type localVarReturnType = new TypeToken<UsergroupCreateObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Usergroup (asynchronously)
     * The endpoint allows to create one or many elements at once.
     * @param usergroupCreateObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupCreateObjectV1Async(UsergroupCreateObjectV1Request usergroupCreateObjectV1Request, final ApiCallback<UsergroupCreateObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = usergroupCreateObjectV1ValidateBeforeCall(usergroupCreateObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<UsergroupCreateObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usergroupEditObjectV1
     * @param pkiUsergroupID  (required)
     * @param usergroupEditObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupEditObjectV1Call(Integer pkiUsergroupID, UsergroupEditObjectV1Request usergroupEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usergroupEditObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/usergroup/{pkiUsergroupID}"
            .replace("{" + "pkiUsergroupID" + "}", localVarApiClient.escapeString(pkiUsergroupID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usergroupEditObjectV1ValidateBeforeCall(Integer pkiUsergroupID, UsergroupEditObjectV1Request usergroupEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiUsergroupID' is set
        if (pkiUsergroupID == null) {
            throw new ApiException("Missing the required parameter 'pkiUsergroupID' when calling usergroupEditObjectV1(Async)");
        }

        // verify the required parameter 'usergroupEditObjectV1Request' is set
        if (usergroupEditObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'usergroupEditObjectV1Request' when calling usergroupEditObjectV1(Async)");
        }

        return usergroupEditObjectV1Call(pkiUsergroupID, usergroupEditObjectV1Request, _callback);

    }

    /**
     * Edit an existing Usergroup
     * 
     * @param pkiUsergroupID  (required)
     * @param usergroupEditObjectV1Request  (required)
     * @return UsergroupEditObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public UsergroupEditObjectV1Response usergroupEditObjectV1(Integer pkiUsergroupID, UsergroupEditObjectV1Request usergroupEditObjectV1Request) throws ApiException {
        ApiResponse<UsergroupEditObjectV1Response> localVarResp = usergroupEditObjectV1WithHttpInfo(pkiUsergroupID, usergroupEditObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Edit an existing Usergroup
     * 
     * @param pkiUsergroupID  (required)
     * @param usergroupEditObjectV1Request  (required)
     * @return ApiResponse&lt;UsergroupEditObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsergroupEditObjectV1Response> usergroupEditObjectV1WithHttpInfo(Integer pkiUsergroupID, UsergroupEditObjectV1Request usergroupEditObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = usergroupEditObjectV1ValidateBeforeCall(pkiUsergroupID, usergroupEditObjectV1Request, null);
        Type localVarReturnType = new TypeToken<UsergroupEditObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit an existing Usergroup (asynchronously)
     * 
     * @param pkiUsergroupID  (required)
     * @param usergroupEditObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupEditObjectV1Async(Integer pkiUsergroupID, UsergroupEditObjectV1Request usergroupEditObjectV1Request, final ApiCallback<UsergroupEditObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = usergroupEditObjectV1ValidateBeforeCall(pkiUsergroupID, usergroupEditObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<UsergroupEditObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usergroupEditPermissionsV1
     * @param pkiUsergroupID  (required)
     * @param usergroupEditPermissionsV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupEditPermissionsV1Call(Integer pkiUsergroupID, UsergroupEditPermissionsV1Request usergroupEditPermissionsV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usergroupEditPermissionsV1Request;

        // create path and map variables
        String localVarPath = "/1/object/usergroup/{pkiUsergroupID}/editPermissions"
            .replace("{" + "pkiUsergroupID" + "}", localVarApiClient.escapeString(pkiUsergroupID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usergroupEditPermissionsV1ValidateBeforeCall(Integer pkiUsergroupID, UsergroupEditPermissionsV1Request usergroupEditPermissionsV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiUsergroupID' is set
        if (pkiUsergroupID == null) {
            throw new ApiException("Missing the required parameter 'pkiUsergroupID' when calling usergroupEditPermissionsV1(Async)");
        }

        // verify the required parameter 'usergroupEditPermissionsV1Request' is set
        if (usergroupEditPermissionsV1Request == null) {
            throw new ApiException("Missing the required parameter 'usergroupEditPermissionsV1Request' when calling usergroupEditPermissionsV1(Async)");
        }

        return usergroupEditPermissionsV1Call(pkiUsergroupID, usergroupEditPermissionsV1Request, _callback);

    }

    /**
     * Edit multiple Permissions
     * Using this endpoint, you can edit multiple Permissions at the same time.
     * @param pkiUsergroupID  (required)
     * @param usergroupEditPermissionsV1Request  (required)
     * @return UsergroupEditPermissionsV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public UsergroupEditPermissionsV1Response usergroupEditPermissionsV1(Integer pkiUsergroupID, UsergroupEditPermissionsV1Request usergroupEditPermissionsV1Request) throws ApiException {
        ApiResponse<UsergroupEditPermissionsV1Response> localVarResp = usergroupEditPermissionsV1WithHttpInfo(pkiUsergroupID, usergroupEditPermissionsV1Request);
        return localVarResp.getData();
    }

    /**
     * Edit multiple Permissions
     * Using this endpoint, you can edit multiple Permissions at the same time.
     * @param pkiUsergroupID  (required)
     * @param usergroupEditPermissionsV1Request  (required)
     * @return ApiResponse&lt;UsergroupEditPermissionsV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsergroupEditPermissionsV1Response> usergroupEditPermissionsV1WithHttpInfo(Integer pkiUsergroupID, UsergroupEditPermissionsV1Request usergroupEditPermissionsV1Request) throws ApiException {
        okhttp3.Call localVarCall = usergroupEditPermissionsV1ValidateBeforeCall(pkiUsergroupID, usergroupEditPermissionsV1Request, null);
        Type localVarReturnType = new TypeToken<UsergroupEditPermissionsV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit multiple Permissions (asynchronously)
     * Using this endpoint, you can edit multiple Permissions at the same time.
     * @param pkiUsergroupID  (required)
     * @param usergroupEditPermissionsV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupEditPermissionsV1Async(Integer pkiUsergroupID, UsergroupEditPermissionsV1Request usergroupEditPermissionsV1Request, final ApiCallback<UsergroupEditPermissionsV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = usergroupEditPermissionsV1ValidateBeforeCall(pkiUsergroupID, usergroupEditPermissionsV1Request, _callback);
        Type localVarReturnType = new TypeToken<UsergroupEditPermissionsV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usergroupEditUsergroupdelegationsV1
     * @param pkiUsergroupID  (required)
     * @param usergroupEditUsergroupdelegationsV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupEditUsergroupdelegationsV1Call(Integer pkiUsergroupID, UsergroupEditUsergroupdelegationsV1Request usergroupEditUsergroupdelegationsV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usergroupEditUsergroupdelegationsV1Request;

        // create path and map variables
        String localVarPath = "/1/object/usergroup/{pkiUsergroupID}/editUsergroupdelegations"
            .replace("{" + "pkiUsergroupID" + "}", localVarApiClient.escapeString(pkiUsergroupID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usergroupEditUsergroupdelegationsV1ValidateBeforeCall(Integer pkiUsergroupID, UsergroupEditUsergroupdelegationsV1Request usergroupEditUsergroupdelegationsV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiUsergroupID' is set
        if (pkiUsergroupID == null) {
            throw new ApiException("Missing the required parameter 'pkiUsergroupID' when calling usergroupEditUsergroupdelegationsV1(Async)");
        }

        // verify the required parameter 'usergroupEditUsergroupdelegationsV1Request' is set
        if (usergroupEditUsergroupdelegationsV1Request == null) {
            throw new ApiException("Missing the required parameter 'usergroupEditUsergroupdelegationsV1Request' when calling usergroupEditUsergroupdelegationsV1(Async)");
        }

        return usergroupEditUsergroupdelegationsV1Call(pkiUsergroupID, usergroupEditUsergroupdelegationsV1Request, _callback);

    }

    /**
     * Edit multiple Usergroupdelegations
     * Edit multiple Usergroupdelegations
     * @param pkiUsergroupID  (required)
     * @param usergroupEditUsergroupdelegationsV1Request  (required)
     * @return UsergroupEditUsergroupdelegationsV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public UsergroupEditUsergroupdelegationsV1Response usergroupEditUsergroupdelegationsV1(Integer pkiUsergroupID, UsergroupEditUsergroupdelegationsV1Request usergroupEditUsergroupdelegationsV1Request) throws ApiException {
        ApiResponse<UsergroupEditUsergroupdelegationsV1Response> localVarResp = usergroupEditUsergroupdelegationsV1WithHttpInfo(pkiUsergroupID, usergroupEditUsergroupdelegationsV1Request);
        return localVarResp.getData();
    }

    /**
     * Edit multiple Usergroupdelegations
     * Edit multiple Usergroupdelegations
     * @param pkiUsergroupID  (required)
     * @param usergroupEditUsergroupdelegationsV1Request  (required)
     * @return ApiResponse&lt;UsergroupEditUsergroupdelegationsV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsergroupEditUsergroupdelegationsV1Response> usergroupEditUsergroupdelegationsV1WithHttpInfo(Integer pkiUsergroupID, UsergroupEditUsergroupdelegationsV1Request usergroupEditUsergroupdelegationsV1Request) throws ApiException {
        okhttp3.Call localVarCall = usergroupEditUsergroupdelegationsV1ValidateBeforeCall(pkiUsergroupID, usergroupEditUsergroupdelegationsV1Request, null);
        Type localVarReturnType = new TypeToken<UsergroupEditUsergroupdelegationsV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit multiple Usergroupdelegations (asynchronously)
     * Edit multiple Usergroupdelegations
     * @param pkiUsergroupID  (required)
     * @param usergroupEditUsergroupdelegationsV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupEditUsergroupdelegationsV1Async(Integer pkiUsergroupID, UsergroupEditUsergroupdelegationsV1Request usergroupEditUsergroupdelegationsV1Request, final ApiCallback<UsergroupEditUsergroupdelegationsV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = usergroupEditUsergroupdelegationsV1ValidateBeforeCall(pkiUsergroupID, usergroupEditUsergroupdelegationsV1Request, _callback);
        Type localVarReturnType = new TypeToken<UsergroupEditUsergroupdelegationsV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usergroupEditUsergroupmembershipsV1
     * @param pkiUsergroupID  (required)
     * @param usergroupEditUsergroupmembershipsV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupEditUsergroupmembershipsV1Call(Integer pkiUsergroupID, UsergroupEditUsergroupmembershipsV1Request usergroupEditUsergroupmembershipsV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usergroupEditUsergroupmembershipsV1Request;

        // create path and map variables
        String localVarPath = "/1/object/usergroup/{pkiUsergroupID}/editUsergroupmemberships"
            .replace("{" + "pkiUsergroupID" + "}", localVarApiClient.escapeString(pkiUsergroupID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usergroupEditUsergroupmembershipsV1ValidateBeforeCall(Integer pkiUsergroupID, UsergroupEditUsergroupmembershipsV1Request usergroupEditUsergroupmembershipsV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiUsergroupID' is set
        if (pkiUsergroupID == null) {
            throw new ApiException("Missing the required parameter 'pkiUsergroupID' when calling usergroupEditUsergroupmembershipsV1(Async)");
        }

        // verify the required parameter 'usergroupEditUsergroupmembershipsV1Request' is set
        if (usergroupEditUsergroupmembershipsV1Request == null) {
            throw new ApiException("Missing the required parameter 'usergroupEditUsergroupmembershipsV1Request' when calling usergroupEditUsergroupmembershipsV1(Async)");
        }

        return usergroupEditUsergroupmembershipsV1Call(pkiUsergroupID, usergroupEditUsergroupmembershipsV1Request, _callback);

    }

    /**
     * Edit multiple Usergroupmemberships
     * Using this endpoint, you can edit multiple Usergroupmemberships at the same time.
     * @param pkiUsergroupID  (required)
     * @param usergroupEditUsergroupmembershipsV1Request  (required)
     * @return UsergroupEditUsergroupmembershipsV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public UsergroupEditUsergroupmembershipsV1Response usergroupEditUsergroupmembershipsV1(Integer pkiUsergroupID, UsergroupEditUsergroupmembershipsV1Request usergroupEditUsergroupmembershipsV1Request) throws ApiException {
        ApiResponse<UsergroupEditUsergroupmembershipsV1Response> localVarResp = usergroupEditUsergroupmembershipsV1WithHttpInfo(pkiUsergroupID, usergroupEditUsergroupmembershipsV1Request);
        return localVarResp.getData();
    }

    /**
     * Edit multiple Usergroupmemberships
     * Using this endpoint, you can edit multiple Usergroupmemberships at the same time.
     * @param pkiUsergroupID  (required)
     * @param usergroupEditUsergroupmembershipsV1Request  (required)
     * @return ApiResponse&lt;UsergroupEditUsergroupmembershipsV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsergroupEditUsergroupmembershipsV1Response> usergroupEditUsergroupmembershipsV1WithHttpInfo(Integer pkiUsergroupID, UsergroupEditUsergroupmembershipsV1Request usergroupEditUsergroupmembershipsV1Request) throws ApiException {
        okhttp3.Call localVarCall = usergroupEditUsergroupmembershipsV1ValidateBeforeCall(pkiUsergroupID, usergroupEditUsergroupmembershipsV1Request, null);
        Type localVarReturnType = new TypeToken<UsergroupEditUsergroupmembershipsV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit multiple Usergroupmemberships (asynchronously)
     * Using this endpoint, you can edit multiple Usergroupmemberships at the same time.
     * @param pkiUsergroupID  (required)
     * @param usergroupEditUsergroupmembershipsV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupEditUsergroupmembershipsV1Async(Integer pkiUsergroupID, UsergroupEditUsergroupmembershipsV1Request usergroupEditUsergroupmembershipsV1Request, final ApiCallback<UsergroupEditUsergroupmembershipsV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = usergroupEditUsergroupmembershipsV1ValidateBeforeCall(pkiUsergroupID, usergroupEditUsergroupmembershipsV1Request, _callback);
        Type localVarReturnType = new TypeToken<UsergroupEditUsergroupmembershipsV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usergroupGetAutocompleteV2
     * @param sSelector The type of Usergroups to return (required)
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupGetAutocompleteV2Call(String sSelector, String eFilterActive, String sQuery, HeaderAcceptLanguage acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/object/usergroup/getAutocomplete/{sSelector}"
            .replace("{" + "sSelector" + "}", localVarApiClient.escapeString(sSelector.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eFilterActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eFilterActive", eFilterActive));
        }

        if (sQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sQuery", sQuery));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usergroupGetAutocompleteV2ValidateBeforeCall(String sSelector, String eFilterActive, String sQuery, HeaderAcceptLanguage acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sSelector' is set
        if (sSelector == null) {
            throw new ApiException("Missing the required parameter 'sSelector' when calling usergroupGetAutocompleteV2(Async)");
        }

        return usergroupGetAutocompleteV2Call(sSelector, eFilterActive, sQuery, acceptLanguage, _callback);

    }

    /**
     * Retrieve Usergroups and IDs
     * Get the list of Usergroup to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Usergroups to return (required)
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return UsergroupGetAutocompleteV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public UsergroupGetAutocompleteV2Response usergroupGetAutocompleteV2(String sSelector, String eFilterActive, String sQuery, HeaderAcceptLanguage acceptLanguage) throws ApiException {
        ApiResponse<UsergroupGetAutocompleteV2Response> localVarResp = usergroupGetAutocompleteV2WithHttpInfo(sSelector, eFilterActive, sQuery, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Retrieve Usergroups and IDs
     * Get the list of Usergroup to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Usergroups to return (required)
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return ApiResponse&lt;UsergroupGetAutocompleteV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsergroupGetAutocompleteV2Response> usergroupGetAutocompleteV2WithHttpInfo(String sSelector, String eFilterActive, String sQuery, HeaderAcceptLanguage acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = usergroupGetAutocompleteV2ValidateBeforeCall(sSelector, eFilterActive, sQuery, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<UsergroupGetAutocompleteV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Usergroups and IDs (asynchronously)
     * Get the list of Usergroup to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Usergroups to return (required)
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupGetAutocompleteV2Async(String sSelector, String eFilterActive, String sQuery, HeaderAcceptLanguage acceptLanguage, final ApiCallback<UsergroupGetAutocompleteV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = usergroupGetAutocompleteV2ValidateBeforeCall(sSelector, eFilterActive, sQuery, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<UsergroupGetAutocompleteV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usergroupGetListV1
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional, default to 10000)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupGetListV1Call(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/usergroup/getList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eOrderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eOrderBy", eOrderBy));
        }

        if (iRowMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iRowMax", iRowMax));
        }

        if (iRowOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iRowOffset", iRowOffset));
        }

        if (sFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sFilter", sFilter));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usergroupGetListV1ValidateBeforeCall(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter, final ApiCallback _callback) throws ApiException {
        return usergroupGetListV1Call(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, _callback);

    }

    /**
     * Retrieve Usergroup list
     * 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional, default to 10000)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return UsergroupGetListV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public UsergroupGetListV1Response usergroupGetListV1(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter) throws ApiException {
        ApiResponse<UsergroupGetListV1Response> localVarResp = usergroupGetListV1WithHttpInfo(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter);
        return localVarResp.getData();
    }

    /**
     * Retrieve Usergroup list
     * 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional, default to 10000)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return ApiResponse&lt;UsergroupGetListV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsergroupGetListV1Response> usergroupGetListV1WithHttpInfo(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter) throws ApiException {
        okhttp3.Call localVarCall = usergroupGetListV1ValidateBeforeCall(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, null);
        Type localVarReturnType = new TypeToken<UsergroupGetListV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Usergroup list (asynchronously)
     * 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional, default to 10000)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupGetListV1Async(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter, final ApiCallback<UsergroupGetListV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = usergroupGetListV1ValidateBeforeCall(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, _callback);
        Type localVarReturnType = new TypeToken<UsergroupGetListV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usergroupGetObjectV2
     * @param pkiUsergroupID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupGetObjectV2Call(Integer pkiUsergroupID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/object/usergroup/{pkiUsergroupID}"
            .replace("{" + "pkiUsergroupID" + "}", localVarApiClient.escapeString(pkiUsergroupID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usergroupGetObjectV2ValidateBeforeCall(Integer pkiUsergroupID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiUsergroupID' is set
        if (pkiUsergroupID == null) {
            throw new ApiException("Missing the required parameter 'pkiUsergroupID' when calling usergroupGetObjectV2(Async)");
        }

        return usergroupGetObjectV2Call(pkiUsergroupID, _callback);

    }

    /**
     * Retrieve an existing Usergroup
     * 
     * @param pkiUsergroupID  (required)
     * @return UsergroupGetObjectV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public UsergroupGetObjectV2Response usergroupGetObjectV2(Integer pkiUsergroupID) throws ApiException {
        ApiResponse<UsergroupGetObjectV2Response> localVarResp = usergroupGetObjectV2WithHttpInfo(pkiUsergroupID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Usergroup
     * 
     * @param pkiUsergroupID  (required)
     * @return ApiResponse&lt;UsergroupGetObjectV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsergroupGetObjectV2Response> usergroupGetObjectV2WithHttpInfo(Integer pkiUsergroupID) throws ApiException {
        okhttp3.Call localVarCall = usergroupGetObjectV2ValidateBeforeCall(pkiUsergroupID, null);
        Type localVarReturnType = new TypeToken<UsergroupGetObjectV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Usergroup (asynchronously)
     * 
     * @param pkiUsergroupID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupGetObjectV2Async(Integer pkiUsergroupID, final ApiCallback<UsergroupGetObjectV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = usergroupGetObjectV2ValidateBeforeCall(pkiUsergroupID, _callback);
        Type localVarReturnType = new TypeToken<UsergroupGetObjectV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usergroupGetPermissionsV1
     * @param pkiUsergroupID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupGetPermissionsV1Call(Integer pkiUsergroupID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/usergroup/{pkiUsergroupID}/getPermissions"
            .replace("{" + "pkiUsergroupID" + "}", localVarApiClient.escapeString(pkiUsergroupID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usergroupGetPermissionsV1ValidateBeforeCall(Integer pkiUsergroupID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiUsergroupID' is set
        if (pkiUsergroupID == null) {
            throw new ApiException("Missing the required parameter 'pkiUsergroupID' when calling usergroupGetPermissionsV1(Async)");
        }

        return usergroupGetPermissionsV1Call(pkiUsergroupID, _callback);

    }

    /**
     * Retrieve an existing Usergroup&#39;s Permissions
     * 
     * @param pkiUsergroupID  (required)
     * @return UsergroupGetPermissionsV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public UsergroupGetPermissionsV1Response usergroupGetPermissionsV1(Integer pkiUsergroupID) throws ApiException {
        ApiResponse<UsergroupGetPermissionsV1Response> localVarResp = usergroupGetPermissionsV1WithHttpInfo(pkiUsergroupID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Usergroup&#39;s Permissions
     * 
     * @param pkiUsergroupID  (required)
     * @return ApiResponse&lt;UsergroupGetPermissionsV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsergroupGetPermissionsV1Response> usergroupGetPermissionsV1WithHttpInfo(Integer pkiUsergroupID) throws ApiException {
        okhttp3.Call localVarCall = usergroupGetPermissionsV1ValidateBeforeCall(pkiUsergroupID, null);
        Type localVarReturnType = new TypeToken<UsergroupGetPermissionsV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Usergroup&#39;s Permissions (asynchronously)
     * 
     * @param pkiUsergroupID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupGetPermissionsV1Async(Integer pkiUsergroupID, final ApiCallback<UsergroupGetPermissionsV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = usergroupGetPermissionsV1ValidateBeforeCall(pkiUsergroupID, _callback);
        Type localVarReturnType = new TypeToken<UsergroupGetPermissionsV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usergroupGetUsergroupdelegationsV1
     * @param pkiUsergroupID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupGetUsergroupdelegationsV1Call(Integer pkiUsergroupID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/usergroup/{pkiUsergroupID}/getUsergroupdelegations"
            .replace("{" + "pkiUsergroupID" + "}", localVarApiClient.escapeString(pkiUsergroupID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usergroupGetUsergroupdelegationsV1ValidateBeforeCall(Integer pkiUsergroupID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiUsergroupID' is set
        if (pkiUsergroupID == null) {
            throw new ApiException("Missing the required parameter 'pkiUsergroupID' when calling usergroupGetUsergroupdelegationsV1(Async)");
        }

        return usergroupGetUsergroupdelegationsV1Call(pkiUsergroupID, _callback);

    }

    /**
     * Retrieve an existing Usergroup&#39;s Usergroupdelegations
     * 
     * @param pkiUsergroupID  (required)
     * @return UsergroupGetUsergroupdelegationsV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public UsergroupGetUsergroupdelegationsV1Response usergroupGetUsergroupdelegationsV1(Integer pkiUsergroupID) throws ApiException {
        ApiResponse<UsergroupGetUsergroupdelegationsV1Response> localVarResp = usergroupGetUsergroupdelegationsV1WithHttpInfo(pkiUsergroupID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Usergroup&#39;s Usergroupdelegations
     * 
     * @param pkiUsergroupID  (required)
     * @return ApiResponse&lt;UsergroupGetUsergroupdelegationsV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsergroupGetUsergroupdelegationsV1Response> usergroupGetUsergroupdelegationsV1WithHttpInfo(Integer pkiUsergroupID) throws ApiException {
        okhttp3.Call localVarCall = usergroupGetUsergroupdelegationsV1ValidateBeforeCall(pkiUsergroupID, null);
        Type localVarReturnType = new TypeToken<UsergroupGetUsergroupdelegationsV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Usergroup&#39;s Usergroupdelegations (asynchronously)
     * 
     * @param pkiUsergroupID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupGetUsergroupdelegationsV1Async(Integer pkiUsergroupID, final ApiCallback<UsergroupGetUsergroupdelegationsV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = usergroupGetUsergroupdelegationsV1ValidateBeforeCall(pkiUsergroupID, _callback);
        Type localVarReturnType = new TypeToken<UsergroupGetUsergroupdelegationsV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usergroupGetUsergroupmembershipsV1
     * @param pkiUsergroupID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupGetUsergroupmembershipsV1Call(Integer pkiUsergroupID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/usergroup/{pkiUsergroupID}/getUsergroupmemberships"
            .replace("{" + "pkiUsergroupID" + "}", localVarApiClient.escapeString(pkiUsergroupID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usergroupGetUsergroupmembershipsV1ValidateBeforeCall(Integer pkiUsergroupID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiUsergroupID' is set
        if (pkiUsergroupID == null) {
            throw new ApiException("Missing the required parameter 'pkiUsergroupID' when calling usergroupGetUsergroupmembershipsV1(Async)");
        }

        return usergroupGetUsergroupmembershipsV1Call(pkiUsergroupID, _callback);

    }

    /**
     * Retrieve an existing Usergroup&#39;s Usergroupmemberships
     * 
     * @param pkiUsergroupID  (required)
     * @return UsergroupGetUsergroupmembershipsV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public UsergroupGetUsergroupmembershipsV1Response usergroupGetUsergroupmembershipsV1(Integer pkiUsergroupID) throws ApiException {
        ApiResponse<UsergroupGetUsergroupmembershipsV1Response> localVarResp = usergroupGetUsergroupmembershipsV1WithHttpInfo(pkiUsergroupID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Usergroup&#39;s Usergroupmemberships
     * 
     * @param pkiUsergroupID  (required)
     * @return ApiResponse&lt;UsergroupGetUsergroupmembershipsV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsergroupGetUsergroupmembershipsV1Response> usergroupGetUsergroupmembershipsV1WithHttpInfo(Integer pkiUsergroupID) throws ApiException {
        okhttp3.Call localVarCall = usergroupGetUsergroupmembershipsV1ValidateBeforeCall(pkiUsergroupID, null);
        Type localVarReturnType = new TypeToken<UsergroupGetUsergroupmembershipsV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Usergroup&#39;s Usergroupmemberships (asynchronously)
     * 
     * @param pkiUsergroupID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupGetUsergroupmembershipsV1Async(Integer pkiUsergroupID, final ApiCallback<UsergroupGetUsergroupmembershipsV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = usergroupGetUsergroupmembershipsV1ValidateBeforeCall(pkiUsergroupID, _callback);
        Type localVarReturnType = new TypeToken<UsergroupGetUsergroupmembershipsV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
