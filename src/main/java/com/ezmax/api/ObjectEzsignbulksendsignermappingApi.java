/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.14
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api;

import eZmaxAPI.ApiCallback;
import eZmaxAPI.ApiClient;
import eZmaxAPI.ApiException;
import eZmaxAPI.ApiResponse;
import eZmaxAPI.Configuration;
import eZmaxAPI.Pair;
import eZmaxAPI.ProgressRequestBody;
import eZmaxAPI.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ezmax.api.model.CommonResponseError;
import com.ezmax.api.model.EzsignbulksendsignermappingCreateObjectV1Request;
import com.ezmax.api.model.EzsignbulksendsignermappingCreateObjectV1Response;
import com.ezmax.api.model.EzsignbulksendsignermappingDeleteObjectV1Response;
import com.ezmax.api.model.EzsignbulksendsignermappingGetObjectV1Response;
import com.ezmax.api.model.EzsignbulksendsignermappingGetObjectV2Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ObjectEzsignbulksendsignermappingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ObjectEzsignbulksendsignermappingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ObjectEzsignbulksendsignermappingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for ezsignbulksendsignermappingCreateObjectV1
     * @param ezsignbulksendsignermappingCreateObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignbulksendsignermappingCreateObjectV1Call(EzsignbulksendsignermappingCreateObjectV1Request ezsignbulksendsignermappingCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezsignbulksendsignermappingCreateObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezsignbulksendsignermapping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsignbulksendsignermappingCreateObjectV1ValidateBeforeCall(EzsignbulksendsignermappingCreateObjectV1Request ezsignbulksendsignermappingCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ezsignbulksendsignermappingCreateObjectV1Request' is set
        if (ezsignbulksendsignermappingCreateObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezsignbulksendsignermappingCreateObjectV1Request' when calling ezsignbulksendsignermappingCreateObjectV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsignbulksendsignermappingCreateObjectV1Call(ezsignbulksendsignermappingCreateObjectV1Request, _callback);
        return localVarCall;

    }

    /**
     * Create a new Ezsignbulksendsignermapping
     * The endpoint allows to create one or many elements at once.
     * @param ezsignbulksendsignermappingCreateObjectV1Request  (required)
     * @return EzsignbulksendsignermappingCreateObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EzsignbulksendsignermappingCreateObjectV1Response ezsignbulksendsignermappingCreateObjectV1(EzsignbulksendsignermappingCreateObjectV1Request ezsignbulksendsignermappingCreateObjectV1Request) throws ApiException {
        ApiResponse<EzsignbulksendsignermappingCreateObjectV1Response> localVarResp = ezsignbulksendsignermappingCreateObjectV1WithHttpInfo(ezsignbulksendsignermappingCreateObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Create a new Ezsignbulksendsignermapping
     * The endpoint allows to create one or many elements at once.
     * @param ezsignbulksendsignermappingCreateObjectV1Request  (required)
     * @return ApiResponse&lt;EzsignbulksendsignermappingCreateObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsignbulksendsignermappingCreateObjectV1Response> ezsignbulksendsignermappingCreateObjectV1WithHttpInfo(EzsignbulksendsignermappingCreateObjectV1Request ezsignbulksendsignermappingCreateObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezsignbulksendsignermappingCreateObjectV1ValidateBeforeCall(ezsignbulksendsignermappingCreateObjectV1Request, null);
        Type localVarReturnType = new TypeToken<EzsignbulksendsignermappingCreateObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Ezsignbulksendsignermapping (asynchronously)
     * The endpoint allows to create one or many elements at once.
     * @param ezsignbulksendsignermappingCreateObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignbulksendsignermappingCreateObjectV1Async(EzsignbulksendsignermappingCreateObjectV1Request ezsignbulksendsignermappingCreateObjectV1Request, final ApiCallback<EzsignbulksendsignermappingCreateObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsignbulksendsignermappingCreateObjectV1ValidateBeforeCall(ezsignbulksendsignermappingCreateObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<EzsignbulksendsignermappingCreateObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsignbulksendsignermappingDeleteObjectV1
     * @param pkiEzsignbulksendsignermappingID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignbulksendsignermappingDeleteObjectV1Call(Integer pkiEzsignbulksendsignermappingID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/ezsignbulksendsignermapping/{pkiEzsignbulksendsignermappingID}"
            .replaceAll("\\{" + "pkiEzsignbulksendsignermappingID" + "\\}", localVarApiClient.escapeString(pkiEzsignbulksendsignermappingID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsignbulksendsignermappingDeleteObjectV1ValidateBeforeCall(Integer pkiEzsignbulksendsignermappingID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pkiEzsignbulksendsignermappingID' is set
        if (pkiEzsignbulksendsignermappingID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsignbulksendsignermappingID' when calling ezsignbulksendsignermappingDeleteObjectV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsignbulksendsignermappingDeleteObjectV1Call(pkiEzsignbulksendsignermappingID, _callback);
        return localVarCall;

    }

    /**
     * Delete an existing Ezsignbulksendsignermapping
     * 
     * @param pkiEzsignbulksendsignermappingID  (required)
     * @return EzsignbulksendsignermappingDeleteObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsignbulksendsignermappingDeleteObjectV1Response ezsignbulksendsignermappingDeleteObjectV1(Integer pkiEzsignbulksendsignermappingID) throws ApiException {
        ApiResponse<EzsignbulksendsignermappingDeleteObjectV1Response> localVarResp = ezsignbulksendsignermappingDeleteObjectV1WithHttpInfo(pkiEzsignbulksendsignermappingID);
        return localVarResp.getData();
    }

    /**
     * Delete an existing Ezsignbulksendsignermapping
     * 
     * @param pkiEzsignbulksendsignermappingID  (required)
     * @return ApiResponse&lt;EzsignbulksendsignermappingDeleteObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsignbulksendsignermappingDeleteObjectV1Response> ezsignbulksendsignermappingDeleteObjectV1WithHttpInfo(Integer pkiEzsignbulksendsignermappingID) throws ApiException {
        okhttp3.Call localVarCall = ezsignbulksendsignermappingDeleteObjectV1ValidateBeforeCall(pkiEzsignbulksendsignermappingID, null);
        Type localVarReturnType = new TypeToken<EzsignbulksendsignermappingDeleteObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an existing Ezsignbulksendsignermapping (asynchronously)
     * 
     * @param pkiEzsignbulksendsignermappingID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignbulksendsignermappingDeleteObjectV1Async(Integer pkiEzsignbulksendsignermappingID, final ApiCallback<EzsignbulksendsignermappingDeleteObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsignbulksendsignermappingDeleteObjectV1ValidateBeforeCall(pkiEzsignbulksendsignermappingID, _callback);
        Type localVarReturnType = new TypeToken<EzsignbulksendsignermappingDeleteObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsignbulksendsignermappingGetObjectV1
     * @param pkiEzsignbulksendsignermappingID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call ezsignbulksendsignermappingGetObjectV1Call(Integer pkiEzsignbulksendsignermappingID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/ezsignbulksendsignermapping/{pkiEzsignbulksendsignermappingID}"
            .replaceAll("\\{" + "pkiEzsignbulksendsignermappingID" + "\\}", localVarApiClient.escapeString(pkiEzsignbulksendsignermappingID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsignbulksendsignermappingGetObjectV1ValidateBeforeCall(Integer pkiEzsignbulksendsignermappingID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pkiEzsignbulksendsignermappingID' is set
        if (pkiEzsignbulksendsignermappingID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsignbulksendsignermappingID' when calling ezsignbulksendsignermappingGetObjectV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsignbulksendsignermappingGetObjectV1Call(pkiEzsignbulksendsignermappingID, _callback);
        return localVarCall;

    }

    /**
     * Retrieve an existing Ezsignbulksendsignermapping
     * 
     * @param pkiEzsignbulksendsignermappingID  (required)
     * @return EzsignbulksendsignermappingGetObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public EzsignbulksendsignermappingGetObjectV1Response ezsignbulksendsignermappingGetObjectV1(Integer pkiEzsignbulksendsignermappingID) throws ApiException {
        ApiResponse<EzsignbulksendsignermappingGetObjectV1Response> localVarResp = ezsignbulksendsignermappingGetObjectV1WithHttpInfo(pkiEzsignbulksendsignermappingID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Ezsignbulksendsignermapping
     * 
     * @param pkiEzsignbulksendsignermappingID  (required)
     * @return ApiResponse&lt;EzsignbulksendsignermappingGetObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<EzsignbulksendsignermappingGetObjectV1Response> ezsignbulksendsignermappingGetObjectV1WithHttpInfo(Integer pkiEzsignbulksendsignermappingID) throws ApiException {
        okhttp3.Call localVarCall = ezsignbulksendsignermappingGetObjectV1ValidateBeforeCall(pkiEzsignbulksendsignermappingID, null);
        Type localVarReturnType = new TypeToken<EzsignbulksendsignermappingGetObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Ezsignbulksendsignermapping (asynchronously)
     * 
     * @param pkiEzsignbulksendsignermappingID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call ezsignbulksendsignermappingGetObjectV1Async(Integer pkiEzsignbulksendsignermappingID, final ApiCallback<EzsignbulksendsignermappingGetObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsignbulksendsignermappingGetObjectV1ValidateBeforeCall(pkiEzsignbulksendsignermappingID, _callback);
        Type localVarReturnType = new TypeToken<EzsignbulksendsignermappingGetObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsignbulksendsignermappingGetObjectV2
     * @param pkiEzsignbulksendsignermappingID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignbulksendsignermappingGetObjectV2Call(Integer pkiEzsignbulksendsignermappingID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/object/ezsignbulksendsignermapping/{pkiEzsignbulksendsignermappingID}"
            .replaceAll("\\{" + "pkiEzsignbulksendsignermappingID" + "\\}", localVarApiClient.escapeString(pkiEzsignbulksendsignermappingID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsignbulksendsignermappingGetObjectV2ValidateBeforeCall(Integer pkiEzsignbulksendsignermappingID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pkiEzsignbulksendsignermappingID' is set
        if (pkiEzsignbulksendsignermappingID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsignbulksendsignermappingID' when calling ezsignbulksendsignermappingGetObjectV2(Async)");
        }
        

        okhttp3.Call localVarCall = ezsignbulksendsignermappingGetObjectV2Call(pkiEzsignbulksendsignermappingID, _callback);
        return localVarCall;

    }

    /**
     * Retrieve an existing Ezsignbulksendsignermapping
     * 
     * @param pkiEzsignbulksendsignermappingID  (required)
     * @return EzsignbulksendsignermappingGetObjectV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsignbulksendsignermappingGetObjectV2Response ezsignbulksendsignermappingGetObjectV2(Integer pkiEzsignbulksendsignermappingID) throws ApiException {
        ApiResponse<EzsignbulksendsignermappingGetObjectV2Response> localVarResp = ezsignbulksendsignermappingGetObjectV2WithHttpInfo(pkiEzsignbulksendsignermappingID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Ezsignbulksendsignermapping
     * 
     * @param pkiEzsignbulksendsignermappingID  (required)
     * @return ApiResponse&lt;EzsignbulksendsignermappingGetObjectV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsignbulksendsignermappingGetObjectV2Response> ezsignbulksendsignermappingGetObjectV2WithHttpInfo(Integer pkiEzsignbulksendsignermappingID) throws ApiException {
        okhttp3.Call localVarCall = ezsignbulksendsignermappingGetObjectV2ValidateBeforeCall(pkiEzsignbulksendsignermappingID, null);
        Type localVarReturnType = new TypeToken<EzsignbulksendsignermappingGetObjectV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Ezsignbulksendsignermapping (asynchronously)
     * 
     * @param pkiEzsignbulksendsignermappingID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignbulksendsignermappingGetObjectV2Async(Integer pkiEzsignbulksendsignermappingID, final ApiCallback<EzsignbulksendsignermappingGetObjectV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsignbulksendsignermappingGetObjectV2ValidateBeforeCall(pkiEzsignbulksendsignermappingID, _callback);
        Type localVarReturnType = new TypeToken<EzsignbulksendsignermappingGetObjectV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
