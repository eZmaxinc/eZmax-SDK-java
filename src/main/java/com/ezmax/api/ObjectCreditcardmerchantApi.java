/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api;

import eZmaxAPI.ApiCallback;
import eZmaxAPI.ApiClient;
import eZmaxAPI.ApiException;
import eZmaxAPI.ApiResponse;
import eZmaxAPI.Configuration;
import eZmaxAPI.Pair;
import eZmaxAPI.ProgressRequestBody;
import eZmaxAPI.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ezmax.api.model.CommonResponseError;
import com.ezmax.api.model.CreditcardmerchantCreateObjectV1Request;
import com.ezmax.api.model.CreditcardmerchantCreateObjectV1Response;
import com.ezmax.api.model.CreditcardmerchantDeleteObjectV1Response;
import com.ezmax.api.model.CreditcardmerchantEditObjectV1Request;
import com.ezmax.api.model.CreditcardmerchantEditObjectV1Response;
import com.ezmax.api.model.CreditcardmerchantGetAutocompleteV2Response;
import com.ezmax.api.model.CreditcardmerchantGetListV1Response;
import com.ezmax.api.model.CreditcardmerchantGetObjectV2Response;
import java.io.File;
import com.ezmax.api.model.HeaderAcceptLanguage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ObjectCreditcardmerchantApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ObjectCreditcardmerchantApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ObjectCreditcardmerchantApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for creditcardmerchantCreateObjectV1
     * @param creditcardmerchantCreateObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creditcardmerchantCreateObjectV1Call(CreditcardmerchantCreateObjectV1Request creditcardmerchantCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creditcardmerchantCreateObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/creditcardmerchant";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creditcardmerchantCreateObjectV1ValidateBeforeCall(CreditcardmerchantCreateObjectV1Request creditcardmerchantCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditcardmerchantCreateObjectV1Request' is set
        if (creditcardmerchantCreateObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'creditcardmerchantCreateObjectV1Request' when calling creditcardmerchantCreateObjectV1(Async)");
        }

        return creditcardmerchantCreateObjectV1Call(creditcardmerchantCreateObjectV1Request, _callback);

    }

    /**
     * Create a new Creditcardmerchant
     * The endpoint allows to create one or many elements at once.
     * @param creditcardmerchantCreateObjectV1Request  (required)
     * @return CreditcardmerchantCreateObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public CreditcardmerchantCreateObjectV1Response creditcardmerchantCreateObjectV1(CreditcardmerchantCreateObjectV1Request creditcardmerchantCreateObjectV1Request) throws ApiException {
        ApiResponse<CreditcardmerchantCreateObjectV1Response> localVarResp = creditcardmerchantCreateObjectV1WithHttpInfo(creditcardmerchantCreateObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Create a new Creditcardmerchant
     * The endpoint allows to create one or many elements at once.
     * @param creditcardmerchantCreateObjectV1Request  (required)
     * @return ApiResponse&lt;CreditcardmerchantCreateObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreditcardmerchantCreateObjectV1Response> creditcardmerchantCreateObjectV1WithHttpInfo(CreditcardmerchantCreateObjectV1Request creditcardmerchantCreateObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = creditcardmerchantCreateObjectV1ValidateBeforeCall(creditcardmerchantCreateObjectV1Request, null);
        Type localVarReturnType = new TypeToken<CreditcardmerchantCreateObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Creditcardmerchant (asynchronously)
     * The endpoint allows to create one or many elements at once.
     * @param creditcardmerchantCreateObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creditcardmerchantCreateObjectV1Async(CreditcardmerchantCreateObjectV1Request creditcardmerchantCreateObjectV1Request, final ApiCallback<CreditcardmerchantCreateObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = creditcardmerchantCreateObjectV1ValidateBeforeCall(creditcardmerchantCreateObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<CreditcardmerchantCreateObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for creditcardmerchantDeleteObjectV1
     * @param pkiCreditcardmerchantID The unique ID of the Creditcardmerchant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creditcardmerchantDeleteObjectV1Call(Integer pkiCreditcardmerchantID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/creditcardmerchant/{pkiCreditcardmerchantID}"
            .replace("{" + "pkiCreditcardmerchantID" + "}", localVarApiClient.escapeString(pkiCreditcardmerchantID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creditcardmerchantDeleteObjectV1ValidateBeforeCall(Integer pkiCreditcardmerchantID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiCreditcardmerchantID' is set
        if (pkiCreditcardmerchantID == null) {
            throw new ApiException("Missing the required parameter 'pkiCreditcardmerchantID' when calling creditcardmerchantDeleteObjectV1(Async)");
        }

        return creditcardmerchantDeleteObjectV1Call(pkiCreditcardmerchantID, _callback);

    }

    /**
     * Delete an existing Creditcardmerchant
     * 
     * @param pkiCreditcardmerchantID The unique ID of the Creditcardmerchant (required)
     * @return CreditcardmerchantDeleteObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public CreditcardmerchantDeleteObjectV1Response creditcardmerchantDeleteObjectV1(Integer pkiCreditcardmerchantID) throws ApiException {
        ApiResponse<CreditcardmerchantDeleteObjectV1Response> localVarResp = creditcardmerchantDeleteObjectV1WithHttpInfo(pkiCreditcardmerchantID);
        return localVarResp.getData();
    }

    /**
     * Delete an existing Creditcardmerchant
     * 
     * @param pkiCreditcardmerchantID The unique ID of the Creditcardmerchant (required)
     * @return ApiResponse&lt;CreditcardmerchantDeleteObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreditcardmerchantDeleteObjectV1Response> creditcardmerchantDeleteObjectV1WithHttpInfo(Integer pkiCreditcardmerchantID) throws ApiException {
        okhttp3.Call localVarCall = creditcardmerchantDeleteObjectV1ValidateBeforeCall(pkiCreditcardmerchantID, null);
        Type localVarReturnType = new TypeToken<CreditcardmerchantDeleteObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an existing Creditcardmerchant (asynchronously)
     * 
     * @param pkiCreditcardmerchantID The unique ID of the Creditcardmerchant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creditcardmerchantDeleteObjectV1Async(Integer pkiCreditcardmerchantID, final ApiCallback<CreditcardmerchantDeleteObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = creditcardmerchantDeleteObjectV1ValidateBeforeCall(pkiCreditcardmerchantID, _callback);
        Type localVarReturnType = new TypeToken<CreditcardmerchantDeleteObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for creditcardmerchantEditObjectV1
     * @param pkiCreditcardmerchantID The unique ID of the Creditcardmerchant (required)
     * @param creditcardmerchantEditObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creditcardmerchantEditObjectV1Call(Integer pkiCreditcardmerchantID, CreditcardmerchantEditObjectV1Request creditcardmerchantEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creditcardmerchantEditObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/creditcardmerchant/{pkiCreditcardmerchantID}"
            .replace("{" + "pkiCreditcardmerchantID" + "}", localVarApiClient.escapeString(pkiCreditcardmerchantID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creditcardmerchantEditObjectV1ValidateBeforeCall(Integer pkiCreditcardmerchantID, CreditcardmerchantEditObjectV1Request creditcardmerchantEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiCreditcardmerchantID' is set
        if (pkiCreditcardmerchantID == null) {
            throw new ApiException("Missing the required parameter 'pkiCreditcardmerchantID' when calling creditcardmerchantEditObjectV1(Async)");
        }

        // verify the required parameter 'creditcardmerchantEditObjectV1Request' is set
        if (creditcardmerchantEditObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'creditcardmerchantEditObjectV1Request' when calling creditcardmerchantEditObjectV1(Async)");
        }

        return creditcardmerchantEditObjectV1Call(pkiCreditcardmerchantID, creditcardmerchantEditObjectV1Request, _callback);

    }

    /**
     * Edit an existing Creditcardmerchant
     * 
     * @param pkiCreditcardmerchantID The unique ID of the Creditcardmerchant (required)
     * @param creditcardmerchantEditObjectV1Request  (required)
     * @return CreditcardmerchantEditObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public CreditcardmerchantEditObjectV1Response creditcardmerchantEditObjectV1(Integer pkiCreditcardmerchantID, CreditcardmerchantEditObjectV1Request creditcardmerchantEditObjectV1Request) throws ApiException {
        ApiResponse<CreditcardmerchantEditObjectV1Response> localVarResp = creditcardmerchantEditObjectV1WithHttpInfo(pkiCreditcardmerchantID, creditcardmerchantEditObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Edit an existing Creditcardmerchant
     * 
     * @param pkiCreditcardmerchantID The unique ID of the Creditcardmerchant (required)
     * @param creditcardmerchantEditObjectV1Request  (required)
     * @return ApiResponse&lt;CreditcardmerchantEditObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreditcardmerchantEditObjectV1Response> creditcardmerchantEditObjectV1WithHttpInfo(Integer pkiCreditcardmerchantID, CreditcardmerchantEditObjectV1Request creditcardmerchantEditObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = creditcardmerchantEditObjectV1ValidateBeforeCall(pkiCreditcardmerchantID, creditcardmerchantEditObjectV1Request, null);
        Type localVarReturnType = new TypeToken<CreditcardmerchantEditObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit an existing Creditcardmerchant (asynchronously)
     * 
     * @param pkiCreditcardmerchantID The unique ID of the Creditcardmerchant (required)
     * @param creditcardmerchantEditObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creditcardmerchantEditObjectV1Async(Integer pkiCreditcardmerchantID, CreditcardmerchantEditObjectV1Request creditcardmerchantEditObjectV1Request, final ApiCallback<CreditcardmerchantEditObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = creditcardmerchantEditObjectV1ValidateBeforeCall(pkiCreditcardmerchantID, creditcardmerchantEditObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<CreditcardmerchantEditObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for creditcardmerchantGetAutocompleteV2
     * @param sSelector The type of Creditcardmerchants to return (required)
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creditcardmerchantGetAutocompleteV2Call(String sSelector, String eFilterActive, String sQuery, HeaderAcceptLanguage acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/object/creditcardmerchant/getAutocomplete/{sSelector}"
            .replace("{" + "sSelector" + "}", localVarApiClient.escapeString(sSelector.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eFilterActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eFilterActive", eFilterActive));
        }

        if (sQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sQuery", sQuery));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creditcardmerchantGetAutocompleteV2ValidateBeforeCall(String sSelector, String eFilterActive, String sQuery, HeaderAcceptLanguage acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sSelector' is set
        if (sSelector == null) {
            throw new ApiException("Missing the required parameter 'sSelector' when calling creditcardmerchantGetAutocompleteV2(Async)");
        }

        return creditcardmerchantGetAutocompleteV2Call(sSelector, eFilterActive, sQuery, acceptLanguage, _callback);

    }

    /**
     * Retrieve Creditcardmerchants and IDs
     * Get the list of Creditcardmerchant to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Creditcardmerchants to return (required)
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return CreditcardmerchantGetAutocompleteV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public CreditcardmerchantGetAutocompleteV2Response creditcardmerchantGetAutocompleteV2(String sSelector, String eFilterActive, String sQuery, HeaderAcceptLanguage acceptLanguage) throws ApiException {
        ApiResponse<CreditcardmerchantGetAutocompleteV2Response> localVarResp = creditcardmerchantGetAutocompleteV2WithHttpInfo(sSelector, eFilterActive, sQuery, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Retrieve Creditcardmerchants and IDs
     * Get the list of Creditcardmerchant to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Creditcardmerchants to return (required)
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return ApiResponse&lt;CreditcardmerchantGetAutocompleteV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreditcardmerchantGetAutocompleteV2Response> creditcardmerchantGetAutocompleteV2WithHttpInfo(String sSelector, String eFilterActive, String sQuery, HeaderAcceptLanguage acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = creditcardmerchantGetAutocompleteV2ValidateBeforeCall(sSelector, eFilterActive, sQuery, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<CreditcardmerchantGetAutocompleteV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Creditcardmerchants and IDs (asynchronously)
     * Get the list of Creditcardmerchant to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Creditcardmerchants to return (required)
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creditcardmerchantGetAutocompleteV2Async(String sSelector, String eFilterActive, String sQuery, HeaderAcceptLanguage acceptLanguage, final ApiCallback<CreditcardmerchantGetAutocompleteV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = creditcardmerchantGetAutocompleteV2ValidateBeforeCall(sSelector, eFilterActive, sQuery, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<CreditcardmerchantGetAutocompleteV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for creditcardmerchantGetListV1
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creditcardmerchantGetListV1Call(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/creditcardmerchant/getList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eOrderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eOrderBy", eOrderBy));
        }

        if (iRowMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iRowMax", iRowMax));
        }

        if (iRowOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iRowOffset", iRowOffset));
        }

        if (sFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sFilter", sFilter));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creditcardmerchantGetListV1ValidateBeforeCall(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter, final ApiCallback _callback) throws ApiException {
        return creditcardmerchantGetListV1Call(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, _callback);

    }

    /**
     * Retrieve Creditcardmerchant list
     * 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return CreditcardmerchantGetListV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public CreditcardmerchantGetListV1Response creditcardmerchantGetListV1(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter) throws ApiException {
        ApiResponse<CreditcardmerchantGetListV1Response> localVarResp = creditcardmerchantGetListV1WithHttpInfo(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter);
        return localVarResp.getData();
    }

    /**
     * Retrieve Creditcardmerchant list
     * 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return ApiResponse&lt;CreditcardmerchantGetListV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreditcardmerchantGetListV1Response> creditcardmerchantGetListV1WithHttpInfo(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter) throws ApiException {
        okhttp3.Call localVarCall = creditcardmerchantGetListV1ValidateBeforeCall(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, null);
        Type localVarReturnType = new TypeToken<CreditcardmerchantGetListV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Creditcardmerchant list (asynchronously)
     * 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creditcardmerchantGetListV1Async(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter, final ApiCallback<CreditcardmerchantGetListV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = creditcardmerchantGetListV1ValidateBeforeCall(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, _callback);
        Type localVarReturnType = new TypeToken<CreditcardmerchantGetListV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for creditcardmerchantGetObjectV2
     * @param pkiCreditcardmerchantID The unique ID of the Creditcardmerchant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creditcardmerchantGetObjectV2Call(Integer pkiCreditcardmerchantID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/object/creditcardmerchant/{pkiCreditcardmerchantID}"
            .replace("{" + "pkiCreditcardmerchantID" + "}", localVarApiClient.escapeString(pkiCreditcardmerchantID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creditcardmerchantGetObjectV2ValidateBeforeCall(Integer pkiCreditcardmerchantID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiCreditcardmerchantID' is set
        if (pkiCreditcardmerchantID == null) {
            throw new ApiException("Missing the required parameter 'pkiCreditcardmerchantID' when calling creditcardmerchantGetObjectV2(Async)");
        }

        return creditcardmerchantGetObjectV2Call(pkiCreditcardmerchantID, _callback);

    }

    /**
     * Retrieve an existing Creditcardmerchant
     * 
     * @param pkiCreditcardmerchantID The unique ID of the Creditcardmerchant (required)
     * @return CreditcardmerchantGetObjectV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public CreditcardmerchantGetObjectV2Response creditcardmerchantGetObjectV2(Integer pkiCreditcardmerchantID) throws ApiException {
        ApiResponse<CreditcardmerchantGetObjectV2Response> localVarResp = creditcardmerchantGetObjectV2WithHttpInfo(pkiCreditcardmerchantID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Creditcardmerchant
     * 
     * @param pkiCreditcardmerchantID The unique ID of the Creditcardmerchant (required)
     * @return ApiResponse&lt;CreditcardmerchantGetObjectV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreditcardmerchantGetObjectV2Response> creditcardmerchantGetObjectV2WithHttpInfo(Integer pkiCreditcardmerchantID) throws ApiException {
        okhttp3.Call localVarCall = creditcardmerchantGetObjectV2ValidateBeforeCall(pkiCreditcardmerchantID, null);
        Type localVarReturnType = new TypeToken<CreditcardmerchantGetObjectV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Creditcardmerchant (asynchronously)
     * 
     * @param pkiCreditcardmerchantID The unique ID of the Creditcardmerchant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creditcardmerchantGetObjectV2Async(Integer pkiCreditcardmerchantID, final ApiCallback<CreditcardmerchantGetObjectV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = creditcardmerchantGetObjectV2ValidateBeforeCall(pkiCreditcardmerchantID, _callback);
        Type localVarReturnType = new TypeToken<CreditcardmerchantGetObjectV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
