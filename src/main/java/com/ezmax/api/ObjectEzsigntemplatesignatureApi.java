/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api;

import eZmaxAPI.ApiCallback;
import eZmaxAPI.ApiClient;
import eZmaxAPI.ApiException;
import eZmaxAPI.ApiResponse;
import eZmaxAPI.Configuration;
import eZmaxAPI.Pair;
import eZmaxAPI.ProgressRequestBody;
import eZmaxAPI.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ezmax.api.model.CommonResponseError;
import com.ezmax.api.model.EzsigntemplatesignatureCreateObjectV2Request;
import com.ezmax.api.model.EzsigntemplatesignatureCreateObjectV2Response;
import com.ezmax.api.model.EzsigntemplatesignatureDeleteObjectV1Response;
import com.ezmax.api.model.EzsigntemplatesignatureEditObjectV2Request;
import com.ezmax.api.model.EzsigntemplatesignatureEditObjectV2Response;
import com.ezmax.api.model.EzsigntemplatesignatureGetObjectV3Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ObjectEzsigntemplatesignatureApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ObjectEzsigntemplatesignatureApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ObjectEzsigntemplatesignatureApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for ezsigntemplatesignatureCreateObjectV2
     * @param ezsigntemplatesignatureCreateObjectV2Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatesignatureCreateObjectV2Call(EzsigntemplatesignatureCreateObjectV2Request ezsigntemplatesignatureCreateObjectV2Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezsigntemplatesignatureCreateObjectV2Request;

        // create path and map variables
        String localVarPath = "/2/object/ezsigntemplatesignature";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigntemplatesignatureCreateObjectV2ValidateBeforeCall(EzsigntemplatesignatureCreateObjectV2Request ezsigntemplatesignatureCreateObjectV2Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ezsigntemplatesignatureCreateObjectV2Request' is set
        if (ezsigntemplatesignatureCreateObjectV2Request == null) {
            throw new ApiException("Missing the required parameter 'ezsigntemplatesignatureCreateObjectV2Request' when calling ezsigntemplatesignatureCreateObjectV2(Async)");
        }

        return ezsigntemplatesignatureCreateObjectV2Call(ezsigntemplatesignatureCreateObjectV2Request, _callback);

    }

    /**
     * Create a new Ezsigntemplatesignature
     * The endpoint allows to create one or many elements at once.
     * @param ezsigntemplatesignatureCreateObjectV2Request  (required)
     * @return EzsigntemplatesignatureCreateObjectV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EzsigntemplatesignatureCreateObjectV2Response ezsigntemplatesignatureCreateObjectV2(EzsigntemplatesignatureCreateObjectV2Request ezsigntemplatesignatureCreateObjectV2Request) throws ApiException {
        ApiResponse<EzsigntemplatesignatureCreateObjectV2Response> localVarResp = ezsigntemplatesignatureCreateObjectV2WithHttpInfo(ezsigntemplatesignatureCreateObjectV2Request);
        return localVarResp.getData();
    }

    /**
     * Create a new Ezsigntemplatesignature
     * The endpoint allows to create one or many elements at once.
     * @param ezsigntemplatesignatureCreateObjectV2Request  (required)
     * @return ApiResponse&lt;EzsigntemplatesignatureCreateObjectV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigntemplatesignatureCreateObjectV2Response> ezsigntemplatesignatureCreateObjectV2WithHttpInfo(EzsigntemplatesignatureCreateObjectV2Request ezsigntemplatesignatureCreateObjectV2Request) throws ApiException {
        okhttp3.Call localVarCall = ezsigntemplatesignatureCreateObjectV2ValidateBeforeCall(ezsigntemplatesignatureCreateObjectV2Request, null);
        Type localVarReturnType = new TypeToken<EzsigntemplatesignatureCreateObjectV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Ezsigntemplatesignature (asynchronously)
     * The endpoint allows to create one or many elements at once.
     * @param ezsigntemplatesignatureCreateObjectV2Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatesignatureCreateObjectV2Async(EzsigntemplatesignatureCreateObjectV2Request ezsigntemplatesignatureCreateObjectV2Request, final ApiCallback<EzsigntemplatesignatureCreateObjectV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigntemplatesignatureCreateObjectV2ValidateBeforeCall(ezsigntemplatesignatureCreateObjectV2Request, _callback);
        Type localVarReturnType = new TypeToken<EzsigntemplatesignatureCreateObjectV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigntemplatesignatureDeleteObjectV1
     * @param pkiEzsigntemplatesignatureID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatesignatureDeleteObjectV1Call(Integer pkiEzsigntemplatesignatureID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/ezsigntemplatesignature/{pkiEzsigntemplatesignatureID}"
            .replace("{" + "pkiEzsigntemplatesignatureID" + "}", localVarApiClient.escapeString(pkiEzsigntemplatesignatureID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigntemplatesignatureDeleteObjectV1ValidateBeforeCall(Integer pkiEzsigntemplatesignatureID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiEzsigntemplatesignatureID' is set
        if (pkiEzsigntemplatesignatureID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigntemplatesignatureID' when calling ezsigntemplatesignatureDeleteObjectV1(Async)");
        }

        return ezsigntemplatesignatureDeleteObjectV1Call(pkiEzsigntemplatesignatureID, _callback);

    }

    /**
     * Delete an existing Ezsigntemplatesignature
     * 
     * @param pkiEzsigntemplatesignatureID  (required)
     * @return EzsigntemplatesignatureDeleteObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsigntemplatesignatureDeleteObjectV1Response ezsigntemplatesignatureDeleteObjectV1(Integer pkiEzsigntemplatesignatureID) throws ApiException {
        ApiResponse<EzsigntemplatesignatureDeleteObjectV1Response> localVarResp = ezsigntemplatesignatureDeleteObjectV1WithHttpInfo(pkiEzsigntemplatesignatureID);
        return localVarResp.getData();
    }

    /**
     * Delete an existing Ezsigntemplatesignature
     * 
     * @param pkiEzsigntemplatesignatureID  (required)
     * @return ApiResponse&lt;EzsigntemplatesignatureDeleteObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigntemplatesignatureDeleteObjectV1Response> ezsigntemplatesignatureDeleteObjectV1WithHttpInfo(Integer pkiEzsigntemplatesignatureID) throws ApiException {
        okhttp3.Call localVarCall = ezsigntemplatesignatureDeleteObjectV1ValidateBeforeCall(pkiEzsigntemplatesignatureID, null);
        Type localVarReturnType = new TypeToken<EzsigntemplatesignatureDeleteObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an existing Ezsigntemplatesignature (asynchronously)
     * 
     * @param pkiEzsigntemplatesignatureID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatesignatureDeleteObjectV1Async(Integer pkiEzsigntemplatesignatureID, final ApiCallback<EzsigntemplatesignatureDeleteObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigntemplatesignatureDeleteObjectV1ValidateBeforeCall(pkiEzsigntemplatesignatureID, _callback);
        Type localVarReturnType = new TypeToken<EzsigntemplatesignatureDeleteObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigntemplatesignatureEditObjectV2
     * @param pkiEzsigntemplatesignatureID  (required)
     * @param ezsigntemplatesignatureEditObjectV2Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatesignatureEditObjectV2Call(Integer pkiEzsigntemplatesignatureID, EzsigntemplatesignatureEditObjectV2Request ezsigntemplatesignatureEditObjectV2Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezsigntemplatesignatureEditObjectV2Request;

        // create path and map variables
        String localVarPath = "/2/object/ezsigntemplatesignature/{pkiEzsigntemplatesignatureID}"
            .replace("{" + "pkiEzsigntemplatesignatureID" + "}", localVarApiClient.escapeString(pkiEzsigntemplatesignatureID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigntemplatesignatureEditObjectV2ValidateBeforeCall(Integer pkiEzsigntemplatesignatureID, EzsigntemplatesignatureEditObjectV2Request ezsigntemplatesignatureEditObjectV2Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiEzsigntemplatesignatureID' is set
        if (pkiEzsigntemplatesignatureID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigntemplatesignatureID' when calling ezsigntemplatesignatureEditObjectV2(Async)");
        }

        // verify the required parameter 'ezsigntemplatesignatureEditObjectV2Request' is set
        if (ezsigntemplatesignatureEditObjectV2Request == null) {
            throw new ApiException("Missing the required parameter 'ezsigntemplatesignatureEditObjectV2Request' when calling ezsigntemplatesignatureEditObjectV2(Async)");
        }

        return ezsigntemplatesignatureEditObjectV2Call(pkiEzsigntemplatesignatureID, ezsigntemplatesignatureEditObjectV2Request, _callback);

    }

    /**
     * Edit an existing Ezsigntemplatesignature
     * 
     * @param pkiEzsigntemplatesignatureID  (required)
     * @param ezsigntemplatesignatureEditObjectV2Request  (required)
     * @return EzsigntemplatesignatureEditObjectV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsigntemplatesignatureEditObjectV2Response ezsigntemplatesignatureEditObjectV2(Integer pkiEzsigntemplatesignatureID, EzsigntemplatesignatureEditObjectV2Request ezsigntemplatesignatureEditObjectV2Request) throws ApiException {
        ApiResponse<EzsigntemplatesignatureEditObjectV2Response> localVarResp = ezsigntemplatesignatureEditObjectV2WithHttpInfo(pkiEzsigntemplatesignatureID, ezsigntemplatesignatureEditObjectV2Request);
        return localVarResp.getData();
    }

    /**
     * Edit an existing Ezsigntemplatesignature
     * 
     * @param pkiEzsigntemplatesignatureID  (required)
     * @param ezsigntemplatesignatureEditObjectV2Request  (required)
     * @return ApiResponse&lt;EzsigntemplatesignatureEditObjectV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigntemplatesignatureEditObjectV2Response> ezsigntemplatesignatureEditObjectV2WithHttpInfo(Integer pkiEzsigntemplatesignatureID, EzsigntemplatesignatureEditObjectV2Request ezsigntemplatesignatureEditObjectV2Request) throws ApiException {
        okhttp3.Call localVarCall = ezsigntemplatesignatureEditObjectV2ValidateBeforeCall(pkiEzsigntemplatesignatureID, ezsigntemplatesignatureEditObjectV2Request, null);
        Type localVarReturnType = new TypeToken<EzsigntemplatesignatureEditObjectV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit an existing Ezsigntemplatesignature (asynchronously)
     * 
     * @param pkiEzsigntemplatesignatureID  (required)
     * @param ezsigntemplatesignatureEditObjectV2Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatesignatureEditObjectV2Async(Integer pkiEzsigntemplatesignatureID, EzsigntemplatesignatureEditObjectV2Request ezsigntemplatesignatureEditObjectV2Request, final ApiCallback<EzsigntemplatesignatureEditObjectV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigntemplatesignatureEditObjectV2ValidateBeforeCall(pkiEzsigntemplatesignatureID, ezsigntemplatesignatureEditObjectV2Request, _callback);
        Type localVarReturnType = new TypeToken<EzsigntemplatesignatureEditObjectV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigntemplatesignatureGetObjectV3
     * @param pkiEzsigntemplatesignatureID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatesignatureGetObjectV3Call(Integer pkiEzsigntemplatesignatureID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/3/object/ezsigntemplatesignature/{pkiEzsigntemplatesignatureID}"
            .replace("{" + "pkiEzsigntemplatesignatureID" + "}", localVarApiClient.escapeString(pkiEzsigntemplatesignatureID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigntemplatesignatureGetObjectV3ValidateBeforeCall(Integer pkiEzsigntemplatesignatureID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiEzsigntemplatesignatureID' is set
        if (pkiEzsigntemplatesignatureID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigntemplatesignatureID' when calling ezsigntemplatesignatureGetObjectV3(Async)");
        }

        return ezsigntemplatesignatureGetObjectV3Call(pkiEzsigntemplatesignatureID, _callback);

    }

    /**
     * Retrieve an existing Ezsigntemplatesignature
     * 
     * @param pkiEzsigntemplatesignatureID  (required)
     * @return EzsigntemplatesignatureGetObjectV3Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsigntemplatesignatureGetObjectV3Response ezsigntemplatesignatureGetObjectV3(Integer pkiEzsigntemplatesignatureID) throws ApiException {
        ApiResponse<EzsigntemplatesignatureGetObjectV3Response> localVarResp = ezsigntemplatesignatureGetObjectV3WithHttpInfo(pkiEzsigntemplatesignatureID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Ezsigntemplatesignature
     * 
     * @param pkiEzsigntemplatesignatureID  (required)
     * @return ApiResponse&lt;EzsigntemplatesignatureGetObjectV3Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigntemplatesignatureGetObjectV3Response> ezsigntemplatesignatureGetObjectV3WithHttpInfo(Integer pkiEzsigntemplatesignatureID) throws ApiException {
        okhttp3.Call localVarCall = ezsigntemplatesignatureGetObjectV3ValidateBeforeCall(pkiEzsigntemplatesignatureID, null);
        Type localVarReturnType = new TypeToken<EzsigntemplatesignatureGetObjectV3Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Ezsigntemplatesignature (asynchronously)
     * 
     * @param pkiEzsigntemplatesignatureID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatesignatureGetObjectV3Async(Integer pkiEzsigntemplatesignatureID, final ApiCallback<EzsigntemplatesignatureGetObjectV3Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigntemplatesignatureGetObjectV3ValidateBeforeCall(pkiEzsigntemplatesignatureID, _callback);
        Type localVarReturnType = new TypeToken<EzsigntemplatesignatureGetObjectV3Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
