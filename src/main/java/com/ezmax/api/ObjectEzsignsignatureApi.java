/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.9
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api;

import eZmaxAPI.ApiCallback;
import eZmaxAPI.ApiClient;
import eZmaxAPI.ApiException;
import eZmaxAPI.ApiResponse;
import eZmaxAPI.Configuration;
import eZmaxAPI.Pair;
import eZmaxAPI.ProgressRequestBody;
import eZmaxAPI.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ezmax.api.model.CommonResponseError;
import com.ezmax.api.model.EzsignsignatureCreateObjectV1Request;
import com.ezmax.api.model.EzsignsignatureCreateObjectV1Response;
import com.ezmax.api.model.EzsignsignatureCreateObjectV2Request;
import com.ezmax.api.model.EzsignsignatureCreateObjectV2Response;
import com.ezmax.api.model.EzsignsignatureDeleteObjectV1Response;
import com.ezmax.api.model.EzsignsignatureEditObjectV1Request;
import com.ezmax.api.model.EzsignsignatureEditObjectV1Response;
import com.ezmax.api.model.EzsignsignatureGetObjectV1Response;
import com.ezmax.api.model.EzsignsignatureSignV1Request;
import com.ezmax.api.model.EzsignsignatureSignV1Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ObjectEzsignsignatureApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ObjectEzsignsignatureApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ObjectEzsignsignatureApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for ezsignsignatureCreateObjectV1
     * @param ezsignsignatureCreateObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call ezsignsignatureCreateObjectV1Call(List<EzsignsignatureCreateObjectV1Request> ezsignsignatureCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezsignsignatureCreateObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezsignsignature";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsignsignatureCreateObjectV1ValidateBeforeCall(List<EzsignsignatureCreateObjectV1Request> ezsignsignatureCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ezsignsignatureCreateObjectV1Request' is set
        if (ezsignsignatureCreateObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezsignsignatureCreateObjectV1Request' when calling ezsignsignatureCreateObjectV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsignsignatureCreateObjectV1Call(ezsignsignatureCreateObjectV1Request, _callback);
        return localVarCall;

    }

    /**
     * Create a new Ezsignsignature
     * The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
     * @param ezsignsignatureCreateObjectV1Request  (required)
     * @return EzsignsignatureCreateObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public EzsignsignatureCreateObjectV1Response ezsignsignatureCreateObjectV1(List<EzsignsignatureCreateObjectV1Request> ezsignsignatureCreateObjectV1Request) throws ApiException {
        ApiResponse<EzsignsignatureCreateObjectV1Response> localVarResp = ezsignsignatureCreateObjectV1WithHttpInfo(ezsignsignatureCreateObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Create a new Ezsignsignature
     * The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
     * @param ezsignsignatureCreateObjectV1Request  (required)
     * @return ApiResponse&lt;EzsignsignatureCreateObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<EzsignsignatureCreateObjectV1Response> ezsignsignatureCreateObjectV1WithHttpInfo(List<EzsignsignatureCreateObjectV1Request> ezsignsignatureCreateObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezsignsignatureCreateObjectV1ValidateBeforeCall(ezsignsignatureCreateObjectV1Request, null);
        Type localVarReturnType = new TypeToken<EzsignsignatureCreateObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Ezsignsignature (asynchronously)
     * The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
     * @param ezsignsignatureCreateObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call ezsignsignatureCreateObjectV1Async(List<EzsignsignatureCreateObjectV1Request> ezsignsignatureCreateObjectV1Request, final ApiCallback<EzsignsignatureCreateObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsignsignatureCreateObjectV1ValidateBeforeCall(ezsignsignatureCreateObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<EzsignsignatureCreateObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsignsignatureCreateObjectV2
     * @param ezsignsignatureCreateObjectV2Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignsignatureCreateObjectV2Call(EzsignsignatureCreateObjectV2Request ezsignsignatureCreateObjectV2Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezsignsignatureCreateObjectV2Request;

        // create path and map variables
        String localVarPath = "/2/object/ezsignsignature";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsignsignatureCreateObjectV2ValidateBeforeCall(EzsignsignatureCreateObjectV2Request ezsignsignatureCreateObjectV2Request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ezsignsignatureCreateObjectV2Request' is set
        if (ezsignsignatureCreateObjectV2Request == null) {
            throw new ApiException("Missing the required parameter 'ezsignsignatureCreateObjectV2Request' when calling ezsignsignatureCreateObjectV2(Async)");
        }
        

        okhttp3.Call localVarCall = ezsignsignatureCreateObjectV2Call(ezsignsignatureCreateObjectV2Request, _callback);
        return localVarCall;

    }

    /**
     * Create a new Ezsignsignature
     * The endpoint allows to create one or many elements at once.
     * @param ezsignsignatureCreateObjectV2Request  (required)
     * @return EzsignsignatureCreateObjectV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EzsignsignatureCreateObjectV2Response ezsignsignatureCreateObjectV2(EzsignsignatureCreateObjectV2Request ezsignsignatureCreateObjectV2Request) throws ApiException {
        ApiResponse<EzsignsignatureCreateObjectV2Response> localVarResp = ezsignsignatureCreateObjectV2WithHttpInfo(ezsignsignatureCreateObjectV2Request);
        return localVarResp.getData();
    }

    /**
     * Create a new Ezsignsignature
     * The endpoint allows to create one or many elements at once.
     * @param ezsignsignatureCreateObjectV2Request  (required)
     * @return ApiResponse&lt;EzsignsignatureCreateObjectV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsignsignatureCreateObjectV2Response> ezsignsignatureCreateObjectV2WithHttpInfo(EzsignsignatureCreateObjectV2Request ezsignsignatureCreateObjectV2Request) throws ApiException {
        okhttp3.Call localVarCall = ezsignsignatureCreateObjectV2ValidateBeforeCall(ezsignsignatureCreateObjectV2Request, null);
        Type localVarReturnType = new TypeToken<EzsignsignatureCreateObjectV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Ezsignsignature (asynchronously)
     * The endpoint allows to create one or many elements at once.
     * @param ezsignsignatureCreateObjectV2Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignsignatureCreateObjectV2Async(EzsignsignatureCreateObjectV2Request ezsignsignatureCreateObjectV2Request, final ApiCallback<EzsignsignatureCreateObjectV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsignsignatureCreateObjectV2ValidateBeforeCall(ezsignsignatureCreateObjectV2Request, _callback);
        Type localVarReturnType = new TypeToken<EzsignsignatureCreateObjectV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsignsignatureDeleteObjectV1
     * @param pkiEzsignsignatureID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignsignatureDeleteObjectV1Call(Integer pkiEzsignsignatureID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/ezsignsignature/{pkiEzsignsignatureID}"
            .replaceAll("\\{" + "pkiEzsignsignatureID" + "\\}", localVarApiClient.escapeString(pkiEzsignsignatureID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsignsignatureDeleteObjectV1ValidateBeforeCall(Integer pkiEzsignsignatureID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pkiEzsignsignatureID' is set
        if (pkiEzsignsignatureID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsignsignatureID' when calling ezsignsignatureDeleteObjectV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsignsignatureDeleteObjectV1Call(pkiEzsignsignatureID, _callback);
        return localVarCall;

    }

    /**
     * Delete an existing Ezsignsignature
     * 
     * @param pkiEzsignsignatureID  (required)
     * @return EzsignsignatureDeleteObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public EzsignsignatureDeleteObjectV1Response ezsignsignatureDeleteObjectV1(Integer pkiEzsignsignatureID) throws ApiException {
        ApiResponse<EzsignsignatureDeleteObjectV1Response> localVarResp = ezsignsignatureDeleteObjectV1WithHttpInfo(pkiEzsignsignatureID);
        return localVarResp.getData();
    }

    /**
     * Delete an existing Ezsignsignature
     * 
     * @param pkiEzsignsignatureID  (required)
     * @return ApiResponse&lt;EzsignsignatureDeleteObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsignsignatureDeleteObjectV1Response> ezsignsignatureDeleteObjectV1WithHttpInfo(Integer pkiEzsignsignatureID) throws ApiException {
        okhttp3.Call localVarCall = ezsignsignatureDeleteObjectV1ValidateBeforeCall(pkiEzsignsignatureID, null);
        Type localVarReturnType = new TypeToken<EzsignsignatureDeleteObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an existing Ezsignsignature (asynchronously)
     * 
     * @param pkiEzsignsignatureID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignsignatureDeleteObjectV1Async(Integer pkiEzsignsignatureID, final ApiCallback<EzsignsignatureDeleteObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsignsignatureDeleteObjectV1ValidateBeforeCall(pkiEzsignsignatureID, _callback);
        Type localVarReturnType = new TypeToken<EzsignsignatureDeleteObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsignsignatureEditObjectV1
     * @param pkiEzsignsignatureID  (required)
     * @param ezsignsignatureEditObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignsignatureEditObjectV1Call(Integer pkiEzsignsignatureID, EzsignsignatureEditObjectV1Request ezsignsignatureEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezsignsignatureEditObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezsignsignature/{pkiEzsignsignatureID}"
            .replaceAll("\\{" + "pkiEzsignsignatureID" + "\\}", localVarApiClient.escapeString(pkiEzsignsignatureID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsignsignatureEditObjectV1ValidateBeforeCall(Integer pkiEzsignsignatureID, EzsignsignatureEditObjectV1Request ezsignsignatureEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pkiEzsignsignatureID' is set
        if (pkiEzsignsignatureID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsignsignatureID' when calling ezsignsignatureEditObjectV1(Async)");
        }
        
        // verify the required parameter 'ezsignsignatureEditObjectV1Request' is set
        if (ezsignsignatureEditObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezsignsignatureEditObjectV1Request' when calling ezsignsignatureEditObjectV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsignsignatureEditObjectV1Call(pkiEzsignsignatureID, ezsignsignatureEditObjectV1Request, _callback);
        return localVarCall;

    }

    /**
     * Edit an existing Ezsignsignature
     * 
     * @param pkiEzsignsignatureID  (required)
     * @param ezsignsignatureEditObjectV1Request  (required)
     * @return EzsignsignatureEditObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public EzsignsignatureEditObjectV1Response ezsignsignatureEditObjectV1(Integer pkiEzsignsignatureID, EzsignsignatureEditObjectV1Request ezsignsignatureEditObjectV1Request) throws ApiException {
        ApiResponse<EzsignsignatureEditObjectV1Response> localVarResp = ezsignsignatureEditObjectV1WithHttpInfo(pkiEzsignsignatureID, ezsignsignatureEditObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Edit an existing Ezsignsignature
     * 
     * @param pkiEzsignsignatureID  (required)
     * @param ezsignsignatureEditObjectV1Request  (required)
     * @return ApiResponse&lt;EzsignsignatureEditObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsignsignatureEditObjectV1Response> ezsignsignatureEditObjectV1WithHttpInfo(Integer pkiEzsignsignatureID, EzsignsignatureEditObjectV1Request ezsignsignatureEditObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezsignsignatureEditObjectV1ValidateBeforeCall(pkiEzsignsignatureID, ezsignsignatureEditObjectV1Request, null);
        Type localVarReturnType = new TypeToken<EzsignsignatureEditObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit an existing Ezsignsignature (asynchronously)
     * 
     * @param pkiEzsignsignatureID  (required)
     * @param ezsignsignatureEditObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignsignatureEditObjectV1Async(Integer pkiEzsignsignatureID, EzsignsignatureEditObjectV1Request ezsignsignatureEditObjectV1Request, final ApiCallback<EzsignsignatureEditObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsignsignatureEditObjectV1ValidateBeforeCall(pkiEzsignsignatureID, ezsignsignatureEditObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<EzsignsignatureEditObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsignsignatureGetObjectV1
     * @param pkiEzsignsignatureID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignsignatureGetObjectV1Call(Integer pkiEzsignsignatureID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/ezsignsignature/{pkiEzsignsignatureID}"
            .replaceAll("\\{" + "pkiEzsignsignatureID" + "\\}", localVarApiClient.escapeString(pkiEzsignsignatureID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsignsignatureGetObjectV1ValidateBeforeCall(Integer pkiEzsignsignatureID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pkiEzsignsignatureID' is set
        if (pkiEzsignsignatureID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsignsignatureID' when calling ezsignsignatureGetObjectV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsignsignatureGetObjectV1Call(pkiEzsignsignatureID, _callback);
        return localVarCall;

    }

    /**
     * Retrieve an existing Ezsignsignature
     * 
     * @param pkiEzsignsignatureID  (required)
     * @return EzsignsignatureGetObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
     </table>
     */
    public EzsignsignatureGetObjectV1Response ezsignsignatureGetObjectV1(Integer pkiEzsignsignatureID) throws ApiException {
        ApiResponse<EzsignsignatureGetObjectV1Response> localVarResp = ezsignsignatureGetObjectV1WithHttpInfo(pkiEzsignsignatureID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Ezsignsignature
     * 
     * @param pkiEzsignsignatureID  (required)
     * @return ApiResponse&lt;EzsignsignatureGetObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsignsignatureGetObjectV1Response> ezsignsignatureGetObjectV1WithHttpInfo(Integer pkiEzsignsignatureID) throws ApiException {
        okhttp3.Call localVarCall = ezsignsignatureGetObjectV1ValidateBeforeCall(pkiEzsignsignatureID, null);
        Type localVarReturnType = new TypeToken<EzsignsignatureGetObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Ezsignsignature (asynchronously)
     * 
     * @param pkiEzsignsignatureID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignsignatureGetObjectV1Async(Integer pkiEzsignsignatureID, final ApiCallback<EzsignsignatureGetObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsignsignatureGetObjectV1ValidateBeforeCall(pkiEzsignsignatureID, _callback);
        Type localVarReturnType = new TypeToken<EzsignsignatureGetObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsignsignatureSignV1
     * @param pkiEzsignsignatureID  (required)
     * @param ezsignsignatureSignV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignsignatureSignV1Call(Integer pkiEzsignsignatureID, EzsignsignatureSignV1Request ezsignsignatureSignV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezsignsignatureSignV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezsignsignature/{pkiEzsignsignatureID}/sign"
            .replaceAll("\\{" + "pkiEzsignsignatureID" + "\\}", localVarApiClient.escapeString(pkiEzsignsignatureID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsignsignatureSignV1ValidateBeforeCall(Integer pkiEzsignsignatureID, EzsignsignatureSignV1Request ezsignsignatureSignV1Request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pkiEzsignsignatureID' is set
        if (pkiEzsignsignatureID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsignsignatureID' when calling ezsignsignatureSignV1(Async)");
        }
        
        // verify the required parameter 'ezsignsignatureSignV1Request' is set
        if (ezsignsignatureSignV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezsignsignatureSignV1Request' when calling ezsignsignatureSignV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsignsignatureSignV1Call(pkiEzsignsignatureID, ezsignsignatureSignV1Request, _callback);
        return localVarCall;

    }

    /**
     * Sign the Ezsignsignature
     * 
     * @param pkiEzsignsignatureID  (required)
     * @param ezsignsignatureSignV1Request  (required)
     * @return EzsignsignatureSignV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public EzsignsignatureSignV1Response ezsignsignatureSignV1(Integer pkiEzsignsignatureID, EzsignsignatureSignV1Request ezsignsignatureSignV1Request) throws ApiException {
        ApiResponse<EzsignsignatureSignV1Response> localVarResp = ezsignsignatureSignV1WithHttpInfo(pkiEzsignsignatureID, ezsignsignatureSignV1Request);
        return localVarResp.getData();
    }

    /**
     * Sign the Ezsignsignature
     * 
     * @param pkiEzsignsignatureID  (required)
     * @param ezsignsignatureSignV1Request  (required)
     * @return ApiResponse&lt;EzsignsignatureSignV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsignsignatureSignV1Response> ezsignsignatureSignV1WithHttpInfo(Integer pkiEzsignsignatureID, EzsignsignatureSignV1Request ezsignsignatureSignV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezsignsignatureSignV1ValidateBeforeCall(pkiEzsignsignatureID, ezsignsignatureSignV1Request, null);
        Type localVarReturnType = new TypeToken<EzsignsignatureSignV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sign the Ezsignsignature (asynchronously)
     * 
     * @param pkiEzsignsignatureID  (required)
     * @param ezsignsignatureSignV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignsignatureSignV1Async(Integer pkiEzsignsignatureID, EzsignsignatureSignV1Request ezsignsignatureSignV1Request, final ApiCallback<EzsignsignatureSignV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsignsignatureSignV1ValidateBeforeCall(pkiEzsignsignatureID, ezsignsignatureSignV1Request, _callback);
        Type localVarReturnType = new TypeToken<EzsignsignatureSignV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
