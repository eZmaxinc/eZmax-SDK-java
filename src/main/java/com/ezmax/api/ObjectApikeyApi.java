/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api;

import eZmaxAPI.ApiCallback;
import eZmaxAPI.ApiClient;
import eZmaxAPI.ApiException;
import eZmaxAPI.ApiResponse;
import eZmaxAPI.Configuration;
import eZmaxAPI.Pair;
import eZmaxAPI.ProgressRequestBody;
import eZmaxAPI.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ezmax.api.model.ApikeyCreateObjectV2Request;
import com.ezmax.api.model.ApikeyCreateObjectV2Response;
import com.ezmax.api.model.ApikeyEditObjectV1Request;
import com.ezmax.api.model.ApikeyEditObjectV1Response;
import com.ezmax.api.model.ApikeyEditPermissionsV1Request;
import com.ezmax.api.model.ApikeyEditPermissionsV1Response;
import com.ezmax.api.model.ApikeyGetCorsV1Response;
import com.ezmax.api.model.ApikeyGetListV1Response;
import com.ezmax.api.model.ApikeyGetObjectV2Response;
import com.ezmax.api.model.ApikeyGetPermissionsV1Response;
import com.ezmax.api.model.ApikeyGetSubnetsV1Response;
import com.ezmax.api.model.ApikeyRegenerateV1Request;
import com.ezmax.api.model.ApikeyRegenerateV1Response;
import com.ezmax.api.model.CommonResponseError;
import java.io.File;
import com.ezmax.api.model.HeaderAcceptLanguage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ObjectApikeyApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ObjectApikeyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ObjectApikeyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apikeyCreateObjectV2
     * @param apikeyCreateObjectV2Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apikeyCreateObjectV2Call(ApikeyCreateObjectV2Request apikeyCreateObjectV2Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apikeyCreateObjectV2Request;

        // create path and map variables
        String localVarPath = "/2/object/apikey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apikeyCreateObjectV2ValidateBeforeCall(ApikeyCreateObjectV2Request apikeyCreateObjectV2Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apikeyCreateObjectV2Request' is set
        if (apikeyCreateObjectV2Request == null) {
            throw new ApiException("Missing the required parameter 'apikeyCreateObjectV2Request' when calling apikeyCreateObjectV2(Async)");
        }

        return apikeyCreateObjectV2Call(apikeyCreateObjectV2Request, _callback);

    }

    /**
     * Create a new Apikey
     * The endpoint allows to create one or many elements at once.
     * @param apikeyCreateObjectV2Request  (required)
     * @return ApikeyCreateObjectV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApikeyCreateObjectV2Response apikeyCreateObjectV2(ApikeyCreateObjectV2Request apikeyCreateObjectV2Request) throws ApiException {
        ApiResponse<ApikeyCreateObjectV2Response> localVarResp = apikeyCreateObjectV2WithHttpInfo(apikeyCreateObjectV2Request);
        return localVarResp.getData();
    }

    /**
     * Create a new Apikey
     * The endpoint allows to create one or many elements at once.
     * @param apikeyCreateObjectV2Request  (required)
     * @return ApiResponse&lt;ApikeyCreateObjectV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApikeyCreateObjectV2Response> apikeyCreateObjectV2WithHttpInfo(ApikeyCreateObjectV2Request apikeyCreateObjectV2Request) throws ApiException {
        okhttp3.Call localVarCall = apikeyCreateObjectV2ValidateBeforeCall(apikeyCreateObjectV2Request, null);
        Type localVarReturnType = new TypeToken<ApikeyCreateObjectV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Apikey (asynchronously)
     * The endpoint allows to create one or many elements at once.
     * @param apikeyCreateObjectV2Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apikeyCreateObjectV2Async(ApikeyCreateObjectV2Request apikeyCreateObjectV2Request, final ApiCallback<ApikeyCreateObjectV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apikeyCreateObjectV2ValidateBeforeCall(apikeyCreateObjectV2Request, _callback);
        Type localVarReturnType = new TypeToken<ApikeyCreateObjectV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apikeyEditObjectV1
     * @param pkiApikeyID The unique ID of the Apikey (required)
     * @param apikeyEditObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apikeyEditObjectV1Call(Integer pkiApikeyID, ApikeyEditObjectV1Request apikeyEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apikeyEditObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/apikey/{pkiApikeyID}"
            .replace("{" + "pkiApikeyID" + "}", localVarApiClient.escapeString(pkiApikeyID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apikeyEditObjectV1ValidateBeforeCall(Integer pkiApikeyID, ApikeyEditObjectV1Request apikeyEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiApikeyID' is set
        if (pkiApikeyID == null) {
            throw new ApiException("Missing the required parameter 'pkiApikeyID' when calling apikeyEditObjectV1(Async)");
        }

        // verify the required parameter 'apikeyEditObjectV1Request' is set
        if (apikeyEditObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'apikeyEditObjectV1Request' when calling apikeyEditObjectV1(Async)");
        }

        return apikeyEditObjectV1Call(pkiApikeyID, apikeyEditObjectV1Request, _callback);

    }

    /**
     * Edit an existing Apikey
     * 
     * @param pkiApikeyID The unique ID of the Apikey (required)
     * @param apikeyEditObjectV1Request  (required)
     * @return ApikeyEditObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApikeyEditObjectV1Response apikeyEditObjectV1(Integer pkiApikeyID, ApikeyEditObjectV1Request apikeyEditObjectV1Request) throws ApiException {
        ApiResponse<ApikeyEditObjectV1Response> localVarResp = apikeyEditObjectV1WithHttpInfo(pkiApikeyID, apikeyEditObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Edit an existing Apikey
     * 
     * @param pkiApikeyID The unique ID of the Apikey (required)
     * @param apikeyEditObjectV1Request  (required)
     * @return ApiResponse&lt;ApikeyEditObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApikeyEditObjectV1Response> apikeyEditObjectV1WithHttpInfo(Integer pkiApikeyID, ApikeyEditObjectV1Request apikeyEditObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = apikeyEditObjectV1ValidateBeforeCall(pkiApikeyID, apikeyEditObjectV1Request, null);
        Type localVarReturnType = new TypeToken<ApikeyEditObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit an existing Apikey (asynchronously)
     * 
     * @param pkiApikeyID The unique ID of the Apikey (required)
     * @param apikeyEditObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apikeyEditObjectV1Async(Integer pkiApikeyID, ApikeyEditObjectV1Request apikeyEditObjectV1Request, final ApiCallback<ApikeyEditObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apikeyEditObjectV1ValidateBeforeCall(pkiApikeyID, apikeyEditObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<ApikeyEditObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apikeyEditPermissionsV1
     * @param pkiApikeyID  (required)
     * @param apikeyEditPermissionsV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apikeyEditPermissionsV1Call(Integer pkiApikeyID, ApikeyEditPermissionsV1Request apikeyEditPermissionsV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apikeyEditPermissionsV1Request;

        // create path and map variables
        String localVarPath = "/1/object/apikey/{pkiApikeyID}/editPermissions"
            .replace("{" + "pkiApikeyID" + "}", localVarApiClient.escapeString(pkiApikeyID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apikeyEditPermissionsV1ValidateBeforeCall(Integer pkiApikeyID, ApikeyEditPermissionsV1Request apikeyEditPermissionsV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiApikeyID' is set
        if (pkiApikeyID == null) {
            throw new ApiException("Missing the required parameter 'pkiApikeyID' when calling apikeyEditPermissionsV1(Async)");
        }

        // verify the required parameter 'apikeyEditPermissionsV1Request' is set
        if (apikeyEditPermissionsV1Request == null) {
            throw new ApiException("Missing the required parameter 'apikeyEditPermissionsV1Request' when calling apikeyEditPermissionsV1(Async)");
        }

        return apikeyEditPermissionsV1Call(pkiApikeyID, apikeyEditPermissionsV1Request, _callback);

    }

    /**
     * Edit multiple Permissions
     * Using this endpoint, you can edit multiple Permissions at the same time.
     * @param pkiApikeyID  (required)
     * @param apikeyEditPermissionsV1Request  (required)
     * @return ApikeyEditPermissionsV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApikeyEditPermissionsV1Response apikeyEditPermissionsV1(Integer pkiApikeyID, ApikeyEditPermissionsV1Request apikeyEditPermissionsV1Request) throws ApiException {
        ApiResponse<ApikeyEditPermissionsV1Response> localVarResp = apikeyEditPermissionsV1WithHttpInfo(pkiApikeyID, apikeyEditPermissionsV1Request);
        return localVarResp.getData();
    }

    /**
     * Edit multiple Permissions
     * Using this endpoint, you can edit multiple Permissions at the same time.
     * @param pkiApikeyID  (required)
     * @param apikeyEditPermissionsV1Request  (required)
     * @return ApiResponse&lt;ApikeyEditPermissionsV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApikeyEditPermissionsV1Response> apikeyEditPermissionsV1WithHttpInfo(Integer pkiApikeyID, ApikeyEditPermissionsV1Request apikeyEditPermissionsV1Request) throws ApiException {
        okhttp3.Call localVarCall = apikeyEditPermissionsV1ValidateBeforeCall(pkiApikeyID, apikeyEditPermissionsV1Request, null);
        Type localVarReturnType = new TypeToken<ApikeyEditPermissionsV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit multiple Permissions (asynchronously)
     * Using this endpoint, you can edit multiple Permissions at the same time.
     * @param pkiApikeyID  (required)
     * @param apikeyEditPermissionsV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apikeyEditPermissionsV1Async(Integer pkiApikeyID, ApikeyEditPermissionsV1Request apikeyEditPermissionsV1Request, final ApiCallback<ApikeyEditPermissionsV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apikeyEditPermissionsV1ValidateBeforeCall(pkiApikeyID, apikeyEditPermissionsV1Request, _callback);
        Type localVarReturnType = new TypeToken<ApikeyEditPermissionsV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apikeyGetCorsV1
     * @param pkiApikeyID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apikeyGetCorsV1Call(Integer pkiApikeyID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/apikey/{pkiApikeyID}/getCors"
            .replace("{" + "pkiApikeyID" + "}", localVarApiClient.escapeString(pkiApikeyID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apikeyGetCorsV1ValidateBeforeCall(Integer pkiApikeyID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiApikeyID' is set
        if (pkiApikeyID == null) {
            throw new ApiException("Missing the required parameter 'pkiApikeyID' when calling apikeyGetCorsV1(Async)");
        }

        return apikeyGetCorsV1Call(pkiApikeyID, _callback);

    }

    /**
     * Retrieve an existing Apikey&#39;s cors
     * 
     * @param pkiApikeyID  (required)
     * @return ApikeyGetCorsV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApikeyGetCorsV1Response apikeyGetCorsV1(Integer pkiApikeyID) throws ApiException {
        ApiResponse<ApikeyGetCorsV1Response> localVarResp = apikeyGetCorsV1WithHttpInfo(pkiApikeyID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Apikey&#39;s cors
     * 
     * @param pkiApikeyID  (required)
     * @return ApiResponse&lt;ApikeyGetCorsV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApikeyGetCorsV1Response> apikeyGetCorsV1WithHttpInfo(Integer pkiApikeyID) throws ApiException {
        okhttp3.Call localVarCall = apikeyGetCorsV1ValidateBeforeCall(pkiApikeyID, null);
        Type localVarReturnType = new TypeToken<ApikeyGetCorsV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Apikey&#39;s cors (asynchronously)
     * 
     * @param pkiApikeyID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apikeyGetCorsV1Async(Integer pkiApikeyID, final ApiCallback<ApikeyGetCorsV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apikeyGetCorsV1ValidateBeforeCall(pkiApikeyID, _callback);
        Type localVarReturnType = new TypeToken<ApikeyGetCorsV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apikeyGetListV1
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional, default to 10000)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apikeyGetListV1Call(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/apikey/getList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eOrderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eOrderBy", eOrderBy));
        }

        if (iRowMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iRowMax", iRowMax));
        }

        if (iRowOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iRowOffset", iRowOffset));
        }

        if (sFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sFilter", sFilter));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apikeyGetListV1ValidateBeforeCall(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter, final ApiCallback _callback) throws ApiException {
        return apikeyGetListV1Call(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, _callback);

    }

    /**
     * Retrieve Apikey list
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---|
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional, default to 10000)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return ApikeyGetListV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public ApikeyGetListV1Response apikeyGetListV1(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter) throws ApiException {
        ApiResponse<ApikeyGetListV1Response> localVarResp = apikeyGetListV1WithHttpInfo(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter);
        return localVarResp.getData();
    }

    /**
     * Retrieve Apikey list
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---|
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional, default to 10000)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return ApiResponse&lt;ApikeyGetListV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApikeyGetListV1Response> apikeyGetListV1WithHttpInfo(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter) throws ApiException {
        okhttp3.Call localVarCall = apikeyGetListV1ValidateBeforeCall(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, null);
        Type localVarReturnType = new TypeToken<ApikeyGetListV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Apikey list (asynchronously)
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---|
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional, default to 10000)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apikeyGetListV1Async(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter, final ApiCallback<ApikeyGetListV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apikeyGetListV1ValidateBeforeCall(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, _callback);
        Type localVarReturnType = new TypeToken<ApikeyGetListV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apikeyGetObjectV2
     * @param pkiApikeyID The unique ID of the Apikey (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apikeyGetObjectV2Call(Integer pkiApikeyID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/object/apikey/{pkiApikeyID}"
            .replace("{" + "pkiApikeyID" + "}", localVarApiClient.escapeString(pkiApikeyID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apikeyGetObjectV2ValidateBeforeCall(Integer pkiApikeyID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiApikeyID' is set
        if (pkiApikeyID == null) {
            throw new ApiException("Missing the required parameter 'pkiApikeyID' when calling apikeyGetObjectV2(Async)");
        }

        return apikeyGetObjectV2Call(pkiApikeyID, _callback);

    }

    /**
     * Retrieve an existing Apikey
     * 
     * @param pkiApikeyID The unique ID of the Apikey (required)
     * @return ApikeyGetObjectV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApikeyGetObjectV2Response apikeyGetObjectV2(Integer pkiApikeyID) throws ApiException {
        ApiResponse<ApikeyGetObjectV2Response> localVarResp = apikeyGetObjectV2WithHttpInfo(pkiApikeyID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Apikey
     * 
     * @param pkiApikeyID The unique ID of the Apikey (required)
     * @return ApiResponse&lt;ApikeyGetObjectV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApikeyGetObjectV2Response> apikeyGetObjectV2WithHttpInfo(Integer pkiApikeyID) throws ApiException {
        okhttp3.Call localVarCall = apikeyGetObjectV2ValidateBeforeCall(pkiApikeyID, null);
        Type localVarReturnType = new TypeToken<ApikeyGetObjectV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Apikey (asynchronously)
     * 
     * @param pkiApikeyID The unique ID of the Apikey (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apikeyGetObjectV2Async(Integer pkiApikeyID, final ApiCallback<ApikeyGetObjectV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apikeyGetObjectV2ValidateBeforeCall(pkiApikeyID, _callback);
        Type localVarReturnType = new TypeToken<ApikeyGetObjectV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apikeyGetPermissionsV1
     * @param pkiApikeyID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apikeyGetPermissionsV1Call(Integer pkiApikeyID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/apikey/{pkiApikeyID}/getPermissions"
            .replace("{" + "pkiApikeyID" + "}", localVarApiClient.escapeString(pkiApikeyID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apikeyGetPermissionsV1ValidateBeforeCall(Integer pkiApikeyID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiApikeyID' is set
        if (pkiApikeyID == null) {
            throw new ApiException("Missing the required parameter 'pkiApikeyID' when calling apikeyGetPermissionsV1(Async)");
        }

        return apikeyGetPermissionsV1Call(pkiApikeyID, _callback);

    }

    /**
     * Retrieve an existing Apikey&#39;s Permissions
     * 
     * @param pkiApikeyID  (required)
     * @return ApikeyGetPermissionsV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApikeyGetPermissionsV1Response apikeyGetPermissionsV1(Integer pkiApikeyID) throws ApiException {
        ApiResponse<ApikeyGetPermissionsV1Response> localVarResp = apikeyGetPermissionsV1WithHttpInfo(pkiApikeyID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Apikey&#39;s Permissions
     * 
     * @param pkiApikeyID  (required)
     * @return ApiResponse&lt;ApikeyGetPermissionsV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApikeyGetPermissionsV1Response> apikeyGetPermissionsV1WithHttpInfo(Integer pkiApikeyID) throws ApiException {
        okhttp3.Call localVarCall = apikeyGetPermissionsV1ValidateBeforeCall(pkiApikeyID, null);
        Type localVarReturnType = new TypeToken<ApikeyGetPermissionsV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Apikey&#39;s Permissions (asynchronously)
     * 
     * @param pkiApikeyID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apikeyGetPermissionsV1Async(Integer pkiApikeyID, final ApiCallback<ApikeyGetPermissionsV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apikeyGetPermissionsV1ValidateBeforeCall(pkiApikeyID, _callback);
        Type localVarReturnType = new TypeToken<ApikeyGetPermissionsV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apikeyGetSubnetsV1
     * @param pkiApikeyID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apikeyGetSubnetsV1Call(Integer pkiApikeyID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/apikey/{pkiApikeyID}/getSubnets"
            .replace("{" + "pkiApikeyID" + "}", localVarApiClient.escapeString(pkiApikeyID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apikeyGetSubnetsV1ValidateBeforeCall(Integer pkiApikeyID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiApikeyID' is set
        if (pkiApikeyID == null) {
            throw new ApiException("Missing the required parameter 'pkiApikeyID' when calling apikeyGetSubnetsV1(Async)");
        }

        return apikeyGetSubnetsV1Call(pkiApikeyID, _callback);

    }

    /**
     * Retrieve an existing Apikey&#39;s subnets
     * 
     * @param pkiApikeyID  (required)
     * @return ApikeyGetSubnetsV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApikeyGetSubnetsV1Response apikeyGetSubnetsV1(Integer pkiApikeyID) throws ApiException {
        ApiResponse<ApikeyGetSubnetsV1Response> localVarResp = apikeyGetSubnetsV1WithHttpInfo(pkiApikeyID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Apikey&#39;s subnets
     * 
     * @param pkiApikeyID  (required)
     * @return ApiResponse&lt;ApikeyGetSubnetsV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApikeyGetSubnetsV1Response> apikeyGetSubnetsV1WithHttpInfo(Integer pkiApikeyID) throws ApiException {
        okhttp3.Call localVarCall = apikeyGetSubnetsV1ValidateBeforeCall(pkiApikeyID, null);
        Type localVarReturnType = new TypeToken<ApikeyGetSubnetsV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Apikey&#39;s subnets (asynchronously)
     * 
     * @param pkiApikeyID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apikeyGetSubnetsV1Async(Integer pkiApikeyID, final ApiCallback<ApikeyGetSubnetsV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apikeyGetSubnetsV1ValidateBeforeCall(pkiApikeyID, _callback);
        Type localVarReturnType = new TypeToken<ApikeyGetSubnetsV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apikeyRegenerateV1
     * @param pkiApikeyID  (required)
     * @param apikeyRegenerateV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apikeyRegenerateV1Call(Integer pkiApikeyID, ApikeyRegenerateV1Request apikeyRegenerateV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apikeyRegenerateV1Request;

        // create path and map variables
        String localVarPath = "/1/object/apikey/{pkiApikeyID}/regenerate"
            .replace("{" + "pkiApikeyID" + "}", localVarApiClient.escapeString(pkiApikeyID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apikeyRegenerateV1ValidateBeforeCall(Integer pkiApikeyID, ApikeyRegenerateV1Request apikeyRegenerateV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiApikeyID' is set
        if (pkiApikeyID == null) {
            throw new ApiException("Missing the required parameter 'pkiApikeyID' when calling apikeyRegenerateV1(Async)");
        }

        // verify the required parameter 'apikeyRegenerateV1Request' is set
        if (apikeyRegenerateV1Request == null) {
            throw new ApiException("Missing the required parameter 'apikeyRegenerateV1Request' when calling apikeyRegenerateV1(Async)");
        }

        return apikeyRegenerateV1Call(pkiApikeyID, apikeyRegenerateV1Request, _callback);

    }

    /**
     * Regenerate the Apikey
     * 
     * @param pkiApikeyID  (required)
     * @param apikeyRegenerateV1Request  (required)
     * @return ApikeyRegenerateV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApikeyRegenerateV1Response apikeyRegenerateV1(Integer pkiApikeyID, ApikeyRegenerateV1Request apikeyRegenerateV1Request) throws ApiException {
        ApiResponse<ApikeyRegenerateV1Response> localVarResp = apikeyRegenerateV1WithHttpInfo(pkiApikeyID, apikeyRegenerateV1Request);
        return localVarResp.getData();
    }

    /**
     * Regenerate the Apikey
     * 
     * @param pkiApikeyID  (required)
     * @param apikeyRegenerateV1Request  (required)
     * @return ApiResponse&lt;ApikeyRegenerateV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApikeyRegenerateV1Response> apikeyRegenerateV1WithHttpInfo(Integer pkiApikeyID, ApikeyRegenerateV1Request apikeyRegenerateV1Request) throws ApiException {
        okhttp3.Call localVarCall = apikeyRegenerateV1ValidateBeforeCall(pkiApikeyID, apikeyRegenerateV1Request, null);
        Type localVarReturnType = new TypeToken<ApikeyRegenerateV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Regenerate the Apikey (asynchronously)
     * 
     * @param pkiApikeyID  (required)
     * @param apikeyRegenerateV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apikeyRegenerateV1Async(Integer pkiApikeyID, ApikeyRegenerateV1Request apikeyRegenerateV1Request, final ApiCallback<ApikeyRegenerateV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apikeyRegenerateV1ValidateBeforeCall(pkiApikeyID, apikeyRegenerateV1Request, _callback);
        Type localVarReturnType = new TypeToken<ApikeyRegenerateV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
