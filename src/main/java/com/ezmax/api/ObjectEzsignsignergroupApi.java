/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api;

import eZmaxAPI.ApiCallback;
import eZmaxAPI.ApiClient;
import eZmaxAPI.ApiException;
import eZmaxAPI.ApiResponse;
import eZmaxAPI.Configuration;
import eZmaxAPI.Pair;
import eZmaxAPI.ProgressRequestBody;
import eZmaxAPI.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ezmax.api.model.CommonResponse;
import com.ezmax.api.model.CommonResponseError;
import com.ezmax.api.model.EzsignsignergroupCreateObjectV1Request;
import com.ezmax.api.model.EzsignsignergroupCreateObjectV1Response;
import com.ezmax.api.model.EzsignsignergroupEditEzsignsignergroupmembershipsV1Request;
import com.ezmax.api.model.EzsignsignergroupEditEzsignsignergroupmembershipsV1Response;
import com.ezmax.api.model.EzsignsignergroupEditObjectV1Request;
import com.ezmax.api.model.EzsignsignergroupGetEzsignsignergroupmembershipsV1Response;
import com.ezmax.api.model.EzsignsignergroupGetObjectV2Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ObjectEzsignsignergroupApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ObjectEzsignsignergroupApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ObjectEzsignsignergroupApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for ezsignsignergroupCreateObjectV1
     * @param ezsignsignergroupCreateObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignsignergroupCreateObjectV1Call(EzsignsignergroupCreateObjectV1Request ezsignsignergroupCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezsignsignergroupCreateObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezsignsignergroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsignsignergroupCreateObjectV1ValidateBeforeCall(EzsignsignergroupCreateObjectV1Request ezsignsignergroupCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ezsignsignergroupCreateObjectV1Request' is set
        if (ezsignsignergroupCreateObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezsignsignergroupCreateObjectV1Request' when calling ezsignsignergroupCreateObjectV1(Async)");
        }

        return ezsignsignergroupCreateObjectV1Call(ezsignsignergroupCreateObjectV1Request, _callback);

    }

    /**
     * Create a new Ezsignsignergroup
     * The endpoint allows to create one or many elements at once.
     * @param ezsignsignergroupCreateObjectV1Request  (required)
     * @return EzsignsignergroupCreateObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EzsignsignergroupCreateObjectV1Response ezsignsignergroupCreateObjectV1(EzsignsignergroupCreateObjectV1Request ezsignsignergroupCreateObjectV1Request) throws ApiException {
        ApiResponse<EzsignsignergroupCreateObjectV1Response> localVarResp = ezsignsignergroupCreateObjectV1WithHttpInfo(ezsignsignergroupCreateObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Create a new Ezsignsignergroup
     * The endpoint allows to create one or many elements at once.
     * @param ezsignsignergroupCreateObjectV1Request  (required)
     * @return ApiResponse&lt;EzsignsignergroupCreateObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsignsignergroupCreateObjectV1Response> ezsignsignergroupCreateObjectV1WithHttpInfo(EzsignsignergroupCreateObjectV1Request ezsignsignergroupCreateObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezsignsignergroupCreateObjectV1ValidateBeforeCall(ezsignsignergroupCreateObjectV1Request, null);
        Type localVarReturnType = new TypeToken<EzsignsignergroupCreateObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Ezsignsignergroup (asynchronously)
     * The endpoint allows to create one or many elements at once.
     * @param ezsignsignergroupCreateObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignsignergroupCreateObjectV1Async(EzsignsignergroupCreateObjectV1Request ezsignsignergroupCreateObjectV1Request, final ApiCallback<EzsignsignergroupCreateObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsignsignergroupCreateObjectV1ValidateBeforeCall(ezsignsignergroupCreateObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<EzsignsignergroupCreateObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsignsignergroupDeleteObjectV1
     * @param pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignsignergroupDeleteObjectV1Call(Integer pkiEzsignsignergroupID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/ezsignsignergroup/{pkiEzsignsignergroupID}"
            .replace("{" + "pkiEzsignsignergroupID" + "}", localVarApiClient.escapeString(pkiEzsignsignergroupID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsignsignergroupDeleteObjectV1ValidateBeforeCall(Integer pkiEzsignsignergroupID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiEzsignsignergroupID' is set
        if (pkiEzsignsignergroupID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsignsignergroupID' when calling ezsignsignergroupDeleteObjectV1(Async)");
        }

        return ezsignsignergroupDeleteObjectV1Call(pkiEzsignsignergroupID, _callback);

    }

    /**
     * Delete an existing Ezsignsignergroup
     * 
     * @param pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup (required)
     * @return CommonResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public CommonResponse ezsignsignergroupDeleteObjectV1(Integer pkiEzsignsignergroupID) throws ApiException {
        ApiResponse<CommonResponse> localVarResp = ezsignsignergroupDeleteObjectV1WithHttpInfo(pkiEzsignsignergroupID);
        return localVarResp.getData();
    }

    /**
     * Delete an existing Ezsignsignergroup
     * 
     * @param pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup (required)
     * @return ApiResponse&lt;CommonResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommonResponse> ezsignsignergroupDeleteObjectV1WithHttpInfo(Integer pkiEzsignsignergroupID) throws ApiException {
        okhttp3.Call localVarCall = ezsignsignergroupDeleteObjectV1ValidateBeforeCall(pkiEzsignsignergroupID, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an existing Ezsignsignergroup (asynchronously)
     * 
     * @param pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignsignergroupDeleteObjectV1Async(Integer pkiEzsignsignergroupID, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsignsignergroupDeleteObjectV1ValidateBeforeCall(pkiEzsignsignergroupID, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsignsignergroupEditEzsignsignergroupmembershipsV1
     * @param pkiEzsignsignergroupID  (required)
     * @param ezsignsignergroupEditEzsignsignergroupmembershipsV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignsignergroupEditEzsignsignergroupmembershipsV1Call(Integer pkiEzsignsignergroupID, EzsignsignergroupEditEzsignsignergroupmembershipsV1Request ezsignsignergroupEditEzsignsignergroupmembershipsV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezsignsignergroupEditEzsignsignergroupmembershipsV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezsignsignergroup/{pkiEzsignsignergroupID}/editEzsignsignergroupmemberships"
            .replace("{" + "pkiEzsignsignergroupID" + "}", localVarApiClient.escapeString(pkiEzsignsignergroupID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsignsignergroupEditEzsignsignergroupmembershipsV1ValidateBeforeCall(Integer pkiEzsignsignergroupID, EzsignsignergroupEditEzsignsignergroupmembershipsV1Request ezsignsignergroupEditEzsignsignergroupmembershipsV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiEzsignsignergroupID' is set
        if (pkiEzsignsignergroupID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsignsignergroupID' when calling ezsignsignergroupEditEzsignsignergroupmembershipsV1(Async)");
        }

        // verify the required parameter 'ezsignsignergroupEditEzsignsignergroupmembershipsV1Request' is set
        if (ezsignsignergroupEditEzsignsignergroupmembershipsV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezsignsignergroupEditEzsignsignergroupmembershipsV1Request' when calling ezsignsignergroupEditEzsignsignergroupmembershipsV1(Async)");
        }

        return ezsignsignergroupEditEzsignsignergroupmembershipsV1Call(pkiEzsignsignergroupID, ezsignsignergroupEditEzsignsignergroupmembershipsV1Request, _callback);

    }

    /**
     * Edit multiple Ezsignsignergroupmemberships
     * Using this endpoint, you can edit multiple Ezsignsignergroupmemberships at the same time.
     * @param pkiEzsignsignergroupID  (required)
     * @param ezsignsignergroupEditEzsignsignergroupmembershipsV1Request  (required)
     * @return EzsignsignergroupEditEzsignsignergroupmembershipsV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsignsignergroupEditEzsignsignergroupmembershipsV1Response ezsignsignergroupEditEzsignsignergroupmembershipsV1(Integer pkiEzsignsignergroupID, EzsignsignergroupEditEzsignsignergroupmembershipsV1Request ezsignsignergroupEditEzsignsignergroupmembershipsV1Request) throws ApiException {
        ApiResponse<EzsignsignergroupEditEzsignsignergroupmembershipsV1Response> localVarResp = ezsignsignergroupEditEzsignsignergroupmembershipsV1WithHttpInfo(pkiEzsignsignergroupID, ezsignsignergroupEditEzsignsignergroupmembershipsV1Request);
        return localVarResp.getData();
    }

    /**
     * Edit multiple Ezsignsignergroupmemberships
     * Using this endpoint, you can edit multiple Ezsignsignergroupmemberships at the same time.
     * @param pkiEzsignsignergroupID  (required)
     * @param ezsignsignergroupEditEzsignsignergroupmembershipsV1Request  (required)
     * @return ApiResponse&lt;EzsignsignergroupEditEzsignsignergroupmembershipsV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsignsignergroupEditEzsignsignergroupmembershipsV1Response> ezsignsignergroupEditEzsignsignergroupmembershipsV1WithHttpInfo(Integer pkiEzsignsignergroupID, EzsignsignergroupEditEzsignsignergroupmembershipsV1Request ezsignsignergroupEditEzsignsignergroupmembershipsV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezsignsignergroupEditEzsignsignergroupmembershipsV1ValidateBeforeCall(pkiEzsignsignergroupID, ezsignsignergroupEditEzsignsignergroupmembershipsV1Request, null);
        Type localVarReturnType = new TypeToken<EzsignsignergroupEditEzsignsignergroupmembershipsV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit multiple Ezsignsignergroupmemberships (asynchronously)
     * Using this endpoint, you can edit multiple Ezsignsignergroupmemberships at the same time.
     * @param pkiEzsignsignergroupID  (required)
     * @param ezsignsignergroupEditEzsignsignergroupmembershipsV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignsignergroupEditEzsignsignergroupmembershipsV1Async(Integer pkiEzsignsignergroupID, EzsignsignergroupEditEzsignsignergroupmembershipsV1Request ezsignsignergroupEditEzsignsignergroupmembershipsV1Request, final ApiCallback<EzsignsignergroupEditEzsignsignergroupmembershipsV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsignsignergroupEditEzsignsignergroupmembershipsV1ValidateBeforeCall(pkiEzsignsignergroupID, ezsignsignergroupEditEzsignsignergroupmembershipsV1Request, _callback);
        Type localVarReturnType = new TypeToken<EzsignsignergroupEditEzsignsignergroupmembershipsV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsignsignergroupEditObjectV1
     * @param pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup (required)
     * @param ezsignsignergroupEditObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignsignergroupEditObjectV1Call(Integer pkiEzsignsignergroupID, EzsignsignergroupEditObjectV1Request ezsignsignergroupEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezsignsignergroupEditObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezsignsignergroup/{pkiEzsignsignergroupID}"
            .replace("{" + "pkiEzsignsignergroupID" + "}", localVarApiClient.escapeString(pkiEzsignsignergroupID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsignsignergroupEditObjectV1ValidateBeforeCall(Integer pkiEzsignsignergroupID, EzsignsignergroupEditObjectV1Request ezsignsignergroupEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiEzsignsignergroupID' is set
        if (pkiEzsignsignergroupID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsignsignergroupID' when calling ezsignsignergroupEditObjectV1(Async)");
        }

        // verify the required parameter 'ezsignsignergroupEditObjectV1Request' is set
        if (ezsignsignergroupEditObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezsignsignergroupEditObjectV1Request' when calling ezsignsignergroupEditObjectV1(Async)");
        }

        return ezsignsignergroupEditObjectV1Call(pkiEzsignsignergroupID, ezsignsignergroupEditObjectV1Request, _callback);

    }

    /**
     * Edit an existing Ezsignsignergroup
     * 
     * @param pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup (required)
     * @param ezsignsignergroupEditObjectV1Request  (required)
     * @return CommonResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public CommonResponse ezsignsignergroupEditObjectV1(Integer pkiEzsignsignergroupID, EzsignsignergroupEditObjectV1Request ezsignsignergroupEditObjectV1Request) throws ApiException {
        ApiResponse<CommonResponse> localVarResp = ezsignsignergroupEditObjectV1WithHttpInfo(pkiEzsignsignergroupID, ezsignsignergroupEditObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Edit an existing Ezsignsignergroup
     * 
     * @param pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup (required)
     * @param ezsignsignergroupEditObjectV1Request  (required)
     * @return ApiResponse&lt;CommonResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommonResponse> ezsignsignergroupEditObjectV1WithHttpInfo(Integer pkiEzsignsignergroupID, EzsignsignergroupEditObjectV1Request ezsignsignergroupEditObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezsignsignergroupEditObjectV1ValidateBeforeCall(pkiEzsignsignergroupID, ezsignsignergroupEditObjectV1Request, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit an existing Ezsignsignergroup (asynchronously)
     * 
     * @param pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup (required)
     * @param ezsignsignergroupEditObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignsignergroupEditObjectV1Async(Integer pkiEzsignsignergroupID, EzsignsignergroupEditObjectV1Request ezsignsignergroupEditObjectV1Request, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsignsignergroupEditObjectV1ValidateBeforeCall(pkiEzsignsignergroupID, ezsignsignergroupEditObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsignsignergroupGetEzsignsignergroupmembershipsV1
     * @param pkiEzsignsignergroupID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignsignergroupGetEzsignsignergroupmembershipsV1Call(Integer pkiEzsignsignergroupID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/ezsignsignergroup/{pkiEzsignsignergroupID}/getEzsignsignergroupmemberships"
            .replace("{" + "pkiEzsignsignergroupID" + "}", localVarApiClient.escapeString(pkiEzsignsignergroupID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsignsignergroupGetEzsignsignergroupmembershipsV1ValidateBeforeCall(Integer pkiEzsignsignergroupID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiEzsignsignergroupID' is set
        if (pkiEzsignsignergroupID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsignsignergroupID' when calling ezsignsignergroupGetEzsignsignergroupmembershipsV1(Async)");
        }

        return ezsignsignergroupGetEzsignsignergroupmembershipsV1Call(pkiEzsignsignergroupID, _callback);

    }

    /**
     * Retrieve an existing Ezsignsignergroup&#39;s Ezsignsignergroupmemberships
     * 
     * @param pkiEzsignsignergroupID  (required)
     * @return EzsignsignergroupGetEzsignsignergroupmembershipsV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsignsignergroupGetEzsignsignergroupmembershipsV1Response ezsignsignergroupGetEzsignsignergroupmembershipsV1(Integer pkiEzsignsignergroupID) throws ApiException {
        ApiResponse<EzsignsignergroupGetEzsignsignergroupmembershipsV1Response> localVarResp = ezsignsignergroupGetEzsignsignergroupmembershipsV1WithHttpInfo(pkiEzsignsignergroupID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Ezsignsignergroup&#39;s Ezsignsignergroupmemberships
     * 
     * @param pkiEzsignsignergroupID  (required)
     * @return ApiResponse&lt;EzsignsignergroupGetEzsignsignergroupmembershipsV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsignsignergroupGetEzsignsignergroupmembershipsV1Response> ezsignsignergroupGetEzsignsignergroupmembershipsV1WithHttpInfo(Integer pkiEzsignsignergroupID) throws ApiException {
        okhttp3.Call localVarCall = ezsignsignergroupGetEzsignsignergroupmembershipsV1ValidateBeforeCall(pkiEzsignsignergroupID, null);
        Type localVarReturnType = new TypeToken<EzsignsignergroupGetEzsignsignergroupmembershipsV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Ezsignsignergroup&#39;s Ezsignsignergroupmemberships (asynchronously)
     * 
     * @param pkiEzsignsignergroupID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignsignergroupGetEzsignsignergroupmembershipsV1Async(Integer pkiEzsignsignergroupID, final ApiCallback<EzsignsignergroupGetEzsignsignergroupmembershipsV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsignsignergroupGetEzsignsignergroupmembershipsV1ValidateBeforeCall(pkiEzsignsignergroupID, _callback);
        Type localVarReturnType = new TypeToken<EzsignsignergroupGetEzsignsignergroupmembershipsV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsignsignergroupGetObjectV2
     * @param pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignsignergroupGetObjectV2Call(Integer pkiEzsignsignergroupID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/object/ezsignsignergroup/{pkiEzsignsignergroupID}"
            .replace("{" + "pkiEzsignsignergroupID" + "}", localVarApiClient.escapeString(pkiEzsignsignergroupID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsignsignergroupGetObjectV2ValidateBeforeCall(Integer pkiEzsignsignergroupID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiEzsignsignergroupID' is set
        if (pkiEzsignsignergroupID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsignsignergroupID' when calling ezsignsignergroupGetObjectV2(Async)");
        }

        return ezsignsignergroupGetObjectV2Call(pkiEzsignsignergroupID, _callback);

    }

    /**
     * Retrieve an existing Ezsignsignergroup
     * 
     * @param pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup (required)
     * @return EzsignsignergroupGetObjectV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsignsignergroupGetObjectV2Response ezsignsignergroupGetObjectV2(Integer pkiEzsignsignergroupID) throws ApiException {
        ApiResponse<EzsignsignergroupGetObjectV2Response> localVarResp = ezsignsignergroupGetObjectV2WithHttpInfo(pkiEzsignsignergroupID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Ezsignsignergroup
     * 
     * @param pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup (required)
     * @return ApiResponse&lt;EzsignsignergroupGetObjectV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsignsignergroupGetObjectV2Response> ezsignsignergroupGetObjectV2WithHttpInfo(Integer pkiEzsignsignergroupID) throws ApiException {
        okhttp3.Call localVarCall = ezsignsignergroupGetObjectV2ValidateBeforeCall(pkiEzsignsignergroupID, null);
        Type localVarReturnType = new TypeToken<EzsignsignergroupGetObjectV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Ezsignsignergroup (asynchronously)
     * 
     * @param pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignsignergroupGetObjectV2Async(Integer pkiEzsignsignergroupID, final ApiCallback<EzsignsignergroupGetObjectV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsignsignergroupGetObjectV2ValidateBeforeCall(pkiEzsignsignergroupID, _callback);
        Type localVarReturnType = new TypeToken<EzsignsignergroupGetObjectV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
