/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api;

import eZmaxAPI.ApiCallback;
import eZmaxAPI.ApiClient;
import eZmaxAPI.ApiException;
import eZmaxAPI.ApiResponse;
import eZmaxAPI.Configuration;
import eZmaxAPI.Pair;
import eZmaxAPI.ProgressRequestBody;
import eZmaxAPI.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ezmax.api.model.CommonResponseError;
import com.ezmax.api.model.DiscussionmessageCreateObjectV1Request;
import com.ezmax.api.model.DiscussionmessageCreateObjectV1Response;
import com.ezmax.api.model.DiscussionmessageDeleteObjectV1Response;
import com.ezmax.api.model.DiscussionmessagePatchObjectV1Request;
import com.ezmax.api.model.DiscussionmessagePatchObjectV1Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ObjectDiscussionmessageApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ObjectDiscussionmessageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ObjectDiscussionmessageApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for discussionmessageCreateObjectV1
     * @param discussionmessageCreateObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call discussionmessageCreateObjectV1Call(DiscussionmessageCreateObjectV1Request discussionmessageCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = discussionmessageCreateObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/discussionmessage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call discussionmessageCreateObjectV1ValidateBeforeCall(DiscussionmessageCreateObjectV1Request discussionmessageCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'discussionmessageCreateObjectV1Request' is set
        if (discussionmessageCreateObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'discussionmessageCreateObjectV1Request' when calling discussionmessageCreateObjectV1(Async)");
        }

        return discussionmessageCreateObjectV1Call(discussionmessageCreateObjectV1Request, _callback);

    }

    /**
     * Create a new Discussionmessage
     * The endpoint allows to create one or many elements at once.
     * @param discussionmessageCreateObjectV1Request  (required)
     * @return DiscussionmessageCreateObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public DiscussionmessageCreateObjectV1Response discussionmessageCreateObjectV1(DiscussionmessageCreateObjectV1Request discussionmessageCreateObjectV1Request) throws ApiException {
        ApiResponse<DiscussionmessageCreateObjectV1Response> localVarResp = discussionmessageCreateObjectV1WithHttpInfo(discussionmessageCreateObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Create a new Discussionmessage
     * The endpoint allows to create one or many elements at once.
     * @param discussionmessageCreateObjectV1Request  (required)
     * @return ApiResponse&lt;DiscussionmessageCreateObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiscussionmessageCreateObjectV1Response> discussionmessageCreateObjectV1WithHttpInfo(DiscussionmessageCreateObjectV1Request discussionmessageCreateObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = discussionmessageCreateObjectV1ValidateBeforeCall(discussionmessageCreateObjectV1Request, null);
        Type localVarReturnType = new TypeToken<DiscussionmessageCreateObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Discussionmessage (asynchronously)
     * The endpoint allows to create one or many elements at once.
     * @param discussionmessageCreateObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call discussionmessageCreateObjectV1Async(DiscussionmessageCreateObjectV1Request discussionmessageCreateObjectV1Request, final ApiCallback<DiscussionmessageCreateObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = discussionmessageCreateObjectV1ValidateBeforeCall(discussionmessageCreateObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<DiscussionmessageCreateObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for discussionmessageDeleteObjectV1
     * @param pkiDiscussionmessageID The unique ID of the Discussionmessage (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call discussionmessageDeleteObjectV1Call(Integer pkiDiscussionmessageID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/discussionmessage/{pkiDiscussionmessageID}"
            .replace("{" + "pkiDiscussionmessageID" + "}", localVarApiClient.escapeString(pkiDiscussionmessageID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call discussionmessageDeleteObjectV1ValidateBeforeCall(Integer pkiDiscussionmessageID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiDiscussionmessageID' is set
        if (pkiDiscussionmessageID == null) {
            throw new ApiException("Missing the required parameter 'pkiDiscussionmessageID' when calling discussionmessageDeleteObjectV1(Async)");
        }

        return discussionmessageDeleteObjectV1Call(pkiDiscussionmessageID, _callback);

    }

    /**
     * Delete an existing Discussionmessage
     * 
     * @param pkiDiscussionmessageID The unique ID of the Discussionmessage (required)
     * @return DiscussionmessageDeleteObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public DiscussionmessageDeleteObjectV1Response discussionmessageDeleteObjectV1(Integer pkiDiscussionmessageID) throws ApiException {
        ApiResponse<DiscussionmessageDeleteObjectV1Response> localVarResp = discussionmessageDeleteObjectV1WithHttpInfo(pkiDiscussionmessageID);
        return localVarResp.getData();
    }

    /**
     * Delete an existing Discussionmessage
     * 
     * @param pkiDiscussionmessageID The unique ID of the Discussionmessage (required)
     * @return ApiResponse&lt;DiscussionmessageDeleteObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiscussionmessageDeleteObjectV1Response> discussionmessageDeleteObjectV1WithHttpInfo(Integer pkiDiscussionmessageID) throws ApiException {
        okhttp3.Call localVarCall = discussionmessageDeleteObjectV1ValidateBeforeCall(pkiDiscussionmessageID, null);
        Type localVarReturnType = new TypeToken<DiscussionmessageDeleteObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an existing Discussionmessage (asynchronously)
     * 
     * @param pkiDiscussionmessageID The unique ID of the Discussionmessage (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call discussionmessageDeleteObjectV1Async(Integer pkiDiscussionmessageID, final ApiCallback<DiscussionmessageDeleteObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = discussionmessageDeleteObjectV1ValidateBeforeCall(pkiDiscussionmessageID, _callback);
        Type localVarReturnType = new TypeToken<DiscussionmessageDeleteObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for discussionmessagePatchObjectV1
     * @param pkiDiscussionmessageID The unique ID of the Discussionmessage (required)
     * @param discussionmessagePatchObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call discussionmessagePatchObjectV1Call(Integer pkiDiscussionmessageID, DiscussionmessagePatchObjectV1Request discussionmessagePatchObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = discussionmessagePatchObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/discussionmessage/{pkiDiscussionmessageID}"
            .replace("{" + "pkiDiscussionmessageID" + "}", localVarApiClient.escapeString(pkiDiscussionmessageID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call discussionmessagePatchObjectV1ValidateBeforeCall(Integer pkiDiscussionmessageID, DiscussionmessagePatchObjectV1Request discussionmessagePatchObjectV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiDiscussionmessageID' is set
        if (pkiDiscussionmessageID == null) {
            throw new ApiException("Missing the required parameter 'pkiDiscussionmessageID' when calling discussionmessagePatchObjectV1(Async)");
        }

        // verify the required parameter 'discussionmessagePatchObjectV1Request' is set
        if (discussionmessagePatchObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'discussionmessagePatchObjectV1Request' when calling discussionmessagePatchObjectV1(Async)");
        }

        return discussionmessagePatchObjectV1Call(pkiDiscussionmessageID, discussionmessagePatchObjectV1Request, _callback);

    }

    /**
     * Patch an existing Discussionmessage
     * 
     * @param pkiDiscussionmessageID The unique ID of the Discussionmessage (required)
     * @param discussionmessagePatchObjectV1Request  (required)
     * @return DiscussionmessagePatchObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public DiscussionmessagePatchObjectV1Response discussionmessagePatchObjectV1(Integer pkiDiscussionmessageID, DiscussionmessagePatchObjectV1Request discussionmessagePatchObjectV1Request) throws ApiException {
        ApiResponse<DiscussionmessagePatchObjectV1Response> localVarResp = discussionmessagePatchObjectV1WithHttpInfo(pkiDiscussionmessageID, discussionmessagePatchObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Patch an existing Discussionmessage
     * 
     * @param pkiDiscussionmessageID The unique ID of the Discussionmessage (required)
     * @param discussionmessagePatchObjectV1Request  (required)
     * @return ApiResponse&lt;DiscussionmessagePatchObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiscussionmessagePatchObjectV1Response> discussionmessagePatchObjectV1WithHttpInfo(Integer pkiDiscussionmessageID, DiscussionmessagePatchObjectV1Request discussionmessagePatchObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = discussionmessagePatchObjectV1ValidateBeforeCall(pkiDiscussionmessageID, discussionmessagePatchObjectV1Request, null);
        Type localVarReturnType = new TypeToken<DiscussionmessagePatchObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch an existing Discussionmessage (asynchronously)
     * 
     * @param pkiDiscussionmessageID The unique ID of the Discussionmessage (required)
     * @param discussionmessagePatchObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call discussionmessagePatchObjectV1Async(Integer pkiDiscussionmessageID, DiscussionmessagePatchObjectV1Request discussionmessagePatchObjectV1Request, final ApiCallback<DiscussionmessagePatchObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = discussionmessagePatchObjectV1ValidateBeforeCall(pkiDiscussionmessageID, discussionmessagePatchObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<DiscussionmessagePatchObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
