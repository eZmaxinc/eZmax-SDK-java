/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.MultilingualNotificationtestName;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Notificationtest Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-29T20:03:52.410924679Z[Etc/UTC]")
public class NotificationtestResponse {
  public static final String SERIALIZED_NAME_PKI_NOTIFICATIONTEST_I_D = "pkiNotificationtestID";
  @SerializedName(SERIALIZED_NAME_PKI_NOTIFICATIONTEST_I_D)
  private Integer pkiNotificationtestID;

  public static final String SERIALIZED_NAME_OBJ_NOTIFICATIONTEST_NAME = "objNotificationtestName";
  @SerializedName(SERIALIZED_NAME_OBJ_NOTIFICATIONTEST_NAME)
  private MultilingualNotificationtestName objNotificationtestName;

  public static final String SERIALIZED_NAME_FKI_NOTIFICATIONSUBSECTION_I_D = "fkiNotificationsubsectionID";
  @SerializedName(SERIALIZED_NAME_FKI_NOTIFICATIONSUBSECTION_I_D)
  private Integer fkiNotificationsubsectionID;

  public static final String SERIALIZED_NAME_S_NOTIFICATIONTEST_FUNCTION = "sNotificationtestFunction";
  @SerializedName(SERIALIZED_NAME_S_NOTIFICATIONTEST_FUNCTION)
  private String sNotificationtestFunction;

  public static final String SERIALIZED_NAME_S_NOTIFICATIONTEST_NAME_X = "sNotificationtestNameX";
  @SerializedName(SERIALIZED_NAME_S_NOTIFICATIONTEST_NAME_X)
  private String sNotificationtestNameX;

  public NotificationtestResponse() {
  }

  public NotificationtestResponse pkiNotificationtestID(Integer pkiNotificationtestID) {
    
    this.pkiNotificationtestID = pkiNotificationtestID;
    return this;
  }

   /**
   * The unique ID of the Notificationtest
   * minimum: 0
   * @return pkiNotificationtestID
  **/
  @javax.annotation.Nonnull
  public Integer getPkiNotificationtestID() {
    return pkiNotificationtestID;
  }


  public void setPkiNotificationtestID(Integer pkiNotificationtestID) {
    this.pkiNotificationtestID = pkiNotificationtestID;
  }


  public NotificationtestResponse objNotificationtestName(MultilingualNotificationtestName objNotificationtestName) {
    
    this.objNotificationtestName = objNotificationtestName;
    return this;
  }

   /**
   * Get objNotificationtestName
   * @return objNotificationtestName
  **/
  @javax.annotation.Nonnull
  public MultilingualNotificationtestName getObjNotificationtestName() {
    return objNotificationtestName;
  }


  public void setObjNotificationtestName(MultilingualNotificationtestName objNotificationtestName) {
    this.objNotificationtestName = objNotificationtestName;
  }


  public NotificationtestResponse fkiNotificationsubsectionID(Integer fkiNotificationsubsectionID) {
    
    this.fkiNotificationsubsectionID = fkiNotificationsubsectionID;
    return this;
  }

   /**
   * The unique ID of the Notificationsubsection
   * minimum: 0
   * @return fkiNotificationsubsectionID
  **/
  @javax.annotation.Nonnull
  public Integer getFkiNotificationsubsectionID() {
    return fkiNotificationsubsectionID;
  }


  public void setFkiNotificationsubsectionID(Integer fkiNotificationsubsectionID) {
    this.fkiNotificationsubsectionID = fkiNotificationsubsectionID;
  }


  public NotificationtestResponse sNotificationtestFunction(String sNotificationtestFunction) {
    
    this.sNotificationtestFunction = sNotificationtestFunction;
    return this;
  }

   /**
   * The function name of the Notificationtest
   * @return sNotificationtestFunction
  **/
  @javax.annotation.Nonnull
  public String getsNotificationtestFunction() {
    return sNotificationtestFunction;
  }


  public void setsNotificationtestFunction(String sNotificationtestFunction) {
    this.sNotificationtestFunction = sNotificationtestFunction;
  }


  public NotificationtestResponse sNotificationtestNameX(String sNotificationtestNameX) {
    
    this.sNotificationtestNameX = sNotificationtestNameX;
    return this;
  }

   /**
   * The name of the Notificationtest in the language of the requester
   * @return sNotificationtestNameX
  **/
  @javax.annotation.Nonnull
  public String getsNotificationtestNameX() {
    return sNotificationtestNameX;
  }


  public void setsNotificationtestNameX(String sNotificationtestNameX) {
    this.sNotificationtestNameX = sNotificationtestNameX;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationtestResponse notificationtestResponse = (NotificationtestResponse) o;
    return Objects.equals(this.pkiNotificationtestID, notificationtestResponse.pkiNotificationtestID) &&
        Objects.equals(this.objNotificationtestName, notificationtestResponse.objNotificationtestName) &&
        Objects.equals(this.fkiNotificationsubsectionID, notificationtestResponse.fkiNotificationsubsectionID) &&
        Objects.equals(this.sNotificationtestFunction, notificationtestResponse.sNotificationtestFunction) &&
        Objects.equals(this.sNotificationtestNameX, notificationtestResponse.sNotificationtestNameX);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiNotificationtestID, objNotificationtestName, fkiNotificationsubsectionID, sNotificationtestFunction, sNotificationtestNameX);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationtestResponse {\n");
    sb.append("    pkiNotificationtestID: ").append(toIndentedString(pkiNotificationtestID)).append("\n");
    sb.append("    objNotificationtestName: ").append(toIndentedString(objNotificationtestName)).append("\n");
    sb.append("    fkiNotificationsubsectionID: ").append(toIndentedString(fkiNotificationsubsectionID)).append("\n");
    sb.append("    sNotificationtestFunction: ").append(toIndentedString(sNotificationtestFunction)).append("\n");
    sb.append("    sNotificationtestNameX: ").append(toIndentedString(sNotificationtestNameX)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiNotificationtestID");
    openapiFields.add("objNotificationtestName");
    openapiFields.add("fkiNotificationsubsectionID");
    openapiFields.add("sNotificationtestFunction");
    openapiFields.add("sNotificationtestNameX");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiNotificationtestID");
    openapiRequiredFields.add("objNotificationtestName");
    openapiRequiredFields.add("fkiNotificationsubsectionID");
    openapiRequiredFields.add("sNotificationtestFunction");
    openapiRequiredFields.add("sNotificationtestNameX");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to NotificationtestResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NotificationtestResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NotificationtestResponse is not found in the empty JSON string", NotificationtestResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NotificationtestResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NotificationtestResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NotificationtestResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `objNotificationtestName`
      MultilingualNotificationtestName.validateJsonElement(jsonObj.get("objNotificationtestName"));
      if (!jsonObj.get("sNotificationtestFunction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sNotificationtestFunction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sNotificationtestFunction").toString()));
      }
      if (!jsonObj.get("sNotificationtestNameX").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sNotificationtestNameX` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sNotificationtestNameX").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NotificationtestResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NotificationtestResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NotificationtestResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NotificationtestResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<NotificationtestResponse>() {
           @Override
           public void write(JsonWriter out, NotificationtestResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NotificationtestResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NotificationtestResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NotificationtestResponse
  * @throws IOException if the JSON string is invalid with respect to NotificationtestResponse
  */
  public static NotificationtestResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NotificationtestResponse.class);
  }

 /**
  * Convert an instance of NotificationtestResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

