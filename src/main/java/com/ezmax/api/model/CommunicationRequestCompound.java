/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.CommunicationexternalrecipientRequestCompound;
import com.ezmax.api.model.CommunicationrecipientRequestCompound;
import com.ezmax.api.model.CommunicationreferenceRequestCompound;
import com.ezmax.api.model.CustomCommunicationattachmentRequest;
import com.ezmax.api.model.CustomCommunicationsenderRequest;
import com.ezmax.api.model.FieldECommunicationImportance;
import com.ezmax.api.model.FieldECommunicationType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * Request for POST /1/object/communication
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-28T20:00:03.371436717Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class CommunicationRequestCompound {
  public static final String SERIALIZED_NAME_PKI_COMMUNICATION_I_D = "pkiCommunicationID";
  @SerializedName(SERIALIZED_NAME_PKI_COMMUNICATION_I_D)
  private Integer pkiCommunicationID;

  public static final String SERIALIZED_NAME_E_COMMUNICATION_IMPORTANCE = "eCommunicationImportance";
  @SerializedName(SERIALIZED_NAME_E_COMMUNICATION_IMPORTANCE)
  private FieldECommunicationImportance eCommunicationImportance;

  public static final String SERIALIZED_NAME_E_COMMUNICATION_TYPE = "eCommunicationType";
  @SerializedName(SERIALIZED_NAME_E_COMMUNICATION_TYPE)
  private FieldECommunicationType eCommunicationType;

  public static final String SERIALIZED_NAME_OBJ_COMMUNICATIONSENDER = "objCommunicationsender";
  @SerializedName(SERIALIZED_NAME_OBJ_COMMUNICATIONSENDER)
  private CustomCommunicationsenderRequest objCommunicationsender;

  public static final String SERIALIZED_NAME_S_COMMUNICATION_SUBJECT = "sCommunicationSubject";
  @SerializedName(SERIALIZED_NAME_S_COMMUNICATION_SUBJECT)
  private String sCommunicationSubject;

  public static final String SERIALIZED_NAME_T_COMMUNICATION_BODY = "tCommunicationBody";
  @SerializedName(SERIALIZED_NAME_T_COMMUNICATION_BODY)
  private String tCommunicationBody;

  public static final String SERIALIZED_NAME_B_COMMUNICATION_PRIVATE = "bCommunicationPrivate";
  @SerializedName(SERIALIZED_NAME_B_COMMUNICATION_PRIVATE)
  private Boolean bCommunicationPrivate;

  /**
   * How the attachment should be included in the email.   Only used if eCommunicationType is **Email**
   */
  @JsonAdapter(ECommunicationAttachmenttypeEnum.Adapter.class)
  public enum ECommunicationAttachmenttypeEnum {
    ATTACHMENT("Attachment"),
    
    URL("Url");

    private String value;

    ECommunicationAttachmenttypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ECommunicationAttachmenttypeEnum fromValue(String value) {
      for (ECommunicationAttachmenttypeEnum b : ECommunicationAttachmenttypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ECommunicationAttachmenttypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ECommunicationAttachmenttypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ECommunicationAttachmenttypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ECommunicationAttachmenttypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ECommunicationAttachmenttypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_E_COMMUNICATION_ATTACHMENTTYPE = "eCommunicationAttachmenttype";
  @SerializedName(SERIALIZED_NAME_E_COMMUNICATION_ATTACHMENTTYPE)
  private ECommunicationAttachmenttypeEnum eCommunicationAttachmenttype;

  public static final String SERIALIZED_NAME_I_COMMUNICATION_ATTACHMENTLINKEXPIRATION = "iCommunicationAttachmentlinkexpiration";
  @SerializedName(SERIALIZED_NAME_I_COMMUNICATION_ATTACHMENTLINKEXPIRATION)
  private Integer iCommunicationAttachmentlinkexpiration;

  public static final String SERIALIZED_NAME_B_COMMUNICATION_READRECEIPT = "bCommunicationReadreceipt";
  @SerializedName(SERIALIZED_NAME_B_COMMUNICATION_READRECEIPT)
  private Boolean bCommunicationReadreceipt;

  public static final String SERIALIZED_NAME_A_OBJ_COMMUNICATIONATTACHMENT = "a_objCommunicationattachment";
  @SerializedName(SERIALIZED_NAME_A_OBJ_COMMUNICATIONATTACHMENT)
  private List<CustomCommunicationattachmentRequest> aObjCommunicationattachment = new ArrayList<>();

  public static final String SERIALIZED_NAME_A_OBJ_COMMUNICATIONRECIPIENT = "a_objCommunicationrecipient";
  @SerializedName(SERIALIZED_NAME_A_OBJ_COMMUNICATIONRECIPIENT)
  private List<CommunicationrecipientRequestCompound> aObjCommunicationrecipient = new ArrayList<>();

  public static final String SERIALIZED_NAME_A_OBJ_COMMUNICATIONREFERENCE = "a_objCommunicationreference";
  @SerializedName(SERIALIZED_NAME_A_OBJ_COMMUNICATIONREFERENCE)
  private List<CommunicationreferenceRequestCompound> aObjCommunicationreference = new ArrayList<>();

  public static final String SERIALIZED_NAME_A_OBJ_COMMUNICATIONEXTERNALRECIPIENT = "a_objCommunicationexternalrecipient";
  @SerializedName(SERIALIZED_NAME_A_OBJ_COMMUNICATIONEXTERNALRECIPIENT)
  private List<CommunicationexternalrecipientRequestCompound> aObjCommunicationexternalrecipient = new ArrayList<>();

  public CommunicationRequestCompound() {
  }

  public CommunicationRequestCompound pkiCommunicationID(Integer pkiCommunicationID) {
    this.pkiCommunicationID = pkiCommunicationID;
    return this;
  }

   /**
   * The unique ID of the Communication.
   * minimum: 0
   * @return pkiCommunicationID
  **/
  @javax.annotation.Nullable
  public Integer getPkiCommunicationID() {
    return pkiCommunicationID;
  }

  public void setPkiCommunicationID(Integer pkiCommunicationID) {
    this.pkiCommunicationID = pkiCommunicationID;
  }


  public CommunicationRequestCompound eCommunicationImportance(FieldECommunicationImportance eCommunicationImportance) {
    this.eCommunicationImportance = eCommunicationImportance;
    return this;
  }

   /**
   * Get eCommunicationImportance
   * @return eCommunicationImportance
  **/
  @javax.annotation.Nullable
  public FieldECommunicationImportance geteCommunicationImportance() {
    return eCommunicationImportance;
  }

  public void seteCommunicationImportance(FieldECommunicationImportance eCommunicationImportance) {
    this.eCommunicationImportance = eCommunicationImportance;
  }


  public CommunicationRequestCompound eCommunicationType(FieldECommunicationType eCommunicationType) {
    this.eCommunicationType = eCommunicationType;
    return this;
  }

   /**
   * Get eCommunicationType
   * @return eCommunicationType
  **/
  @javax.annotation.Nonnull
  public FieldECommunicationType geteCommunicationType() {
    return eCommunicationType;
  }

  public void seteCommunicationType(FieldECommunicationType eCommunicationType) {
    this.eCommunicationType = eCommunicationType;
  }


  public CommunicationRequestCompound objCommunicationsender(CustomCommunicationsenderRequest objCommunicationsender) {
    this.objCommunicationsender = objCommunicationsender;
    return this;
  }

   /**
   * Get objCommunicationsender
   * @return objCommunicationsender
  **/
  @javax.annotation.Nullable
  public CustomCommunicationsenderRequest getObjCommunicationsender() {
    return objCommunicationsender;
  }

  public void setObjCommunicationsender(CustomCommunicationsenderRequest objCommunicationsender) {
    this.objCommunicationsender = objCommunicationsender;
  }


  public CommunicationRequestCompound sCommunicationSubject(String sCommunicationSubject) {
    this.sCommunicationSubject = sCommunicationSubject;
    return this;
  }

   /**
   * The subject of the Communication
   * @return sCommunicationSubject
  **/
  @javax.annotation.Nullable
  public String getsCommunicationSubject() {
    return sCommunicationSubject;
  }

  public void setsCommunicationSubject(String sCommunicationSubject) {
    this.sCommunicationSubject = sCommunicationSubject;
  }


  public CommunicationRequestCompound tCommunicationBody(String tCommunicationBody) {
    this.tCommunicationBody = tCommunicationBody;
    return this;
  }

   /**
   * The Body of the Communication
   * @return tCommunicationBody
  **/
  @javax.annotation.Nonnull
  public String gettCommunicationBody() {
    return tCommunicationBody;
  }

  public void settCommunicationBody(String tCommunicationBody) {
    this.tCommunicationBody = tCommunicationBody;
  }


  public CommunicationRequestCompound bCommunicationPrivate(Boolean bCommunicationPrivate) {
    this.bCommunicationPrivate = bCommunicationPrivate;
    return this;
  }

   /**
   * Whether the Communication is private or not
   * @return bCommunicationPrivate
  **/
  @javax.annotation.Nonnull
  public Boolean getbCommunicationPrivate() {
    return bCommunicationPrivate;
  }

  public void setbCommunicationPrivate(Boolean bCommunicationPrivate) {
    this.bCommunicationPrivate = bCommunicationPrivate;
  }


  public CommunicationRequestCompound eCommunicationAttachmenttype(ECommunicationAttachmenttypeEnum eCommunicationAttachmenttype) {
    this.eCommunicationAttachmenttype = eCommunicationAttachmenttype;
    return this;
  }

   /**
   * How the attachment should be included in the email.   Only used if eCommunicationType is **Email**
   * @return eCommunicationAttachmenttype
  **/
  @javax.annotation.Nullable
  public ECommunicationAttachmenttypeEnum geteCommunicationAttachmenttype() {
    return eCommunicationAttachmenttype;
  }

  public void seteCommunicationAttachmenttype(ECommunicationAttachmenttypeEnum eCommunicationAttachmenttype) {
    this.eCommunicationAttachmenttype = eCommunicationAttachmenttype;
  }


  public CommunicationRequestCompound iCommunicationAttachmentlinkexpiration(Integer iCommunicationAttachmentlinkexpiration) {
    this.iCommunicationAttachmentlinkexpiration = iCommunicationAttachmentlinkexpiration;
    return this;
  }

   /**
   * The number of days before the attachment link expired.   Only used if eCommunicationType is **Email** and eCommunicationattachmentType is **Link**
   * minimum: 1
   * maximum: 30
   * @return iCommunicationAttachmentlinkexpiration
  **/
  @javax.annotation.Nullable
  public Integer getiCommunicationAttachmentlinkexpiration() {
    return iCommunicationAttachmentlinkexpiration;
  }

  public void setiCommunicationAttachmentlinkexpiration(Integer iCommunicationAttachmentlinkexpiration) {
    this.iCommunicationAttachmentlinkexpiration = iCommunicationAttachmentlinkexpiration;
  }


  public CommunicationRequestCompound bCommunicationReadreceipt(Boolean bCommunicationReadreceipt) {
    this.bCommunicationReadreceipt = bCommunicationReadreceipt;
    return this;
  }

   /**
   * Whether we ask for a read receipt or not.
   * @return bCommunicationReadreceipt
  **/
  @javax.annotation.Nullable
  public Boolean getbCommunicationReadreceipt() {
    return bCommunicationReadreceipt;
  }

  public void setbCommunicationReadreceipt(Boolean bCommunicationReadreceipt) {
    this.bCommunicationReadreceipt = bCommunicationReadreceipt;
  }


  public CommunicationRequestCompound aObjCommunicationattachment(List<CustomCommunicationattachmentRequest> aObjCommunicationattachment) {
    this.aObjCommunicationattachment = aObjCommunicationattachment;
    return this;
  }

  public CommunicationRequestCompound addAObjCommunicationattachmentItem(CustomCommunicationattachmentRequest aObjCommunicationattachmentItem) {
    if (this.aObjCommunicationattachment == null) {
      this.aObjCommunicationattachment = new ArrayList<>();
    }
    this.aObjCommunicationattachment.add(aObjCommunicationattachmentItem);
    return this;
  }

   /**
   * Get aObjCommunicationattachment
   * @return aObjCommunicationattachment
  **/
  @javax.annotation.Nonnull
  public List<CustomCommunicationattachmentRequest> getaObjCommunicationattachment() {
    return aObjCommunicationattachment;
  }

  public void setaObjCommunicationattachment(List<CustomCommunicationattachmentRequest> aObjCommunicationattachment) {
    this.aObjCommunicationattachment = aObjCommunicationattachment;
  }


  public CommunicationRequestCompound aObjCommunicationrecipient(List<CommunicationrecipientRequestCompound> aObjCommunicationrecipient) {
    this.aObjCommunicationrecipient = aObjCommunicationrecipient;
    return this;
  }

  public CommunicationRequestCompound addAObjCommunicationrecipientItem(CommunicationrecipientRequestCompound aObjCommunicationrecipientItem) {
    if (this.aObjCommunicationrecipient == null) {
      this.aObjCommunicationrecipient = new ArrayList<>();
    }
    this.aObjCommunicationrecipient.add(aObjCommunicationrecipientItem);
    return this;
  }

   /**
   * Get aObjCommunicationrecipient
   * @return aObjCommunicationrecipient
  **/
  @javax.annotation.Nonnull
  public List<CommunicationrecipientRequestCompound> getaObjCommunicationrecipient() {
    return aObjCommunicationrecipient;
  }

  public void setaObjCommunicationrecipient(List<CommunicationrecipientRequestCompound> aObjCommunicationrecipient) {
    this.aObjCommunicationrecipient = aObjCommunicationrecipient;
  }


  public CommunicationRequestCompound aObjCommunicationreference(List<CommunicationreferenceRequestCompound> aObjCommunicationreference) {
    this.aObjCommunicationreference = aObjCommunicationreference;
    return this;
  }

  public CommunicationRequestCompound addAObjCommunicationreferenceItem(CommunicationreferenceRequestCompound aObjCommunicationreferenceItem) {
    if (this.aObjCommunicationreference == null) {
      this.aObjCommunicationreference = new ArrayList<>();
    }
    this.aObjCommunicationreference.add(aObjCommunicationreferenceItem);
    return this;
  }

   /**
   * Get aObjCommunicationreference
   * @return aObjCommunicationreference
  **/
  @javax.annotation.Nonnull
  public List<CommunicationreferenceRequestCompound> getaObjCommunicationreference() {
    return aObjCommunicationreference;
  }

  public void setaObjCommunicationreference(List<CommunicationreferenceRequestCompound> aObjCommunicationreference) {
    this.aObjCommunicationreference = aObjCommunicationreference;
  }


  public CommunicationRequestCompound aObjCommunicationexternalrecipient(List<CommunicationexternalrecipientRequestCompound> aObjCommunicationexternalrecipient) {
    this.aObjCommunicationexternalrecipient = aObjCommunicationexternalrecipient;
    return this;
  }

  public CommunicationRequestCompound addAObjCommunicationexternalrecipientItem(CommunicationexternalrecipientRequestCompound aObjCommunicationexternalrecipientItem) {
    if (this.aObjCommunicationexternalrecipient == null) {
      this.aObjCommunicationexternalrecipient = new ArrayList<>();
    }
    this.aObjCommunicationexternalrecipient.add(aObjCommunicationexternalrecipientItem);
    return this;
  }

   /**
   * Get aObjCommunicationexternalrecipient
   * @return aObjCommunicationexternalrecipient
  **/
  @javax.annotation.Nonnull
  public List<CommunicationexternalrecipientRequestCompound> getaObjCommunicationexternalrecipient() {
    return aObjCommunicationexternalrecipient;
  }

  public void setaObjCommunicationexternalrecipient(List<CommunicationexternalrecipientRequestCompound> aObjCommunicationexternalrecipient) {
    this.aObjCommunicationexternalrecipient = aObjCommunicationexternalrecipient;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommunicationRequestCompound communicationRequestCompound = (CommunicationRequestCompound) o;
    return Objects.equals(this.pkiCommunicationID, communicationRequestCompound.pkiCommunicationID) &&
        Objects.equals(this.eCommunicationImportance, communicationRequestCompound.eCommunicationImportance) &&
        Objects.equals(this.eCommunicationType, communicationRequestCompound.eCommunicationType) &&
        Objects.equals(this.objCommunicationsender, communicationRequestCompound.objCommunicationsender) &&
        Objects.equals(this.sCommunicationSubject, communicationRequestCompound.sCommunicationSubject) &&
        Objects.equals(this.tCommunicationBody, communicationRequestCompound.tCommunicationBody) &&
        Objects.equals(this.bCommunicationPrivate, communicationRequestCompound.bCommunicationPrivate) &&
        Objects.equals(this.eCommunicationAttachmenttype, communicationRequestCompound.eCommunicationAttachmenttype) &&
        Objects.equals(this.iCommunicationAttachmentlinkexpiration, communicationRequestCompound.iCommunicationAttachmentlinkexpiration) &&
        Objects.equals(this.bCommunicationReadreceipt, communicationRequestCompound.bCommunicationReadreceipt) &&
        Objects.equals(this.aObjCommunicationattachment, communicationRequestCompound.aObjCommunicationattachment) &&
        Objects.equals(this.aObjCommunicationrecipient, communicationRequestCompound.aObjCommunicationrecipient) &&
        Objects.equals(this.aObjCommunicationreference, communicationRequestCompound.aObjCommunicationreference) &&
        Objects.equals(this.aObjCommunicationexternalrecipient, communicationRequestCompound.aObjCommunicationexternalrecipient);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiCommunicationID, eCommunicationImportance, eCommunicationType, objCommunicationsender, sCommunicationSubject, tCommunicationBody, bCommunicationPrivate, eCommunicationAttachmenttype, iCommunicationAttachmentlinkexpiration, bCommunicationReadreceipt, aObjCommunicationattachment, aObjCommunicationrecipient, aObjCommunicationreference, aObjCommunicationexternalrecipient);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommunicationRequestCompound {\n");
    sb.append("    pkiCommunicationID: ").append(toIndentedString(pkiCommunicationID)).append("\n");
    sb.append("    eCommunicationImportance: ").append(toIndentedString(eCommunicationImportance)).append("\n");
    sb.append("    eCommunicationType: ").append(toIndentedString(eCommunicationType)).append("\n");
    sb.append("    objCommunicationsender: ").append(toIndentedString(objCommunicationsender)).append("\n");
    sb.append("    sCommunicationSubject: ").append(toIndentedString(sCommunicationSubject)).append("\n");
    sb.append("    tCommunicationBody: ").append(toIndentedString(tCommunicationBody)).append("\n");
    sb.append("    bCommunicationPrivate: ").append(toIndentedString(bCommunicationPrivate)).append("\n");
    sb.append("    eCommunicationAttachmenttype: ").append(toIndentedString(eCommunicationAttachmenttype)).append("\n");
    sb.append("    iCommunicationAttachmentlinkexpiration: ").append(toIndentedString(iCommunicationAttachmentlinkexpiration)).append("\n");
    sb.append("    bCommunicationReadreceipt: ").append(toIndentedString(bCommunicationReadreceipt)).append("\n");
    sb.append("    aObjCommunicationattachment: ").append(toIndentedString(aObjCommunicationattachment)).append("\n");
    sb.append("    aObjCommunicationrecipient: ").append(toIndentedString(aObjCommunicationrecipient)).append("\n");
    sb.append("    aObjCommunicationreference: ").append(toIndentedString(aObjCommunicationreference)).append("\n");
    sb.append("    aObjCommunicationexternalrecipient: ").append(toIndentedString(aObjCommunicationexternalrecipient)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiCommunicationID");
    openapiFields.add("eCommunicationImportance");
    openapiFields.add("eCommunicationType");
    openapiFields.add("objCommunicationsender");
    openapiFields.add("sCommunicationSubject");
    openapiFields.add("tCommunicationBody");
    openapiFields.add("bCommunicationPrivate");
    openapiFields.add("eCommunicationAttachmenttype");
    openapiFields.add("iCommunicationAttachmentlinkexpiration");
    openapiFields.add("bCommunicationReadreceipt");
    openapiFields.add("a_objCommunicationattachment");
    openapiFields.add("a_objCommunicationrecipient");
    openapiFields.add("a_objCommunicationreference");
    openapiFields.add("a_objCommunicationexternalrecipient");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("eCommunicationType");
    openapiRequiredFields.add("tCommunicationBody");
    openapiRequiredFields.add("bCommunicationPrivate");
    openapiRequiredFields.add("a_objCommunicationattachment");
    openapiRequiredFields.add("a_objCommunicationrecipient");
    openapiRequiredFields.add("a_objCommunicationreference");
    openapiRequiredFields.add("a_objCommunicationexternalrecipient");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CommunicationRequestCompound
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CommunicationRequestCompound.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommunicationRequestCompound is not found in the empty JSON string", CommunicationRequestCompound.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CommunicationRequestCompound.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommunicationRequestCompound` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CommunicationRequestCompound.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `eCommunicationImportance`
      if (jsonObj.get("eCommunicationImportance") != null && !jsonObj.get("eCommunicationImportance").isJsonNull()) {
        FieldECommunicationImportance.validateJsonElement(jsonObj.get("eCommunicationImportance"));
      }
      // validate the required field `eCommunicationType`
      FieldECommunicationType.validateJsonElement(jsonObj.get("eCommunicationType"));
      // validate the optional field `objCommunicationsender`
      if (jsonObj.get("objCommunicationsender") != null && !jsonObj.get("objCommunicationsender").isJsonNull()) {
        CustomCommunicationsenderRequest.validateJsonElement(jsonObj.get("objCommunicationsender"));
      }
      if ((jsonObj.get("sCommunicationSubject") != null && !jsonObj.get("sCommunicationSubject").isJsonNull()) && !jsonObj.get("sCommunicationSubject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sCommunicationSubject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sCommunicationSubject").toString()));
      }
      if (!jsonObj.get("tCommunicationBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tCommunicationBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tCommunicationBody").toString()));
      }
      if ((jsonObj.get("eCommunicationAttachmenttype") != null && !jsonObj.get("eCommunicationAttachmenttype").isJsonNull()) && !jsonObj.get("eCommunicationAttachmenttype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eCommunicationAttachmenttype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eCommunicationAttachmenttype").toString()));
      }
      // validate the optional field `eCommunicationAttachmenttype`
      if (jsonObj.get("eCommunicationAttachmenttype") != null && !jsonObj.get("eCommunicationAttachmenttype").isJsonNull()) {
        ECommunicationAttachmenttypeEnum.validateJsonElement(jsonObj.get("eCommunicationAttachmenttype"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("a_objCommunicationattachment").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_objCommunicationattachment` to be an array in the JSON string but got `%s`", jsonObj.get("a_objCommunicationattachment").toString()));
      }

      JsonArray jsonArrayaObjCommunicationattachment = jsonObj.getAsJsonArray("a_objCommunicationattachment");
      // validate the required field `a_objCommunicationattachment` (array)
      for (int i = 0; i < jsonArrayaObjCommunicationattachment.size(); i++) {
        CustomCommunicationattachmentRequest.validateJsonElement(jsonArrayaObjCommunicationattachment.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("a_objCommunicationrecipient").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_objCommunicationrecipient` to be an array in the JSON string but got `%s`", jsonObj.get("a_objCommunicationrecipient").toString()));
      }

      JsonArray jsonArrayaObjCommunicationrecipient = jsonObj.getAsJsonArray("a_objCommunicationrecipient");
      // validate the required field `a_objCommunicationrecipient` (array)
      for (int i = 0; i < jsonArrayaObjCommunicationrecipient.size(); i++) {
        CommunicationrecipientRequestCompound.validateJsonElement(jsonArrayaObjCommunicationrecipient.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("a_objCommunicationreference").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_objCommunicationreference` to be an array in the JSON string but got `%s`", jsonObj.get("a_objCommunicationreference").toString()));
      }

      JsonArray jsonArrayaObjCommunicationreference = jsonObj.getAsJsonArray("a_objCommunicationreference");
      // validate the required field `a_objCommunicationreference` (array)
      for (int i = 0; i < jsonArrayaObjCommunicationreference.size(); i++) {
        CommunicationreferenceRequestCompound.validateJsonElement(jsonArrayaObjCommunicationreference.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("a_objCommunicationexternalrecipient").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_objCommunicationexternalrecipient` to be an array in the JSON string but got `%s`", jsonObj.get("a_objCommunicationexternalrecipient").toString()));
      }

      JsonArray jsonArrayaObjCommunicationexternalrecipient = jsonObj.getAsJsonArray("a_objCommunicationexternalrecipient");
      // validate the required field `a_objCommunicationexternalrecipient` (array)
      for (int i = 0; i < jsonArrayaObjCommunicationexternalrecipient.size(); i++) {
        CommunicationexternalrecipientRequestCompound.validateJsonElement(jsonArrayaObjCommunicationexternalrecipient.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommunicationRequestCompound.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommunicationRequestCompound' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommunicationRequestCompound> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommunicationRequestCompound.class));

       return (TypeAdapter<T>) new TypeAdapter<CommunicationRequestCompound>() {
           @Override
           public void write(JsonWriter out, CommunicationRequestCompound value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommunicationRequestCompound read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CommunicationRequestCompound given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CommunicationRequestCompound
  * @throws IOException if the JSON string is invalid with respect to CommunicationRequestCompound
  */
  public static CommunicationRequestCompound fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommunicationRequestCompound.class);
  }

 /**
  * Convert an instance of CommunicationRequestCompound to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

