/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.CommunicationRequest;
import com.ezmax.api.model.CommunicationexternalrecipientRequestCompound;
import com.ezmax.api.model.CommunicationrecipientRequestCompound;
import com.ezmax.api.model.CommunicationreferenceRequest;
import com.ezmax.api.model.CustomCommunicationattachmentRequest;
import com.ezmax.api.model.CustomCommunicationsenderRequest;
import com.ezmax.api.model.FieldECommunicationImportance;
import com.ezmax.api.model.FieldECommunicationType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * Request for POST /1/object/communication
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-17T15:03:32.455495633Z[Etc/UTC]", comments = "Generator version: 7.10.0")
public class CommunicationRequestCompound extends CommunicationRequest {
  public static final String SERIALIZED_NAME_A_OBJ_COMMUNICATIONATTACHMENT = "a_objCommunicationattachment";
  @SerializedName(SERIALIZED_NAME_A_OBJ_COMMUNICATIONATTACHMENT)
  @javax.annotation.Nonnull
  private List<CustomCommunicationattachmentRequest> aObjCommunicationattachment = new ArrayList<>();

  public static final String SERIALIZED_NAME_A_OBJ_COMMUNICATIONRECIPIENT = "a_objCommunicationrecipient";
  @SerializedName(SERIALIZED_NAME_A_OBJ_COMMUNICATIONRECIPIENT)
  @javax.annotation.Nonnull
  private List<CommunicationrecipientRequestCompound> aObjCommunicationrecipient = new ArrayList<>();

  public static final String SERIALIZED_NAME_A_OBJ_COMMUNICATIONREFERENCE = "a_objCommunicationreference";
  @SerializedName(SERIALIZED_NAME_A_OBJ_COMMUNICATIONREFERENCE)
  @javax.annotation.Nonnull
  private List<CommunicationreferenceRequestCompound> aObjCommunicationreference = new ArrayList<>();

  public static final String SERIALIZED_NAME_A_OBJ_COMMUNICATIONEXTERNALRECIPIENT = "a_objCommunicationexternalrecipient";
  @SerializedName(SERIALIZED_NAME_A_OBJ_COMMUNICATIONEXTERNALRECIPIENT)
  @javax.annotation.Nonnull
  private List<CommunicationexternalrecipientRequestCompound> aObjCommunicationexternalrecipient = new ArrayList<>();

  public CommunicationRequestCompound() {
  }

  public CommunicationRequestCompound aObjCommunicationattachment(@javax.annotation.Nonnull List<CustomCommunicationattachmentRequest> aObjCommunicationattachment) {
    this.aObjCommunicationattachment = aObjCommunicationattachment;
    return this;
  }

  public CommunicationRequestCompound addAObjCommunicationattachmentItem(CustomCommunicationattachmentRequest aObjCommunicationattachmentItem) {
    if (this.aObjCommunicationattachment == null) {
      this.aObjCommunicationattachment = new ArrayList<>();
    }
    this.aObjCommunicationattachment.add(aObjCommunicationattachmentItem);
    return this;
  }

  /**
   * Get aObjCommunicationattachment
   * @return aObjCommunicationattachment
   */
  @javax.annotation.Nonnull
  public List<CustomCommunicationattachmentRequest> getaObjCommunicationattachment() {
    return aObjCommunicationattachment;
  }

  public void setaObjCommunicationattachment(@javax.annotation.Nonnull List<CustomCommunicationattachmentRequest> aObjCommunicationattachment) {
    this.aObjCommunicationattachment = aObjCommunicationattachment;
  }


  public CommunicationRequestCompound aObjCommunicationrecipient(@javax.annotation.Nonnull List<CommunicationrecipientRequestCompound> aObjCommunicationrecipient) {
    this.aObjCommunicationrecipient = aObjCommunicationrecipient;
    return this;
  }

  public CommunicationRequestCompound addAObjCommunicationrecipientItem(CommunicationrecipientRequestCompound aObjCommunicationrecipientItem) {
    if (this.aObjCommunicationrecipient == null) {
      this.aObjCommunicationrecipient = new ArrayList<>();
    }
    this.aObjCommunicationrecipient.add(aObjCommunicationrecipientItem);
    return this;
  }

  /**
   * Get aObjCommunicationrecipient
   * @return aObjCommunicationrecipient
   */
  @javax.annotation.Nonnull
  public List<CommunicationrecipientRequestCompound> getaObjCommunicationrecipient() {
    return aObjCommunicationrecipient;
  }

  public void setaObjCommunicationrecipient(@javax.annotation.Nonnull List<CommunicationrecipientRequestCompound> aObjCommunicationrecipient) {
    this.aObjCommunicationrecipient = aObjCommunicationrecipient;
  }


  public CommunicationRequestCompound aObjCommunicationreference(@javax.annotation.Nonnull List<CommunicationreferenceRequestCompound> aObjCommunicationreference) {
    this.aObjCommunicationreference = aObjCommunicationreference;
    return this;
  }

  public CommunicationRequestCompound addAObjCommunicationreferenceItem(CommunicationreferenceRequest aObjCommunicationreferenceItem) {
    if (this.aObjCommunicationreference == null) {
      this.aObjCommunicationreference = new ArrayList<>();
    }
    this.aObjCommunicationreference.add(aObjCommunicationreferenceItem);
    return this;
  }

  /**
   * Get aObjCommunicationreference
   * @return aObjCommunicationreference
   */
  @javax.annotation.Nonnull
  public List<CommunicationreferenceRequestCompound> getaObjCommunicationreference() {
    return aObjCommunicationreference;
  }

  public void setaObjCommunicationreference(@javax.annotation.Nonnull List<CommunicationreferenceRequestCompound> aObjCommunicationreference) {
    this.aObjCommunicationreference = aObjCommunicationreference;
  }


  public CommunicationRequestCompound aObjCommunicationexternalrecipient(@javax.annotation.Nonnull List<CommunicationexternalrecipientRequestCompound> aObjCommunicationexternalrecipient) {
    this.aObjCommunicationexternalrecipient = aObjCommunicationexternalrecipient;
    return this;
  }

  public CommunicationRequestCompound addAObjCommunicationexternalrecipientItem(CommunicationexternalrecipientRequestCompound aObjCommunicationexternalrecipientItem) {
    if (this.aObjCommunicationexternalrecipient == null) {
      this.aObjCommunicationexternalrecipient = new ArrayList<>();
    }
    this.aObjCommunicationexternalrecipient.add(aObjCommunicationexternalrecipientItem);
    return this;
  }

  /**
   * Get aObjCommunicationexternalrecipient
   * @return aObjCommunicationexternalrecipient
   */
  @javax.annotation.Nonnull
  public List<CommunicationexternalrecipientRequestCompound> getaObjCommunicationexternalrecipient() {
    return aObjCommunicationexternalrecipient;
  }

  public void setaObjCommunicationexternalrecipient(@javax.annotation.Nonnull List<CommunicationexternalrecipientRequestCompound> aObjCommunicationexternalrecipient) {
    this.aObjCommunicationexternalrecipient = aObjCommunicationexternalrecipient;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommunicationRequestCompound communicationRequestCompound = (CommunicationRequestCompound) o;
    return Objects.equals(this.aObjCommunicationattachment, communicationRequestCompound.aObjCommunicationattachment) &&
        Objects.equals(this.aObjCommunicationrecipient, communicationRequestCompound.aObjCommunicationrecipient) &&
        Objects.equals(this.aObjCommunicationreference, communicationRequestCompound.aObjCommunicationreference) &&
        Objects.equals(this.aObjCommunicationexternalrecipient, communicationRequestCompound.aObjCommunicationexternalrecipient) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aObjCommunicationattachment, aObjCommunicationrecipient, aObjCommunicationreference, aObjCommunicationexternalrecipient, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommunicationRequestCompound {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    aObjCommunicationattachment: ").append(toIndentedString(aObjCommunicationattachment)).append("\n");
    sb.append("    aObjCommunicationrecipient: ").append(toIndentedString(aObjCommunicationrecipient)).append("\n");
    sb.append("    aObjCommunicationreference: ").append(toIndentedString(aObjCommunicationreference)).append("\n");
    sb.append("    aObjCommunicationexternalrecipient: ").append(toIndentedString(aObjCommunicationexternalrecipient)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiCommunicationID");
    openapiFields.add("eCommunicationImportance");
    openapiFields.add("eCommunicationType");
    openapiFields.add("objCommunicationsender");
    openapiFields.add("sCommunicationSubject");
    openapiFields.add("tCommunicationBody");
    openapiFields.add("bCommunicationPrivate");
    openapiFields.add("eCommunicationAttachmenttype");
    openapiFields.add("iCommunicationAttachmentlinkexpiration");
    openapiFields.add("bCommunicationReadreceipt");
    openapiFields.add("a_objCommunicationattachment");
    openapiFields.add("a_objCommunicationrecipient");
    openapiFields.add("a_objCommunicationreference");
    openapiFields.add("a_objCommunicationexternalrecipient");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("a_objCommunicationattachment");
    openapiRequiredFields.add("a_objCommunicationrecipient");
    openapiRequiredFields.add("a_objCommunicationreference");
    openapiRequiredFields.add("a_objCommunicationexternalrecipient");
    openapiRequiredFields.add("eCommunicationType");
    openapiRequiredFields.add("tCommunicationBody");
    openapiRequiredFields.add("bCommunicationPrivate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CommunicationRequestCompound
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CommunicationRequestCompound.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommunicationRequestCompound is not found in the empty JSON string", CommunicationRequestCompound.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CommunicationRequestCompound.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommunicationRequestCompound` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CommunicationRequestCompound.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("a_objCommunicationattachment").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_objCommunicationattachment` to be an array in the JSON string but got `%s`", jsonObj.get("a_objCommunicationattachment").toString()));
      }

      JsonArray jsonArrayaObjCommunicationattachment = jsonObj.getAsJsonArray("a_objCommunicationattachment");
      // validate the required field `a_objCommunicationattachment` (array)
      for (int i = 0; i < jsonArrayaObjCommunicationattachment.size(); i++) {
        CustomCommunicationattachmentRequest.validateJsonElement(jsonArrayaObjCommunicationattachment.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("a_objCommunicationrecipient").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_objCommunicationrecipient` to be an array in the JSON string but got `%s`", jsonObj.get("a_objCommunicationrecipient").toString()));
      }

      JsonArray jsonArrayaObjCommunicationrecipient = jsonObj.getAsJsonArray("a_objCommunicationrecipient");
      // validate the required field `a_objCommunicationrecipient` (array)
      for (int i = 0; i < jsonArrayaObjCommunicationrecipient.size(); i++) {
        CommunicationrecipientRequestCompound.validateJsonElement(jsonArrayaObjCommunicationrecipient.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("a_objCommunicationreference").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_objCommunicationreference` to be an array in the JSON string but got `%s`", jsonObj.get("a_objCommunicationreference").toString()));
      }

      JsonArray jsonArrayaObjCommunicationreference = jsonObj.getAsJsonArray("a_objCommunicationreference");
      // validate the required field `a_objCommunicationreference` (array)
      for (int i = 0; i < jsonArrayaObjCommunicationreference.size(); i++) {
        CommunicationreferenceRequest.validateJsonElement(jsonArrayaObjCommunicationreference.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("a_objCommunicationexternalrecipient").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_objCommunicationexternalrecipient` to be an array in the JSON string but got `%s`", jsonObj.get("a_objCommunicationexternalrecipient").toString()));
      }

      JsonArray jsonArrayaObjCommunicationexternalrecipient = jsonObj.getAsJsonArray("a_objCommunicationexternalrecipient");
      // validate the required field `a_objCommunicationexternalrecipient` (array)
      for (int i = 0; i < jsonArrayaObjCommunicationexternalrecipient.size(); i++) {
        CommunicationexternalrecipientRequestCompound.validateJsonElement(jsonArrayaObjCommunicationexternalrecipient.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommunicationRequestCompound.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommunicationRequestCompound' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommunicationRequestCompound> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommunicationRequestCompound.class));

       return (TypeAdapter<T>) new TypeAdapter<CommunicationRequestCompound>() {
           @Override
           public void write(JsonWriter out, CommunicationRequestCompound value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommunicationRequestCompound read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CommunicationRequestCompound given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CommunicationRequestCompound
   * @throws IOException if the JSON string is invalid with respect to CommunicationRequestCompound
   */
  public static CommunicationRequestCompound fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommunicationRequestCompound.class);
  }

  /**
   * Convert an instance of CommunicationRequestCompound to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

