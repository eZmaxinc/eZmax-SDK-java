/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Custom Ezsignfoldertype Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-25T02:49:00.205387936Z[Etc/UTC]")
public class CustomEzsignfoldertypeResponse {
  public static final String SERIALIZED_NAME_PKI_EZSIGNFOLDERTYPE_I_D = "pkiEzsignfoldertypeID";
  @SerializedName(SERIALIZED_NAME_PKI_EZSIGNFOLDERTYPE_I_D)
  private Integer pkiEzsignfoldertypeID;

  public static final String SERIALIZED_NAME_S_EZSIGNFOLDERTYPE_NAME_X = "sEzsignfoldertypeNameX";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNFOLDERTYPE_NAME_X)
  private String sEzsignfoldertypeNameX;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_INCLUDEPROOFSIGNER = "bEzsignfoldertypeIncludeproofsigner";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_INCLUDEPROOFSIGNER)
  private Boolean bEzsignfoldertypeIncludeproofsigner;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_INCLUDEPROOFUSER = "bEzsignfoldertypeIncludeproofuser";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_INCLUDEPROOFUSER)
  private Boolean bEzsignfoldertypeIncludeproofuser;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_DELEGATE = "bEzsignfoldertypeDelegate";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_DELEGATE)
  private Boolean bEzsignfoldertypeDelegate;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_REASSIGN = "bEzsignfoldertypeReassign";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_REASSIGN)
  private Boolean bEzsignfoldertypeReassign;

  public CustomEzsignfoldertypeResponse() {
  }

  public CustomEzsignfoldertypeResponse pkiEzsignfoldertypeID(Integer pkiEzsignfoldertypeID) {
    
    this.pkiEzsignfoldertypeID = pkiEzsignfoldertypeID;
    return this;
  }

   /**
   * The unique ID of the Ezsignfoldertype.
   * minimum: 0
   * @return pkiEzsignfoldertypeID
  **/
  @javax.annotation.Nonnull
  public Integer getPkiEzsignfoldertypeID() {
    return pkiEzsignfoldertypeID;
  }


  public void setPkiEzsignfoldertypeID(Integer pkiEzsignfoldertypeID) {
    this.pkiEzsignfoldertypeID = pkiEzsignfoldertypeID;
  }


  public CustomEzsignfoldertypeResponse sEzsignfoldertypeNameX(String sEzsignfoldertypeNameX) {
    
    this.sEzsignfoldertypeNameX = sEzsignfoldertypeNameX;
    return this;
  }

   /**
   * The name of the Ezsignfoldertype in the language of the requester
   * @return sEzsignfoldertypeNameX
  **/
  @javax.annotation.Nonnull
  public String getsEzsignfoldertypeNameX() {
    return sEzsignfoldertypeNameX;
  }


  public void setsEzsignfoldertypeNameX(String sEzsignfoldertypeNameX) {
    this.sEzsignfoldertypeNameX = sEzsignfoldertypeNameX;
  }


  public CustomEzsignfoldertypeResponse bEzsignfoldertypeIncludeproofsigner(Boolean bEzsignfoldertypeIncludeproofsigner) {
    
    this.bEzsignfoldertypeIncludeproofsigner = bEzsignfoldertypeIncludeproofsigner;
    return this;
  }

   /**
   * Whether we include the proof with the signed Ezsigndocument for Ezsignsigners
   * @return bEzsignfoldertypeIncludeproofsigner
  **/
  @javax.annotation.Nonnull
  public Boolean getbEzsignfoldertypeIncludeproofsigner() {
    return bEzsignfoldertypeIncludeproofsigner;
  }


  public void setbEzsignfoldertypeIncludeproofsigner(Boolean bEzsignfoldertypeIncludeproofsigner) {
    this.bEzsignfoldertypeIncludeproofsigner = bEzsignfoldertypeIncludeproofsigner;
  }


  public CustomEzsignfoldertypeResponse bEzsignfoldertypeIncludeproofuser(Boolean bEzsignfoldertypeIncludeproofuser) {
    
    this.bEzsignfoldertypeIncludeproofuser = bEzsignfoldertypeIncludeproofuser;
    return this;
  }

   /**
   * Whether we include the proof with the signed Ezsigndocument for users
   * @return bEzsignfoldertypeIncludeproofuser
  **/
  @javax.annotation.Nonnull
  public Boolean getbEzsignfoldertypeIncludeproofuser() {
    return bEzsignfoldertypeIncludeproofuser;
  }


  public void setbEzsignfoldertypeIncludeproofuser(Boolean bEzsignfoldertypeIncludeproofuser) {
    this.bEzsignfoldertypeIncludeproofuser = bEzsignfoldertypeIncludeproofuser;
  }


  public CustomEzsignfoldertypeResponse bEzsignfoldertypeDelegate(Boolean bEzsignfoldertypeDelegate) {
    
    this.bEzsignfoldertypeDelegate = bEzsignfoldertypeDelegate;
    return this;
  }

   /**
   * Wheter if delegation of signature is allowed to another user or not
   * @return bEzsignfoldertypeDelegate
  **/
  @javax.annotation.Nullable
  public Boolean getbEzsignfoldertypeDelegate() {
    return bEzsignfoldertypeDelegate;
  }


  public void setbEzsignfoldertypeDelegate(Boolean bEzsignfoldertypeDelegate) {
    this.bEzsignfoldertypeDelegate = bEzsignfoldertypeDelegate;
  }


  public CustomEzsignfoldertypeResponse bEzsignfoldertypeReassign(Boolean bEzsignfoldertypeReassign) {
    
    this.bEzsignfoldertypeReassign = bEzsignfoldertypeReassign;
    return this;
  }

   /**
   * Wheter if Reassignment of signature is allowed to another signatory or not
   * @return bEzsignfoldertypeReassign
  **/
  @javax.annotation.Nullable
  public Boolean getbEzsignfoldertypeReassign() {
    return bEzsignfoldertypeReassign;
  }


  public void setbEzsignfoldertypeReassign(Boolean bEzsignfoldertypeReassign) {
    this.bEzsignfoldertypeReassign = bEzsignfoldertypeReassign;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomEzsignfoldertypeResponse customEzsignfoldertypeResponse = (CustomEzsignfoldertypeResponse) o;
    return Objects.equals(this.pkiEzsignfoldertypeID, customEzsignfoldertypeResponse.pkiEzsignfoldertypeID) &&
        Objects.equals(this.sEzsignfoldertypeNameX, customEzsignfoldertypeResponse.sEzsignfoldertypeNameX) &&
        Objects.equals(this.bEzsignfoldertypeIncludeproofsigner, customEzsignfoldertypeResponse.bEzsignfoldertypeIncludeproofsigner) &&
        Objects.equals(this.bEzsignfoldertypeIncludeproofuser, customEzsignfoldertypeResponse.bEzsignfoldertypeIncludeproofuser) &&
        Objects.equals(this.bEzsignfoldertypeDelegate, customEzsignfoldertypeResponse.bEzsignfoldertypeDelegate) &&
        Objects.equals(this.bEzsignfoldertypeReassign, customEzsignfoldertypeResponse.bEzsignfoldertypeReassign);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiEzsignfoldertypeID, sEzsignfoldertypeNameX, bEzsignfoldertypeIncludeproofsigner, bEzsignfoldertypeIncludeproofuser, bEzsignfoldertypeDelegate, bEzsignfoldertypeReassign);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomEzsignfoldertypeResponse {\n");
    sb.append("    pkiEzsignfoldertypeID: ").append(toIndentedString(pkiEzsignfoldertypeID)).append("\n");
    sb.append("    sEzsignfoldertypeNameX: ").append(toIndentedString(sEzsignfoldertypeNameX)).append("\n");
    sb.append("    bEzsignfoldertypeIncludeproofsigner: ").append(toIndentedString(bEzsignfoldertypeIncludeproofsigner)).append("\n");
    sb.append("    bEzsignfoldertypeIncludeproofuser: ").append(toIndentedString(bEzsignfoldertypeIncludeproofuser)).append("\n");
    sb.append("    bEzsignfoldertypeDelegate: ").append(toIndentedString(bEzsignfoldertypeDelegate)).append("\n");
    sb.append("    bEzsignfoldertypeReassign: ").append(toIndentedString(bEzsignfoldertypeReassign)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiEzsignfoldertypeID");
    openapiFields.add("sEzsignfoldertypeNameX");
    openapiFields.add("bEzsignfoldertypeIncludeproofsigner");
    openapiFields.add("bEzsignfoldertypeIncludeproofuser");
    openapiFields.add("bEzsignfoldertypeDelegate");
    openapiFields.add("bEzsignfoldertypeReassign");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiEzsignfoldertypeID");
    openapiRequiredFields.add("sEzsignfoldertypeNameX");
    openapiRequiredFields.add("bEzsignfoldertypeIncludeproofsigner");
    openapiRequiredFields.add("bEzsignfoldertypeIncludeproofuser");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CustomEzsignfoldertypeResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomEzsignfoldertypeResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomEzsignfoldertypeResponse is not found in the empty JSON string", CustomEzsignfoldertypeResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomEzsignfoldertypeResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomEzsignfoldertypeResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomEzsignfoldertypeResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("sEzsignfoldertypeNameX").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsignfoldertypeNameX` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsignfoldertypeNameX").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomEzsignfoldertypeResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomEzsignfoldertypeResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomEzsignfoldertypeResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomEzsignfoldertypeResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomEzsignfoldertypeResponse>() {
           @Override
           public void write(JsonWriter out, CustomEzsignfoldertypeResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomEzsignfoldertypeResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomEzsignfoldertypeResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomEzsignfoldertypeResponse
  * @throws IOException if the JSON string is invalid with respect to CustomEzsignfoldertypeResponse
  */
  public static CustomEzsignfoldertypeResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomEzsignfoldertypeResponse.class);
  }

 /**
  * Convert an instance of CustomEzsignfoldertypeResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

