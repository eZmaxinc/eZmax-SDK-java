/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.9
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.ezmax.api.model.FieldEActivesessionUsertype;
import com.ezmax.api.model.FieldEActivesessionWeekdaystart;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * An Activesession Object
 */
@ApiModel(description = "An Activesession Object")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-20T19:46:17.886368Z[Etc/UTC]")
public class ActivesessionResponse {
  public static final String SERIALIZED_NAME_E_ACTIVESESSION_USERTYPE = "eActivesessionUsertype";
  @SerializedName(SERIALIZED_NAME_E_ACTIVESESSION_USERTYPE)
  private FieldEActivesessionUsertype eActivesessionUsertype;

  public static final String SERIALIZED_NAME_E_ACTIVESESSION_WEEKDAYSTART = "eActivesessionWeekdaystart";
  @SerializedName(SERIALIZED_NAME_E_ACTIVESESSION_WEEKDAYSTART)
  private FieldEActivesessionWeekdaystart eActivesessionWeekdaystart;

  public static final String SERIALIZED_NAME_FKI_LANGUAGE_I_D = "fkiLanguageID";
  @SerializedName(SERIALIZED_NAME_FKI_LANGUAGE_I_D)
  private Integer fkiLanguageID;

  public static final String SERIALIZED_NAME_S_COMPANY_NAME_X = "sCompanyNameX";
  @SerializedName(SERIALIZED_NAME_S_COMPANY_NAME_X)
  private String sCompanyNameX;

  public static final String SERIALIZED_NAME_S_DEPARTMENT_NAME_X = "sDepartmentNameX";
  @SerializedName(SERIALIZED_NAME_S_DEPARTMENT_NAME_X)
  private String sDepartmentNameX;

  public static final String SERIALIZED_NAME_B_ACTIVESESSION_DEBUG = "bActivesessionDebug";
  @SerializedName(SERIALIZED_NAME_B_ACTIVESESSION_DEBUG)
  private Boolean bActivesessionDebug;

  public static final String SERIALIZED_NAME_PKS_CUSTOMER_CODE = "pksCustomerCode";
  @SerializedName(SERIALIZED_NAME_PKS_CUSTOMER_CODE)
  private String pksCustomerCode;

  public ActivesessionResponse() { 
  }

  public ActivesessionResponse eActivesessionUsertype(FieldEActivesessionUsertype eActivesessionUsertype) {
    
    this.eActivesessionUsertype = eActivesessionUsertype;
    return this;
  }

   /**
   * Get eActivesessionUsertype
   * @return eActivesessionUsertype
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public FieldEActivesessionUsertype geteActivesessionUsertype() {
    return eActivesessionUsertype;
  }


  public void seteActivesessionUsertype(FieldEActivesessionUsertype eActivesessionUsertype) {
    this.eActivesessionUsertype = eActivesessionUsertype;
  }


  public ActivesessionResponse eActivesessionWeekdaystart(FieldEActivesessionWeekdaystart eActivesessionWeekdaystart) {
    
    this.eActivesessionWeekdaystart = eActivesessionWeekdaystart;
    return this;
  }

   /**
   * Get eActivesessionWeekdaystart
   * @return eActivesessionWeekdaystart
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public FieldEActivesessionWeekdaystart geteActivesessionWeekdaystart() {
    return eActivesessionWeekdaystart;
  }


  public void seteActivesessionWeekdaystart(FieldEActivesessionWeekdaystart eActivesessionWeekdaystart) {
    this.eActivesessionWeekdaystart = eActivesessionWeekdaystart;
  }


  public ActivesessionResponse fkiLanguageID(Integer fkiLanguageID) {
    
    this.fkiLanguageID = fkiLanguageID;
    return this;
  }

   /**
   * The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
   * minimum: 1
   * maximum: 2
   * @return fkiLanguageID
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2", required = true, value = "The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|")

  public Integer getFkiLanguageID() {
    return fkiLanguageID;
  }


  public void setFkiLanguageID(Integer fkiLanguageID) {
    this.fkiLanguageID = fkiLanguageID;
  }


  public ActivesessionResponse sCompanyNameX(String sCompanyNameX) {
    
    this.sCompanyNameX = sCompanyNameX;
    return this;
  }

   /**
   * The Name of the Company in the language of the requester
   * @return sCompanyNameX
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Acme inc.", required = true, value = "The Name of the Company in the language of the requester")

  public String getsCompanyNameX() {
    return sCompanyNameX;
  }


  public void setsCompanyNameX(String sCompanyNameX) {
    this.sCompanyNameX = sCompanyNameX;
  }


  public ActivesessionResponse sDepartmentNameX(String sDepartmentNameX) {
    
    this.sDepartmentNameX = sDepartmentNameX;
    return this;
  }

   /**
   * The Name of the Department in the language of the requester
   * @return sDepartmentNameX
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Head Office", required = true, value = "The Name of the Department in the language of the requester")

  public String getsDepartmentNameX() {
    return sDepartmentNameX;
  }


  public void setsDepartmentNameX(String sDepartmentNameX) {
    this.sDepartmentNameX = sDepartmentNameX;
  }


  public ActivesessionResponse bActivesessionDebug(Boolean bActivesessionDebug) {
    
    this.bActivesessionDebug = bActivesessionDebug;
    return this;
  }

   /**
   * Whether the active session is in debug or not
   * @return bActivesessionDebug
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "Whether the active session is in debug or not")

  public Boolean getbActivesessionDebug() {
    return bActivesessionDebug;
  }


  public void setbActivesessionDebug(Boolean bActivesessionDebug) {
    this.bActivesessionDebug = bActivesessionDebug;
  }


  public ActivesessionResponse pksCustomerCode(String pksCustomerCode) {
    
    this.pksCustomerCode = pksCustomerCode;
    return this;
  }

   /**
   * The customer code assigned to your account
   * @return pksCustomerCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "demo", required = true, value = "The customer code assigned to your account")

  public String getPksCustomerCode() {
    return pksCustomerCode;
  }


  public void setPksCustomerCode(String pksCustomerCode) {
    this.pksCustomerCode = pksCustomerCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActivesessionResponse activesessionResponse = (ActivesessionResponse) o;
    return Objects.equals(this.eActivesessionUsertype, activesessionResponse.eActivesessionUsertype) &&
        Objects.equals(this.eActivesessionWeekdaystart, activesessionResponse.eActivesessionWeekdaystart) &&
        Objects.equals(this.fkiLanguageID, activesessionResponse.fkiLanguageID) &&
        Objects.equals(this.sCompanyNameX, activesessionResponse.sCompanyNameX) &&
        Objects.equals(this.sDepartmentNameX, activesessionResponse.sDepartmentNameX) &&
        Objects.equals(this.bActivesessionDebug, activesessionResponse.bActivesessionDebug) &&
        Objects.equals(this.pksCustomerCode, activesessionResponse.pksCustomerCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eActivesessionUsertype, eActivesessionWeekdaystart, fkiLanguageID, sCompanyNameX, sDepartmentNameX, bActivesessionDebug, pksCustomerCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActivesessionResponse {\n");
    sb.append("    eActivesessionUsertype: ").append(toIndentedString(eActivesessionUsertype)).append("\n");
    sb.append("    eActivesessionWeekdaystart: ").append(toIndentedString(eActivesessionWeekdaystart)).append("\n");
    sb.append("    fkiLanguageID: ").append(toIndentedString(fkiLanguageID)).append("\n");
    sb.append("    sCompanyNameX: ").append(toIndentedString(sCompanyNameX)).append("\n");
    sb.append("    sDepartmentNameX: ").append(toIndentedString(sDepartmentNameX)).append("\n");
    sb.append("    bActivesessionDebug: ").append(toIndentedString(bActivesessionDebug)).append("\n");
    sb.append("    pksCustomerCode: ").append(toIndentedString(pksCustomerCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eActivesessionUsertype");
    openapiFields.add("eActivesessionWeekdaystart");
    openapiFields.add("fkiLanguageID");
    openapiFields.add("sCompanyNameX");
    openapiFields.add("sDepartmentNameX");
    openapiFields.add("bActivesessionDebug");
    openapiFields.add("pksCustomerCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("eActivesessionUsertype");
    openapiRequiredFields.add("eActivesessionWeekdaystart");
    openapiRequiredFields.add("fkiLanguageID");
    openapiRequiredFields.add("sCompanyNameX");
    openapiRequiredFields.add("sDepartmentNameX");
    openapiRequiredFields.add("bActivesessionDebug");
    openapiRequiredFields.add("pksCustomerCode");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ActivesessionResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ActivesessionResponse.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActivesessionResponse is not found in the empty JSON string", ActivesessionResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ActivesessionResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActivesessionResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ActivesessionResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("sCompanyNameX") != null && !jsonObj.get("sCompanyNameX").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sCompanyNameX` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sCompanyNameX").toString()));
      }
      if (jsonObj.get("sDepartmentNameX") != null && !jsonObj.get("sDepartmentNameX").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sDepartmentNameX` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sDepartmentNameX").toString()));
      }
      if (jsonObj.get("pksCustomerCode") != null && !jsonObj.get("pksCustomerCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pksCustomerCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pksCustomerCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActivesessionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActivesessionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActivesessionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActivesessionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ActivesessionResponse>() {
           @Override
           public void write(JsonWriter out, ActivesessionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActivesessionResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ActivesessionResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ActivesessionResponse
  * @throws IOException if the JSON string is invalid with respect to ActivesessionResponse
  */
  public static ActivesessionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActivesessionResponse.class);
  }

 /**
  * Convert an instance of ActivesessionResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

