/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Custom Dnsrecord Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-17T15:03:32.455495633Z[Etc/UTC]", comments = "Generator version: 7.10.0")
public class CustomDnsrecordResponse {
  /**
   * The type of the Dnsrecord
   */
  @JsonAdapter(EDnsrecordTypeEnum.Adapter.class)
  public enum EDnsrecordTypeEnum {
    CNAME("CNAME"),
    
    MX("MX"),
    
    TXT("TXT");

    private String value;

    EDnsrecordTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EDnsrecordTypeEnum fromValue(String value) {
      for (EDnsrecordTypeEnum b : EDnsrecordTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EDnsrecordTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EDnsrecordTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EDnsrecordTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EDnsrecordTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EDnsrecordTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_E_DNSRECORD_TYPE = "eDnsrecordType";
  @SerializedName(SERIALIZED_NAME_E_DNSRECORD_TYPE)
  @javax.annotation.Nonnull
  private EDnsrecordTypeEnum eDnsrecordType;

  /**
   * The validation of the Dnsrecord
   */
  @JsonAdapter(EDnsrecordValidationEnum.Adapter.class)
  public enum EDnsrecordValidationEnum {
    MATCH("Match"),
    
    MISMATCH("Mismatch"),
    
    NOT_FOUND("NotFound");

    private String value;

    EDnsrecordValidationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EDnsrecordValidationEnum fromValue(String value) {
      for (EDnsrecordValidationEnum b : EDnsrecordValidationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EDnsrecordValidationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EDnsrecordValidationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EDnsrecordValidationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EDnsrecordValidationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EDnsrecordValidationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_E_DNSRECORD_VALIDATION = "eDnsrecordValidation";
  @SerializedName(SERIALIZED_NAME_E_DNSRECORD_VALIDATION)
  @javax.annotation.Nonnull
  private EDnsrecordValidationEnum eDnsrecordValidation;

  public static final String SERIALIZED_NAME_S_DNSRECORD_NAME = "sDnsrecordName";
  @SerializedName(SERIALIZED_NAME_S_DNSRECORD_NAME)
  @javax.annotation.Nonnull
  private String sDnsrecordName;

  public static final String SERIALIZED_NAME_S_DNSRECORD_VALUE = "sDnsrecordValue";
  @SerializedName(SERIALIZED_NAME_S_DNSRECORD_VALUE)
  @javax.annotation.Nullable
  private String sDnsrecordValue;

  public static final String SERIALIZED_NAME_S_DNSRECORD_EXPECTEDVALUE = "sDnsrecordExpectedvalue";
  @SerializedName(SERIALIZED_NAME_S_DNSRECORD_EXPECTEDVALUE)
  @javax.annotation.Nullable
  private String sDnsrecordExpectedvalue;

  public static final String SERIALIZED_NAME_B_DNSRECORD_MUST_MATCH = "bDnsrecordMustMatch";
  @SerializedName(SERIALIZED_NAME_B_DNSRECORD_MUST_MATCH)
  @javax.annotation.Nonnull
  private Boolean bDnsrecordMustMatch;

  public CustomDnsrecordResponse() {
  }

  public CustomDnsrecordResponse eDnsrecordType(@javax.annotation.Nonnull EDnsrecordTypeEnum eDnsrecordType) {
    this.eDnsrecordType = eDnsrecordType;
    return this;
  }

  /**
   * The type of the Dnsrecord
   * @return eDnsrecordType
   */
  @javax.annotation.Nonnull
  public EDnsrecordTypeEnum geteDnsrecordType() {
    return eDnsrecordType;
  }

  public void seteDnsrecordType(@javax.annotation.Nonnull EDnsrecordTypeEnum eDnsrecordType) {
    this.eDnsrecordType = eDnsrecordType;
  }


  public CustomDnsrecordResponse eDnsrecordValidation(@javax.annotation.Nonnull EDnsrecordValidationEnum eDnsrecordValidation) {
    this.eDnsrecordValidation = eDnsrecordValidation;
    return this;
  }

  /**
   * The validation of the Dnsrecord
   * @return eDnsrecordValidation
   */
  @javax.annotation.Nonnull
  public EDnsrecordValidationEnum geteDnsrecordValidation() {
    return eDnsrecordValidation;
  }

  public void seteDnsrecordValidation(@javax.annotation.Nonnull EDnsrecordValidationEnum eDnsrecordValidation) {
    this.eDnsrecordValidation = eDnsrecordValidation;
  }


  public CustomDnsrecordResponse sDnsrecordName(@javax.annotation.Nonnull String sDnsrecordName) {
    this.sDnsrecordName = sDnsrecordName;
    return this;
  }

  /**
   * The name of the Dnsrecord
   * @return sDnsrecordName
   */
  @javax.annotation.Nonnull
  public String getsDnsrecordName() {
    return sDnsrecordName;
  }

  public void setsDnsrecordName(@javax.annotation.Nonnull String sDnsrecordName) {
    this.sDnsrecordName = sDnsrecordName;
  }


  public CustomDnsrecordResponse sDnsrecordValue(@javax.annotation.Nullable String sDnsrecordValue) {
    this.sDnsrecordValue = sDnsrecordValue;
    return this;
  }

  /**
   * The value of the Dnsrecord
   * @return sDnsrecordValue
   */
  @javax.annotation.Nullable
  public String getsDnsrecordValue() {
    return sDnsrecordValue;
  }

  public void setsDnsrecordValue(@javax.annotation.Nullable String sDnsrecordValue) {
    this.sDnsrecordValue = sDnsrecordValue;
  }


  public CustomDnsrecordResponse sDnsrecordExpectedvalue(@javax.annotation.Nullable String sDnsrecordExpectedvalue) {
    this.sDnsrecordExpectedvalue = sDnsrecordExpectedvalue;
    return this;
  }

  /**
   * The expected value of the Dnsrecord
   * @return sDnsrecordExpectedvalue
   */
  @javax.annotation.Nullable
  public String getsDnsrecordExpectedvalue() {
    return sDnsrecordExpectedvalue;
  }

  public void setsDnsrecordExpectedvalue(@javax.annotation.Nullable String sDnsrecordExpectedvalue) {
    this.sDnsrecordExpectedvalue = sDnsrecordExpectedvalue;
  }


  public CustomDnsrecordResponse bDnsrecordMustMatch(@javax.annotation.Nonnull Boolean bDnsrecordMustMatch) {
    this.bDnsrecordMustMatch = bDnsrecordMustMatch;
    return this;
  }

  /**
   * Whether the Dnsrecord must match or not
   * @return bDnsrecordMustMatch
   */
  @javax.annotation.Nonnull
  public Boolean getbDnsrecordMustMatch() {
    return bDnsrecordMustMatch;
  }

  public void setbDnsrecordMustMatch(@javax.annotation.Nonnull Boolean bDnsrecordMustMatch) {
    this.bDnsrecordMustMatch = bDnsrecordMustMatch;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomDnsrecordResponse customDnsrecordResponse = (CustomDnsrecordResponse) o;
    return Objects.equals(this.eDnsrecordType, customDnsrecordResponse.eDnsrecordType) &&
        Objects.equals(this.eDnsrecordValidation, customDnsrecordResponse.eDnsrecordValidation) &&
        Objects.equals(this.sDnsrecordName, customDnsrecordResponse.sDnsrecordName) &&
        Objects.equals(this.sDnsrecordValue, customDnsrecordResponse.sDnsrecordValue) &&
        Objects.equals(this.sDnsrecordExpectedvalue, customDnsrecordResponse.sDnsrecordExpectedvalue) &&
        Objects.equals(this.bDnsrecordMustMatch, customDnsrecordResponse.bDnsrecordMustMatch);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eDnsrecordType, eDnsrecordValidation, sDnsrecordName, sDnsrecordValue, sDnsrecordExpectedvalue, bDnsrecordMustMatch);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomDnsrecordResponse {\n");
    sb.append("    eDnsrecordType: ").append(toIndentedString(eDnsrecordType)).append("\n");
    sb.append("    eDnsrecordValidation: ").append(toIndentedString(eDnsrecordValidation)).append("\n");
    sb.append("    sDnsrecordName: ").append(toIndentedString(sDnsrecordName)).append("\n");
    sb.append("    sDnsrecordValue: ").append(toIndentedString(sDnsrecordValue)).append("\n");
    sb.append("    sDnsrecordExpectedvalue: ").append(toIndentedString(sDnsrecordExpectedvalue)).append("\n");
    sb.append("    bDnsrecordMustMatch: ").append(toIndentedString(bDnsrecordMustMatch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eDnsrecordType");
    openapiFields.add("eDnsrecordValidation");
    openapiFields.add("sDnsrecordName");
    openapiFields.add("sDnsrecordValue");
    openapiFields.add("sDnsrecordExpectedvalue");
    openapiFields.add("bDnsrecordMustMatch");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("eDnsrecordType");
    openapiRequiredFields.add("eDnsrecordValidation");
    openapiRequiredFields.add("sDnsrecordName");
    openapiRequiredFields.add("bDnsrecordMustMatch");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomDnsrecordResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomDnsrecordResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomDnsrecordResponse is not found in the empty JSON string", CustomDnsrecordResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomDnsrecordResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomDnsrecordResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomDnsrecordResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("eDnsrecordType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eDnsrecordType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eDnsrecordType").toString()));
      }
      // validate the required field `eDnsrecordType`
      EDnsrecordTypeEnum.validateJsonElement(jsonObj.get("eDnsrecordType"));
      if (!jsonObj.get("eDnsrecordValidation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eDnsrecordValidation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eDnsrecordValidation").toString()));
      }
      // validate the required field `eDnsrecordValidation`
      EDnsrecordValidationEnum.validateJsonElement(jsonObj.get("eDnsrecordValidation"));
      if (!jsonObj.get("sDnsrecordName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sDnsrecordName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sDnsrecordName").toString()));
      }
      if ((jsonObj.get("sDnsrecordValue") != null && !jsonObj.get("sDnsrecordValue").isJsonNull()) && !jsonObj.get("sDnsrecordValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sDnsrecordValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sDnsrecordValue").toString()));
      }
      if ((jsonObj.get("sDnsrecordExpectedvalue") != null && !jsonObj.get("sDnsrecordExpectedvalue").isJsonNull()) && !jsonObj.get("sDnsrecordExpectedvalue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sDnsrecordExpectedvalue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sDnsrecordExpectedvalue").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomDnsrecordResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomDnsrecordResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomDnsrecordResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomDnsrecordResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomDnsrecordResponse>() {
           @Override
           public void write(JsonWriter out, CustomDnsrecordResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomDnsrecordResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomDnsrecordResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomDnsrecordResponse
   * @throws IOException if the JSON string is invalid with respect to CustomDnsrecordResponse
   */
  public static CustomDnsrecordResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomDnsrecordResponse.class);
  }

  /**
   * Convert an instance of CustomDnsrecordResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

