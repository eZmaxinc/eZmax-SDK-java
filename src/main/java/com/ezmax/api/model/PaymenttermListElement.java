/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.FieldEPaymenttermType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Paymentterm List Element
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-16T21:39:53.290322577Z[Etc/UTC]", comments = "Generator version: 7.10.0")
public class PaymenttermListElement {
  public static final String SERIALIZED_NAME_PKI_PAYMENTTERM_I_D = "pkiPaymenttermID";
  @SerializedName(SERIALIZED_NAME_PKI_PAYMENTTERM_I_D)
  @javax.annotation.Nonnull
  private Integer pkiPaymenttermID;

  public static final String SERIALIZED_NAME_S_PAYMENTTERM_CODE = "sPaymenttermCode";
  @SerializedName(SERIALIZED_NAME_S_PAYMENTTERM_CODE)
  @javax.annotation.Nonnull
  private String sPaymenttermCode;

  public static final String SERIALIZED_NAME_E_PAYMENTTERM_TYPE = "ePaymenttermType";
  @SerializedName(SERIALIZED_NAME_E_PAYMENTTERM_TYPE)
  @javax.annotation.Nonnull
  private FieldEPaymenttermType ePaymenttermType;

  public static final String SERIALIZED_NAME_I_PAYMENTTERM_DAY = "iPaymenttermDay";
  @SerializedName(SERIALIZED_NAME_I_PAYMENTTERM_DAY)
  @javax.annotation.Nonnull
  private Integer iPaymenttermDay;

  public static final String SERIALIZED_NAME_S_PAYMENTTERM_DESCRIPTION_X = "sPaymenttermDescriptionX";
  @SerializedName(SERIALIZED_NAME_S_PAYMENTTERM_DESCRIPTION_X)
  @javax.annotation.Nonnull
  private String sPaymenttermDescriptionX;

  public static final String SERIALIZED_NAME_B_PAYMENTTERM_ISACTIVE = "bPaymenttermIsactive";
  @SerializedName(SERIALIZED_NAME_B_PAYMENTTERM_ISACTIVE)
  @javax.annotation.Nonnull
  private Boolean bPaymenttermIsactive;

  public PaymenttermListElement() {
  }

  public PaymenttermListElement pkiPaymenttermID(@javax.annotation.Nonnull Integer pkiPaymenttermID) {
    this.pkiPaymenttermID = pkiPaymenttermID;
    return this;
  }

  /**
   * The unique ID of the Paymentterm
   * @return pkiPaymenttermID
   */
  @javax.annotation.Nonnull
  public Integer getPkiPaymenttermID() {
    return pkiPaymenttermID;
  }

  public void setPkiPaymenttermID(@javax.annotation.Nonnull Integer pkiPaymenttermID) {
    this.pkiPaymenttermID = pkiPaymenttermID;
  }


  public PaymenttermListElement sPaymenttermCode(@javax.annotation.Nonnull String sPaymenttermCode) {
    this.sPaymenttermCode = sPaymenttermCode;
    return this;
  }

  /**
   * The code of the Paymentterm
   * @return sPaymenttermCode
   */
  @javax.annotation.Nonnull
  public String getsPaymenttermCode() {
    return sPaymenttermCode;
  }

  public void setsPaymenttermCode(@javax.annotation.Nonnull String sPaymenttermCode) {
    this.sPaymenttermCode = sPaymenttermCode;
  }


  public PaymenttermListElement ePaymenttermType(@javax.annotation.Nonnull FieldEPaymenttermType ePaymenttermType) {
    this.ePaymenttermType = ePaymenttermType;
    return this;
  }

  /**
   * Get ePaymenttermType
   * @return ePaymenttermType
   */
  @javax.annotation.Nonnull
  public FieldEPaymenttermType getePaymenttermType() {
    return ePaymenttermType;
  }

  public void setePaymenttermType(@javax.annotation.Nonnull FieldEPaymenttermType ePaymenttermType) {
    this.ePaymenttermType = ePaymenttermType;
  }


  public PaymenttermListElement iPaymenttermDay(@javax.annotation.Nonnull Integer iPaymenttermDay) {
    this.iPaymenttermDay = iPaymenttermDay;
    return this;
  }

  /**
   * The day of the Paymentterm
   * minimum: 0
   * maximum: 255
   * @return iPaymenttermDay
   */
  @javax.annotation.Nonnull
  public Integer getiPaymenttermDay() {
    return iPaymenttermDay;
  }

  public void setiPaymenttermDay(@javax.annotation.Nonnull Integer iPaymenttermDay) {
    this.iPaymenttermDay = iPaymenttermDay;
  }


  public PaymenttermListElement sPaymenttermDescriptionX(@javax.annotation.Nonnull String sPaymenttermDescriptionX) {
    this.sPaymenttermDescriptionX = sPaymenttermDescriptionX;
    return this;
  }

  /**
   * The description of the Paymentterm in the language of the requester
   * @return sPaymenttermDescriptionX
   */
  @javax.annotation.Nonnull
  public String getsPaymenttermDescriptionX() {
    return sPaymenttermDescriptionX;
  }

  public void setsPaymenttermDescriptionX(@javax.annotation.Nonnull String sPaymenttermDescriptionX) {
    this.sPaymenttermDescriptionX = sPaymenttermDescriptionX;
  }


  public PaymenttermListElement bPaymenttermIsactive(@javax.annotation.Nonnull Boolean bPaymenttermIsactive) {
    this.bPaymenttermIsactive = bPaymenttermIsactive;
    return this;
  }

  /**
   * Whether the Paymentterm is active or not
   * @return bPaymenttermIsactive
   */
  @javax.annotation.Nonnull
  public Boolean getbPaymenttermIsactive() {
    return bPaymenttermIsactive;
  }

  public void setbPaymenttermIsactive(@javax.annotation.Nonnull Boolean bPaymenttermIsactive) {
    this.bPaymenttermIsactive = bPaymenttermIsactive;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymenttermListElement paymenttermListElement = (PaymenttermListElement) o;
    return Objects.equals(this.pkiPaymenttermID, paymenttermListElement.pkiPaymenttermID) &&
        Objects.equals(this.sPaymenttermCode, paymenttermListElement.sPaymenttermCode) &&
        Objects.equals(this.ePaymenttermType, paymenttermListElement.ePaymenttermType) &&
        Objects.equals(this.iPaymenttermDay, paymenttermListElement.iPaymenttermDay) &&
        Objects.equals(this.sPaymenttermDescriptionX, paymenttermListElement.sPaymenttermDescriptionX) &&
        Objects.equals(this.bPaymenttermIsactive, paymenttermListElement.bPaymenttermIsactive);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiPaymenttermID, sPaymenttermCode, ePaymenttermType, iPaymenttermDay, sPaymenttermDescriptionX, bPaymenttermIsactive);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymenttermListElement {\n");
    sb.append("    pkiPaymenttermID: ").append(toIndentedString(pkiPaymenttermID)).append("\n");
    sb.append("    sPaymenttermCode: ").append(toIndentedString(sPaymenttermCode)).append("\n");
    sb.append("    ePaymenttermType: ").append(toIndentedString(ePaymenttermType)).append("\n");
    sb.append("    iPaymenttermDay: ").append(toIndentedString(iPaymenttermDay)).append("\n");
    sb.append("    sPaymenttermDescriptionX: ").append(toIndentedString(sPaymenttermDescriptionX)).append("\n");
    sb.append("    bPaymenttermIsactive: ").append(toIndentedString(bPaymenttermIsactive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiPaymenttermID");
    openapiFields.add("sPaymenttermCode");
    openapiFields.add("ePaymenttermType");
    openapiFields.add("iPaymenttermDay");
    openapiFields.add("sPaymenttermDescriptionX");
    openapiFields.add("bPaymenttermIsactive");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiPaymenttermID");
    openapiRequiredFields.add("sPaymenttermCode");
    openapiRequiredFields.add("ePaymenttermType");
    openapiRequiredFields.add("iPaymenttermDay");
    openapiRequiredFields.add("sPaymenttermDescriptionX");
    openapiRequiredFields.add("bPaymenttermIsactive");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymenttermListElement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymenttermListElement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymenttermListElement is not found in the empty JSON string", PaymenttermListElement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymenttermListElement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymenttermListElement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymenttermListElement.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("sPaymenttermCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sPaymenttermCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sPaymenttermCode").toString()));
      }
      // validate the required field `ePaymenttermType`
      FieldEPaymenttermType.validateJsonElement(jsonObj.get("ePaymenttermType"));
      if (!jsonObj.get("sPaymenttermDescriptionX").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sPaymenttermDescriptionX` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sPaymenttermDescriptionX").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymenttermListElement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymenttermListElement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymenttermListElement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymenttermListElement.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymenttermListElement>() {
           @Override
           public void write(JsonWriter out, PaymenttermListElement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymenttermListElement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymenttermListElement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymenttermListElement
   * @throws IOException if the JSON string is invalid with respect to PaymenttermListElement
   */
  public static PaymenttermListElement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymenttermListElement.class);
  }

  /**
   * Convert an instance of PaymenttermListElement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

