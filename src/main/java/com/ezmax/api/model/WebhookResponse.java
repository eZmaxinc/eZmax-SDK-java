/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.CommonAudit;
import com.ezmax.api.model.FieldEWebhookEzsignevent;
import com.ezmax.api.model.FieldEWebhookManagementevent;
import com.ezmax.api.model.FieldEWebhookModule;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A webhook object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-17T15:03:32.455495633Z[Etc/UTC]", comments = "Generator version: 7.10.0")
public class WebhookResponse {
  public static final String SERIALIZED_NAME_PKI_WEBHOOK_I_D = "pkiWebhookID";
  @SerializedName(SERIALIZED_NAME_PKI_WEBHOOK_I_D)
  @javax.annotation.Nonnull
  private Integer pkiWebhookID;

  public static final String SERIALIZED_NAME_FKI_AUTHENTICATIONEXTERNAL_I_D = "fkiAuthenticationexternalID";
  @SerializedName(SERIALIZED_NAME_FKI_AUTHENTICATIONEXTERNAL_I_D)
  @javax.annotation.Nullable
  private Integer fkiAuthenticationexternalID;

  public static final String SERIALIZED_NAME_S_WEBHOOK_DESCRIPTION = "sWebhookDescription";
  @SerializedName(SERIALIZED_NAME_S_WEBHOOK_DESCRIPTION)
  @javax.annotation.Nonnull
  private String sWebhookDescription;

  public static final String SERIALIZED_NAME_FKI_EZSIGNFOLDERTYPE_I_D = "fkiEzsignfoldertypeID";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNFOLDERTYPE_I_D)
  @javax.annotation.Nullable
  private Integer fkiEzsignfoldertypeID;

  public static final String SERIALIZED_NAME_S_EZSIGNFOLDERTYPE_NAME_X = "sEzsignfoldertypeNameX";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNFOLDERTYPE_NAME_X)
  @javax.annotation.Nullable
  private String sEzsignfoldertypeNameX;

  public static final String SERIALIZED_NAME_E_WEBHOOK_MODULE = "eWebhookModule";
  @SerializedName(SERIALIZED_NAME_E_WEBHOOK_MODULE)
  @javax.annotation.Nonnull
  private FieldEWebhookModule eWebhookModule;

  public static final String SERIALIZED_NAME_E_WEBHOOK_EZSIGNEVENT = "eWebhookEzsignevent";
  @SerializedName(SERIALIZED_NAME_E_WEBHOOK_EZSIGNEVENT)
  @javax.annotation.Nullable
  private FieldEWebhookEzsignevent eWebhookEzsignevent;

  public static final String SERIALIZED_NAME_E_WEBHOOK_MANAGEMENTEVENT = "eWebhookManagementevent";
  @SerializedName(SERIALIZED_NAME_E_WEBHOOK_MANAGEMENTEVENT)
  @javax.annotation.Nullable
  private FieldEWebhookManagementevent eWebhookManagementevent;

  public static final String SERIALIZED_NAME_S_WEBHOOK_URL = "sWebhookUrl";
  @SerializedName(SERIALIZED_NAME_S_WEBHOOK_URL)
  @javax.annotation.Nonnull
  private String sWebhookUrl;

  public static final String SERIALIZED_NAME_S_WEBHOOK_EMAILFAILED = "sWebhookEmailfailed";
  @SerializedName(SERIALIZED_NAME_S_WEBHOOK_EMAILFAILED)
  @javax.annotation.Nonnull
  private String sWebhookEmailfailed;

  public static final String SERIALIZED_NAME_S_WEBHOOK_APIKEY = "sWebhookApikey";
  @SerializedName(SERIALIZED_NAME_S_WEBHOOK_APIKEY)
  @javax.annotation.Nullable
  private String sWebhookApikey;

  public static final String SERIALIZED_NAME_S_WEBHOOK_SECRET = "sWebhookSecret";
  @SerializedName(SERIALIZED_NAME_S_WEBHOOK_SECRET)
  @javax.annotation.Nullable
  private String sWebhookSecret;

  public static final String SERIALIZED_NAME_B_WEBHOOK_ISACTIVE = "bWebhookIsactive";
  @SerializedName(SERIALIZED_NAME_B_WEBHOOK_ISACTIVE)
  @javax.annotation.Nonnull
  private Boolean bWebhookIsactive;

  public static final String SERIALIZED_NAME_B_WEBHOOK_ISSIGNED = "bWebhookIssigned";
  @SerializedName(SERIALIZED_NAME_B_WEBHOOK_ISSIGNED)
  @javax.annotation.Nonnull
  private Boolean bWebhookIssigned;

  public static final String SERIALIZED_NAME_B_WEBHOOK_SKIPSSLVALIDATION = "bWebhookSkipsslvalidation";
  @SerializedName(SERIALIZED_NAME_B_WEBHOOK_SKIPSSLVALIDATION)
  @javax.annotation.Nonnull
  private Boolean bWebhookSkipsslvalidation;

  public static final String SERIALIZED_NAME_S_AUTHENTICATIONEXTERNAL_DESCRIPTION = "sAuthenticationexternalDescription";
  @SerializedName(SERIALIZED_NAME_S_AUTHENTICATIONEXTERNAL_DESCRIPTION)
  @javax.annotation.Nullable
  private String sAuthenticationexternalDescription;

  public static final String SERIALIZED_NAME_OBJ_AUDIT = "objAudit";
  @SerializedName(SERIALIZED_NAME_OBJ_AUDIT)
  @javax.annotation.Nonnull
  private CommonAudit objAudit;

  public WebhookResponse() {
  }

  public WebhookResponse pkiWebhookID(@javax.annotation.Nonnull Integer pkiWebhookID) {
    this.pkiWebhookID = pkiWebhookID;
    return this;
  }

  /**
   * The unique ID of the Webhook
   * @return pkiWebhookID
   */
  @javax.annotation.Nonnull
  public Integer getPkiWebhookID() {
    return pkiWebhookID;
  }

  public void setPkiWebhookID(@javax.annotation.Nonnull Integer pkiWebhookID) {
    this.pkiWebhookID = pkiWebhookID;
  }


  public WebhookResponse fkiAuthenticationexternalID(@javax.annotation.Nullable Integer fkiAuthenticationexternalID) {
    this.fkiAuthenticationexternalID = fkiAuthenticationexternalID;
    return this;
  }

  /**
   * The unique ID of the Authenticationexternal
   * minimum: 0
   * maximum: 255
   * @return fkiAuthenticationexternalID
   */
  @javax.annotation.Nullable
  public Integer getFkiAuthenticationexternalID() {
    return fkiAuthenticationexternalID;
  }

  public void setFkiAuthenticationexternalID(@javax.annotation.Nullable Integer fkiAuthenticationexternalID) {
    this.fkiAuthenticationexternalID = fkiAuthenticationexternalID;
  }


  public WebhookResponse sWebhookDescription(@javax.annotation.Nonnull String sWebhookDescription) {
    this.sWebhookDescription = sWebhookDescription;
    return this;
  }

  /**
   * The description of the Webhook
   * @return sWebhookDescription
   */
  @javax.annotation.Nonnull
  public String getsWebhookDescription() {
    return sWebhookDescription;
  }

  public void setsWebhookDescription(@javax.annotation.Nonnull String sWebhookDescription) {
    this.sWebhookDescription = sWebhookDescription;
  }


  public WebhookResponse fkiEzsignfoldertypeID(@javax.annotation.Nullable Integer fkiEzsignfoldertypeID) {
    this.fkiEzsignfoldertypeID = fkiEzsignfoldertypeID;
    return this;
  }

  /**
   * The unique ID of the Ezsignfoldertype.
   * minimum: 0
   * maximum: 65535
   * @return fkiEzsignfoldertypeID
   */
  @javax.annotation.Nullable
  public Integer getFkiEzsignfoldertypeID() {
    return fkiEzsignfoldertypeID;
  }

  public void setFkiEzsignfoldertypeID(@javax.annotation.Nullable Integer fkiEzsignfoldertypeID) {
    this.fkiEzsignfoldertypeID = fkiEzsignfoldertypeID;
  }


  public WebhookResponse sEzsignfoldertypeNameX(@javax.annotation.Nullable String sEzsignfoldertypeNameX) {
    this.sEzsignfoldertypeNameX = sEzsignfoldertypeNameX;
    return this;
  }

  /**
   * The name of the Ezsignfoldertype in the language of the requester
   * @return sEzsignfoldertypeNameX
   */
  @javax.annotation.Nullable
  public String getsEzsignfoldertypeNameX() {
    return sEzsignfoldertypeNameX;
  }

  public void setsEzsignfoldertypeNameX(@javax.annotation.Nullable String sEzsignfoldertypeNameX) {
    this.sEzsignfoldertypeNameX = sEzsignfoldertypeNameX;
  }


  public WebhookResponse eWebhookModule(@javax.annotation.Nonnull FieldEWebhookModule eWebhookModule) {
    this.eWebhookModule = eWebhookModule;
    return this;
  }

  /**
   * Get eWebhookModule
   * @return eWebhookModule
   */
  @javax.annotation.Nonnull
  public FieldEWebhookModule geteWebhookModule() {
    return eWebhookModule;
  }

  public void seteWebhookModule(@javax.annotation.Nonnull FieldEWebhookModule eWebhookModule) {
    this.eWebhookModule = eWebhookModule;
  }


  public WebhookResponse eWebhookEzsignevent(@javax.annotation.Nullable FieldEWebhookEzsignevent eWebhookEzsignevent) {
    this.eWebhookEzsignevent = eWebhookEzsignevent;
    return this;
  }

  /**
   * Get eWebhookEzsignevent
   * @return eWebhookEzsignevent
   */
  @javax.annotation.Nullable
  public FieldEWebhookEzsignevent geteWebhookEzsignevent() {
    return eWebhookEzsignevent;
  }

  public void seteWebhookEzsignevent(@javax.annotation.Nullable FieldEWebhookEzsignevent eWebhookEzsignevent) {
    this.eWebhookEzsignevent = eWebhookEzsignevent;
  }


  public WebhookResponse eWebhookManagementevent(@javax.annotation.Nullable FieldEWebhookManagementevent eWebhookManagementevent) {
    this.eWebhookManagementevent = eWebhookManagementevent;
    return this;
  }

  /**
   * Get eWebhookManagementevent
   * @return eWebhookManagementevent
   */
  @javax.annotation.Nullable
  public FieldEWebhookManagementevent geteWebhookManagementevent() {
    return eWebhookManagementevent;
  }

  public void seteWebhookManagementevent(@javax.annotation.Nullable FieldEWebhookManagementevent eWebhookManagementevent) {
    this.eWebhookManagementevent = eWebhookManagementevent;
  }


  public WebhookResponse sWebhookUrl(@javax.annotation.Nonnull String sWebhookUrl) {
    this.sWebhookUrl = sWebhookUrl;
    return this;
  }

  /**
   * The URL of the Webhook callback
   * @return sWebhookUrl
   */
  @javax.annotation.Nonnull
  public String getsWebhookUrl() {
    return sWebhookUrl;
  }

  public void setsWebhookUrl(@javax.annotation.Nonnull String sWebhookUrl) {
    this.sWebhookUrl = sWebhookUrl;
  }


  public WebhookResponse sWebhookEmailfailed(@javax.annotation.Nonnull String sWebhookEmailfailed) {
    this.sWebhookEmailfailed = sWebhookEmailfailed;
    return this;
  }

  /**
   * The email that will receive the Webhook in case all attempts fail
   * @return sWebhookEmailfailed
   */
  @javax.annotation.Nonnull
  public String getsWebhookEmailfailed() {
    return sWebhookEmailfailed;
  }

  public void setsWebhookEmailfailed(@javax.annotation.Nonnull String sWebhookEmailfailed) {
    this.sWebhookEmailfailed = sWebhookEmailfailed;
  }


  public WebhookResponse sWebhookApikey(@javax.annotation.Nullable String sWebhookApikey) {
    this.sWebhookApikey = sWebhookApikey;
    return this;
  }

  /**
   * The Apikey for the Webhook.  This will be hidden if we are not creating or regenerating the Apikey.
   * @return sWebhookApikey
   */
  @javax.annotation.Nullable
  public String getsWebhookApikey() {
    return sWebhookApikey;
  }

  public void setsWebhookApikey(@javax.annotation.Nullable String sWebhookApikey) {
    this.sWebhookApikey = sWebhookApikey;
  }


  public WebhookResponse sWebhookSecret(@javax.annotation.Nullable String sWebhookSecret) {
    this.sWebhookSecret = sWebhookSecret;
    return this;
  }

  /**
   * The Secret for the Webhook.  This will be hidden if we are not creating or regenerating the Apikey.
   * @return sWebhookSecret
   */
  @javax.annotation.Nullable
  public String getsWebhookSecret() {
    return sWebhookSecret;
  }

  public void setsWebhookSecret(@javax.annotation.Nullable String sWebhookSecret) {
    this.sWebhookSecret = sWebhookSecret;
  }


  public WebhookResponse bWebhookIsactive(@javax.annotation.Nonnull Boolean bWebhookIsactive) {
    this.bWebhookIsactive = bWebhookIsactive;
    return this;
  }

  /**
   * Whether the Webhook is active or not
   * @return bWebhookIsactive
   */
  @javax.annotation.Nonnull
  public Boolean getbWebhookIsactive() {
    return bWebhookIsactive;
  }

  public void setbWebhookIsactive(@javax.annotation.Nonnull Boolean bWebhookIsactive) {
    this.bWebhookIsactive = bWebhookIsactive;
  }


  public WebhookResponse bWebhookIssigned(@javax.annotation.Nonnull Boolean bWebhookIssigned) {
    this.bWebhookIssigned = bWebhookIssigned;
    return this;
  }

  /**
   * Whether the requests will be signed or not
   * @return bWebhookIssigned
   */
  @javax.annotation.Nonnull
  public Boolean getbWebhookIssigned() {
    return bWebhookIssigned;
  }

  public void setbWebhookIssigned(@javax.annotation.Nonnull Boolean bWebhookIssigned) {
    this.bWebhookIssigned = bWebhookIssigned;
  }


  public WebhookResponse bWebhookSkipsslvalidation(@javax.annotation.Nonnull Boolean bWebhookSkipsslvalidation) {
    this.bWebhookSkipsslvalidation = bWebhookSkipsslvalidation;
    return this;
  }

  /**
   * Wheter the server&#39;s SSL certificate should be validated or not. Not recommended to skip for production use
   * @return bWebhookSkipsslvalidation
   */
  @javax.annotation.Nonnull
  public Boolean getbWebhookSkipsslvalidation() {
    return bWebhookSkipsslvalidation;
  }

  public void setbWebhookSkipsslvalidation(@javax.annotation.Nonnull Boolean bWebhookSkipsslvalidation) {
    this.bWebhookSkipsslvalidation = bWebhookSkipsslvalidation;
  }


  public WebhookResponse sAuthenticationexternalDescription(@javax.annotation.Nullable String sAuthenticationexternalDescription) {
    this.sAuthenticationexternalDescription = sAuthenticationexternalDescription;
    return this;
  }

  /**
   * The description of the Authenticationexternal
   * @return sAuthenticationexternalDescription
   */
  @javax.annotation.Nullable
  public String getsAuthenticationexternalDescription() {
    return sAuthenticationexternalDescription;
  }

  public void setsAuthenticationexternalDescription(@javax.annotation.Nullable String sAuthenticationexternalDescription) {
    this.sAuthenticationexternalDescription = sAuthenticationexternalDescription;
  }


  public WebhookResponse objAudit(@javax.annotation.Nonnull CommonAudit objAudit) {
    this.objAudit = objAudit;
    return this;
  }

  /**
   * Get objAudit
   * @return objAudit
   */
  @javax.annotation.Nonnull
  public CommonAudit getObjAudit() {
    return objAudit;
  }

  public void setObjAudit(@javax.annotation.Nonnull CommonAudit objAudit) {
    this.objAudit = objAudit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookResponse webhookResponse = (WebhookResponse) o;
    return Objects.equals(this.pkiWebhookID, webhookResponse.pkiWebhookID) &&
        Objects.equals(this.fkiAuthenticationexternalID, webhookResponse.fkiAuthenticationexternalID) &&
        Objects.equals(this.sWebhookDescription, webhookResponse.sWebhookDescription) &&
        Objects.equals(this.fkiEzsignfoldertypeID, webhookResponse.fkiEzsignfoldertypeID) &&
        Objects.equals(this.sEzsignfoldertypeNameX, webhookResponse.sEzsignfoldertypeNameX) &&
        Objects.equals(this.eWebhookModule, webhookResponse.eWebhookModule) &&
        Objects.equals(this.eWebhookEzsignevent, webhookResponse.eWebhookEzsignevent) &&
        Objects.equals(this.eWebhookManagementevent, webhookResponse.eWebhookManagementevent) &&
        Objects.equals(this.sWebhookUrl, webhookResponse.sWebhookUrl) &&
        Objects.equals(this.sWebhookEmailfailed, webhookResponse.sWebhookEmailfailed) &&
        Objects.equals(this.sWebhookApikey, webhookResponse.sWebhookApikey) &&
        Objects.equals(this.sWebhookSecret, webhookResponse.sWebhookSecret) &&
        Objects.equals(this.bWebhookIsactive, webhookResponse.bWebhookIsactive) &&
        Objects.equals(this.bWebhookIssigned, webhookResponse.bWebhookIssigned) &&
        Objects.equals(this.bWebhookSkipsslvalidation, webhookResponse.bWebhookSkipsslvalidation) &&
        Objects.equals(this.sAuthenticationexternalDescription, webhookResponse.sAuthenticationexternalDescription) &&
        Objects.equals(this.objAudit, webhookResponse.objAudit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiWebhookID, fkiAuthenticationexternalID, sWebhookDescription, fkiEzsignfoldertypeID, sEzsignfoldertypeNameX, eWebhookModule, eWebhookEzsignevent, eWebhookManagementevent, sWebhookUrl, sWebhookEmailfailed, sWebhookApikey, sWebhookSecret, bWebhookIsactive, bWebhookIssigned, bWebhookSkipsslvalidation, sAuthenticationexternalDescription, objAudit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookResponse {\n");
    sb.append("    pkiWebhookID: ").append(toIndentedString(pkiWebhookID)).append("\n");
    sb.append("    fkiAuthenticationexternalID: ").append(toIndentedString(fkiAuthenticationexternalID)).append("\n");
    sb.append("    sWebhookDescription: ").append(toIndentedString(sWebhookDescription)).append("\n");
    sb.append("    fkiEzsignfoldertypeID: ").append(toIndentedString(fkiEzsignfoldertypeID)).append("\n");
    sb.append("    sEzsignfoldertypeNameX: ").append(toIndentedString(sEzsignfoldertypeNameX)).append("\n");
    sb.append("    eWebhookModule: ").append(toIndentedString(eWebhookModule)).append("\n");
    sb.append("    eWebhookEzsignevent: ").append(toIndentedString(eWebhookEzsignevent)).append("\n");
    sb.append("    eWebhookManagementevent: ").append(toIndentedString(eWebhookManagementevent)).append("\n");
    sb.append("    sWebhookUrl: ").append(toIndentedString(sWebhookUrl)).append("\n");
    sb.append("    sWebhookEmailfailed: ").append(toIndentedString(sWebhookEmailfailed)).append("\n");
    sb.append("    sWebhookApikey: ").append(toIndentedString(sWebhookApikey)).append("\n");
    sb.append("    sWebhookSecret: ").append(toIndentedString(sWebhookSecret)).append("\n");
    sb.append("    bWebhookIsactive: ").append(toIndentedString(bWebhookIsactive)).append("\n");
    sb.append("    bWebhookIssigned: ").append(toIndentedString(bWebhookIssigned)).append("\n");
    sb.append("    bWebhookSkipsslvalidation: ").append(toIndentedString(bWebhookSkipsslvalidation)).append("\n");
    sb.append("    sAuthenticationexternalDescription: ").append(toIndentedString(sAuthenticationexternalDescription)).append("\n");
    sb.append("    objAudit: ").append(toIndentedString(objAudit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiWebhookID");
    openapiFields.add("fkiAuthenticationexternalID");
    openapiFields.add("sWebhookDescription");
    openapiFields.add("fkiEzsignfoldertypeID");
    openapiFields.add("sEzsignfoldertypeNameX");
    openapiFields.add("eWebhookModule");
    openapiFields.add("eWebhookEzsignevent");
    openapiFields.add("eWebhookManagementevent");
    openapiFields.add("sWebhookUrl");
    openapiFields.add("sWebhookEmailfailed");
    openapiFields.add("sWebhookApikey");
    openapiFields.add("sWebhookSecret");
    openapiFields.add("bWebhookIsactive");
    openapiFields.add("bWebhookIssigned");
    openapiFields.add("bWebhookSkipsslvalidation");
    openapiFields.add("sAuthenticationexternalDescription");
    openapiFields.add("objAudit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiWebhookID");
    openapiRequiredFields.add("sWebhookDescription");
    openapiRequiredFields.add("eWebhookModule");
    openapiRequiredFields.add("sWebhookUrl");
    openapiRequiredFields.add("sWebhookEmailfailed");
    openapiRequiredFields.add("bWebhookIsactive");
    openapiRequiredFields.add("bWebhookIssigned");
    openapiRequiredFields.add("bWebhookSkipsslvalidation");
    openapiRequiredFields.add("objAudit");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebhookResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebhookResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookResponse is not found in the empty JSON string", WebhookResponse.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("sWebhookDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sWebhookDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sWebhookDescription").toString()));
      }
      if ((jsonObj.get("sEzsignfoldertypeNameX") != null && !jsonObj.get("sEzsignfoldertypeNameX").isJsonNull()) && !jsonObj.get("sEzsignfoldertypeNameX").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsignfoldertypeNameX` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsignfoldertypeNameX").toString()));
      }
      // validate the required field `eWebhookModule`
      FieldEWebhookModule.validateJsonElement(jsonObj.get("eWebhookModule"));
      // validate the optional field `eWebhookEzsignevent`
      if (jsonObj.get("eWebhookEzsignevent") != null && !jsonObj.get("eWebhookEzsignevent").isJsonNull()) {
        FieldEWebhookEzsignevent.validateJsonElement(jsonObj.get("eWebhookEzsignevent"));
      }
      // validate the optional field `eWebhookManagementevent`
      if (jsonObj.get("eWebhookManagementevent") != null && !jsonObj.get("eWebhookManagementevent").isJsonNull()) {
        FieldEWebhookManagementevent.validateJsonElement(jsonObj.get("eWebhookManagementevent"));
      }
      if (!jsonObj.get("sWebhookUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sWebhookUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sWebhookUrl").toString()));
      }
      if (!jsonObj.get("sWebhookEmailfailed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sWebhookEmailfailed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sWebhookEmailfailed").toString()));
      }
      if ((jsonObj.get("sWebhookApikey") != null && !jsonObj.get("sWebhookApikey").isJsonNull()) && !jsonObj.get("sWebhookApikey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sWebhookApikey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sWebhookApikey").toString()));
      }
      if ((jsonObj.get("sWebhookSecret") != null && !jsonObj.get("sWebhookSecret").isJsonNull()) && !jsonObj.get("sWebhookSecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sWebhookSecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sWebhookSecret").toString()));
      }
      if ((jsonObj.get("sAuthenticationexternalDescription") != null && !jsonObj.get("sAuthenticationexternalDescription").isJsonNull()) && !jsonObj.get("sAuthenticationexternalDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sAuthenticationexternalDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sAuthenticationexternalDescription").toString()));
      }
      // validate the required field `objAudit`
      CommonAudit.validateJsonElement(jsonObj.get("objAudit"));
  }


  /**
   * Create an instance of WebhookResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebhookResponse
   * @throws IOException if the JSON string is invalid with respect to WebhookResponse
   */
  public static WebhookResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookResponse.class);
  }

  /**
   * Convert an instance of WebhookResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

