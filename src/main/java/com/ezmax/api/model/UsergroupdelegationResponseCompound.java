/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Usergroupdelegation Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-25T01:49:05.162537169Z[Etc/UTC]")
public class UsergroupdelegationResponseCompound {
  public static final String SERIALIZED_NAME_PKI_USERGROUPDELEGATION_I_D = "pkiUsergroupdelegationID";
  @SerializedName(SERIALIZED_NAME_PKI_USERGROUPDELEGATION_I_D)
  private Integer pkiUsergroupdelegationID;

  public static final String SERIALIZED_NAME_FKI_USERGROUP_I_D = "fkiUsergroupID";
  @SerializedName(SERIALIZED_NAME_FKI_USERGROUP_I_D)
  private Integer fkiUsergroupID;

  public static final String SERIALIZED_NAME_FKI_USER_I_D = "fkiUserID";
  @SerializedName(SERIALIZED_NAME_FKI_USER_I_D)
  private Integer fkiUserID;

  public static final String SERIALIZED_NAME_S_USER_FIRSTNAME = "sUserFirstname";
  @SerializedName(SERIALIZED_NAME_S_USER_FIRSTNAME)
  private String sUserFirstname;

  public static final String SERIALIZED_NAME_S_USER_LASTNAME = "sUserLastname";
  @SerializedName(SERIALIZED_NAME_S_USER_LASTNAME)
  private String sUserLastname;

  public static final String SERIALIZED_NAME_S_USER_LOGINNAME = "sUserLoginname";
  @SerializedName(SERIALIZED_NAME_S_USER_LOGINNAME)
  private String sUserLoginname;

  public static final String SERIALIZED_NAME_S_EMAIL_ADDRESS = "sEmailAddress";
  @SerializedName(SERIALIZED_NAME_S_EMAIL_ADDRESS)
  private String sEmailAddress;

  public static final String SERIALIZED_NAME_S_USERGROUP_NAME_X = "sUsergroupNameX";
  @SerializedName(SERIALIZED_NAME_S_USERGROUP_NAME_X)
  private String sUsergroupNameX;

  public UsergroupdelegationResponseCompound() {
  }

  public UsergroupdelegationResponseCompound pkiUsergroupdelegationID(Integer pkiUsergroupdelegationID) {
    
    this.pkiUsergroupdelegationID = pkiUsergroupdelegationID;
    return this;
  }

   /**
   * The unique ID of the Usergroupdelegation
   * minimum: 0
   * maximum: 65535
   * @return pkiUsergroupdelegationID
  **/
  @javax.annotation.Nonnull
  public Integer getPkiUsergroupdelegationID() {
    return pkiUsergroupdelegationID;
  }


  public void setPkiUsergroupdelegationID(Integer pkiUsergroupdelegationID) {
    this.pkiUsergroupdelegationID = pkiUsergroupdelegationID;
  }


  public UsergroupdelegationResponseCompound fkiUsergroupID(Integer fkiUsergroupID) {
    
    this.fkiUsergroupID = fkiUsergroupID;
    return this;
  }

   /**
   * The unique ID of the Usergroup
   * minimum: 0
   * maximum: 255
   * @return fkiUsergroupID
  **/
  @javax.annotation.Nonnull
  public Integer getFkiUsergroupID() {
    return fkiUsergroupID;
  }


  public void setFkiUsergroupID(Integer fkiUsergroupID) {
    this.fkiUsergroupID = fkiUsergroupID;
  }


  public UsergroupdelegationResponseCompound fkiUserID(Integer fkiUserID) {
    
    this.fkiUserID = fkiUserID;
    return this;
  }

   /**
   * The unique ID of the User
   * minimum: 0
   * @return fkiUserID
  **/
  @javax.annotation.Nonnull
  public Integer getFkiUserID() {
    return fkiUserID;
  }


  public void setFkiUserID(Integer fkiUserID) {
    this.fkiUserID = fkiUserID;
  }


  public UsergroupdelegationResponseCompound sUserFirstname(String sUserFirstname) {
    
    this.sUserFirstname = sUserFirstname;
    return this;
  }

   /**
   * The first name of the user
   * @return sUserFirstname
  **/
  @javax.annotation.Nonnull
  public String getsUserFirstname() {
    return sUserFirstname;
  }


  public void setsUserFirstname(String sUserFirstname) {
    this.sUserFirstname = sUserFirstname;
  }


  public UsergroupdelegationResponseCompound sUserLastname(String sUserLastname) {
    
    this.sUserLastname = sUserLastname;
    return this;
  }

   /**
   * The last name of the user
   * @return sUserLastname
  **/
  @javax.annotation.Nonnull
  public String getsUserLastname() {
    return sUserLastname;
  }


  public void setsUserLastname(String sUserLastname) {
    this.sUserLastname = sUserLastname;
  }


  public UsergroupdelegationResponseCompound sUserLoginname(String sUserLoginname) {
    
    this.sUserLoginname = sUserLoginname;
    return this;
  }

   /**
   * The login name of the User.
   * @return sUserLoginname
  **/
  @javax.annotation.Nonnull
  public String getsUserLoginname() {
    return sUserLoginname;
  }


  public void setsUserLoginname(String sUserLoginname) {
    this.sUserLoginname = sUserLoginname;
  }


  public UsergroupdelegationResponseCompound sEmailAddress(String sEmailAddress) {
    
    this.sEmailAddress = sEmailAddress;
    return this;
  }

   /**
   * The email address.
   * @return sEmailAddress
  **/
  @javax.annotation.Nullable
  public String getsEmailAddress() {
    return sEmailAddress;
  }


  public void setsEmailAddress(String sEmailAddress) {
    this.sEmailAddress = sEmailAddress;
  }


  public UsergroupdelegationResponseCompound sUsergroupNameX(String sUsergroupNameX) {
    
    this.sUsergroupNameX = sUsergroupNameX;
    return this;
  }

   /**
   * The Name of the Usergroup in the language of the requester
   * @return sUsergroupNameX
  **/
  @javax.annotation.Nonnull
  public String getsUsergroupNameX() {
    return sUsergroupNameX;
  }


  public void setsUsergroupNameX(String sUsergroupNameX) {
    this.sUsergroupNameX = sUsergroupNameX;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsergroupdelegationResponseCompound usergroupdelegationResponseCompound = (UsergroupdelegationResponseCompound) o;
    return Objects.equals(this.pkiUsergroupdelegationID, usergroupdelegationResponseCompound.pkiUsergroupdelegationID) &&
        Objects.equals(this.fkiUsergroupID, usergroupdelegationResponseCompound.fkiUsergroupID) &&
        Objects.equals(this.fkiUserID, usergroupdelegationResponseCompound.fkiUserID) &&
        Objects.equals(this.sUserFirstname, usergroupdelegationResponseCompound.sUserFirstname) &&
        Objects.equals(this.sUserLastname, usergroupdelegationResponseCompound.sUserLastname) &&
        Objects.equals(this.sUserLoginname, usergroupdelegationResponseCompound.sUserLoginname) &&
        Objects.equals(this.sEmailAddress, usergroupdelegationResponseCompound.sEmailAddress) &&
        Objects.equals(this.sUsergroupNameX, usergroupdelegationResponseCompound.sUsergroupNameX);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiUsergroupdelegationID, fkiUsergroupID, fkiUserID, sUserFirstname, sUserLastname, sUserLoginname, sEmailAddress, sUsergroupNameX);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsergroupdelegationResponseCompound {\n");
    sb.append("    pkiUsergroupdelegationID: ").append(toIndentedString(pkiUsergroupdelegationID)).append("\n");
    sb.append("    fkiUsergroupID: ").append(toIndentedString(fkiUsergroupID)).append("\n");
    sb.append("    fkiUserID: ").append(toIndentedString(fkiUserID)).append("\n");
    sb.append("    sUserFirstname: ").append(toIndentedString(sUserFirstname)).append("\n");
    sb.append("    sUserLastname: ").append(toIndentedString(sUserLastname)).append("\n");
    sb.append("    sUserLoginname: ").append(toIndentedString(sUserLoginname)).append("\n");
    sb.append("    sEmailAddress: ").append(toIndentedString(sEmailAddress)).append("\n");
    sb.append("    sUsergroupNameX: ").append(toIndentedString(sUsergroupNameX)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiUsergroupdelegationID");
    openapiFields.add("fkiUsergroupID");
    openapiFields.add("fkiUserID");
    openapiFields.add("sUserFirstname");
    openapiFields.add("sUserLastname");
    openapiFields.add("sUserLoginname");
    openapiFields.add("sEmailAddress");
    openapiFields.add("sUsergroupNameX");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiUsergroupdelegationID");
    openapiRequiredFields.add("fkiUsergroupID");
    openapiRequiredFields.add("fkiUserID");
    openapiRequiredFields.add("sUserFirstname");
    openapiRequiredFields.add("sUserLastname");
    openapiRequiredFields.add("sUserLoginname");
    openapiRequiredFields.add("sUsergroupNameX");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UsergroupdelegationResponseCompound
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UsergroupdelegationResponseCompound.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsergroupdelegationResponseCompound is not found in the empty JSON string", UsergroupdelegationResponseCompound.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UsergroupdelegationResponseCompound.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UsergroupdelegationResponseCompound` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UsergroupdelegationResponseCompound.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("sUserFirstname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sUserFirstname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sUserFirstname").toString()));
      }
      if (!jsonObj.get("sUserLastname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sUserLastname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sUserLastname").toString()));
      }
      if (!jsonObj.get("sUserLoginname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sUserLoginname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sUserLoginname").toString()));
      }
      if ((jsonObj.get("sEmailAddress") != null && !jsonObj.get("sEmailAddress").isJsonNull()) && !jsonObj.get("sEmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEmailAddress").toString()));
      }
      if (!jsonObj.get("sUsergroupNameX").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sUsergroupNameX` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sUsergroupNameX").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsergroupdelegationResponseCompound.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsergroupdelegationResponseCompound' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsergroupdelegationResponseCompound> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsergroupdelegationResponseCompound.class));

       return (TypeAdapter<T>) new TypeAdapter<UsergroupdelegationResponseCompound>() {
           @Override
           public void write(JsonWriter out, UsergroupdelegationResponseCompound value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UsergroupdelegationResponseCompound read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UsergroupdelegationResponseCompound given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UsergroupdelegationResponseCompound
  * @throws IOException if the JSON string is invalid with respect to UsergroupdelegationResponseCompound
  */
  public static UsergroupdelegationResponseCompound fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsergroupdelegationResponseCompound.class);
  }

 /**
  * Convert an instance of UsergroupdelegationResponseCompound to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

