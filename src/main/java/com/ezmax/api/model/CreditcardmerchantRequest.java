/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Creditcardmerchant Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-30T20:25:06.858397322Z[Etc/UTC]", comments = "Generator version: 7.11.0")
public class CreditcardmerchantRequest {
  public static final String SERIALIZED_NAME_PKI_CREDITCARDMERCHANT_I_D = "pkiCreditcardmerchantID";
  @SerializedName(SERIALIZED_NAME_PKI_CREDITCARDMERCHANT_I_D)
  @javax.annotation.Nullable
  private Integer pkiCreditcardmerchantID;

  public static final String SERIALIZED_NAME_FKI_BANKACCOUNT_I_D = "fkiBankaccountID";
  @SerializedName(SERIALIZED_NAME_FKI_BANKACCOUNT_I_D)
  @javax.annotation.Nonnull
  private Integer fkiBankaccountID;

  public static final String SERIALIZED_NAME_FKI_LANGUAGE_I_D = "fkiLanguageID";
  @SerializedName(SERIALIZED_NAME_FKI_LANGUAGE_I_D)
  @javax.annotation.Nullable
  private Integer fkiLanguageID;

  public static final String SERIALIZED_NAME_B_CREDITCARDMERCHANT_DENYVISA = "bCreditcardmerchantDenyvisa";
  @SerializedName(SERIALIZED_NAME_B_CREDITCARDMERCHANT_DENYVISA)
  @javax.annotation.Nonnull
  private Boolean bCreditcardmerchantDenyvisa;

  public static final String SERIALIZED_NAME_B_CREDITCARDMERCHANT_DENYMASTERCARD = "bCreditcardmerchantDenymastercard";
  @SerializedName(SERIALIZED_NAME_B_CREDITCARDMERCHANT_DENYMASTERCARD)
  @javax.annotation.Nonnull
  private Boolean bCreditcardmerchantDenymastercard;

  public static final String SERIALIZED_NAME_B_CREDITCARDMERCHANT_DENYAMEX = "bCreditcardmerchantDenyamex";
  @SerializedName(SERIALIZED_NAME_B_CREDITCARDMERCHANT_DENYAMEX)
  @javax.annotation.Nonnull
  private Boolean bCreditcardmerchantDenyamex;

  public static final String SERIALIZED_NAME_B_CREDITCARDMERCHANT_ISACTIVE = "bCreditcardmerchantIsactive";
  @SerializedName(SERIALIZED_NAME_B_CREDITCARDMERCHANT_ISACTIVE)
  @javax.annotation.Nonnull
  private Boolean bCreditcardmerchantIsactive;

  public static final String SERIALIZED_NAME_S_CREDITCARDMERCHANT_APITOKEN = "sCreditcardmerchantApitoken";
  @SerializedName(SERIALIZED_NAME_S_CREDITCARDMERCHANT_APITOKEN)
  @javax.annotation.Nullable
  private String sCreditcardmerchantApitoken;

  public static final String SERIALIZED_NAME_S_CREDITCARDMERCHANT_DESCRIPTION = "sCreditcardmerchantDescription";
  @SerializedName(SERIALIZED_NAME_S_CREDITCARDMERCHANT_DESCRIPTION)
  @javax.annotation.Nonnull
  private String sCreditcardmerchantDescription;

  public static final String SERIALIZED_NAME_S_CREDITCARDMERCHANT_STOREID = "sCreditcardmerchantStoreid";
  @SerializedName(SERIALIZED_NAME_S_CREDITCARDMERCHANT_STOREID)
  @javax.annotation.Nonnull
  private String sCreditcardmerchantStoreid;

  public CreditcardmerchantRequest() {
  }

  public CreditcardmerchantRequest pkiCreditcardmerchantID(@javax.annotation.Nullable Integer pkiCreditcardmerchantID) {
    this.pkiCreditcardmerchantID = pkiCreditcardmerchantID;
    return this;
  }

  /**
   * The unique ID of the Creditcardmerchant
   * minimum: 0
   * maximum: 255
   * @return pkiCreditcardmerchantID
   */
  @javax.annotation.Nullable
  public Integer getPkiCreditcardmerchantID() {
    return pkiCreditcardmerchantID;
  }

  public void setPkiCreditcardmerchantID(@javax.annotation.Nullable Integer pkiCreditcardmerchantID) {
    this.pkiCreditcardmerchantID = pkiCreditcardmerchantID;
  }


  public CreditcardmerchantRequest fkiBankaccountID(@javax.annotation.Nonnull Integer fkiBankaccountID) {
    this.fkiBankaccountID = fkiBankaccountID;
    return this;
  }

  /**
   * The unique ID of the Bankaccount
   * minimum: 0
   * maximum: 255
   * @return fkiBankaccountID
   */
  @javax.annotation.Nonnull
  public Integer getFkiBankaccountID() {
    return fkiBankaccountID;
  }

  public void setFkiBankaccountID(@javax.annotation.Nonnull Integer fkiBankaccountID) {
    this.fkiBankaccountID = fkiBankaccountID;
  }


  public CreditcardmerchantRequest fkiLanguageID(@javax.annotation.Nullable Integer fkiLanguageID) {
    this.fkiLanguageID = fkiLanguageID;
    return this;
  }

  /**
   * The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
   * minimum: 1
   * maximum: 2
   * @return fkiLanguageID
   */
  @javax.annotation.Nullable
  public Integer getFkiLanguageID() {
    return fkiLanguageID;
  }

  public void setFkiLanguageID(@javax.annotation.Nullable Integer fkiLanguageID) {
    this.fkiLanguageID = fkiLanguageID;
  }


  public CreditcardmerchantRequest bCreditcardmerchantDenyvisa(@javax.annotation.Nonnull Boolean bCreditcardmerchantDenyvisa) {
    this.bCreditcardmerchantDenyvisa = bCreditcardmerchantDenyvisa;
    return this;
  }

  /**
   * Whether if visa are denied
   * @return bCreditcardmerchantDenyvisa
   */
  @javax.annotation.Nonnull
  public Boolean getbCreditcardmerchantDenyvisa() {
    return bCreditcardmerchantDenyvisa;
  }

  public void setbCreditcardmerchantDenyvisa(@javax.annotation.Nonnull Boolean bCreditcardmerchantDenyvisa) {
    this.bCreditcardmerchantDenyvisa = bCreditcardmerchantDenyvisa;
  }


  public CreditcardmerchantRequest bCreditcardmerchantDenymastercard(@javax.annotation.Nonnull Boolean bCreditcardmerchantDenymastercard) {
    this.bCreditcardmerchantDenymastercard = bCreditcardmerchantDenymastercard;
    return this;
  }

  /**
   * Whether if mastercard are denied
   * @return bCreditcardmerchantDenymastercard
   */
  @javax.annotation.Nonnull
  public Boolean getbCreditcardmerchantDenymastercard() {
    return bCreditcardmerchantDenymastercard;
  }

  public void setbCreditcardmerchantDenymastercard(@javax.annotation.Nonnull Boolean bCreditcardmerchantDenymastercard) {
    this.bCreditcardmerchantDenymastercard = bCreditcardmerchantDenymastercard;
  }


  public CreditcardmerchantRequest bCreditcardmerchantDenyamex(@javax.annotation.Nonnull Boolean bCreditcardmerchantDenyamex) {
    this.bCreditcardmerchantDenyamex = bCreditcardmerchantDenyamex;
    return this;
  }

  /**
   * Whether if amex are denied
   * @return bCreditcardmerchantDenyamex
   */
  @javax.annotation.Nonnull
  public Boolean getbCreditcardmerchantDenyamex() {
    return bCreditcardmerchantDenyamex;
  }

  public void setbCreditcardmerchantDenyamex(@javax.annotation.Nonnull Boolean bCreditcardmerchantDenyamex) {
    this.bCreditcardmerchantDenyamex = bCreditcardmerchantDenyamex;
  }


  public CreditcardmerchantRequest bCreditcardmerchantIsactive(@javax.annotation.Nonnull Boolean bCreditcardmerchantIsactive) {
    this.bCreditcardmerchantIsactive = bCreditcardmerchantIsactive;
    return this;
  }

  /**
   * Whether the creditcardmerchant is active or not
   * @return bCreditcardmerchantIsactive
   */
  @javax.annotation.Nonnull
  public Boolean getbCreditcardmerchantIsactive() {
    return bCreditcardmerchantIsactive;
  }

  public void setbCreditcardmerchantIsactive(@javax.annotation.Nonnull Boolean bCreditcardmerchantIsactive) {
    this.bCreditcardmerchantIsactive = bCreditcardmerchantIsactive;
  }


  public CreditcardmerchantRequest sCreditcardmerchantApitoken(@javax.annotation.Nullable String sCreditcardmerchantApitoken) {
    this.sCreditcardmerchantApitoken = sCreditcardmerchantApitoken;
    return this;
  }

  /**
   * The apitoken of the Creditcardmerchant
   * @return sCreditcardmerchantApitoken
   */
  @javax.annotation.Nullable
  public String getsCreditcardmerchantApitoken() {
    return sCreditcardmerchantApitoken;
  }

  public void setsCreditcardmerchantApitoken(@javax.annotation.Nullable String sCreditcardmerchantApitoken) {
    this.sCreditcardmerchantApitoken = sCreditcardmerchantApitoken;
  }


  public CreditcardmerchantRequest sCreditcardmerchantDescription(@javax.annotation.Nonnull String sCreditcardmerchantDescription) {
    this.sCreditcardmerchantDescription = sCreditcardmerchantDescription;
    return this;
  }

  /**
   * The description of the Creditcardmerchant
   * @return sCreditcardmerchantDescription
   */
  @javax.annotation.Nonnull
  public String getsCreditcardmerchantDescription() {
    return sCreditcardmerchantDescription;
  }

  public void setsCreditcardmerchantDescription(@javax.annotation.Nonnull String sCreditcardmerchantDescription) {
    this.sCreditcardmerchantDescription = sCreditcardmerchantDescription;
  }


  public CreditcardmerchantRequest sCreditcardmerchantStoreid(@javax.annotation.Nonnull String sCreditcardmerchantStoreid) {
    this.sCreditcardmerchantStoreid = sCreditcardmerchantStoreid;
    return this;
  }

  /**
   * The storeid of the Creditcardmerchant
   * @return sCreditcardmerchantStoreid
   */
  @javax.annotation.Nonnull
  public String getsCreditcardmerchantStoreid() {
    return sCreditcardmerchantStoreid;
  }

  public void setsCreditcardmerchantStoreid(@javax.annotation.Nonnull String sCreditcardmerchantStoreid) {
    this.sCreditcardmerchantStoreid = sCreditcardmerchantStoreid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreditcardmerchantRequest creditcardmerchantRequest = (CreditcardmerchantRequest) o;
    return Objects.equals(this.pkiCreditcardmerchantID, creditcardmerchantRequest.pkiCreditcardmerchantID) &&
        Objects.equals(this.fkiBankaccountID, creditcardmerchantRequest.fkiBankaccountID) &&
        Objects.equals(this.fkiLanguageID, creditcardmerchantRequest.fkiLanguageID) &&
        Objects.equals(this.bCreditcardmerchantDenyvisa, creditcardmerchantRequest.bCreditcardmerchantDenyvisa) &&
        Objects.equals(this.bCreditcardmerchantDenymastercard, creditcardmerchantRequest.bCreditcardmerchantDenymastercard) &&
        Objects.equals(this.bCreditcardmerchantDenyamex, creditcardmerchantRequest.bCreditcardmerchantDenyamex) &&
        Objects.equals(this.bCreditcardmerchantIsactive, creditcardmerchantRequest.bCreditcardmerchantIsactive) &&
        Objects.equals(this.sCreditcardmerchantApitoken, creditcardmerchantRequest.sCreditcardmerchantApitoken) &&
        Objects.equals(this.sCreditcardmerchantDescription, creditcardmerchantRequest.sCreditcardmerchantDescription) &&
        Objects.equals(this.sCreditcardmerchantStoreid, creditcardmerchantRequest.sCreditcardmerchantStoreid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiCreditcardmerchantID, fkiBankaccountID, fkiLanguageID, bCreditcardmerchantDenyvisa, bCreditcardmerchantDenymastercard, bCreditcardmerchantDenyamex, bCreditcardmerchantIsactive, sCreditcardmerchantApitoken, sCreditcardmerchantDescription, sCreditcardmerchantStoreid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreditcardmerchantRequest {\n");
    sb.append("    pkiCreditcardmerchantID: ").append(toIndentedString(pkiCreditcardmerchantID)).append("\n");
    sb.append("    fkiBankaccountID: ").append(toIndentedString(fkiBankaccountID)).append("\n");
    sb.append("    fkiLanguageID: ").append(toIndentedString(fkiLanguageID)).append("\n");
    sb.append("    bCreditcardmerchantDenyvisa: ").append(toIndentedString(bCreditcardmerchantDenyvisa)).append("\n");
    sb.append("    bCreditcardmerchantDenymastercard: ").append(toIndentedString(bCreditcardmerchantDenymastercard)).append("\n");
    sb.append("    bCreditcardmerchantDenyamex: ").append(toIndentedString(bCreditcardmerchantDenyamex)).append("\n");
    sb.append("    bCreditcardmerchantIsactive: ").append(toIndentedString(bCreditcardmerchantIsactive)).append("\n");
    sb.append("    sCreditcardmerchantApitoken: ").append(toIndentedString(sCreditcardmerchantApitoken)).append("\n");
    sb.append("    sCreditcardmerchantDescription: ").append(toIndentedString(sCreditcardmerchantDescription)).append("\n");
    sb.append("    sCreditcardmerchantStoreid: ").append(toIndentedString(sCreditcardmerchantStoreid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiCreditcardmerchantID");
    openapiFields.add("fkiBankaccountID");
    openapiFields.add("fkiLanguageID");
    openapiFields.add("bCreditcardmerchantDenyvisa");
    openapiFields.add("bCreditcardmerchantDenymastercard");
    openapiFields.add("bCreditcardmerchantDenyamex");
    openapiFields.add("bCreditcardmerchantIsactive");
    openapiFields.add("sCreditcardmerchantApitoken");
    openapiFields.add("sCreditcardmerchantDescription");
    openapiFields.add("sCreditcardmerchantStoreid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fkiBankaccountID");
    openapiRequiredFields.add("bCreditcardmerchantDenyvisa");
    openapiRequiredFields.add("bCreditcardmerchantDenymastercard");
    openapiRequiredFields.add("bCreditcardmerchantDenyamex");
    openapiRequiredFields.add("bCreditcardmerchantIsactive");
    openapiRequiredFields.add("sCreditcardmerchantDescription");
    openapiRequiredFields.add("sCreditcardmerchantStoreid");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreditcardmerchantRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreditcardmerchantRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreditcardmerchantRequest is not found in the empty JSON string", CreditcardmerchantRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreditcardmerchantRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreditcardmerchantRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreditcardmerchantRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("sCreditcardmerchantApitoken") != null && !jsonObj.get("sCreditcardmerchantApitoken").isJsonNull()) && !jsonObj.get("sCreditcardmerchantApitoken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sCreditcardmerchantApitoken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sCreditcardmerchantApitoken").toString()));
      }
      if (!jsonObj.get("sCreditcardmerchantDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sCreditcardmerchantDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sCreditcardmerchantDescription").toString()));
      }
      if (!jsonObj.get("sCreditcardmerchantStoreid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sCreditcardmerchantStoreid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sCreditcardmerchantStoreid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreditcardmerchantRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreditcardmerchantRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreditcardmerchantRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreditcardmerchantRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreditcardmerchantRequest>() {
           @Override
           public void write(JsonWriter out, CreditcardmerchantRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreditcardmerchantRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreditcardmerchantRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreditcardmerchantRequest
   * @throws IOException if the JSON string is invalid with respect to CreditcardmerchantRequest
   */
  public static CreditcardmerchantRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreditcardmerchantRequest.class);
  }

  /**
   * Convert an instance of CreditcardmerchantRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

