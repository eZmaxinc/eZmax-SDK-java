/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Discussion Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-17T15:03:32.455495633Z[Etc/UTC]", comments = "Generator version: 7.10.0")
public class DiscussionRequest {
  public static final String SERIALIZED_NAME_PKI_DISCUSSION_I_D = "pkiDiscussionID";
  @SerializedName(SERIALIZED_NAME_PKI_DISCUSSION_I_D)
  @javax.annotation.Nullable
  private Integer pkiDiscussionID;

  public static final String SERIALIZED_NAME_S_DISCUSSION_DESCRIPTION = "sDiscussionDescription";
  @SerializedName(SERIALIZED_NAME_S_DISCUSSION_DESCRIPTION)
  @javax.annotation.Nonnull
  private String sDiscussionDescription;

  public static final String SERIALIZED_NAME_B_DISCUSSION_CLOSED = "bDiscussionClosed";
  @SerializedName(SERIALIZED_NAME_B_DISCUSSION_CLOSED)
  @javax.annotation.Nullable
  private Boolean bDiscussionClosed;

  public DiscussionRequest() {
  }

  public DiscussionRequest pkiDiscussionID(@javax.annotation.Nullable Integer pkiDiscussionID) {
    this.pkiDiscussionID = pkiDiscussionID;
    return this;
  }

  /**
   * The unique ID of the Discussion
   * minimum: 0
   * maximum: 16777215
   * @return pkiDiscussionID
   */
  @javax.annotation.Nullable
  public Integer getPkiDiscussionID() {
    return pkiDiscussionID;
  }

  public void setPkiDiscussionID(@javax.annotation.Nullable Integer pkiDiscussionID) {
    this.pkiDiscussionID = pkiDiscussionID;
  }


  public DiscussionRequest sDiscussionDescription(@javax.annotation.Nonnull String sDiscussionDescription) {
    this.sDiscussionDescription = sDiscussionDescription;
    return this;
  }

  /**
   * The description of the Discussion
   * @return sDiscussionDescription
   */
  @javax.annotation.Nonnull
  public String getsDiscussionDescription() {
    return sDiscussionDescription;
  }

  public void setsDiscussionDescription(@javax.annotation.Nonnull String sDiscussionDescription) {
    this.sDiscussionDescription = sDiscussionDescription;
  }


  public DiscussionRequest bDiscussionClosed(@javax.annotation.Nullable Boolean bDiscussionClosed) {
    this.bDiscussionClosed = bDiscussionClosed;
    return this;
  }

  /**
   * Whether if it&#39;s an closed
   * @return bDiscussionClosed
   */
  @javax.annotation.Nullable
  public Boolean getbDiscussionClosed() {
    return bDiscussionClosed;
  }

  public void setbDiscussionClosed(@javax.annotation.Nullable Boolean bDiscussionClosed) {
    this.bDiscussionClosed = bDiscussionClosed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiscussionRequest discussionRequest = (DiscussionRequest) o;
    return Objects.equals(this.pkiDiscussionID, discussionRequest.pkiDiscussionID) &&
        Objects.equals(this.sDiscussionDescription, discussionRequest.sDiscussionDescription) &&
        Objects.equals(this.bDiscussionClosed, discussionRequest.bDiscussionClosed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiDiscussionID, sDiscussionDescription, bDiscussionClosed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiscussionRequest {\n");
    sb.append("    pkiDiscussionID: ").append(toIndentedString(pkiDiscussionID)).append("\n");
    sb.append("    sDiscussionDescription: ").append(toIndentedString(sDiscussionDescription)).append("\n");
    sb.append("    bDiscussionClosed: ").append(toIndentedString(bDiscussionClosed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiDiscussionID");
    openapiFields.add("sDiscussionDescription");
    openapiFields.add("bDiscussionClosed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sDiscussionDescription");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DiscussionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiscussionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiscussionRequest is not found in the empty JSON string", DiscussionRequest.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("sDiscussionDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sDiscussionDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sDiscussionDescription").toString()));
      }
  }


  /**
   * Create an instance of DiscussionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DiscussionRequest
   * @throws IOException if the JSON string is invalid with respect to DiscussionRequest
   */
  public static DiscussionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiscussionRequest.class);
  }

  /**
   * Convert an instance of DiscussionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

