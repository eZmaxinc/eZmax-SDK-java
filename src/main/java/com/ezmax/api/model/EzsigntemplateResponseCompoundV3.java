/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.CommonAudit;
import com.ezmax.api.model.EzsigntemplateResponseV3;
import com.ezmax.api.model.EzsigntemplatedocumentResponse;
import com.ezmax.api.model.EzsigntemplatesignerResponseCompound;
import com.ezmax.api.model.FieldEEzsigntemplateRecognition;
import com.ezmax.api.model.FieldEEzsigntemplateType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Ezsigntemplate Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-17T15:03:32.455495633Z[Etc/UTC]", comments = "Generator version: 7.10.0")
public class EzsigntemplateResponseCompoundV3 extends EzsigntemplateResponseV3 {
  public static final String SERIALIZED_NAME_OBJ_EZSIGNTEMPLATEDOCUMENT = "objEzsigntemplatedocument";
  @SerializedName(SERIALIZED_NAME_OBJ_EZSIGNTEMPLATEDOCUMENT)
  @javax.annotation.Nullable
  private EzsigntemplatedocumentResponse objEzsigntemplatedocument;

  public static final String SERIALIZED_NAME_A_OBJ_EZSIGNTEMPLATESIGNER = "a_objEzsigntemplatesigner";
  @SerializedName(SERIALIZED_NAME_A_OBJ_EZSIGNTEMPLATESIGNER)
  @javax.annotation.Nonnull
  private List<EzsigntemplatesignerResponseCompound> aObjEzsigntemplatesigner = new ArrayList<>();

  public EzsigntemplateResponseCompoundV3() {
  }

  public EzsigntemplateResponseCompoundV3 objEzsigntemplatedocument(@javax.annotation.Nullable EzsigntemplatedocumentResponse objEzsigntemplatedocument) {
    this.objEzsigntemplatedocument = objEzsigntemplatedocument;
    return this;
  }

  /**
   * Get objEzsigntemplatedocument
   * @return objEzsigntemplatedocument
   */
  @javax.annotation.Nullable
  public EzsigntemplatedocumentResponse getObjEzsigntemplatedocument() {
    return objEzsigntemplatedocument;
  }

  public void setObjEzsigntemplatedocument(@javax.annotation.Nullable EzsigntemplatedocumentResponse objEzsigntemplatedocument) {
    this.objEzsigntemplatedocument = objEzsigntemplatedocument;
  }


  public EzsigntemplateResponseCompoundV3 aObjEzsigntemplatesigner(@javax.annotation.Nonnull List<EzsigntemplatesignerResponseCompound> aObjEzsigntemplatesigner) {
    this.aObjEzsigntemplatesigner = aObjEzsigntemplatesigner;
    return this;
  }

  public EzsigntemplateResponseCompoundV3 addAObjEzsigntemplatesignerItem(EzsigntemplatesignerResponseCompound aObjEzsigntemplatesignerItem) {
    if (this.aObjEzsigntemplatesigner == null) {
      this.aObjEzsigntemplatesigner = new ArrayList<>();
    }
    this.aObjEzsigntemplatesigner.add(aObjEzsigntemplatesignerItem);
    return this;
  }

  /**
   * Get aObjEzsigntemplatesigner
   * @return aObjEzsigntemplatesigner
   */
  @javax.annotation.Nonnull
  public List<EzsigntemplatesignerResponseCompound> getaObjEzsigntemplatesigner() {
    return aObjEzsigntemplatesigner;
  }

  public void setaObjEzsigntemplatesigner(@javax.annotation.Nonnull List<EzsigntemplatesignerResponseCompound> aObjEzsigntemplatesigner) {
    this.aObjEzsigntemplatesigner = aObjEzsigntemplatesigner;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsigntemplateResponseCompoundV3 ezsigntemplateResponseCompoundV3 = (EzsigntemplateResponseCompoundV3) o;
    return Objects.equals(this.objEzsigntemplatedocument, ezsigntemplateResponseCompoundV3.objEzsigntemplatedocument) &&
        Objects.equals(this.aObjEzsigntemplatesigner, ezsigntemplateResponseCompoundV3.aObjEzsigntemplatesigner) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(objEzsigntemplatedocument, aObjEzsigntemplatesigner, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsigntemplateResponseCompoundV3 {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    objEzsigntemplatedocument: ").append(toIndentedString(objEzsigntemplatedocument)).append("\n");
    sb.append("    aObjEzsigntemplatesigner: ").append(toIndentedString(aObjEzsigntemplatesigner)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiEzsigntemplateID");
    openapiFields.add("fkiEzsigntemplatedocumentID");
    openapiFields.add("fkiEzsignfoldertypeID");
    openapiFields.add("fkiLanguageID");
    openapiFields.add("fkiEzdoctemplatedocumentID");
    openapiFields.add("sEzdoctemplatedocumentNameX");
    openapiFields.add("sLanguageNameX");
    openapiFields.add("sEzsigntemplateDescription");
    openapiFields.add("sEzsigntemplateExternaldescription");
    openapiFields.add("tEzsigntemplateComment");
    openapiFields.add("eEzsigntemplateRecognition");
    openapiFields.add("sEzsigntemplateFilenameregexp");
    openapiFields.add("bEzsigntemplateAdminonly");
    openapiFields.add("sEzsignfoldertypeNameX");
    openapiFields.add("objAudit");
    openapiFields.add("bEzsigntemplateEditallowed");
    openapiFields.add("eEzsigntemplateType");
    openapiFields.add("objEzsigntemplatedocument");
    openapiFields.add("a_objEzsigntemplatesigner");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("a_objEzsigntemplatesigner");
    openapiRequiredFields.add("pkiEzsigntemplateID");
    openapiRequiredFields.add("fkiLanguageID");
    openapiRequiredFields.add("sLanguageNameX");
    openapiRequiredFields.add("sEzsigntemplateDescription");
    openapiRequiredFields.add("bEzsigntemplateAdminonly");
    openapiRequiredFields.add("objAudit");
    openapiRequiredFields.add("bEzsigntemplateEditallowed");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EzsigntemplateResponseCompoundV3
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EzsigntemplateResponseCompoundV3.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsigntemplateResponseCompoundV3 is not found in the empty JSON string", EzsigntemplateResponseCompoundV3.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EzsigntemplateResponseCompoundV3.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsigntemplateResponseCompoundV3` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EzsigntemplateResponseCompoundV3.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `objEzsigntemplatedocument`
      if (jsonObj.get("objEzsigntemplatedocument") != null && !jsonObj.get("objEzsigntemplatedocument").isJsonNull()) {
        EzsigntemplatedocumentResponse.validateJsonElement(jsonObj.get("objEzsigntemplatedocument"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("a_objEzsigntemplatesigner").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_objEzsigntemplatesigner` to be an array in the JSON string but got `%s`", jsonObj.get("a_objEzsigntemplatesigner").toString()));
      }

      JsonArray jsonArrayaObjEzsigntemplatesigner = jsonObj.getAsJsonArray("a_objEzsigntemplatesigner");
      // validate the required field `a_objEzsigntemplatesigner` (array)
      for (int i = 0; i < jsonArrayaObjEzsigntemplatesigner.size(); i++) {
        EzsigntemplatesignerResponseCompound.validateJsonElement(jsonArrayaObjEzsigntemplatesigner.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsigntemplateResponseCompoundV3.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsigntemplateResponseCompoundV3' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsigntemplateResponseCompoundV3> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsigntemplateResponseCompoundV3.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsigntemplateResponseCompoundV3>() {
           @Override
           public void write(JsonWriter out, EzsigntemplateResponseCompoundV3 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsigntemplateResponseCompoundV3 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EzsigntemplateResponseCompoundV3 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EzsigntemplateResponseCompoundV3
   * @throws IOException if the JSON string is invalid with respect to EzsigntemplateResponseCompoundV3
   */
  public static EzsigntemplateResponseCompoundV3 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsigntemplateResponseCompoundV3.class);
  }

  /**
   * Convert an instance of EzsigntemplateResponseCompoundV3 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

