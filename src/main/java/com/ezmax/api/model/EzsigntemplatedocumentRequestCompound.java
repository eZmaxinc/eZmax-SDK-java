/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.17
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Ezsigntemplatedocument Object and children
 */
@ApiModel(description = "A Ezsigntemplatedocument Object and children")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-01T20:33:46.172972014Z[Etc/UTC]")
public class EzsigntemplatedocumentRequestCompound {
  public static final String SERIALIZED_NAME_PKI_EZSIGNTEMPLATEDOCUMENT_I_D = "pkiEzsigntemplatedocumentID";
  @SerializedName(SERIALIZED_NAME_PKI_EZSIGNTEMPLATEDOCUMENT_I_D)
  private Integer pkiEzsigntemplatedocumentID;

  public static final String SERIALIZED_NAME_FKI_EZSIGNTEMPLATE_I_D = "fkiEzsigntemplateID";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNTEMPLATE_I_D)
  private Integer fkiEzsigntemplateID;

  public static final String SERIALIZED_NAME_FKI_EZSIGNDOCUMENT_I_D = "fkiEzsigndocumentID";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNDOCUMENT_I_D)
  private Integer fkiEzsigndocumentID;

  public static final String SERIALIZED_NAME_FKI_EZSIGNTEMPLATESIGNER_I_D = "fkiEzsigntemplatesignerID";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNTEMPLATESIGNER_I_D)
  private Integer fkiEzsigntemplatesignerID;

  public static final String SERIALIZED_NAME_S_EZSIGNTEMPLATEDOCUMENT_NAME = "sEzsigntemplatedocumentName";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNTEMPLATEDOCUMENT_NAME)
  private String sEzsigntemplatedocumentName;

  /**
   * Indicates where to look for the document binary content.
   */
  @JsonAdapter(EEzsigntemplatedocumentSourceEnum.Adapter.class)
  public enum EEzsigntemplatedocumentSourceEnum {
    BASE64("Base64"),
    
    URL("Url"),
    
    EZSIGNDOCUMENT("Ezsigndocument");

    private String value;

    EEzsigntemplatedocumentSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EEzsigntemplatedocumentSourceEnum fromValue(String value) {
      for (EEzsigntemplatedocumentSourceEnum b : EEzsigntemplatedocumentSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EEzsigntemplatedocumentSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EEzsigntemplatedocumentSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EEzsigntemplatedocumentSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EEzsigntemplatedocumentSourceEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_E_EZSIGNTEMPLATEDOCUMENT_SOURCE = "eEzsigntemplatedocumentSource";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNTEMPLATEDOCUMENT_SOURCE)
  private EEzsigntemplatedocumentSourceEnum eEzsigntemplatedocumentSource;

  /**
   * Indicates the format of the template.
   */
  @JsonAdapter(EEzsigntemplatedocumentFormatEnum.Adapter.class)
  public enum EEzsigntemplatedocumentFormatEnum {
    PDF("Pdf");

    private String value;

    EEzsigntemplatedocumentFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EEzsigntemplatedocumentFormatEnum fromValue(String value) {
      for (EEzsigntemplatedocumentFormatEnum b : EEzsigntemplatedocumentFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EEzsigntemplatedocumentFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EEzsigntemplatedocumentFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EEzsigntemplatedocumentFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EEzsigntemplatedocumentFormatEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_E_EZSIGNTEMPLATEDOCUMENT_FORMAT = "eEzsigntemplatedocumentFormat";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNTEMPLATEDOCUMENT_FORMAT)
  private EEzsigntemplatedocumentFormatEnum eEzsigntemplatedocumentFormat;

  public static final String SERIALIZED_NAME_S_EZSIGNTEMPLATEDOCUMENT_BASE64 = "sEzsigntemplatedocumentBase64";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNTEMPLATEDOCUMENT_BASE64)
  private byte[] sEzsigntemplatedocumentBase64;

  public static final String SERIALIZED_NAME_S_EZSIGNTEMPLATEDOCUMENT_URL = "sEzsigntemplatedocumentUrl";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNTEMPLATEDOCUMENT_URL)
  private String sEzsigntemplatedocumentUrl;

  public static final String SERIALIZED_NAME_B_EZSIGNTEMPLATEDOCUMENT_FORCEREPAIR = "bEzsigntemplatedocumentForcerepair";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNTEMPLATEDOCUMENT_FORCEREPAIR)
  private Boolean bEzsigntemplatedocumentForcerepair;

  /**
   * If the document contains an existing PDF form this property must be set.  **Keep** leaves the form as-is in the document.  **Convert** removes the form and convert all the existing fields to Ezsigntemplateformfieldgroups and assign them to the specified **fkiEzsigntemplatesignerID**
   */
  @JsonAdapter(EEzsigntemplatedocumentFormEnum.Adapter.class)
  public enum EEzsigntemplatedocumentFormEnum {
    KEEP("Keep"),
    
    CONVERT("Convert");

    private String value;

    EEzsigntemplatedocumentFormEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EEzsigntemplatedocumentFormEnum fromValue(String value) {
      for (EEzsigntemplatedocumentFormEnum b : EEzsigntemplatedocumentFormEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EEzsigntemplatedocumentFormEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EEzsigntemplatedocumentFormEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EEzsigntemplatedocumentFormEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EEzsigntemplatedocumentFormEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_E_EZSIGNTEMPLATEDOCUMENT_FORM = "eEzsigntemplatedocumentForm";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNTEMPLATEDOCUMENT_FORM)
  private EEzsigntemplatedocumentFormEnum eEzsigntemplatedocumentForm;

  public static final String SERIALIZED_NAME_S_EZSIGNTEMPLATEDOCUMENT_PASSWORD = "sEzsigntemplatedocumentPassword";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNTEMPLATEDOCUMENT_PASSWORD)
  private String sEzsigntemplatedocumentPassword = "";

  public EzsigntemplatedocumentRequestCompound() {
  }

  public EzsigntemplatedocumentRequestCompound pkiEzsigntemplatedocumentID(Integer pkiEzsigntemplatedocumentID) {
    
    this.pkiEzsigntemplatedocumentID = pkiEzsigntemplatedocumentID;
    return this;
  }

   /**
   * The unique ID of the Ezsigntemplatedocument
   * minimum: 0
   * @return pkiEzsigntemplatedocumentID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "133", value = "The unique ID of the Ezsigntemplatedocument")

  public Integer getPkiEzsigntemplatedocumentID() {
    return pkiEzsigntemplatedocumentID;
  }


  public void setPkiEzsigntemplatedocumentID(Integer pkiEzsigntemplatedocumentID) {
    this.pkiEzsigntemplatedocumentID = pkiEzsigntemplatedocumentID;
  }


  public EzsigntemplatedocumentRequestCompound fkiEzsigntemplateID(Integer fkiEzsigntemplateID) {
    
    this.fkiEzsigntemplateID = fkiEzsigntemplateID;
    return this;
  }

   /**
   * The unique ID of the Ezsigntemplate
   * minimum: 0
   * @return fkiEzsigntemplateID
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "36", required = true, value = "The unique ID of the Ezsigntemplate")

  public Integer getFkiEzsigntemplateID() {
    return fkiEzsigntemplateID;
  }


  public void setFkiEzsigntemplateID(Integer fkiEzsigntemplateID) {
    this.fkiEzsigntemplateID = fkiEzsigntemplateID;
  }


  public EzsigntemplatedocumentRequestCompound fkiEzsigndocumentID(Integer fkiEzsigndocumentID) {
    
    this.fkiEzsigndocumentID = fkiEzsigndocumentID;
    return this;
  }

   /**
   * The unique ID of the Ezsigndocument
   * minimum: 0
   * @return fkiEzsigndocumentID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "97", value = "The unique ID of the Ezsigndocument")

  public Integer getFkiEzsigndocumentID() {
    return fkiEzsigndocumentID;
  }


  public void setFkiEzsigndocumentID(Integer fkiEzsigndocumentID) {
    this.fkiEzsigndocumentID = fkiEzsigndocumentID;
  }


  public EzsigntemplatedocumentRequestCompound fkiEzsigntemplatesignerID(Integer fkiEzsigntemplatesignerID) {
    
    this.fkiEzsigntemplatesignerID = fkiEzsigntemplatesignerID;
    return this;
  }

   /**
   * The unique ID of the Ezsigntemplatesigner
   * minimum: 0
   * @return fkiEzsigntemplatesignerID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "9", value = "The unique ID of the Ezsigntemplatesigner")

  public Integer getFkiEzsigntemplatesignerID() {
    return fkiEzsigntemplatesignerID;
  }


  public void setFkiEzsigntemplatesignerID(Integer fkiEzsigntemplatesignerID) {
    this.fkiEzsigntemplatesignerID = fkiEzsigntemplatesignerID;
  }


  public EzsigntemplatedocumentRequestCompound sEzsigntemplatedocumentName(String sEzsigntemplatedocumentName) {
    
    this.sEzsigntemplatedocumentName = sEzsigntemplatedocumentName;
    return this;
  }

   /**
   * The name of the Ezsigntemplatedocument.
   * @return sEzsigntemplatedocumentName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Standard Contract", required = true, value = "The name of the Ezsigntemplatedocument.")

  public String getsEzsigntemplatedocumentName() {
    return sEzsigntemplatedocumentName;
  }


  public void setsEzsigntemplatedocumentName(String sEzsigntemplatedocumentName) {
    this.sEzsigntemplatedocumentName = sEzsigntemplatedocumentName;
  }


  public EzsigntemplatedocumentRequestCompound eEzsigntemplatedocumentSource(EEzsigntemplatedocumentSourceEnum eEzsigntemplatedocumentSource) {
    
    this.eEzsigntemplatedocumentSource = eEzsigntemplatedocumentSource;
    return this;
  }

   /**
   * Indicates where to look for the document binary content.
   * @return eEzsigntemplatedocumentSource
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates where to look for the document binary content.")

  public EEzsigntemplatedocumentSourceEnum geteEzsigntemplatedocumentSource() {
    return eEzsigntemplatedocumentSource;
  }


  public void seteEzsigntemplatedocumentSource(EEzsigntemplatedocumentSourceEnum eEzsigntemplatedocumentSource) {
    this.eEzsigntemplatedocumentSource = eEzsigntemplatedocumentSource;
  }


  public EzsigntemplatedocumentRequestCompound eEzsigntemplatedocumentFormat(EEzsigntemplatedocumentFormatEnum eEzsigntemplatedocumentFormat) {
    
    this.eEzsigntemplatedocumentFormat = eEzsigntemplatedocumentFormat;
    return this;
  }

   /**
   * Indicates the format of the template.
   * @return eEzsigntemplatedocumentFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates the format of the template.")

  public EEzsigntemplatedocumentFormatEnum geteEzsigntemplatedocumentFormat() {
    return eEzsigntemplatedocumentFormat;
  }


  public void seteEzsigntemplatedocumentFormat(EEzsigntemplatedocumentFormatEnum eEzsigntemplatedocumentFormat) {
    this.eEzsigntemplatedocumentFormat = eEzsigntemplatedocumentFormat;
  }


  public EzsigntemplatedocumentRequestCompound sEzsigntemplatedocumentBase64(byte[] sEzsigntemplatedocumentBase64) {
    
    this.sEzsigntemplatedocumentBase64 = sEzsigntemplatedocumentBase64;
    return this;
  }

   /**
   * The Base64 encoded binary content of the document.  This field is Required when eEzsigntemplatedocumentSource &#x3D; Base64.
   * @return sEzsigntemplatedocumentBase64
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[B@6b54655f", value = "The Base64 encoded binary content of the document.  This field is Required when eEzsigntemplatedocumentSource = Base64.")

  public byte[] getsEzsigntemplatedocumentBase64() {
    return sEzsigntemplatedocumentBase64;
  }


  public void setsEzsigntemplatedocumentBase64(byte[] sEzsigntemplatedocumentBase64) {
    this.sEzsigntemplatedocumentBase64 = sEzsigntemplatedocumentBase64;
  }


  public EzsigntemplatedocumentRequestCompound sEzsigntemplatedocumentUrl(String sEzsigntemplatedocumentUrl) {
    
    this.sEzsigntemplatedocumentUrl = sEzsigntemplatedocumentUrl;
    return this;
  }

   /**
   * The url where the document content resides.  This field is Required when eEzsigntemplatedocumentSource &#x3D; Url.
   * @return sEzsigntemplatedocumentUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "http://www.example.com/template.pdf", value = "The url where the document content resides.  This field is Required when eEzsigntemplatedocumentSource = Url.")

  public String getsEzsigntemplatedocumentUrl() {
    return sEzsigntemplatedocumentUrl;
  }


  public void setsEzsigntemplatedocumentUrl(String sEzsigntemplatedocumentUrl) {
    this.sEzsigntemplatedocumentUrl = sEzsigntemplatedocumentUrl;
  }


  public EzsigntemplatedocumentRequestCompound bEzsigntemplatedocumentForcerepair(Boolean bEzsigntemplatedocumentForcerepair) {
    
    this.bEzsigntemplatedocumentForcerepair = bEzsigntemplatedocumentForcerepair;
    return this;
  }

   /**
   * Try to repair the document or flatten it if it cannot be used for electronic signature.
   * @return bEzsigntemplatedocumentForcerepair
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Try to repair the document or flatten it if it cannot be used for electronic signature.")

  public Boolean getbEzsigntemplatedocumentForcerepair() {
    return bEzsigntemplatedocumentForcerepair;
  }


  public void setbEzsigntemplatedocumentForcerepair(Boolean bEzsigntemplatedocumentForcerepair) {
    this.bEzsigntemplatedocumentForcerepair = bEzsigntemplatedocumentForcerepair;
  }


  public EzsigntemplatedocumentRequestCompound eEzsigntemplatedocumentForm(EEzsigntemplatedocumentFormEnum eEzsigntemplatedocumentForm) {
    
    this.eEzsigntemplatedocumentForm = eEzsigntemplatedocumentForm;
    return this;
  }

   /**
   * If the document contains an existing PDF form this property must be set.  **Keep** leaves the form as-is in the document.  **Convert** removes the form and convert all the existing fields to Ezsigntemplateformfieldgroups and assign them to the specified **fkiEzsigntemplatesignerID**
   * @return eEzsigntemplatedocumentForm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If the document contains an existing PDF form this property must be set.  **Keep** leaves the form as-is in the document.  **Convert** removes the form and convert all the existing fields to Ezsigntemplateformfieldgroups and assign them to the specified **fkiEzsigntemplatesignerID**")

  public EEzsigntemplatedocumentFormEnum geteEzsigntemplatedocumentForm() {
    return eEzsigntemplatedocumentForm;
  }


  public void seteEzsigntemplatedocumentForm(EEzsigntemplatedocumentFormEnum eEzsigntemplatedocumentForm) {
    this.eEzsigntemplatedocumentForm = eEzsigntemplatedocumentForm;
  }


  public EzsigntemplatedocumentRequestCompound sEzsigntemplatedocumentPassword(String sEzsigntemplatedocumentPassword) {
    
    this.sEzsigntemplatedocumentPassword = sEzsigntemplatedocumentPassword;
    return this;
  }

   /**
   * If the source template is password protected, the password to open/modify it.
   * @return sEzsigntemplatedocumentPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SecretPassword123", value = "If the source template is password protected, the password to open/modify it.")

  public String getsEzsigntemplatedocumentPassword() {
    return sEzsigntemplatedocumentPassword;
  }


  public void setsEzsigntemplatedocumentPassword(String sEzsigntemplatedocumentPassword) {
    this.sEzsigntemplatedocumentPassword = sEzsigntemplatedocumentPassword;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsigntemplatedocumentRequestCompound ezsigntemplatedocumentRequestCompound = (EzsigntemplatedocumentRequestCompound) o;
    return Objects.equals(this.pkiEzsigntemplatedocumentID, ezsigntemplatedocumentRequestCompound.pkiEzsigntemplatedocumentID) &&
        Objects.equals(this.fkiEzsigntemplateID, ezsigntemplatedocumentRequestCompound.fkiEzsigntemplateID) &&
        Objects.equals(this.fkiEzsigndocumentID, ezsigntemplatedocumentRequestCompound.fkiEzsigndocumentID) &&
        Objects.equals(this.fkiEzsigntemplatesignerID, ezsigntemplatedocumentRequestCompound.fkiEzsigntemplatesignerID) &&
        Objects.equals(this.sEzsigntemplatedocumentName, ezsigntemplatedocumentRequestCompound.sEzsigntemplatedocumentName) &&
        Objects.equals(this.eEzsigntemplatedocumentSource, ezsigntemplatedocumentRequestCompound.eEzsigntemplatedocumentSource) &&
        Objects.equals(this.eEzsigntemplatedocumentFormat, ezsigntemplatedocumentRequestCompound.eEzsigntemplatedocumentFormat) &&
        Arrays.equals(this.sEzsigntemplatedocumentBase64, ezsigntemplatedocumentRequestCompound.sEzsigntemplatedocumentBase64) &&
        Objects.equals(this.sEzsigntemplatedocumentUrl, ezsigntemplatedocumentRequestCompound.sEzsigntemplatedocumentUrl) &&
        Objects.equals(this.bEzsigntemplatedocumentForcerepair, ezsigntemplatedocumentRequestCompound.bEzsigntemplatedocumentForcerepair) &&
        Objects.equals(this.eEzsigntemplatedocumentForm, ezsigntemplatedocumentRequestCompound.eEzsigntemplatedocumentForm) &&
        Objects.equals(this.sEzsigntemplatedocumentPassword, ezsigntemplatedocumentRequestCompound.sEzsigntemplatedocumentPassword);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiEzsigntemplatedocumentID, fkiEzsigntemplateID, fkiEzsigndocumentID, fkiEzsigntemplatesignerID, sEzsigntemplatedocumentName, eEzsigntemplatedocumentSource, eEzsigntemplatedocumentFormat, Arrays.hashCode(sEzsigntemplatedocumentBase64), sEzsigntemplatedocumentUrl, bEzsigntemplatedocumentForcerepair, eEzsigntemplatedocumentForm, sEzsigntemplatedocumentPassword);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsigntemplatedocumentRequestCompound {\n");
    sb.append("    pkiEzsigntemplatedocumentID: ").append(toIndentedString(pkiEzsigntemplatedocumentID)).append("\n");
    sb.append("    fkiEzsigntemplateID: ").append(toIndentedString(fkiEzsigntemplateID)).append("\n");
    sb.append("    fkiEzsigndocumentID: ").append(toIndentedString(fkiEzsigndocumentID)).append("\n");
    sb.append("    fkiEzsigntemplatesignerID: ").append(toIndentedString(fkiEzsigntemplatesignerID)).append("\n");
    sb.append("    sEzsigntemplatedocumentName: ").append(toIndentedString(sEzsigntemplatedocumentName)).append("\n");
    sb.append("    eEzsigntemplatedocumentSource: ").append(toIndentedString(eEzsigntemplatedocumentSource)).append("\n");
    sb.append("    eEzsigntemplatedocumentFormat: ").append(toIndentedString(eEzsigntemplatedocumentFormat)).append("\n");
    sb.append("    sEzsigntemplatedocumentBase64: ").append(toIndentedString(sEzsigntemplatedocumentBase64)).append("\n");
    sb.append("    sEzsigntemplatedocumentUrl: ").append(toIndentedString(sEzsigntemplatedocumentUrl)).append("\n");
    sb.append("    bEzsigntemplatedocumentForcerepair: ").append(toIndentedString(bEzsigntemplatedocumentForcerepair)).append("\n");
    sb.append("    eEzsigntemplatedocumentForm: ").append(toIndentedString(eEzsigntemplatedocumentForm)).append("\n");
    sb.append("    sEzsigntemplatedocumentPassword: ").append(toIndentedString(sEzsigntemplatedocumentPassword)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiEzsigntemplatedocumentID");
    openapiFields.add("fkiEzsigntemplateID");
    openapiFields.add("fkiEzsigndocumentID");
    openapiFields.add("fkiEzsigntemplatesignerID");
    openapiFields.add("sEzsigntemplatedocumentName");
    openapiFields.add("eEzsigntemplatedocumentSource");
    openapiFields.add("eEzsigntemplatedocumentFormat");
    openapiFields.add("sEzsigntemplatedocumentBase64");
    openapiFields.add("sEzsigntemplatedocumentUrl");
    openapiFields.add("bEzsigntemplatedocumentForcerepair");
    openapiFields.add("eEzsigntemplatedocumentForm");
    openapiFields.add("sEzsigntemplatedocumentPassword");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fkiEzsigntemplateID");
    openapiRequiredFields.add("sEzsigntemplatedocumentName");
    openapiRequiredFields.add("eEzsigntemplatedocumentSource");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EzsigntemplatedocumentRequestCompound
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EzsigntemplatedocumentRequestCompound.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsigntemplatedocumentRequestCompound is not found in the empty JSON string", EzsigntemplatedocumentRequestCompound.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EzsigntemplatedocumentRequestCompound.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsigntemplatedocumentRequestCompound` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EzsigntemplatedocumentRequestCompound.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("sEzsigntemplatedocumentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsigntemplatedocumentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsigntemplatedocumentName").toString()));
      }
      if (!jsonObj.get("eEzsigntemplatedocumentSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eEzsigntemplatedocumentSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eEzsigntemplatedocumentSource").toString()));
      }
      if ((jsonObj.get("eEzsigntemplatedocumentFormat") != null && !jsonObj.get("eEzsigntemplatedocumentFormat").isJsonNull()) && !jsonObj.get("eEzsigntemplatedocumentFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eEzsigntemplatedocumentFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eEzsigntemplatedocumentFormat").toString()));
      }
      if ((jsonObj.get("sEzsigntemplatedocumentUrl") != null && !jsonObj.get("sEzsigntemplatedocumentUrl").isJsonNull()) && !jsonObj.get("sEzsigntemplatedocumentUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsigntemplatedocumentUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsigntemplatedocumentUrl").toString()));
      }
      if ((jsonObj.get("eEzsigntemplatedocumentForm") != null && !jsonObj.get("eEzsigntemplatedocumentForm").isJsonNull()) && !jsonObj.get("eEzsigntemplatedocumentForm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eEzsigntemplatedocumentForm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eEzsigntemplatedocumentForm").toString()));
      }
      if ((jsonObj.get("sEzsigntemplatedocumentPassword") != null && !jsonObj.get("sEzsigntemplatedocumentPassword").isJsonNull()) && !jsonObj.get("sEzsigntemplatedocumentPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsigntemplatedocumentPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsigntemplatedocumentPassword").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsigntemplatedocumentRequestCompound.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsigntemplatedocumentRequestCompound' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsigntemplatedocumentRequestCompound> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsigntemplatedocumentRequestCompound.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsigntemplatedocumentRequestCompound>() {
           @Override
           public void write(JsonWriter out, EzsigntemplatedocumentRequestCompound value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsigntemplatedocumentRequestCompound read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EzsigntemplatedocumentRequestCompound given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EzsigntemplatedocumentRequestCompound
  * @throws IOException if the JSON string is invalid with respect to EzsigntemplatedocumentRequestCompound
  */
  public static EzsigntemplatedocumentRequestCompound fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsigntemplatedocumentRequestCompound.class);
  }

 /**
  * Convert an instance of EzsigntemplatedocumentRequestCompound to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

