/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Province AutocompleteElement Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-04T21:44:04.165556308Z[Etc/UTC]", comments = "Generator version: 7.11.0")
public class ProvinceAutocompleteElementResponse {
  public static final String SERIALIZED_NAME_PKI_PROVINCE_I_D = "pkiProvinceID";
  @SerializedName(SERIALIZED_NAME_PKI_PROVINCE_I_D)
  @javax.annotation.Nonnull
  private Integer pkiProvinceID;

  public static final String SERIALIZED_NAME_FKI_COUNTRY_I_D = "fkiCountryID";
  @SerializedName(SERIALIZED_NAME_FKI_COUNTRY_I_D)
  @javax.annotation.Nonnull
  private Integer fkiCountryID;

  public static final String SERIALIZED_NAME_S_PROVINCE_NAME_X = "sProvinceNameX";
  @SerializedName(SERIALIZED_NAME_S_PROVINCE_NAME_X)
  @javax.annotation.Nonnull
  private String sProvinceNameX;

  public static final String SERIALIZED_NAME_S_PROVINCE_SHORTNAME = "sProvinceShortname";
  @SerializedName(SERIALIZED_NAME_S_PROVINCE_SHORTNAME)
  @javax.annotation.Nonnull
  private String sProvinceShortname;

  public static final String SERIALIZED_NAME_B_PROVINCE_ISACTIVE = "bProvinceIsactive";
  @SerializedName(SERIALIZED_NAME_B_PROVINCE_ISACTIVE)
  @javax.annotation.Nonnull
  private Boolean bProvinceIsactive;

  public ProvinceAutocompleteElementResponse() {
  }

  public ProvinceAutocompleteElementResponse pkiProvinceID(@javax.annotation.Nonnull Integer pkiProvinceID) {
    this.pkiProvinceID = pkiProvinceID;
    return this;
  }

  /**
   * The unique ID of the Province.  Here are some common values (Complete list must be retrieved from API):  |Value|Description| |-|-| |1|(Canada) Alberta |2|(Canada) British Columbia| |3|(Canada) Manitoba| |3|(Canada) Manitoba| |4|(Canada) New Brunswick| |5|(Canada) Newfoundland| |6|(Canada) Northwest Territories| |7|(Canada) Nova Scotia| |8|(Canada) Nunavut| |9|(Canada) Ontario| |10|(Canada) Prince Edward Island| |11|(Canada) Quebec| |12|(Canada) Saskatchewan| |13|(Canada) Yukon| |14|(United-States) Alabama| |15|(United-States) Alaska| |16|(United-States) Arizona| |17|(United-States) Arkansas| |18|(United-States) California| |19|(United-States) Colorado| |20|(United-States) Connecticut| |21|(United-States) Delaware| |22|(United-States) District of Columbia| |23|(United-States) Florida| |24|(United-States) Georgia| |25|(United-States) Hawaii| |26|(United-States) Idaho| |27|(United-States) Illinois| |28|(United-States) Indiana| |29|(United-States) Iowa| |30|(United-States) Kansas| |31|(United-States) Kentucky| |32|(United-States) Louisiane| |33|(United-States) Maine| |34|(United-States) Maryland| |35|(United-States) Massachusetts| |36|(United-States) Michigan| |37|(United-States) Minnesota| |38|(United-States) Mississippi| |39|(United-States) Missouri| |40|(United-States) Montana| |41|(United-States) Nebraska| |42|(United-States) Nevada| |43|(United-States) New Hampshire| |44|(United-States) New Jersey| |45|(United-States) New Mexico| |46|(United-States) New York| |47|(United-States) North Carolina| |48|(United-States) North Dakota| |49|(United-States) Ohio| |50|(United-States) Oklahoma| |51|(United-States) Oregon| |52|(United-States) Pennsylvania| |53|(United-States) Rhode Island| |54|(United-States) South Carolina| |55|(United-States) South Dakota| |56|(United-States) Tennessee| |57|(United-States) Texas| |58|(United-States) Utah| |60|(United-States) Vermont| |59|(United-States) Virginia| |61|(United-States) Washington| |62|(United-States) West Virginia| |63|(United-States) Wisconsin| |64|(United-States) Wyoming|
   * minimum: 0
   * @return pkiProvinceID
   */
  @javax.annotation.Nonnull
  public Integer getPkiProvinceID() {
    return pkiProvinceID;
  }

  public void setPkiProvinceID(@javax.annotation.Nonnull Integer pkiProvinceID) {
    this.pkiProvinceID = pkiProvinceID;
  }


  public ProvinceAutocompleteElementResponse fkiCountryID(@javax.annotation.Nonnull Integer fkiCountryID) {
    this.fkiCountryID = fkiCountryID;
    return this;
  }

  /**
   * The unique ID of the Country.  Here are some common values (Complete list must be retrieved from API):  |Value|Description| |-|-| |1|Canada| |2|United-States|
   * minimum: 0
   * @return fkiCountryID
   */
  @javax.annotation.Nonnull
  public Integer getFkiCountryID() {
    return fkiCountryID;
  }

  public void setFkiCountryID(@javax.annotation.Nonnull Integer fkiCountryID) {
    this.fkiCountryID = fkiCountryID;
  }


  public ProvinceAutocompleteElementResponse sProvinceNameX(@javax.annotation.Nonnull String sProvinceNameX) {
    this.sProvinceNameX = sProvinceNameX;
    return this;
  }

  /**
   * The name of the Province in the language of the requester
   * @return sProvinceNameX
   */
  @javax.annotation.Nonnull
  public String getsProvinceNameX() {
    return sProvinceNameX;
  }

  public void setsProvinceNameX(@javax.annotation.Nonnull String sProvinceNameX) {
    this.sProvinceNameX = sProvinceNameX;
  }


  public ProvinceAutocompleteElementResponse sProvinceShortname(@javax.annotation.Nonnull String sProvinceShortname) {
    this.sProvinceShortname = sProvinceShortname;
    return this;
  }

  /**
   * The shortname of the Province
   * @return sProvinceShortname
   */
  @javax.annotation.Nonnull
  public String getsProvinceShortname() {
    return sProvinceShortname;
  }

  public void setsProvinceShortname(@javax.annotation.Nonnull String sProvinceShortname) {
    this.sProvinceShortname = sProvinceShortname;
  }


  public ProvinceAutocompleteElementResponse bProvinceIsactive(@javax.annotation.Nonnull Boolean bProvinceIsactive) {
    this.bProvinceIsactive = bProvinceIsactive;
    return this;
  }

  /**
   * Whether the Province is active or not
   * @return bProvinceIsactive
   */
  @javax.annotation.Nonnull
  public Boolean getbProvinceIsactive() {
    return bProvinceIsactive;
  }

  public void setbProvinceIsactive(@javax.annotation.Nonnull Boolean bProvinceIsactive) {
    this.bProvinceIsactive = bProvinceIsactive;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProvinceAutocompleteElementResponse provinceAutocompleteElementResponse = (ProvinceAutocompleteElementResponse) o;
    return Objects.equals(this.pkiProvinceID, provinceAutocompleteElementResponse.pkiProvinceID) &&
        Objects.equals(this.fkiCountryID, provinceAutocompleteElementResponse.fkiCountryID) &&
        Objects.equals(this.sProvinceNameX, provinceAutocompleteElementResponse.sProvinceNameX) &&
        Objects.equals(this.sProvinceShortname, provinceAutocompleteElementResponse.sProvinceShortname) &&
        Objects.equals(this.bProvinceIsactive, provinceAutocompleteElementResponse.bProvinceIsactive);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiProvinceID, fkiCountryID, sProvinceNameX, sProvinceShortname, bProvinceIsactive);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProvinceAutocompleteElementResponse {\n");
    sb.append("    pkiProvinceID: ").append(toIndentedString(pkiProvinceID)).append("\n");
    sb.append("    fkiCountryID: ").append(toIndentedString(fkiCountryID)).append("\n");
    sb.append("    sProvinceNameX: ").append(toIndentedString(sProvinceNameX)).append("\n");
    sb.append("    sProvinceShortname: ").append(toIndentedString(sProvinceShortname)).append("\n");
    sb.append("    bProvinceIsactive: ").append(toIndentedString(bProvinceIsactive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiProvinceID");
    openapiFields.add("fkiCountryID");
    openapiFields.add("sProvinceNameX");
    openapiFields.add("sProvinceShortname");
    openapiFields.add("bProvinceIsactive");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiProvinceID");
    openapiRequiredFields.add("fkiCountryID");
    openapiRequiredFields.add("sProvinceNameX");
    openapiRequiredFields.add("sProvinceShortname");
    openapiRequiredFields.add("bProvinceIsactive");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProvinceAutocompleteElementResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProvinceAutocompleteElementResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProvinceAutocompleteElementResponse is not found in the empty JSON string", ProvinceAutocompleteElementResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProvinceAutocompleteElementResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProvinceAutocompleteElementResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProvinceAutocompleteElementResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("sProvinceNameX").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sProvinceNameX` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sProvinceNameX").toString()));
      }
      if (!jsonObj.get("sProvinceShortname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sProvinceShortname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sProvinceShortname").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProvinceAutocompleteElementResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProvinceAutocompleteElementResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProvinceAutocompleteElementResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProvinceAutocompleteElementResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ProvinceAutocompleteElementResponse>() {
           @Override
           public void write(JsonWriter out, ProvinceAutocompleteElementResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProvinceAutocompleteElementResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProvinceAutocompleteElementResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProvinceAutocompleteElementResponse
   * @throws IOException if the JSON string is invalid with respect to ProvinceAutocompleteElementResponse
   */
  public static ProvinceAutocompleteElementResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProvinceAutocompleteElementResponse.class);
  }

  /**
   * Convert an instance of ProvinceAutocompleteElementResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

