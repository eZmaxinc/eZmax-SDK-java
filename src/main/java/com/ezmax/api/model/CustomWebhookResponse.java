/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.CommonAudit;
import com.ezmax.api.model.FieldEWebhookEzsignevent;
import com.ezmax.api.model.FieldEWebhookManagementevent;
import com.ezmax.api.model.FieldEWebhookModule;
import com.ezmax.api.model.WebhookResponseCompound;
import com.ezmax.api.model.WebhookheaderResponseCompound;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A custom Webhook object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-17T15:03:32.455495633Z[Etc/UTC]", comments = "Generator version: 7.10.0")
public class CustomWebhookResponse extends WebhookResponseCompound {
  public static final String SERIALIZED_NAME_PKS_CUSTOMER_CODE = "pksCustomerCode";
  @SerializedName(SERIALIZED_NAME_PKS_CUSTOMER_CODE)
  @javax.annotation.Nonnull
  private String pksCustomerCode;

  public static final String SERIALIZED_NAME_B_WEBHOOK_TEST = "bWebhookTest";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_B_WEBHOOK_TEST)
  @javax.annotation.Nonnull
  private Boolean bWebhookTest;

  /**
   * Wheter the webhook received is a manual test or a real event
   */
  @JsonAdapter(EWebhookEmittypeEnum.Adapter.class)
  public enum EWebhookEmittypeEnum {
    AUTOMATIC("Automatic"),
    
    MANUAL("Manual"),
    
    TEST("Test");

    private String value;

    EWebhookEmittypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EWebhookEmittypeEnum fromValue(String value) {
      for (EWebhookEmittypeEnum b : EWebhookEmittypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EWebhookEmittypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EWebhookEmittypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EWebhookEmittypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EWebhookEmittypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EWebhookEmittypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_E_WEBHOOK_EMITTYPE = "eWebhookEmittype";
  @SerializedName(SERIALIZED_NAME_E_WEBHOOK_EMITTYPE)
  @javax.annotation.Nullable
  private EWebhookEmittypeEnum eWebhookEmittype;

  public CustomWebhookResponse() {
  }

  public CustomWebhookResponse pksCustomerCode(@javax.annotation.Nonnull String pksCustomerCode) {
    this.pksCustomerCode = pksCustomerCode;
    return this;
  }

  /**
   * The customer code assigned to your account
   * @return pksCustomerCode
   */
  @javax.annotation.Nonnull
  public String getPksCustomerCode() {
    return pksCustomerCode;
  }

  public void setPksCustomerCode(@javax.annotation.Nonnull String pksCustomerCode) {
    this.pksCustomerCode = pksCustomerCode;
  }


  @Deprecated
  public CustomWebhookResponse bWebhookTest(@javax.annotation.Nonnull Boolean bWebhookTest) {
    this.bWebhookTest = bWebhookTest;
    return this;
  }

  /**
   * Wheter the webhook received is a manual test or a real event
   * @return bWebhookTest
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nonnull
  public Boolean getbWebhookTest() {
    return bWebhookTest;
  }

  @Deprecated
  public void setbWebhookTest(@javax.annotation.Nonnull Boolean bWebhookTest) {
    this.bWebhookTest = bWebhookTest;
  }


  public CustomWebhookResponse eWebhookEmittype(@javax.annotation.Nullable EWebhookEmittypeEnum eWebhookEmittype) {
    this.eWebhookEmittype = eWebhookEmittype;
    return this;
  }

  /**
   * Wheter the webhook received is a manual test or a real event
   * @return eWebhookEmittype
   */
  @javax.annotation.Nullable
  public EWebhookEmittypeEnum geteWebhookEmittype() {
    return eWebhookEmittype;
  }

  public void seteWebhookEmittype(@javax.annotation.Nullable EWebhookEmittypeEnum eWebhookEmittype) {
    this.eWebhookEmittype = eWebhookEmittype;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomWebhookResponse customWebhookResponse = (CustomWebhookResponse) o;
    return Objects.equals(this.pksCustomerCode, customWebhookResponse.pksCustomerCode) &&
        Objects.equals(this.bWebhookTest, customWebhookResponse.bWebhookTest) &&
        Objects.equals(this.eWebhookEmittype, customWebhookResponse.eWebhookEmittype) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pksCustomerCode, bWebhookTest, eWebhookEmittype, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomWebhookResponse {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    pksCustomerCode: ").append(toIndentedString(pksCustomerCode)).append("\n");
    sb.append("    bWebhookTest: ").append(toIndentedString(bWebhookTest)).append("\n");
    sb.append("    eWebhookEmittype: ").append(toIndentedString(eWebhookEmittype)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiWebhookID");
    openapiFields.add("fkiAuthenticationexternalID");
    openapiFields.add("sWebhookDescription");
    openapiFields.add("fkiEzsignfoldertypeID");
    openapiFields.add("sEzsignfoldertypeNameX");
    openapiFields.add("eWebhookModule");
    openapiFields.add("eWebhookEzsignevent");
    openapiFields.add("eWebhookManagementevent");
    openapiFields.add("sWebhookUrl");
    openapiFields.add("sWebhookEmailfailed");
    openapiFields.add("sWebhookApikey");
    openapiFields.add("sWebhookSecret");
    openapiFields.add("bWebhookIsactive");
    openapiFields.add("bWebhookIssigned");
    openapiFields.add("bWebhookSkipsslvalidation");
    openapiFields.add("sAuthenticationexternalDescription");
    openapiFields.add("objAudit");
    openapiFields.add("sWebhookEvent");
    openapiFields.add("a_objWebhookheader");
    openapiFields.add("pksCustomerCode");
    openapiFields.add("bWebhookTest");
    openapiFields.add("eWebhookEmittype");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pksCustomerCode");
    openapiRequiredFields.add("bWebhookTest");
    openapiRequiredFields.add("pkiWebhookID");
    openapiRequiredFields.add("sWebhookDescription");
    openapiRequiredFields.add("eWebhookModule");
    openapiRequiredFields.add("sWebhookUrl");
    openapiRequiredFields.add("sWebhookEmailfailed");
    openapiRequiredFields.add("bWebhookIsactive");
    openapiRequiredFields.add("bWebhookIssigned");
    openapiRequiredFields.add("bWebhookSkipsslvalidation");
    openapiRequiredFields.add("objAudit");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomWebhookResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomWebhookResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomWebhookResponse is not found in the empty JSON string", CustomWebhookResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomWebhookResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomWebhookResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomWebhookResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("pksCustomerCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pksCustomerCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pksCustomerCode").toString()));
      }
      if ((jsonObj.get("eWebhookEmittype") != null && !jsonObj.get("eWebhookEmittype").isJsonNull()) && !jsonObj.get("eWebhookEmittype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eWebhookEmittype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eWebhookEmittype").toString()));
      }
      // validate the optional field `eWebhookEmittype`
      if (jsonObj.get("eWebhookEmittype") != null && !jsonObj.get("eWebhookEmittype").isJsonNull()) {
        EWebhookEmittypeEnum.validateJsonElement(jsonObj.get("eWebhookEmittype"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomWebhookResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomWebhookResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomWebhookResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomWebhookResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomWebhookResponse>() {
           @Override
           public void write(JsonWriter out, CustomWebhookResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomWebhookResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomWebhookResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomWebhookResponse
   * @throws IOException if the JSON string is invalid with respect to CustomWebhookResponse
   */
  public static CustomWebhookResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomWebhookResponse.class);
  }

  /**
   * Convert an instance of CustomWebhookResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

