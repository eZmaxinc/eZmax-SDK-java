/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.FieldEWebhookEzsignevent;
import com.ezmax.api.model.FieldEWebhookManagementevent;
import com.ezmax.api.model.FieldEWebhookModule;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A custom Webhook object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-05T13:57:46.112747798Z[Etc/UTC]")
public class CustomWebhookResponse {
  public static final String SERIALIZED_NAME_PKI_WEBHOOK_I_D = "pkiWebhookID";
  @SerializedName(SERIALIZED_NAME_PKI_WEBHOOK_I_D)
  private Integer pkiWebhookID;

  public static final String SERIALIZED_NAME_S_WEBHOOK_DESCRIPTION = "sWebhookDescription";
  @SerializedName(SERIALIZED_NAME_S_WEBHOOK_DESCRIPTION)
  private String sWebhookDescription;

  public static final String SERIALIZED_NAME_FKI_EZSIGNFOLDERTYPE_I_D = "fkiEzsignfoldertypeID";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNFOLDERTYPE_I_D)
  private Integer fkiEzsignfoldertypeID;

  public static final String SERIALIZED_NAME_S_EZSIGNFOLDERTYPE_NAME_X = "sEzsignfoldertypeNameX";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNFOLDERTYPE_NAME_X)
  private String sEzsignfoldertypeNameX;

  public static final String SERIALIZED_NAME_E_WEBHOOK_MODULE = "eWebhookModule";
  @SerializedName(SERIALIZED_NAME_E_WEBHOOK_MODULE)
  private FieldEWebhookModule eWebhookModule;

  public static final String SERIALIZED_NAME_E_WEBHOOK_EZSIGNEVENT = "eWebhookEzsignevent";
  @SerializedName(SERIALIZED_NAME_E_WEBHOOK_EZSIGNEVENT)
  private FieldEWebhookEzsignevent eWebhookEzsignevent;

  public static final String SERIALIZED_NAME_E_WEBHOOK_MANAGEMENTEVENT = "eWebhookManagementevent";
  @SerializedName(SERIALIZED_NAME_E_WEBHOOK_MANAGEMENTEVENT)
  private FieldEWebhookManagementevent eWebhookManagementevent;

  public static final String SERIALIZED_NAME_S_WEBHOOK_URL = "sWebhookUrl";
  @SerializedName(SERIALIZED_NAME_S_WEBHOOK_URL)
  private String sWebhookUrl;

  public static final String SERIALIZED_NAME_S_WEBHOOK_EMAILFAILED = "sWebhookEmailfailed";
  @SerializedName(SERIALIZED_NAME_S_WEBHOOK_EMAILFAILED)
  private String sWebhookEmailfailed;

  public static final String SERIALIZED_NAME_B_WEBHOOK_ISACTIVE = "bWebhookIsactive";
  @SerializedName(SERIALIZED_NAME_B_WEBHOOK_ISACTIVE)
  private Boolean bWebhookIsactive;

  public static final String SERIALIZED_NAME_B_WEBHOOK_SKIPSSLVALIDATION = "bWebhookSkipsslvalidation";
  @SerializedName(SERIALIZED_NAME_B_WEBHOOK_SKIPSSLVALIDATION)
  private Boolean bWebhookSkipsslvalidation;

  public static final String SERIALIZED_NAME_PKS_CUSTOMER_CODE = "pksCustomerCode";
  @SerializedName(SERIALIZED_NAME_PKS_CUSTOMER_CODE)
  private String pksCustomerCode;

  public static final String SERIALIZED_NAME_B_WEBHOOK_TEST = "bWebhookTest";
  @SerializedName(SERIALIZED_NAME_B_WEBHOOK_TEST)
  private Boolean bWebhookTest;

  public CustomWebhookResponse() {
  }

  public CustomWebhookResponse pkiWebhookID(Integer pkiWebhookID) {
    
    this.pkiWebhookID = pkiWebhookID;
    return this;
  }

   /**
   * The unique ID of the Webhook
   * @return pkiWebhookID
  **/
  @javax.annotation.Nonnull
  public Integer getPkiWebhookID() {
    return pkiWebhookID;
  }


  public void setPkiWebhookID(Integer pkiWebhookID) {
    this.pkiWebhookID = pkiWebhookID;
  }


  public CustomWebhookResponse sWebhookDescription(String sWebhookDescription) {
    
    this.sWebhookDescription = sWebhookDescription;
    return this;
  }

   /**
   * The description of the Webhook
   * @return sWebhookDescription
  **/
  @javax.annotation.Nonnull
  public String getsWebhookDescription() {
    return sWebhookDescription;
  }


  public void setsWebhookDescription(String sWebhookDescription) {
    this.sWebhookDescription = sWebhookDescription;
  }


  public CustomWebhookResponse fkiEzsignfoldertypeID(Integer fkiEzsignfoldertypeID) {
    
    this.fkiEzsignfoldertypeID = fkiEzsignfoldertypeID;
    return this;
  }

   /**
   * The unique ID of the Ezsignfoldertype.
   * minimum: 0
   * @return fkiEzsignfoldertypeID
  **/
  @javax.annotation.Nullable
  public Integer getFkiEzsignfoldertypeID() {
    return fkiEzsignfoldertypeID;
  }


  public void setFkiEzsignfoldertypeID(Integer fkiEzsignfoldertypeID) {
    this.fkiEzsignfoldertypeID = fkiEzsignfoldertypeID;
  }


  public CustomWebhookResponse sEzsignfoldertypeNameX(String sEzsignfoldertypeNameX) {
    
    this.sEzsignfoldertypeNameX = sEzsignfoldertypeNameX;
    return this;
  }

   /**
   * The name of the Ezsignfoldertype in the language of the requester
   * @return sEzsignfoldertypeNameX
  **/
  @javax.annotation.Nullable
  public String getsEzsignfoldertypeNameX() {
    return sEzsignfoldertypeNameX;
  }


  public void setsEzsignfoldertypeNameX(String sEzsignfoldertypeNameX) {
    this.sEzsignfoldertypeNameX = sEzsignfoldertypeNameX;
  }


  public CustomWebhookResponse eWebhookModule(FieldEWebhookModule eWebhookModule) {
    
    this.eWebhookModule = eWebhookModule;
    return this;
  }

   /**
   * Get eWebhookModule
   * @return eWebhookModule
  **/
  @javax.annotation.Nonnull
  public FieldEWebhookModule geteWebhookModule() {
    return eWebhookModule;
  }


  public void seteWebhookModule(FieldEWebhookModule eWebhookModule) {
    this.eWebhookModule = eWebhookModule;
  }


  public CustomWebhookResponse eWebhookEzsignevent(FieldEWebhookEzsignevent eWebhookEzsignevent) {
    
    this.eWebhookEzsignevent = eWebhookEzsignevent;
    return this;
  }

   /**
   * Get eWebhookEzsignevent
   * @return eWebhookEzsignevent
  **/
  @javax.annotation.Nullable
  public FieldEWebhookEzsignevent geteWebhookEzsignevent() {
    return eWebhookEzsignevent;
  }


  public void seteWebhookEzsignevent(FieldEWebhookEzsignevent eWebhookEzsignevent) {
    this.eWebhookEzsignevent = eWebhookEzsignevent;
  }


  public CustomWebhookResponse eWebhookManagementevent(FieldEWebhookManagementevent eWebhookManagementevent) {
    
    this.eWebhookManagementevent = eWebhookManagementevent;
    return this;
  }

   /**
   * Get eWebhookManagementevent
   * @return eWebhookManagementevent
  **/
  @javax.annotation.Nullable
  public FieldEWebhookManagementevent geteWebhookManagementevent() {
    return eWebhookManagementevent;
  }


  public void seteWebhookManagementevent(FieldEWebhookManagementevent eWebhookManagementevent) {
    this.eWebhookManagementevent = eWebhookManagementevent;
  }


  public CustomWebhookResponse sWebhookUrl(String sWebhookUrl) {
    
    this.sWebhookUrl = sWebhookUrl;
    return this;
  }

   /**
   * The URL of the Webhook callback
   * @return sWebhookUrl
  **/
  @javax.annotation.Nonnull
  public String getsWebhookUrl() {
    return sWebhookUrl;
  }


  public void setsWebhookUrl(String sWebhookUrl) {
    this.sWebhookUrl = sWebhookUrl;
  }


  public CustomWebhookResponse sWebhookEmailfailed(String sWebhookEmailfailed) {
    
    this.sWebhookEmailfailed = sWebhookEmailfailed;
    return this;
  }

   /**
   * The email that will receive the Webhook in case all attempts fail
   * @return sWebhookEmailfailed
  **/
  @javax.annotation.Nonnull
  public String getsWebhookEmailfailed() {
    return sWebhookEmailfailed;
  }


  public void setsWebhookEmailfailed(String sWebhookEmailfailed) {
    this.sWebhookEmailfailed = sWebhookEmailfailed;
  }


  public CustomWebhookResponse bWebhookIsactive(Boolean bWebhookIsactive) {
    
    this.bWebhookIsactive = bWebhookIsactive;
    return this;
  }

   /**
   * Whether the Webhook is active or not
   * @return bWebhookIsactive
  **/
  @javax.annotation.Nullable
  public Boolean getbWebhookIsactive() {
    return bWebhookIsactive;
  }


  public void setbWebhookIsactive(Boolean bWebhookIsactive) {
    this.bWebhookIsactive = bWebhookIsactive;
  }


  public CustomWebhookResponse bWebhookSkipsslvalidation(Boolean bWebhookSkipsslvalidation) {
    
    this.bWebhookSkipsslvalidation = bWebhookSkipsslvalidation;
    return this;
  }

   /**
   * Wheter the server&#39;s SSL certificate should be validated or not. Not recommended to skip for production use
   * @return bWebhookSkipsslvalidation
  **/
  @javax.annotation.Nonnull
  public Boolean getbWebhookSkipsslvalidation() {
    return bWebhookSkipsslvalidation;
  }


  public void setbWebhookSkipsslvalidation(Boolean bWebhookSkipsslvalidation) {
    this.bWebhookSkipsslvalidation = bWebhookSkipsslvalidation;
  }


  public CustomWebhookResponse pksCustomerCode(String pksCustomerCode) {
    
    this.pksCustomerCode = pksCustomerCode;
    return this;
  }

   /**
   * The customer code assigned to your account
   * @return pksCustomerCode
  **/
  @javax.annotation.Nonnull
  public String getPksCustomerCode() {
    return pksCustomerCode;
  }


  public void setPksCustomerCode(String pksCustomerCode) {
    this.pksCustomerCode = pksCustomerCode;
  }


  public CustomWebhookResponse bWebhookTest(Boolean bWebhookTest) {
    
    this.bWebhookTest = bWebhookTest;
    return this;
  }

   /**
   * Wheter the webhook received is a manual test or a real event
   * @return bWebhookTest
  **/
  @javax.annotation.Nonnull
  public Boolean getbWebhookTest() {
    return bWebhookTest;
  }


  public void setbWebhookTest(Boolean bWebhookTest) {
    this.bWebhookTest = bWebhookTest;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomWebhookResponse customWebhookResponse = (CustomWebhookResponse) o;
    return Objects.equals(this.pkiWebhookID, customWebhookResponse.pkiWebhookID) &&
        Objects.equals(this.sWebhookDescription, customWebhookResponse.sWebhookDescription) &&
        Objects.equals(this.fkiEzsignfoldertypeID, customWebhookResponse.fkiEzsignfoldertypeID) &&
        Objects.equals(this.sEzsignfoldertypeNameX, customWebhookResponse.sEzsignfoldertypeNameX) &&
        Objects.equals(this.eWebhookModule, customWebhookResponse.eWebhookModule) &&
        Objects.equals(this.eWebhookEzsignevent, customWebhookResponse.eWebhookEzsignevent) &&
        Objects.equals(this.eWebhookManagementevent, customWebhookResponse.eWebhookManagementevent) &&
        Objects.equals(this.sWebhookUrl, customWebhookResponse.sWebhookUrl) &&
        Objects.equals(this.sWebhookEmailfailed, customWebhookResponse.sWebhookEmailfailed) &&
        Objects.equals(this.bWebhookIsactive, customWebhookResponse.bWebhookIsactive) &&
        Objects.equals(this.bWebhookSkipsslvalidation, customWebhookResponse.bWebhookSkipsslvalidation) &&
        Objects.equals(this.pksCustomerCode, customWebhookResponse.pksCustomerCode) &&
        Objects.equals(this.bWebhookTest, customWebhookResponse.bWebhookTest);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiWebhookID, sWebhookDescription, fkiEzsignfoldertypeID, sEzsignfoldertypeNameX, eWebhookModule, eWebhookEzsignevent, eWebhookManagementevent, sWebhookUrl, sWebhookEmailfailed, bWebhookIsactive, bWebhookSkipsslvalidation, pksCustomerCode, bWebhookTest);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomWebhookResponse {\n");
    sb.append("    pkiWebhookID: ").append(toIndentedString(pkiWebhookID)).append("\n");
    sb.append("    sWebhookDescription: ").append(toIndentedString(sWebhookDescription)).append("\n");
    sb.append("    fkiEzsignfoldertypeID: ").append(toIndentedString(fkiEzsignfoldertypeID)).append("\n");
    sb.append("    sEzsignfoldertypeNameX: ").append(toIndentedString(sEzsignfoldertypeNameX)).append("\n");
    sb.append("    eWebhookModule: ").append(toIndentedString(eWebhookModule)).append("\n");
    sb.append("    eWebhookEzsignevent: ").append(toIndentedString(eWebhookEzsignevent)).append("\n");
    sb.append("    eWebhookManagementevent: ").append(toIndentedString(eWebhookManagementevent)).append("\n");
    sb.append("    sWebhookUrl: ").append(toIndentedString(sWebhookUrl)).append("\n");
    sb.append("    sWebhookEmailfailed: ").append(toIndentedString(sWebhookEmailfailed)).append("\n");
    sb.append("    bWebhookIsactive: ").append(toIndentedString(bWebhookIsactive)).append("\n");
    sb.append("    bWebhookSkipsslvalidation: ").append(toIndentedString(bWebhookSkipsslvalidation)).append("\n");
    sb.append("    pksCustomerCode: ").append(toIndentedString(pksCustomerCode)).append("\n");
    sb.append("    bWebhookTest: ").append(toIndentedString(bWebhookTest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiWebhookID");
    openapiFields.add("sWebhookDescription");
    openapiFields.add("fkiEzsignfoldertypeID");
    openapiFields.add("sEzsignfoldertypeNameX");
    openapiFields.add("eWebhookModule");
    openapiFields.add("eWebhookEzsignevent");
    openapiFields.add("eWebhookManagementevent");
    openapiFields.add("sWebhookUrl");
    openapiFields.add("sWebhookEmailfailed");
    openapiFields.add("bWebhookIsactive");
    openapiFields.add("bWebhookSkipsslvalidation");
    openapiFields.add("pksCustomerCode");
    openapiFields.add("bWebhookTest");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiWebhookID");
    openapiRequiredFields.add("sWebhookDescription");
    openapiRequiredFields.add("eWebhookModule");
    openapiRequiredFields.add("sWebhookUrl");
    openapiRequiredFields.add("sWebhookEmailfailed");
    openapiRequiredFields.add("bWebhookSkipsslvalidation");
    openapiRequiredFields.add("pksCustomerCode");
    openapiRequiredFields.add("bWebhookTest");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CustomWebhookResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomWebhookResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomWebhookResponse is not found in the empty JSON string", CustomWebhookResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomWebhookResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomWebhookResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomWebhookResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("sWebhookDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sWebhookDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sWebhookDescription").toString()));
      }
      if ((jsonObj.get("sEzsignfoldertypeNameX") != null && !jsonObj.get("sEzsignfoldertypeNameX").isJsonNull()) && !jsonObj.get("sEzsignfoldertypeNameX").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsignfoldertypeNameX` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsignfoldertypeNameX").toString()));
      }
      if (!jsonObj.get("sWebhookUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sWebhookUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sWebhookUrl").toString()));
      }
      if (!jsonObj.get("sWebhookEmailfailed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sWebhookEmailfailed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sWebhookEmailfailed").toString()));
      }
      if (!jsonObj.get("pksCustomerCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pksCustomerCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pksCustomerCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomWebhookResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomWebhookResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomWebhookResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomWebhookResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomWebhookResponse>() {
           @Override
           public void write(JsonWriter out, CustomWebhookResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomWebhookResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomWebhookResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomWebhookResponse
  * @throws IOException if the JSON string is invalid with respect to CustomWebhookResponse
  */
  public static CustomWebhookResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomWebhookResponse.class);
  }

 /**
  * Convert an instance of CustomWebhookResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

