/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * An Ezsignpage Object and children to create a complete structure
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-27T18:40:35.791662503Z[Etc/UTC]")
public class EzsignpageResponseCompound {
  public static final String SERIALIZED_NAME_PKI_EZSIGNPAGE_I_D = "pkiEzsignpageID";
  @SerializedName(SERIALIZED_NAME_PKI_EZSIGNPAGE_I_D)
  private Integer pkiEzsignpageID;

  public static final String SERIALIZED_NAME_I_EZSIGNPAGE_WIDTHIMAGE = "iEzsignpageWidthimage";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNPAGE_WIDTHIMAGE)
  private Integer iEzsignpageWidthimage;

  public static final String SERIALIZED_NAME_I_EZSIGNPAGE_HEIGHTIMAGE = "iEzsignpageHeightimage";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNPAGE_HEIGHTIMAGE)
  private Integer iEzsignpageHeightimage;

  public static final String SERIALIZED_NAME_I_EZSIGNPAGE_WIDTHPDF = "iEzsignpageWidthpdf";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNPAGE_WIDTHPDF)
  private Integer iEzsignpageWidthpdf;

  public static final String SERIALIZED_NAME_I_EZSIGNPAGE_HEIGHTPDF = "iEzsignpageHeightpdf";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNPAGE_HEIGHTPDF)
  private Integer iEzsignpageHeightpdf;

  public static final String SERIALIZED_NAME_I_EZSIGNPAGE_PAGENUMBER = "iEzsignpagePagenumber";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNPAGE_PAGENUMBER)
  private Integer iEzsignpagePagenumber;

  public static final String SERIALIZED_NAME_S_COMPUTED_IMAGEURL = "sComputedImageurl";
  @SerializedName(SERIALIZED_NAME_S_COMPUTED_IMAGEURL)
  private String sComputedImageurl;

  public EzsignpageResponseCompound() {
  }

  public EzsignpageResponseCompound pkiEzsignpageID(Integer pkiEzsignpageID) {
    
    this.pkiEzsignpageID = pkiEzsignpageID;
    return this;
  }

   /**
   * The unique ID of the Ezsignpage
   * minimum: 0
   * @return pkiEzsignpageID
  **/
  @javax.annotation.Nonnull
  public Integer getPkiEzsignpageID() {
    return pkiEzsignpageID;
  }


  public void setPkiEzsignpageID(Integer pkiEzsignpageID) {
    this.pkiEzsignpageID = pkiEzsignpageID;
  }


  public EzsignpageResponseCompound iEzsignpageWidthimage(Integer iEzsignpageWidthimage) {
    
    this.iEzsignpageWidthimage = iEzsignpageWidthimage;
    return this;
  }

   /**
   * The Width of the page&#39;s image in pixels calculated at 100 DPI
   * minimum: 0
   * @return iEzsignpageWidthimage
  **/
  @javax.annotation.Nonnull
  public Integer getiEzsignpageWidthimage() {
    return iEzsignpageWidthimage;
  }


  public void setiEzsignpageWidthimage(Integer iEzsignpageWidthimage) {
    this.iEzsignpageWidthimage = iEzsignpageWidthimage;
  }


  public EzsignpageResponseCompound iEzsignpageHeightimage(Integer iEzsignpageHeightimage) {
    
    this.iEzsignpageHeightimage = iEzsignpageHeightimage;
    return this;
  }

   /**
   * The Height of the page&#39;s image in pixels calculated at 100 DPI
   * minimum: 0
   * @return iEzsignpageHeightimage
  **/
  @javax.annotation.Nonnull
  public Integer getiEzsignpageHeightimage() {
    return iEzsignpageHeightimage;
  }


  public void setiEzsignpageHeightimage(Integer iEzsignpageHeightimage) {
    this.iEzsignpageHeightimage = iEzsignpageHeightimage;
  }


  public EzsignpageResponseCompound iEzsignpageWidthpdf(Integer iEzsignpageWidthpdf) {
    
    this.iEzsignpageWidthpdf = iEzsignpageWidthpdf;
    return this;
  }

   /**
   * The Width of the page in points calculated at 72 DPI
   * minimum: 0
   * @return iEzsignpageWidthpdf
  **/
  @javax.annotation.Nonnull
  public Integer getiEzsignpageWidthpdf() {
    return iEzsignpageWidthpdf;
  }


  public void setiEzsignpageWidthpdf(Integer iEzsignpageWidthpdf) {
    this.iEzsignpageWidthpdf = iEzsignpageWidthpdf;
  }


  public EzsignpageResponseCompound iEzsignpageHeightpdf(Integer iEzsignpageHeightpdf) {
    
    this.iEzsignpageHeightpdf = iEzsignpageHeightpdf;
    return this;
  }

   /**
   * The Height of the page in points calculated at 72 DPI
   * minimum: 0
   * @return iEzsignpageHeightpdf
  **/
  @javax.annotation.Nonnull
  public Integer getiEzsignpageHeightpdf() {
    return iEzsignpageHeightpdf;
  }


  public void setiEzsignpageHeightpdf(Integer iEzsignpageHeightpdf) {
    this.iEzsignpageHeightpdf = iEzsignpageHeightpdf;
  }


  public EzsignpageResponseCompound iEzsignpagePagenumber(Integer iEzsignpagePagenumber) {
    
    this.iEzsignpagePagenumber = iEzsignpagePagenumber;
    return this;
  }

   /**
   * The page number in the Ezsigndocument
   * minimum: 1
   * @return iEzsignpagePagenumber
  **/
  @javax.annotation.Nonnull
  public Integer getiEzsignpagePagenumber() {
    return iEzsignpagePagenumber;
  }


  public void setiEzsignpagePagenumber(Integer iEzsignpagePagenumber) {
    this.iEzsignpagePagenumber = iEzsignpagePagenumber;
  }


  public EzsignpageResponseCompound sComputedImageurl(String sComputedImageurl) {
    
    this.sComputedImageurl = sComputedImageurl;
    return this;
  }

   /**
   * The Url to the Ezsignpage&#39;s rasterized image.  Url will expire after 5 minutes.
   * @return sComputedImageurl
  **/
  @javax.annotation.Nonnull
  public String getsComputedImageurl() {
    return sComputedImageurl;
  }


  public void setsComputedImageurl(String sComputedImageurl) {
    this.sComputedImageurl = sComputedImageurl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsignpageResponseCompound ezsignpageResponseCompound = (EzsignpageResponseCompound) o;
    return Objects.equals(this.pkiEzsignpageID, ezsignpageResponseCompound.pkiEzsignpageID) &&
        Objects.equals(this.iEzsignpageWidthimage, ezsignpageResponseCompound.iEzsignpageWidthimage) &&
        Objects.equals(this.iEzsignpageHeightimage, ezsignpageResponseCompound.iEzsignpageHeightimage) &&
        Objects.equals(this.iEzsignpageWidthpdf, ezsignpageResponseCompound.iEzsignpageWidthpdf) &&
        Objects.equals(this.iEzsignpageHeightpdf, ezsignpageResponseCompound.iEzsignpageHeightpdf) &&
        Objects.equals(this.iEzsignpagePagenumber, ezsignpageResponseCompound.iEzsignpagePagenumber) &&
        Objects.equals(this.sComputedImageurl, ezsignpageResponseCompound.sComputedImageurl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiEzsignpageID, iEzsignpageWidthimage, iEzsignpageHeightimage, iEzsignpageWidthpdf, iEzsignpageHeightpdf, iEzsignpagePagenumber, sComputedImageurl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsignpageResponseCompound {\n");
    sb.append("    pkiEzsignpageID: ").append(toIndentedString(pkiEzsignpageID)).append("\n");
    sb.append("    iEzsignpageWidthimage: ").append(toIndentedString(iEzsignpageWidthimage)).append("\n");
    sb.append("    iEzsignpageHeightimage: ").append(toIndentedString(iEzsignpageHeightimage)).append("\n");
    sb.append("    iEzsignpageWidthpdf: ").append(toIndentedString(iEzsignpageWidthpdf)).append("\n");
    sb.append("    iEzsignpageHeightpdf: ").append(toIndentedString(iEzsignpageHeightpdf)).append("\n");
    sb.append("    iEzsignpagePagenumber: ").append(toIndentedString(iEzsignpagePagenumber)).append("\n");
    sb.append("    sComputedImageurl: ").append(toIndentedString(sComputedImageurl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiEzsignpageID");
    openapiFields.add("iEzsignpageWidthimage");
    openapiFields.add("iEzsignpageHeightimage");
    openapiFields.add("iEzsignpageWidthpdf");
    openapiFields.add("iEzsignpageHeightpdf");
    openapiFields.add("iEzsignpagePagenumber");
    openapiFields.add("sComputedImageurl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiEzsignpageID");
    openapiRequiredFields.add("iEzsignpageWidthimage");
    openapiRequiredFields.add("iEzsignpageHeightimage");
    openapiRequiredFields.add("iEzsignpageWidthpdf");
    openapiRequiredFields.add("iEzsignpageHeightpdf");
    openapiRequiredFields.add("iEzsignpagePagenumber");
    openapiRequiredFields.add("sComputedImageurl");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EzsignpageResponseCompound
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EzsignpageResponseCompound.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsignpageResponseCompound is not found in the empty JSON string", EzsignpageResponseCompound.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EzsignpageResponseCompound.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsignpageResponseCompound` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EzsignpageResponseCompound.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("sComputedImageurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sComputedImageurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sComputedImageurl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsignpageResponseCompound.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsignpageResponseCompound' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsignpageResponseCompound> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsignpageResponseCompound.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsignpageResponseCompound>() {
           @Override
           public void write(JsonWriter out, EzsignpageResponseCompound value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsignpageResponseCompound read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EzsignpageResponseCompound given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EzsignpageResponseCompound
  * @throws IOException if the JSON string is invalid with respect to EzsignpageResponseCompound
  */
  public static EzsignpageResponseCompound fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsignpageResponseCompound.class);
  }

 /**
  * Convert an instance of EzsignpageResponseCompound to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

