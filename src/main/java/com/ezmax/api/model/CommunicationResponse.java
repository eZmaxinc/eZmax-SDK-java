/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.CommonAudit;
import com.ezmax.api.model.ComputedECommunicationDirection;
import com.ezmax.api.model.DescriptionstaticResponse;
import com.ezmax.api.model.EmailstaticResponse;
import com.ezmax.api.model.FieldECommunicationImportance;
import com.ezmax.api.model.FieldECommunicationType;
import com.ezmax.api.model.PhonestaticResponse;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Communication Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-29T16:57:52.082381355Z[Etc/UTC]")
public class CommunicationResponse {
  public static final String SERIALIZED_NAME_PKI_COMMUNICATION_I_D = "pkiCommunicationID";
  @SerializedName(SERIALIZED_NAME_PKI_COMMUNICATION_I_D)
  private Integer pkiCommunicationID;

  public static final String SERIALIZED_NAME_E_COMMUNICATION_IMPORTANCE = "eCommunicationImportance";
  @SerializedName(SERIALIZED_NAME_E_COMMUNICATION_IMPORTANCE)
  private FieldECommunicationImportance eCommunicationImportance;

  public static final String SERIALIZED_NAME_E_COMMUNICATION_TYPE = "eCommunicationType";
  @SerializedName(SERIALIZED_NAME_E_COMMUNICATION_TYPE)
  private FieldECommunicationType eCommunicationType;

  public static final String SERIALIZED_NAME_S_COMMUNICATION_SUBJECT = "sCommunicationSubject";
  @SerializedName(SERIALIZED_NAME_S_COMMUNICATION_SUBJECT)
  private String sCommunicationSubject;

  public static final String SERIALIZED_NAME_S_COMMUNICATION_BODYURL = "sCommunicationBodyurl";
  @SerializedName(SERIALIZED_NAME_S_COMMUNICATION_BODYURL)
  private String sCommunicationBodyurl;

  public static final String SERIALIZED_NAME_E_COMMUNICATION_DIRECTION = "eCommunicationDirection";
  @SerializedName(SERIALIZED_NAME_E_COMMUNICATION_DIRECTION)
  private ComputedECommunicationDirection eCommunicationDirection;

  public static final String SERIALIZED_NAME_I_COMMUNICATIONRECIPIENT_COUNT = "iCommunicationrecipientCount";
  @SerializedName(SERIALIZED_NAME_I_COMMUNICATIONRECIPIENT_COUNT)
  private Integer iCommunicationrecipientCount;

  public static final String SERIALIZED_NAME_B_COMMUNICATION_PRIVATE = "bCommunicationPrivate";
  @SerializedName(SERIALIZED_NAME_B_COMMUNICATION_PRIVATE)
  private Boolean bCommunicationPrivate;

  public static final String SERIALIZED_NAME_OBJ_DESCRIPTIONSTATIC_SENDER = "objDescriptionstaticSender";
  @SerializedName(SERIALIZED_NAME_OBJ_DESCRIPTIONSTATIC_SENDER)
  private DescriptionstaticResponse objDescriptionstaticSender;

  public static final String SERIALIZED_NAME_OBJ_EMAILSTATIC_SENDER = "objEmailstaticSender";
  @SerializedName(SERIALIZED_NAME_OBJ_EMAILSTATIC_SENDER)
  private EmailstaticResponse objEmailstaticSender;

  public static final String SERIALIZED_NAME_OBJ_PHONESTATIC_SENDER = "objPhonestaticSender";
  @SerializedName(SERIALIZED_NAME_OBJ_PHONESTATIC_SENDER)
  private PhonestaticResponse objPhonestaticSender;

  public static final String SERIALIZED_NAME_OBJ_AUDIT = "objAudit";
  @SerializedName(SERIALIZED_NAME_OBJ_AUDIT)
  private CommonAudit objAudit;

  public CommunicationResponse() {
  }

  public CommunicationResponse pkiCommunicationID(Integer pkiCommunicationID) {
    
    this.pkiCommunicationID = pkiCommunicationID;
    return this;
  }

   /**
   * The unique ID of the Communication.
   * minimum: 0
   * @return pkiCommunicationID
  **/
  @javax.annotation.Nonnull
  public Integer getPkiCommunicationID() {
    return pkiCommunicationID;
  }


  public void setPkiCommunicationID(Integer pkiCommunicationID) {
    this.pkiCommunicationID = pkiCommunicationID;
  }


  public CommunicationResponse eCommunicationImportance(FieldECommunicationImportance eCommunicationImportance) {
    
    this.eCommunicationImportance = eCommunicationImportance;
    return this;
  }

   /**
   * Get eCommunicationImportance
   * @return eCommunicationImportance
  **/
  @javax.annotation.Nonnull
  public FieldECommunicationImportance geteCommunicationImportance() {
    return eCommunicationImportance;
  }


  public void seteCommunicationImportance(FieldECommunicationImportance eCommunicationImportance) {
    this.eCommunicationImportance = eCommunicationImportance;
  }


  public CommunicationResponse eCommunicationType(FieldECommunicationType eCommunicationType) {
    
    this.eCommunicationType = eCommunicationType;
    return this;
  }

   /**
   * Get eCommunicationType
   * @return eCommunicationType
  **/
  @javax.annotation.Nonnull
  public FieldECommunicationType geteCommunicationType() {
    return eCommunicationType;
  }


  public void seteCommunicationType(FieldECommunicationType eCommunicationType) {
    this.eCommunicationType = eCommunicationType;
  }


  public CommunicationResponse sCommunicationSubject(String sCommunicationSubject) {
    
    this.sCommunicationSubject = sCommunicationSubject;
    return this;
  }

   /**
   * The subject of the Communication
   * @return sCommunicationSubject
  **/
  @javax.annotation.Nonnull
  public String getsCommunicationSubject() {
    return sCommunicationSubject;
  }


  public void setsCommunicationSubject(String sCommunicationSubject) {
    this.sCommunicationSubject = sCommunicationSubject;
  }


  public CommunicationResponse sCommunicationBodyurl(String sCommunicationBodyurl) {
    
    this.sCommunicationBodyurl = sCommunicationBodyurl;
    return this;
  }

   /**
   * The url of the body used as body in the Communication
   * @return sCommunicationBodyurl
  **/
  @javax.annotation.Nullable
  public String getsCommunicationBodyurl() {
    return sCommunicationBodyurl;
  }


  public void setsCommunicationBodyurl(String sCommunicationBodyurl) {
    this.sCommunicationBodyurl = sCommunicationBodyurl;
  }


  public CommunicationResponse eCommunicationDirection(ComputedECommunicationDirection eCommunicationDirection) {
    
    this.eCommunicationDirection = eCommunicationDirection;
    return this;
  }

   /**
   * Get eCommunicationDirection
   * @return eCommunicationDirection
  **/
  @javax.annotation.Nonnull
  public ComputedECommunicationDirection geteCommunicationDirection() {
    return eCommunicationDirection;
  }


  public void seteCommunicationDirection(ComputedECommunicationDirection eCommunicationDirection) {
    this.eCommunicationDirection = eCommunicationDirection;
  }


  public CommunicationResponse iCommunicationrecipientCount(Integer iCommunicationrecipientCount) {
    
    this.iCommunicationrecipientCount = iCommunicationrecipientCount;
    return this;
  }

   /**
   * The count of Communicationrecipient
   * @return iCommunicationrecipientCount
  **/
  @javax.annotation.Nonnull
  public Integer getiCommunicationrecipientCount() {
    return iCommunicationrecipientCount;
  }


  public void setiCommunicationrecipientCount(Integer iCommunicationrecipientCount) {
    this.iCommunicationrecipientCount = iCommunicationrecipientCount;
  }


  public CommunicationResponse bCommunicationPrivate(Boolean bCommunicationPrivate) {
    
    this.bCommunicationPrivate = bCommunicationPrivate;
    return this;
  }

   /**
   * Whether the Communication is private or not
   * @return bCommunicationPrivate
  **/
  @javax.annotation.Nonnull
  public Boolean getbCommunicationPrivate() {
    return bCommunicationPrivate;
  }


  public void setbCommunicationPrivate(Boolean bCommunicationPrivate) {
    this.bCommunicationPrivate = bCommunicationPrivate;
  }


  public CommunicationResponse objDescriptionstaticSender(DescriptionstaticResponse objDescriptionstaticSender) {
    
    this.objDescriptionstaticSender = objDescriptionstaticSender;
    return this;
  }

   /**
   * Get objDescriptionstaticSender
   * @return objDescriptionstaticSender
  **/
  @javax.annotation.Nullable
  public DescriptionstaticResponse getObjDescriptionstaticSender() {
    return objDescriptionstaticSender;
  }


  public void setObjDescriptionstaticSender(DescriptionstaticResponse objDescriptionstaticSender) {
    this.objDescriptionstaticSender = objDescriptionstaticSender;
  }


  public CommunicationResponse objEmailstaticSender(EmailstaticResponse objEmailstaticSender) {
    
    this.objEmailstaticSender = objEmailstaticSender;
    return this;
  }

   /**
   * Get objEmailstaticSender
   * @return objEmailstaticSender
  **/
  @javax.annotation.Nullable
  public EmailstaticResponse getObjEmailstaticSender() {
    return objEmailstaticSender;
  }


  public void setObjEmailstaticSender(EmailstaticResponse objEmailstaticSender) {
    this.objEmailstaticSender = objEmailstaticSender;
  }


  public CommunicationResponse objPhonestaticSender(PhonestaticResponse objPhonestaticSender) {
    
    this.objPhonestaticSender = objPhonestaticSender;
    return this;
  }

   /**
   * Get objPhonestaticSender
   * @return objPhonestaticSender
  **/
  @javax.annotation.Nullable
  public PhonestaticResponse getObjPhonestaticSender() {
    return objPhonestaticSender;
  }


  public void setObjPhonestaticSender(PhonestaticResponse objPhonestaticSender) {
    this.objPhonestaticSender = objPhonestaticSender;
  }


  public CommunicationResponse objAudit(CommonAudit objAudit) {
    
    this.objAudit = objAudit;
    return this;
  }

   /**
   * Get objAudit
   * @return objAudit
  **/
  @javax.annotation.Nonnull
  public CommonAudit getObjAudit() {
    return objAudit;
  }


  public void setObjAudit(CommonAudit objAudit) {
    this.objAudit = objAudit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommunicationResponse communicationResponse = (CommunicationResponse) o;
    return Objects.equals(this.pkiCommunicationID, communicationResponse.pkiCommunicationID) &&
        Objects.equals(this.eCommunicationImportance, communicationResponse.eCommunicationImportance) &&
        Objects.equals(this.eCommunicationType, communicationResponse.eCommunicationType) &&
        Objects.equals(this.sCommunicationSubject, communicationResponse.sCommunicationSubject) &&
        Objects.equals(this.sCommunicationBodyurl, communicationResponse.sCommunicationBodyurl) &&
        Objects.equals(this.eCommunicationDirection, communicationResponse.eCommunicationDirection) &&
        Objects.equals(this.iCommunicationrecipientCount, communicationResponse.iCommunicationrecipientCount) &&
        Objects.equals(this.bCommunicationPrivate, communicationResponse.bCommunicationPrivate) &&
        Objects.equals(this.objDescriptionstaticSender, communicationResponse.objDescriptionstaticSender) &&
        Objects.equals(this.objEmailstaticSender, communicationResponse.objEmailstaticSender) &&
        Objects.equals(this.objPhonestaticSender, communicationResponse.objPhonestaticSender) &&
        Objects.equals(this.objAudit, communicationResponse.objAudit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiCommunicationID, eCommunicationImportance, eCommunicationType, sCommunicationSubject, sCommunicationBodyurl, eCommunicationDirection, iCommunicationrecipientCount, bCommunicationPrivate, objDescriptionstaticSender, objEmailstaticSender, objPhonestaticSender, objAudit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommunicationResponse {\n");
    sb.append("    pkiCommunicationID: ").append(toIndentedString(pkiCommunicationID)).append("\n");
    sb.append("    eCommunicationImportance: ").append(toIndentedString(eCommunicationImportance)).append("\n");
    sb.append("    eCommunicationType: ").append(toIndentedString(eCommunicationType)).append("\n");
    sb.append("    sCommunicationSubject: ").append(toIndentedString(sCommunicationSubject)).append("\n");
    sb.append("    sCommunicationBodyurl: ").append(toIndentedString(sCommunicationBodyurl)).append("\n");
    sb.append("    eCommunicationDirection: ").append(toIndentedString(eCommunicationDirection)).append("\n");
    sb.append("    iCommunicationrecipientCount: ").append(toIndentedString(iCommunicationrecipientCount)).append("\n");
    sb.append("    bCommunicationPrivate: ").append(toIndentedString(bCommunicationPrivate)).append("\n");
    sb.append("    objDescriptionstaticSender: ").append(toIndentedString(objDescriptionstaticSender)).append("\n");
    sb.append("    objEmailstaticSender: ").append(toIndentedString(objEmailstaticSender)).append("\n");
    sb.append("    objPhonestaticSender: ").append(toIndentedString(objPhonestaticSender)).append("\n");
    sb.append("    objAudit: ").append(toIndentedString(objAudit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiCommunicationID");
    openapiFields.add("eCommunicationImportance");
    openapiFields.add("eCommunicationType");
    openapiFields.add("sCommunicationSubject");
    openapiFields.add("sCommunicationBodyurl");
    openapiFields.add("eCommunicationDirection");
    openapiFields.add("iCommunicationrecipientCount");
    openapiFields.add("bCommunicationPrivate");
    openapiFields.add("objDescriptionstaticSender");
    openapiFields.add("objEmailstaticSender");
    openapiFields.add("objPhonestaticSender");
    openapiFields.add("objAudit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiCommunicationID");
    openapiRequiredFields.add("eCommunicationImportance");
    openapiRequiredFields.add("eCommunicationType");
    openapiRequiredFields.add("sCommunicationSubject");
    openapiRequiredFields.add("eCommunicationDirection");
    openapiRequiredFields.add("iCommunicationrecipientCount");
    openapiRequiredFields.add("bCommunicationPrivate");
    openapiRequiredFields.add("objAudit");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CommunicationResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CommunicationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommunicationResponse is not found in the empty JSON string", CommunicationResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CommunicationResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommunicationResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CommunicationResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("sCommunicationSubject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sCommunicationSubject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sCommunicationSubject").toString()));
      }
      if ((jsonObj.get("sCommunicationBodyurl") != null && !jsonObj.get("sCommunicationBodyurl").isJsonNull()) && !jsonObj.get("sCommunicationBodyurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sCommunicationBodyurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sCommunicationBodyurl").toString()));
      }
      // validate the optional field `objDescriptionstaticSender`
      if (jsonObj.get("objDescriptionstaticSender") != null && !jsonObj.get("objDescriptionstaticSender").isJsonNull()) {
        DescriptionstaticResponse.validateJsonElement(jsonObj.get("objDescriptionstaticSender"));
      }
      // validate the optional field `objEmailstaticSender`
      if (jsonObj.get("objEmailstaticSender") != null && !jsonObj.get("objEmailstaticSender").isJsonNull()) {
        EmailstaticResponse.validateJsonElement(jsonObj.get("objEmailstaticSender"));
      }
      // validate the optional field `objPhonestaticSender`
      if (jsonObj.get("objPhonestaticSender") != null && !jsonObj.get("objPhonestaticSender").isJsonNull()) {
        PhonestaticResponse.validateJsonElement(jsonObj.get("objPhonestaticSender"));
      }
      // validate the required field `objAudit`
      CommonAudit.validateJsonElement(jsonObj.get("objAudit"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommunicationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommunicationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommunicationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommunicationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CommunicationResponse>() {
           @Override
           public void write(JsonWriter out, CommunicationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommunicationResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CommunicationResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CommunicationResponse
  * @throws IOException if the JSON string is invalid with respect to CommunicationResponse
  */
  public static CommunicationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommunicationResponse.class);
  }

 /**
  * Convert an instance of CommunicationResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

