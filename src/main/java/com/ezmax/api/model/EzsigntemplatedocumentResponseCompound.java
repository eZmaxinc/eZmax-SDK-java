/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Ezsigntemplatedocument Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-16T21:39:53.290322577Z[Etc/UTC]", comments = "Generator version: 7.10.0")
public class EzsigntemplatedocumentResponseCompound {
  public static final String SERIALIZED_NAME_PKI_EZSIGNTEMPLATEDOCUMENT_I_D = "pkiEzsigntemplatedocumentID";
  @SerializedName(SERIALIZED_NAME_PKI_EZSIGNTEMPLATEDOCUMENT_I_D)
  @javax.annotation.Nonnull
  private Integer pkiEzsigntemplatedocumentID;

  public static final String SERIALIZED_NAME_FKI_EZSIGNTEMPLATE_I_D = "fkiEzsigntemplateID";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNTEMPLATE_I_D)
  @javax.annotation.Nonnull
  private Integer fkiEzsigntemplateID;

  public static final String SERIALIZED_NAME_S_EZSIGNTEMPLATEDOCUMENT_NAME = "sEzsigntemplatedocumentName";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNTEMPLATEDOCUMENT_NAME)
  @javax.annotation.Nonnull
  private String sEzsigntemplatedocumentName;

  public static final String SERIALIZED_NAME_I_EZSIGNTEMPLATEDOCUMENT_PAGETOTAL = "iEzsigntemplatedocumentPagetotal";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNTEMPLATEDOCUMENT_PAGETOTAL)
  @javax.annotation.Nonnull
  private Integer iEzsigntemplatedocumentPagetotal;

  public static final String SERIALIZED_NAME_I_EZSIGNTEMPLATEDOCUMENT_SIGNATURETOTAL = "iEzsigntemplatedocumentSignaturetotal";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNTEMPLATEDOCUMENT_SIGNATURETOTAL)
  @javax.annotation.Nonnull
  private Integer iEzsigntemplatedocumentSignaturetotal;

  public static final String SERIALIZED_NAME_I_EZSIGNTEMPLATEDOCUMENT_FORMFIELDTOTAL = "iEzsigntemplatedocumentFormfieldtotal";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNTEMPLATEDOCUMENT_FORMFIELDTOTAL)
  @javax.annotation.Nonnull
  private Integer iEzsigntemplatedocumentFormfieldtotal;

  public static final String SERIALIZED_NAME_B_EZSIGNTEMPLATEDOCUMENT_HASSIGNEDSIGNATURES = "bEzsigntemplatedocumentHassignedsignatures";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNTEMPLATEDOCUMENT_HASSIGNEDSIGNATURES)
  @javax.annotation.Nonnull
  private Boolean bEzsigntemplatedocumentHassignedsignatures;

  public EzsigntemplatedocumentResponseCompound() {
  }

  public EzsigntemplatedocumentResponseCompound pkiEzsigntemplatedocumentID(@javax.annotation.Nonnull Integer pkiEzsigntemplatedocumentID) {
    this.pkiEzsigntemplatedocumentID = pkiEzsigntemplatedocumentID;
    return this;
  }

  /**
   * The unique ID of the Ezsigntemplatedocument
   * minimum: 0
   * @return pkiEzsigntemplatedocumentID
   */
  @javax.annotation.Nonnull
  public Integer getPkiEzsigntemplatedocumentID() {
    return pkiEzsigntemplatedocumentID;
  }

  public void setPkiEzsigntemplatedocumentID(@javax.annotation.Nonnull Integer pkiEzsigntemplatedocumentID) {
    this.pkiEzsigntemplatedocumentID = pkiEzsigntemplatedocumentID;
  }


  public EzsigntemplatedocumentResponseCompound fkiEzsigntemplateID(@javax.annotation.Nonnull Integer fkiEzsigntemplateID) {
    this.fkiEzsigntemplateID = fkiEzsigntemplateID;
    return this;
  }

  /**
   * The unique ID of the Ezsigntemplate
   * minimum: 0
   * @return fkiEzsigntemplateID
   */
  @javax.annotation.Nonnull
  public Integer getFkiEzsigntemplateID() {
    return fkiEzsigntemplateID;
  }

  public void setFkiEzsigntemplateID(@javax.annotation.Nonnull Integer fkiEzsigntemplateID) {
    this.fkiEzsigntemplateID = fkiEzsigntemplateID;
  }


  public EzsigntemplatedocumentResponseCompound sEzsigntemplatedocumentName(@javax.annotation.Nonnull String sEzsigntemplatedocumentName) {
    this.sEzsigntemplatedocumentName = sEzsigntemplatedocumentName;
    return this;
  }

  /**
   * The name of the Ezsigntemplatedocument.
   * @return sEzsigntemplatedocumentName
   */
  @javax.annotation.Nonnull
  public String getsEzsigntemplatedocumentName() {
    return sEzsigntemplatedocumentName;
  }

  public void setsEzsigntemplatedocumentName(@javax.annotation.Nonnull String sEzsigntemplatedocumentName) {
    this.sEzsigntemplatedocumentName = sEzsigntemplatedocumentName;
  }


  public EzsigntemplatedocumentResponseCompound iEzsigntemplatedocumentPagetotal(@javax.annotation.Nonnull Integer iEzsigntemplatedocumentPagetotal) {
    this.iEzsigntemplatedocumentPagetotal = iEzsigntemplatedocumentPagetotal;
    return this;
  }

  /**
   * The number of pages in the Ezsigntemplatedocument.
   * minimum: 1
   * @return iEzsigntemplatedocumentPagetotal
   */
  @javax.annotation.Nonnull
  public Integer getiEzsigntemplatedocumentPagetotal() {
    return iEzsigntemplatedocumentPagetotal;
  }

  public void setiEzsigntemplatedocumentPagetotal(@javax.annotation.Nonnull Integer iEzsigntemplatedocumentPagetotal) {
    this.iEzsigntemplatedocumentPagetotal = iEzsigntemplatedocumentPagetotal;
  }


  public EzsigntemplatedocumentResponseCompound iEzsigntemplatedocumentSignaturetotal(@javax.annotation.Nonnull Integer iEzsigntemplatedocumentSignaturetotal) {
    this.iEzsigntemplatedocumentSignaturetotal = iEzsigntemplatedocumentSignaturetotal;
    return this;
  }

  /**
   * The number of total signatures in the Ezsigntemplate.
   * @return iEzsigntemplatedocumentSignaturetotal
   */
  @javax.annotation.Nonnull
  public Integer getiEzsigntemplatedocumentSignaturetotal() {
    return iEzsigntemplatedocumentSignaturetotal;
  }

  public void setiEzsigntemplatedocumentSignaturetotal(@javax.annotation.Nonnull Integer iEzsigntemplatedocumentSignaturetotal) {
    this.iEzsigntemplatedocumentSignaturetotal = iEzsigntemplatedocumentSignaturetotal;
  }


  public EzsigntemplatedocumentResponseCompound iEzsigntemplatedocumentFormfieldtotal(@javax.annotation.Nonnull Integer iEzsigntemplatedocumentFormfieldtotal) {
    this.iEzsigntemplatedocumentFormfieldtotal = iEzsigntemplatedocumentFormfieldtotal;
    return this;
  }

  /**
   * The number of total form fields in the Ezsigntemplate.
   * @return iEzsigntemplatedocumentFormfieldtotal
   */
  @javax.annotation.Nonnull
  public Integer getiEzsigntemplatedocumentFormfieldtotal() {
    return iEzsigntemplatedocumentFormfieldtotal;
  }

  public void setiEzsigntemplatedocumentFormfieldtotal(@javax.annotation.Nonnull Integer iEzsigntemplatedocumentFormfieldtotal) {
    this.iEzsigntemplatedocumentFormfieldtotal = iEzsigntemplatedocumentFormfieldtotal;
  }


  public EzsigntemplatedocumentResponseCompound bEzsigntemplatedocumentHassignedsignatures(@javax.annotation.Nonnull Boolean bEzsigntemplatedocumentHassignedsignatures) {
    this.bEzsigntemplatedocumentHassignedsignatures = bEzsigntemplatedocumentHassignedsignatures;
    return this;
  }

  /**
   * If the Ezsigntemplatedocument contains signed signatures (From internal or external sources)
   * @return bEzsigntemplatedocumentHassignedsignatures
   */
  @javax.annotation.Nonnull
  public Boolean getbEzsigntemplatedocumentHassignedsignatures() {
    return bEzsigntemplatedocumentHassignedsignatures;
  }

  public void setbEzsigntemplatedocumentHassignedsignatures(@javax.annotation.Nonnull Boolean bEzsigntemplatedocumentHassignedsignatures) {
    this.bEzsigntemplatedocumentHassignedsignatures = bEzsigntemplatedocumentHassignedsignatures;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsigntemplatedocumentResponseCompound ezsigntemplatedocumentResponseCompound = (EzsigntemplatedocumentResponseCompound) o;
    return Objects.equals(this.pkiEzsigntemplatedocumentID, ezsigntemplatedocumentResponseCompound.pkiEzsigntemplatedocumentID) &&
        Objects.equals(this.fkiEzsigntemplateID, ezsigntemplatedocumentResponseCompound.fkiEzsigntemplateID) &&
        Objects.equals(this.sEzsigntemplatedocumentName, ezsigntemplatedocumentResponseCompound.sEzsigntemplatedocumentName) &&
        Objects.equals(this.iEzsigntemplatedocumentPagetotal, ezsigntemplatedocumentResponseCompound.iEzsigntemplatedocumentPagetotal) &&
        Objects.equals(this.iEzsigntemplatedocumentSignaturetotal, ezsigntemplatedocumentResponseCompound.iEzsigntemplatedocumentSignaturetotal) &&
        Objects.equals(this.iEzsigntemplatedocumentFormfieldtotal, ezsigntemplatedocumentResponseCompound.iEzsigntemplatedocumentFormfieldtotal) &&
        Objects.equals(this.bEzsigntemplatedocumentHassignedsignatures, ezsigntemplatedocumentResponseCompound.bEzsigntemplatedocumentHassignedsignatures);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiEzsigntemplatedocumentID, fkiEzsigntemplateID, sEzsigntemplatedocumentName, iEzsigntemplatedocumentPagetotal, iEzsigntemplatedocumentSignaturetotal, iEzsigntemplatedocumentFormfieldtotal, bEzsigntemplatedocumentHassignedsignatures);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsigntemplatedocumentResponseCompound {\n");
    sb.append("    pkiEzsigntemplatedocumentID: ").append(toIndentedString(pkiEzsigntemplatedocumentID)).append("\n");
    sb.append("    fkiEzsigntemplateID: ").append(toIndentedString(fkiEzsigntemplateID)).append("\n");
    sb.append("    sEzsigntemplatedocumentName: ").append(toIndentedString(sEzsigntemplatedocumentName)).append("\n");
    sb.append("    iEzsigntemplatedocumentPagetotal: ").append(toIndentedString(iEzsigntemplatedocumentPagetotal)).append("\n");
    sb.append("    iEzsigntemplatedocumentSignaturetotal: ").append(toIndentedString(iEzsigntemplatedocumentSignaturetotal)).append("\n");
    sb.append("    iEzsigntemplatedocumentFormfieldtotal: ").append(toIndentedString(iEzsigntemplatedocumentFormfieldtotal)).append("\n");
    sb.append("    bEzsigntemplatedocumentHassignedsignatures: ").append(toIndentedString(bEzsigntemplatedocumentHassignedsignatures)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiEzsigntemplatedocumentID");
    openapiFields.add("fkiEzsigntemplateID");
    openapiFields.add("sEzsigntemplatedocumentName");
    openapiFields.add("iEzsigntemplatedocumentPagetotal");
    openapiFields.add("iEzsigntemplatedocumentSignaturetotal");
    openapiFields.add("iEzsigntemplatedocumentFormfieldtotal");
    openapiFields.add("bEzsigntemplatedocumentHassignedsignatures");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiEzsigntemplatedocumentID");
    openapiRequiredFields.add("fkiEzsigntemplateID");
    openapiRequiredFields.add("sEzsigntemplatedocumentName");
    openapiRequiredFields.add("iEzsigntemplatedocumentPagetotal");
    openapiRequiredFields.add("iEzsigntemplatedocumentSignaturetotal");
    openapiRequiredFields.add("iEzsigntemplatedocumentFormfieldtotal");
    openapiRequiredFields.add("bEzsigntemplatedocumentHassignedsignatures");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EzsigntemplatedocumentResponseCompound
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EzsigntemplatedocumentResponseCompound.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsigntemplatedocumentResponseCompound is not found in the empty JSON string", EzsigntemplatedocumentResponseCompound.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EzsigntemplatedocumentResponseCompound.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsigntemplatedocumentResponseCompound` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EzsigntemplatedocumentResponseCompound.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("sEzsigntemplatedocumentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsigntemplatedocumentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsigntemplatedocumentName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsigntemplatedocumentResponseCompound.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsigntemplatedocumentResponseCompound' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsigntemplatedocumentResponseCompound> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsigntemplatedocumentResponseCompound.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsigntemplatedocumentResponseCompound>() {
           @Override
           public void write(JsonWriter out, EzsigntemplatedocumentResponseCompound value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsigntemplatedocumentResponseCompound read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EzsigntemplatedocumentResponseCompound given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EzsigntemplatedocumentResponseCompound
   * @throws IOException if the JSON string is invalid with respect to EzsigntemplatedocumentResponseCompound
   */
  public static EzsigntemplatedocumentResponseCompound fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsigntemplatedocumentResponseCompound.class);
  }

  /**
   * Convert an instance of EzsigntemplatedocumentResponseCompound to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

