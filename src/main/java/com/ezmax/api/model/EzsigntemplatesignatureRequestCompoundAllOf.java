/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.16
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.ezmax.api.model.EzsigntemplatesignaturecustomdateRequestCompound;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * EzsigntemplatesignatureRequestCompoundAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-10T15:21:40.493145Z[Etc/UTC]")
public class EzsigntemplatesignatureRequestCompoundAllOf {
  public static final String SERIALIZED_NAME_B_EZSIGNTEMPLATESIGNATURE_CUSTOMDATE = "bEzsigntemplatesignatureCustomdate";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNTEMPLATESIGNATURE_CUSTOMDATE)
  private Boolean bEzsigntemplatesignatureCustomdate;

  public static final String SERIALIZED_NAME_A_OBJ_EZSIGNTEMPLATESIGNATURECUSTOMDATE = "a_objEzsigntemplatesignaturecustomdate";
  @SerializedName(SERIALIZED_NAME_A_OBJ_EZSIGNTEMPLATESIGNATURECUSTOMDATE)
  private List<EzsigntemplatesignaturecustomdateRequestCompound> aObjEzsigntemplatesignaturecustomdate = null;

  public EzsigntemplatesignatureRequestCompoundAllOf() { 
  }

  public EzsigntemplatesignatureRequestCompoundAllOf bEzsigntemplatesignatureCustomdate(Boolean bEzsigntemplatesignatureCustomdate) {
    
    this.bEzsigntemplatesignatureCustomdate = bEzsigntemplatesignatureCustomdate;
    return this;
  }

   /**
   * Whether the Ezsigntemplatesignature has a custom date format or not. (Only possible when eEzsigntemplatesignatureType is **Name** or **Handwritten**)
   * @return bEzsigntemplatesignatureCustomdate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the Ezsigntemplatesignature has a custom date format or not. (Only possible when eEzsigntemplatesignatureType is **Name** or **Handwritten**)")

  public Boolean getbEzsigntemplatesignatureCustomdate() {
    return bEzsigntemplatesignatureCustomdate;
  }


  public void setbEzsigntemplatesignatureCustomdate(Boolean bEzsigntemplatesignatureCustomdate) {
    this.bEzsigntemplatesignatureCustomdate = bEzsigntemplatesignatureCustomdate;
  }


  public EzsigntemplatesignatureRequestCompoundAllOf aObjEzsigntemplatesignaturecustomdate(List<EzsigntemplatesignaturecustomdateRequestCompound> aObjEzsigntemplatesignaturecustomdate) {
    
    this.aObjEzsigntemplatesignaturecustomdate = aObjEzsigntemplatesignaturecustomdate;
    return this;
  }

  public EzsigntemplatesignatureRequestCompoundAllOf addAObjEzsigntemplatesignaturecustomdateItem(EzsigntemplatesignaturecustomdateRequestCompound aObjEzsigntemplatesignaturecustomdateItem) {
    if (this.aObjEzsigntemplatesignaturecustomdate == null) {
      this.aObjEzsigntemplatesignaturecustomdate = new ArrayList<>();
    }
    this.aObjEzsigntemplatesignaturecustomdate.add(aObjEzsigntemplatesignaturecustomdateItem);
    return this;
  }

   /**
   * An array of custom date blocks that will be filled at the time of signature.  Can only be used if bEzsigntemplatesignatureCustomdate is true.  Use an empty array if you don&#39;t want to have a date at all.
   * @return aObjEzsigntemplatesignaturecustomdate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of custom date blocks that will be filled at the time of signature.  Can only be used if bEzsigntemplatesignatureCustomdate is true.  Use an empty array if you don't want to have a date at all.")

  public List<EzsigntemplatesignaturecustomdateRequestCompound> getaObjEzsigntemplatesignaturecustomdate() {
    return aObjEzsigntemplatesignaturecustomdate;
  }


  public void setaObjEzsigntemplatesignaturecustomdate(List<EzsigntemplatesignaturecustomdateRequestCompound> aObjEzsigntemplatesignaturecustomdate) {
    this.aObjEzsigntemplatesignaturecustomdate = aObjEzsigntemplatesignaturecustomdate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsigntemplatesignatureRequestCompoundAllOf ezsigntemplatesignatureRequestCompoundAllOf = (EzsigntemplatesignatureRequestCompoundAllOf) o;
    return Objects.equals(this.bEzsigntemplatesignatureCustomdate, ezsigntemplatesignatureRequestCompoundAllOf.bEzsigntemplatesignatureCustomdate) &&
        Objects.equals(this.aObjEzsigntemplatesignaturecustomdate, ezsigntemplatesignatureRequestCompoundAllOf.aObjEzsigntemplatesignaturecustomdate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bEzsigntemplatesignatureCustomdate, aObjEzsigntemplatesignaturecustomdate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsigntemplatesignatureRequestCompoundAllOf {\n");
    sb.append("    bEzsigntemplatesignatureCustomdate: ").append(toIndentedString(bEzsigntemplatesignatureCustomdate)).append("\n");
    sb.append("    aObjEzsigntemplatesignaturecustomdate: ").append(toIndentedString(aObjEzsigntemplatesignaturecustomdate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bEzsigntemplatesignatureCustomdate");
    openapiFields.add("a_objEzsigntemplatesignaturecustomdate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EzsigntemplatesignatureRequestCompoundAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (EzsigntemplatesignatureRequestCompoundAllOf.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsigntemplatesignatureRequestCompoundAllOf is not found in the empty JSON string", EzsigntemplatesignatureRequestCompoundAllOf.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EzsigntemplatesignatureRequestCompoundAllOf.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsigntemplatesignatureRequestCompoundAllOf` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      JsonArray jsonArrayaObjEzsigntemplatesignaturecustomdate = jsonObj.getAsJsonArray("a_objEzsigntemplatesignaturecustomdate");
      if (jsonArrayaObjEzsigntemplatesignaturecustomdate != null) {
        // ensure the json data is an array
        if (!jsonObj.get("a_objEzsigntemplatesignaturecustomdate").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `a_objEzsigntemplatesignaturecustomdate` to be an array in the JSON string but got `%s`", jsonObj.get("a_objEzsigntemplatesignaturecustomdate").toString()));
        }

        // validate the optional field `a_objEzsigntemplatesignaturecustomdate` (array)
        for (int i = 0; i < jsonArrayaObjEzsigntemplatesignaturecustomdate.size(); i++) {
          EzsigntemplatesignaturecustomdateRequestCompound.validateJsonObject(jsonArrayaObjEzsigntemplatesignaturecustomdate.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsigntemplatesignatureRequestCompoundAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsigntemplatesignatureRequestCompoundAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsigntemplatesignatureRequestCompoundAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsigntemplatesignatureRequestCompoundAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsigntemplatesignatureRequestCompoundAllOf>() {
           @Override
           public void write(JsonWriter out, EzsigntemplatesignatureRequestCompoundAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsigntemplatesignatureRequestCompoundAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EzsigntemplatesignatureRequestCompoundAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EzsigntemplatesignatureRequestCompoundAllOf
  * @throws IOException if the JSON string is invalid with respect to EzsigntemplatesignatureRequestCompoundAllOf
  */
  public static EzsigntemplatesignatureRequestCompoundAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsigntemplatesignatureRequestCompoundAllOf.class);
  }

 /**
  * Convert an instance of EzsigntemplatesignatureRequestCompoundAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

