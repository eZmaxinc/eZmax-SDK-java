/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.14
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.ezmax.api.model.EzsignsignaturecustomdateRequestCompound;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * EzsignsignatureRequestCompoundAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-01T21:58:46.009232Z[Etc/UTC]")
public class EzsignsignatureRequestCompoundAllOf {
  public static final String SERIALIZED_NAME_B_EZSIGNSIGNATURE_CUSTOMDATE = "bEzsignsignatureCustomdate";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNSIGNATURE_CUSTOMDATE)
  private Boolean bEzsignsignatureCustomdate;

  public static final String SERIALIZED_NAME_A_OBJ_EZSIGNSIGNATURECUSTOMDATE = "a_objEzsignsignaturecustomdate";
  @SerializedName(SERIALIZED_NAME_A_OBJ_EZSIGNSIGNATURECUSTOMDATE)
  private List<EzsignsignaturecustomdateRequestCompound> aObjEzsignsignaturecustomdate = null;

  public EzsignsignatureRequestCompoundAllOf() { 
  }

  public EzsignsignatureRequestCompoundAllOf bEzsignsignatureCustomdate(Boolean bEzsignsignatureCustomdate) {
    
    this.bEzsignsignatureCustomdate = bEzsignsignatureCustomdate;
    return this;
  }

   /**
   * Whether the Ezsignsignature has a custom date format or not. (Only possible when eEzsignsignatureType is **Name** or **Handwritten**)
   * @return bEzsignsignatureCustomdate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the Ezsignsignature has a custom date format or not. (Only possible when eEzsignsignatureType is **Name** or **Handwritten**)")

  public Boolean getbEzsignsignatureCustomdate() {
    return bEzsignsignatureCustomdate;
  }


  public void setbEzsignsignatureCustomdate(Boolean bEzsignsignatureCustomdate) {
    this.bEzsignsignatureCustomdate = bEzsignsignatureCustomdate;
  }


  public EzsignsignatureRequestCompoundAllOf aObjEzsignsignaturecustomdate(List<EzsignsignaturecustomdateRequestCompound> aObjEzsignsignaturecustomdate) {
    
    this.aObjEzsignsignaturecustomdate = aObjEzsignsignaturecustomdate;
    return this;
  }

  public EzsignsignatureRequestCompoundAllOf addAObjEzsignsignaturecustomdateItem(EzsignsignaturecustomdateRequestCompound aObjEzsignsignaturecustomdateItem) {
    if (this.aObjEzsignsignaturecustomdate == null) {
      this.aObjEzsignsignaturecustomdate = new ArrayList<>();
    }
    this.aObjEzsignsignaturecustomdate.add(aObjEzsignsignaturecustomdateItem);
    return this;
  }

   /**
   * An array of custom date blocks that will be filled at the time of signature.  Can only be used if bEzsignsignatureCustomdate is true.  Use an empty array if you don&#39;t want to have a date at all.
   * @return aObjEzsignsignaturecustomdate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of custom date blocks that will be filled at the time of signature.  Can only be used if bEzsignsignatureCustomdate is true.  Use an empty array if you don't want to have a date at all.")

  public List<EzsignsignaturecustomdateRequestCompound> getaObjEzsignsignaturecustomdate() {
    return aObjEzsignsignaturecustomdate;
  }


  public void setaObjEzsignsignaturecustomdate(List<EzsignsignaturecustomdateRequestCompound> aObjEzsignsignaturecustomdate) {
    this.aObjEzsignsignaturecustomdate = aObjEzsignsignaturecustomdate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsignsignatureRequestCompoundAllOf ezsignsignatureRequestCompoundAllOf = (EzsignsignatureRequestCompoundAllOf) o;
    return Objects.equals(this.bEzsignsignatureCustomdate, ezsignsignatureRequestCompoundAllOf.bEzsignsignatureCustomdate) &&
        Objects.equals(this.aObjEzsignsignaturecustomdate, ezsignsignatureRequestCompoundAllOf.aObjEzsignsignaturecustomdate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bEzsignsignatureCustomdate, aObjEzsignsignaturecustomdate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsignsignatureRequestCompoundAllOf {\n");
    sb.append("    bEzsignsignatureCustomdate: ").append(toIndentedString(bEzsignsignatureCustomdate)).append("\n");
    sb.append("    aObjEzsignsignaturecustomdate: ").append(toIndentedString(aObjEzsignsignaturecustomdate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bEzsignsignatureCustomdate");
    openapiFields.add("a_objEzsignsignaturecustomdate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EzsignsignatureRequestCompoundAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (EzsignsignatureRequestCompoundAllOf.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsignsignatureRequestCompoundAllOf is not found in the empty JSON string", EzsignsignatureRequestCompoundAllOf.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EzsignsignatureRequestCompoundAllOf.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsignsignatureRequestCompoundAllOf` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      JsonArray jsonArrayaObjEzsignsignaturecustomdate = jsonObj.getAsJsonArray("a_objEzsignsignaturecustomdate");
      if (jsonArrayaObjEzsignsignaturecustomdate != null) {
        // ensure the json data is an array
        if (!jsonObj.get("a_objEzsignsignaturecustomdate").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `a_objEzsignsignaturecustomdate` to be an array in the JSON string but got `%s`", jsonObj.get("a_objEzsignsignaturecustomdate").toString()));
        }

        // validate the optional field `a_objEzsignsignaturecustomdate` (array)
        for (int i = 0; i < jsonArrayaObjEzsignsignaturecustomdate.size(); i++) {
          EzsignsignaturecustomdateRequestCompound.validateJsonObject(jsonArrayaObjEzsignsignaturecustomdate.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsignsignatureRequestCompoundAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsignsignatureRequestCompoundAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsignsignatureRequestCompoundAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsignsignatureRequestCompoundAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsignsignatureRequestCompoundAllOf>() {
           @Override
           public void write(JsonWriter out, EzsignsignatureRequestCompoundAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsignsignatureRequestCompoundAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EzsignsignatureRequestCompoundAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EzsignsignatureRequestCompoundAllOf
  * @throws IOException if the JSON string is invalid with respect to EzsignsignatureRequestCompoundAllOf
  */
  public static EzsignsignatureRequestCompoundAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsignsignatureRequestCompoundAllOf.class);
  }

 /**
  * Convert an instance of EzsignsignatureRequestCompoundAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

