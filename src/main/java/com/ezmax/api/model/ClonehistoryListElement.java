/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Clonehistory List Element
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-04T21:44:04.165556308Z[Etc/UTC]", comments = "Generator version: 7.11.0")
public class ClonehistoryListElement {
  public static final String SERIALIZED_NAME_PKI_CLONEHISTORY_I_D = "pkiClonehistoryID";
  @SerializedName(SERIALIZED_NAME_PKI_CLONEHISTORY_I_D)
  @javax.annotation.Nonnull
  private Integer pkiClonehistoryID;

  public static final String SERIALIZED_NAME_FKI_USER_I_D_CLONING = "fkiUserIDCloning";
  @SerializedName(SERIALIZED_NAME_FKI_USER_I_D_CLONING)
  @javax.annotation.Nonnull
  private Integer fkiUserIDCloning;

  public static final String SERIALIZED_NAME_FKI_USER_I_D_CLONED = "fkiUserIDCloned";
  @SerializedName(SERIALIZED_NAME_FKI_USER_I_D_CLONED)
  @javax.annotation.Nonnull
  private Integer fkiUserIDCloned;

  public static final String SERIALIZED_NAME_DT_CLONEHISTORY_FIRSTHIT = "dtClonehistoryFirsthit";
  @SerializedName(SERIALIZED_NAME_DT_CLONEHISTORY_FIRSTHIT)
  @javax.annotation.Nonnull
  private String dtClonehistoryFirsthit;

  public static final String SERIALIZED_NAME_DT_CLONEHISTORY_LASTHIT = "dtClonehistoryLasthit";
  @SerializedName(SERIALIZED_NAME_DT_CLONEHISTORY_LASTHIT)
  @javax.annotation.Nullable
  private String dtClonehistoryLasthit;

  public static final String SERIALIZED_NAME_S_USER_LOGINNAME_CLONING = "sUserLoginnameCloning";
  @SerializedName(SERIALIZED_NAME_S_USER_LOGINNAME_CLONING)
  @javax.annotation.Nonnull
  private String sUserLoginnameCloning;

  public static final String SERIALIZED_NAME_S_USER_FIRSTNAME_CLONING = "sUserFirstnameCloning";
  @SerializedName(SERIALIZED_NAME_S_USER_FIRSTNAME_CLONING)
  @javax.annotation.Nonnull
  private String sUserFirstnameCloning;

  public static final String SERIALIZED_NAME_S_USER_LASTNAME_CLONING = "sUserLastnameCloning";
  @SerializedName(SERIALIZED_NAME_S_USER_LASTNAME_CLONING)
  @javax.annotation.Nonnull
  private String sUserLastnameCloning;

  public static final String SERIALIZED_NAME_S_USER_LOGINNAME_CLONED = "sUserLoginnameCloned";
  @SerializedName(SERIALIZED_NAME_S_USER_LOGINNAME_CLONED)
  @javax.annotation.Nonnull
  private String sUserLoginnameCloned;

  public static final String SERIALIZED_NAME_S_USER_FIRSTNAME_CLONED = "sUserFirstnameCloned";
  @SerializedName(SERIALIZED_NAME_S_USER_FIRSTNAME_CLONED)
  @javax.annotation.Nonnull
  private String sUserFirstnameCloned;

  public static final String SERIALIZED_NAME_S_USER_LASTNAME_CLONED = "sUserLastnameCloned";
  @SerializedName(SERIALIZED_NAME_S_USER_LASTNAME_CLONED)
  @javax.annotation.Nonnull
  private String sUserLastnameCloned;

  public ClonehistoryListElement() {
  }

  public ClonehistoryListElement pkiClonehistoryID(@javax.annotation.Nonnull Integer pkiClonehistoryID) {
    this.pkiClonehistoryID = pkiClonehistoryID;
    return this;
  }

  /**
   * The unique ID of the Clonehistory
   * minimum: 1
   * maximum: 16777215
   * @return pkiClonehistoryID
   */
  @javax.annotation.Nonnull
  public Integer getPkiClonehistoryID() {
    return pkiClonehistoryID;
  }

  public void setPkiClonehistoryID(@javax.annotation.Nonnull Integer pkiClonehistoryID) {
    this.pkiClonehistoryID = pkiClonehistoryID;
  }


  public ClonehistoryListElement fkiUserIDCloning(@javax.annotation.Nonnull Integer fkiUserIDCloning) {
    this.fkiUserIDCloning = fkiUserIDCloning;
    return this;
  }

  /**
   * The unique ID of the User
   * minimum: 0
   * @return fkiUserIDCloning
   */
  @javax.annotation.Nonnull
  public Integer getFkiUserIDCloning() {
    return fkiUserIDCloning;
  }

  public void setFkiUserIDCloning(@javax.annotation.Nonnull Integer fkiUserIDCloning) {
    this.fkiUserIDCloning = fkiUserIDCloning;
  }


  public ClonehistoryListElement fkiUserIDCloned(@javax.annotation.Nonnull Integer fkiUserIDCloned) {
    this.fkiUserIDCloned = fkiUserIDCloned;
    return this;
  }

  /**
   * The unique ID of the User
   * minimum: 0
   * @return fkiUserIDCloned
   */
  @javax.annotation.Nonnull
  public Integer getFkiUserIDCloned() {
    return fkiUserIDCloned;
  }

  public void setFkiUserIDCloned(@javax.annotation.Nonnull Integer fkiUserIDCloned) {
    this.fkiUserIDCloned = fkiUserIDCloned;
  }


  public ClonehistoryListElement dtClonehistoryFirsthit(@javax.annotation.Nonnull String dtClonehistoryFirsthit) {
    this.dtClonehistoryFirsthit = dtClonehistoryFirsthit;
    return this;
  }

  /**
   * The firsthit of the Clonehistory
   * @return dtClonehistoryFirsthit
   */
  @javax.annotation.Nonnull
  public String getDtClonehistoryFirsthit() {
    return dtClonehistoryFirsthit;
  }

  public void setDtClonehistoryFirsthit(@javax.annotation.Nonnull String dtClonehistoryFirsthit) {
    this.dtClonehistoryFirsthit = dtClonehistoryFirsthit;
  }


  public ClonehistoryListElement dtClonehistoryLasthit(@javax.annotation.Nullable String dtClonehistoryLasthit) {
    this.dtClonehistoryLasthit = dtClonehistoryLasthit;
    return this;
  }

  /**
   * The lasthit of the Clonehistory
   * @return dtClonehistoryLasthit
   */
  @javax.annotation.Nullable
  public String getDtClonehistoryLasthit() {
    return dtClonehistoryLasthit;
  }

  public void setDtClonehistoryLasthit(@javax.annotation.Nullable String dtClonehistoryLasthit) {
    this.dtClonehistoryLasthit = dtClonehistoryLasthit;
  }


  public ClonehistoryListElement sUserLoginnameCloning(@javax.annotation.Nonnull String sUserLoginnameCloning) {
    this.sUserLoginnameCloning = sUserLoginnameCloning;
    return this;
  }

  /**
   * The login name of the User.
   * @return sUserLoginnameCloning
   */
  @javax.annotation.Nonnull
  public String getsUserLoginnameCloning() {
    return sUserLoginnameCloning;
  }

  public void setsUserLoginnameCloning(@javax.annotation.Nonnull String sUserLoginnameCloning) {
    this.sUserLoginnameCloning = sUserLoginnameCloning;
  }


  public ClonehistoryListElement sUserFirstnameCloning(@javax.annotation.Nonnull String sUserFirstnameCloning) {
    this.sUserFirstnameCloning = sUserFirstnameCloning;
    return this;
  }

  /**
   * The first name of the user
   * @return sUserFirstnameCloning
   */
  @javax.annotation.Nonnull
  public String getsUserFirstnameCloning() {
    return sUserFirstnameCloning;
  }

  public void setsUserFirstnameCloning(@javax.annotation.Nonnull String sUserFirstnameCloning) {
    this.sUserFirstnameCloning = sUserFirstnameCloning;
  }


  public ClonehistoryListElement sUserLastnameCloning(@javax.annotation.Nonnull String sUserLastnameCloning) {
    this.sUserLastnameCloning = sUserLastnameCloning;
    return this;
  }

  /**
   * The last name of the user
   * @return sUserLastnameCloning
   */
  @javax.annotation.Nonnull
  public String getsUserLastnameCloning() {
    return sUserLastnameCloning;
  }

  public void setsUserLastnameCloning(@javax.annotation.Nonnull String sUserLastnameCloning) {
    this.sUserLastnameCloning = sUserLastnameCloning;
  }


  public ClonehistoryListElement sUserLoginnameCloned(@javax.annotation.Nonnull String sUserLoginnameCloned) {
    this.sUserLoginnameCloned = sUserLoginnameCloned;
    return this;
  }

  /**
   * The login name of the User.
   * @return sUserLoginnameCloned
   */
  @javax.annotation.Nonnull
  public String getsUserLoginnameCloned() {
    return sUserLoginnameCloned;
  }

  public void setsUserLoginnameCloned(@javax.annotation.Nonnull String sUserLoginnameCloned) {
    this.sUserLoginnameCloned = sUserLoginnameCloned;
  }


  public ClonehistoryListElement sUserFirstnameCloned(@javax.annotation.Nonnull String sUserFirstnameCloned) {
    this.sUserFirstnameCloned = sUserFirstnameCloned;
    return this;
  }

  /**
   * The first name of the user
   * @return sUserFirstnameCloned
   */
  @javax.annotation.Nonnull
  public String getsUserFirstnameCloned() {
    return sUserFirstnameCloned;
  }

  public void setsUserFirstnameCloned(@javax.annotation.Nonnull String sUserFirstnameCloned) {
    this.sUserFirstnameCloned = sUserFirstnameCloned;
  }


  public ClonehistoryListElement sUserLastnameCloned(@javax.annotation.Nonnull String sUserLastnameCloned) {
    this.sUserLastnameCloned = sUserLastnameCloned;
    return this;
  }

  /**
   * The last name of the user
   * @return sUserLastnameCloned
   */
  @javax.annotation.Nonnull
  public String getsUserLastnameCloned() {
    return sUserLastnameCloned;
  }

  public void setsUserLastnameCloned(@javax.annotation.Nonnull String sUserLastnameCloned) {
    this.sUserLastnameCloned = sUserLastnameCloned;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClonehistoryListElement clonehistoryListElement = (ClonehistoryListElement) o;
    return Objects.equals(this.pkiClonehistoryID, clonehistoryListElement.pkiClonehistoryID) &&
        Objects.equals(this.fkiUserIDCloning, clonehistoryListElement.fkiUserIDCloning) &&
        Objects.equals(this.fkiUserIDCloned, clonehistoryListElement.fkiUserIDCloned) &&
        Objects.equals(this.dtClonehistoryFirsthit, clonehistoryListElement.dtClonehistoryFirsthit) &&
        Objects.equals(this.dtClonehistoryLasthit, clonehistoryListElement.dtClonehistoryLasthit) &&
        Objects.equals(this.sUserLoginnameCloning, clonehistoryListElement.sUserLoginnameCloning) &&
        Objects.equals(this.sUserFirstnameCloning, clonehistoryListElement.sUserFirstnameCloning) &&
        Objects.equals(this.sUserLastnameCloning, clonehistoryListElement.sUserLastnameCloning) &&
        Objects.equals(this.sUserLoginnameCloned, clonehistoryListElement.sUserLoginnameCloned) &&
        Objects.equals(this.sUserFirstnameCloned, clonehistoryListElement.sUserFirstnameCloned) &&
        Objects.equals(this.sUserLastnameCloned, clonehistoryListElement.sUserLastnameCloned);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiClonehistoryID, fkiUserIDCloning, fkiUserIDCloned, dtClonehistoryFirsthit, dtClonehistoryLasthit, sUserLoginnameCloning, sUserFirstnameCloning, sUserLastnameCloning, sUserLoginnameCloned, sUserFirstnameCloned, sUserLastnameCloned);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClonehistoryListElement {\n");
    sb.append("    pkiClonehistoryID: ").append(toIndentedString(pkiClonehistoryID)).append("\n");
    sb.append("    fkiUserIDCloning: ").append(toIndentedString(fkiUserIDCloning)).append("\n");
    sb.append("    fkiUserIDCloned: ").append(toIndentedString(fkiUserIDCloned)).append("\n");
    sb.append("    dtClonehistoryFirsthit: ").append(toIndentedString(dtClonehistoryFirsthit)).append("\n");
    sb.append("    dtClonehistoryLasthit: ").append(toIndentedString(dtClonehistoryLasthit)).append("\n");
    sb.append("    sUserLoginnameCloning: ").append(toIndentedString(sUserLoginnameCloning)).append("\n");
    sb.append("    sUserFirstnameCloning: ").append(toIndentedString(sUserFirstnameCloning)).append("\n");
    sb.append("    sUserLastnameCloning: ").append(toIndentedString(sUserLastnameCloning)).append("\n");
    sb.append("    sUserLoginnameCloned: ").append(toIndentedString(sUserLoginnameCloned)).append("\n");
    sb.append("    sUserFirstnameCloned: ").append(toIndentedString(sUserFirstnameCloned)).append("\n");
    sb.append("    sUserLastnameCloned: ").append(toIndentedString(sUserLastnameCloned)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiClonehistoryID");
    openapiFields.add("fkiUserIDCloning");
    openapiFields.add("fkiUserIDCloned");
    openapiFields.add("dtClonehistoryFirsthit");
    openapiFields.add("dtClonehistoryLasthit");
    openapiFields.add("sUserLoginnameCloning");
    openapiFields.add("sUserFirstnameCloning");
    openapiFields.add("sUserLastnameCloning");
    openapiFields.add("sUserLoginnameCloned");
    openapiFields.add("sUserFirstnameCloned");
    openapiFields.add("sUserLastnameCloned");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiClonehistoryID");
    openapiRequiredFields.add("fkiUserIDCloning");
    openapiRequiredFields.add("fkiUserIDCloned");
    openapiRequiredFields.add("dtClonehistoryFirsthit");
    openapiRequiredFields.add("sUserLoginnameCloning");
    openapiRequiredFields.add("sUserFirstnameCloning");
    openapiRequiredFields.add("sUserLastnameCloning");
    openapiRequiredFields.add("sUserLoginnameCloned");
    openapiRequiredFields.add("sUserFirstnameCloned");
    openapiRequiredFields.add("sUserLastnameCloned");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClonehistoryListElement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClonehistoryListElement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClonehistoryListElement is not found in the empty JSON string", ClonehistoryListElement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClonehistoryListElement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClonehistoryListElement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ClonehistoryListElement.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("dtClonehistoryFirsthit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dtClonehistoryFirsthit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dtClonehistoryFirsthit").toString()));
      }
      if ((jsonObj.get("dtClonehistoryLasthit") != null && !jsonObj.get("dtClonehistoryLasthit").isJsonNull()) && !jsonObj.get("dtClonehistoryLasthit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dtClonehistoryLasthit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dtClonehistoryLasthit").toString()));
      }
      if (!jsonObj.get("sUserLoginnameCloning").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sUserLoginnameCloning` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sUserLoginnameCloning").toString()));
      }
      if (!jsonObj.get("sUserFirstnameCloning").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sUserFirstnameCloning` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sUserFirstnameCloning").toString()));
      }
      if (!jsonObj.get("sUserLastnameCloning").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sUserLastnameCloning` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sUserLastnameCloning").toString()));
      }
      if (!jsonObj.get("sUserLoginnameCloned").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sUserLoginnameCloned` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sUserLoginnameCloned").toString()));
      }
      if (!jsonObj.get("sUserFirstnameCloned").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sUserFirstnameCloned` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sUserFirstnameCloned").toString()));
      }
      if (!jsonObj.get("sUserLastnameCloned").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sUserLastnameCloned` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sUserLastnameCloned").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClonehistoryListElement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClonehistoryListElement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClonehistoryListElement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClonehistoryListElement.class));

       return (TypeAdapter<T>) new TypeAdapter<ClonehistoryListElement>() {
           @Override
           public void write(JsonWriter out, ClonehistoryListElement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClonehistoryListElement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClonehistoryListElement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClonehistoryListElement
   * @throws IOException if the JSON string is invalid with respect to ClonehistoryListElement
   */
  public static ClonehistoryListElement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClonehistoryListElement.class);
  }

  /**
   * Convert an instance of ClonehistoryListElement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

