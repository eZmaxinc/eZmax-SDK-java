/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Custom ContactName Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-29T20:38:29.409937921Z[Etc/UTC]", comments = "Generator version: 7.11.0")
public class CustomContactNameResponse {
  public static final String SERIALIZED_NAME_S_CONTACT_FIRSTNAME = "sContactFirstname";
  @SerializedName(SERIALIZED_NAME_S_CONTACT_FIRSTNAME)
  @javax.annotation.Nullable
  private String sContactFirstname;

  public static final String SERIALIZED_NAME_S_CONTACT_LASTNAME = "sContactLastname";
  @SerializedName(SERIALIZED_NAME_S_CONTACT_LASTNAME)
  @javax.annotation.Nullable
  private String sContactLastname;

  public static final String SERIALIZED_NAME_S_CONTACT_COMPANY = "sContactCompany";
  @SerializedName(SERIALIZED_NAME_S_CONTACT_COMPANY)
  @javax.annotation.Nullable
  private String sContactCompany;

  public CustomContactNameResponse() {
  }

  public CustomContactNameResponse sContactFirstname(@javax.annotation.Nullable String sContactFirstname) {
    this.sContactFirstname = sContactFirstname;
    return this;
  }

  /**
   * The First name of the contact
   * @return sContactFirstname
   */
  @javax.annotation.Nullable
  public String getsContactFirstname() {
    return sContactFirstname;
  }

  public void setsContactFirstname(@javax.annotation.Nullable String sContactFirstname) {
    this.sContactFirstname = sContactFirstname;
  }


  public CustomContactNameResponse sContactLastname(@javax.annotation.Nullable String sContactLastname) {
    this.sContactLastname = sContactLastname;
    return this;
  }

  /**
   * The Last name of the contact
   * @return sContactLastname
   */
  @javax.annotation.Nullable
  public String getsContactLastname() {
    return sContactLastname;
  }

  public void setsContactLastname(@javax.annotation.Nullable String sContactLastname) {
    this.sContactLastname = sContactLastname;
  }


  public CustomContactNameResponse sContactCompany(@javax.annotation.Nullable String sContactCompany) {
    this.sContactCompany = sContactCompany;
    return this;
  }

  /**
   * The Company name of the contact
   * @return sContactCompany
   */
  @javax.annotation.Nullable
  public String getsContactCompany() {
    return sContactCompany;
  }

  public void setsContactCompany(@javax.annotation.Nullable String sContactCompany) {
    this.sContactCompany = sContactCompany;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomContactNameResponse customContactNameResponse = (CustomContactNameResponse) o;
    return Objects.equals(this.sContactFirstname, customContactNameResponse.sContactFirstname) &&
        Objects.equals(this.sContactLastname, customContactNameResponse.sContactLastname) &&
        Objects.equals(this.sContactCompany, customContactNameResponse.sContactCompany);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sContactFirstname, sContactLastname, sContactCompany);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomContactNameResponse {\n");
    sb.append("    sContactFirstname: ").append(toIndentedString(sContactFirstname)).append("\n");
    sb.append("    sContactLastname: ").append(toIndentedString(sContactLastname)).append("\n");
    sb.append("    sContactCompany: ").append(toIndentedString(sContactCompany)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sContactFirstname");
    openapiFields.add("sContactLastname");
    openapiFields.add("sContactCompany");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomContactNameResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomContactNameResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomContactNameResponse is not found in the empty JSON string", CustomContactNameResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomContactNameResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomContactNameResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("sContactFirstname") != null && !jsonObj.get("sContactFirstname").isJsonNull()) && !jsonObj.get("sContactFirstname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sContactFirstname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sContactFirstname").toString()));
      }
      if ((jsonObj.get("sContactLastname") != null && !jsonObj.get("sContactLastname").isJsonNull()) && !jsonObj.get("sContactLastname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sContactLastname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sContactLastname").toString()));
      }
      if ((jsonObj.get("sContactCompany") != null && !jsonObj.get("sContactCompany").isJsonNull()) && !jsonObj.get("sContactCompany").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sContactCompany` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sContactCompany").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomContactNameResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomContactNameResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomContactNameResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomContactNameResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomContactNameResponse>() {
           @Override
           public void write(JsonWriter out, CustomContactNameResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomContactNameResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomContactNameResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomContactNameResponse
   * @throws IOException if the JSON string is invalid with respect to CustomContactNameResponse
   */
  public static CustomContactNameResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomContactNameResponse.class);
  }

  /**
   * Convert an instance of CustomContactNameResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

