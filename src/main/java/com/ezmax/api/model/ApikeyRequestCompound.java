/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.MultilingualApikeyDescription;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * An Apikey Object and children to create a complete structure
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-25T01:26:32.973996052Z[Etc/UTC]")
public class ApikeyRequestCompound {
  public static final String SERIALIZED_NAME_PKI_APIKEY_I_D = "pkiApikeyID";
  @SerializedName(SERIALIZED_NAME_PKI_APIKEY_I_D)
  private Integer pkiApikeyID;

  public static final String SERIALIZED_NAME_FKI_USER_I_D = "fkiUserID";
  @SerializedName(SERIALIZED_NAME_FKI_USER_I_D)
  private Integer fkiUserID;

  public static final String SERIALIZED_NAME_OBJ_APIKEY_DESCRIPTION = "objApikeyDescription";
  @SerializedName(SERIALIZED_NAME_OBJ_APIKEY_DESCRIPTION)
  private MultilingualApikeyDescription objApikeyDescription;

  public static final String SERIALIZED_NAME_B_APIKEY_ISACTIVE = "bApikeyIsactive";
  @SerializedName(SERIALIZED_NAME_B_APIKEY_ISACTIVE)
  private Boolean bApikeyIsactive;

  public static final String SERIALIZED_NAME_B_APIKEY_ISSIGNED = "bApikeyIssigned";
  @SerializedName(SERIALIZED_NAME_B_APIKEY_ISSIGNED)
  private Boolean bApikeyIssigned;

  public ApikeyRequestCompound() {
  }

  public ApikeyRequestCompound pkiApikeyID(Integer pkiApikeyID) {
    
    this.pkiApikeyID = pkiApikeyID;
    return this;
  }

   /**
   * The unique ID of the Apikey
   * minimum: 0
   * @return pkiApikeyID
  **/
  @javax.annotation.Nullable
  public Integer getPkiApikeyID() {
    return pkiApikeyID;
  }


  public void setPkiApikeyID(Integer pkiApikeyID) {
    this.pkiApikeyID = pkiApikeyID;
  }


  public ApikeyRequestCompound fkiUserID(Integer fkiUserID) {
    
    this.fkiUserID = fkiUserID;
    return this;
  }

   /**
   * The unique ID of the User
   * minimum: 0
   * @return fkiUserID
  **/
  @javax.annotation.Nonnull
  public Integer getFkiUserID() {
    return fkiUserID;
  }


  public void setFkiUserID(Integer fkiUserID) {
    this.fkiUserID = fkiUserID;
  }


  public ApikeyRequestCompound objApikeyDescription(MultilingualApikeyDescription objApikeyDescription) {
    
    this.objApikeyDescription = objApikeyDescription;
    return this;
  }

   /**
   * Get objApikeyDescription
   * @return objApikeyDescription
  **/
  @javax.annotation.Nonnull
  public MultilingualApikeyDescription getObjApikeyDescription() {
    return objApikeyDescription;
  }


  public void setObjApikeyDescription(MultilingualApikeyDescription objApikeyDescription) {
    this.objApikeyDescription = objApikeyDescription;
  }


  public ApikeyRequestCompound bApikeyIsactive(Boolean bApikeyIsactive) {
    
    this.bApikeyIsactive = bApikeyIsactive;
    return this;
  }

   /**
   * Whether the apikey is active or not
   * @return bApikeyIsactive
  **/
  @javax.annotation.Nullable
  public Boolean getbApikeyIsactive() {
    return bApikeyIsactive;
  }


  public void setbApikeyIsactive(Boolean bApikeyIsactive) {
    this.bApikeyIsactive = bApikeyIsactive;
  }


  public ApikeyRequestCompound bApikeyIssigned(Boolean bApikeyIssigned) {
    
    this.bApikeyIssigned = bApikeyIssigned;
    return this;
  }

   /**
   * Whether the apikey is signed or not
   * @return bApikeyIssigned
  **/
  @javax.annotation.Nullable
  public Boolean getbApikeyIssigned() {
    return bApikeyIssigned;
  }


  public void setbApikeyIssigned(Boolean bApikeyIssigned) {
    this.bApikeyIssigned = bApikeyIssigned;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApikeyRequestCompound apikeyRequestCompound = (ApikeyRequestCompound) o;
    return Objects.equals(this.pkiApikeyID, apikeyRequestCompound.pkiApikeyID) &&
        Objects.equals(this.fkiUserID, apikeyRequestCompound.fkiUserID) &&
        Objects.equals(this.objApikeyDescription, apikeyRequestCompound.objApikeyDescription) &&
        Objects.equals(this.bApikeyIsactive, apikeyRequestCompound.bApikeyIsactive) &&
        Objects.equals(this.bApikeyIssigned, apikeyRequestCompound.bApikeyIssigned);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiApikeyID, fkiUserID, objApikeyDescription, bApikeyIsactive, bApikeyIssigned);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApikeyRequestCompound {\n");
    sb.append("    pkiApikeyID: ").append(toIndentedString(pkiApikeyID)).append("\n");
    sb.append("    fkiUserID: ").append(toIndentedString(fkiUserID)).append("\n");
    sb.append("    objApikeyDescription: ").append(toIndentedString(objApikeyDescription)).append("\n");
    sb.append("    bApikeyIsactive: ").append(toIndentedString(bApikeyIsactive)).append("\n");
    sb.append("    bApikeyIssigned: ").append(toIndentedString(bApikeyIssigned)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiApikeyID");
    openapiFields.add("fkiUserID");
    openapiFields.add("objApikeyDescription");
    openapiFields.add("bApikeyIsactive");
    openapiFields.add("bApikeyIssigned");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fkiUserID");
    openapiRequiredFields.add("objApikeyDescription");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ApikeyRequestCompound
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApikeyRequestCompound.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApikeyRequestCompound is not found in the empty JSON string", ApikeyRequestCompound.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApikeyRequestCompound.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApikeyRequestCompound` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApikeyRequestCompound.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `objApikeyDescription`
      MultilingualApikeyDescription.validateJsonElement(jsonObj.get("objApikeyDescription"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApikeyRequestCompound.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApikeyRequestCompound' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApikeyRequestCompound> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApikeyRequestCompound.class));

       return (TypeAdapter<T>) new TypeAdapter<ApikeyRequestCompound>() {
           @Override
           public void write(JsonWriter out, ApikeyRequestCompound value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApikeyRequestCompound read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApikeyRequestCompound given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApikeyRequestCompound
  * @throws IOException if the JSON string is invalid with respect to ApikeyRequestCompound
  */
  public static ApikeyRequestCompound fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApikeyRequestCompound.class);
  }

 /**
  * Convert an instance of ApikeyRequestCompound to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

