/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.BrandingResponseV3;
import com.ezmax.api.model.FieldEBrandingAlignlogo;
import com.ezmax.api.model.FieldEBrandingLogo;
import com.ezmax.api.model.MultilingualBrandingDescription;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Branding Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-17T15:03:32.455495633Z[Etc/UTC]", comments = "Generator version: 7.10.0")
public class BrandingResponseCompoundV3 extends BrandingResponseV3 {
  public static final String SERIALIZED_NAME_S_BRANDING_LOGOURL = "sBrandingLogourl";
  @SerializedName(SERIALIZED_NAME_S_BRANDING_LOGOURL)
  @javax.annotation.Nullable
  private String sBrandingLogourl;

  public static final String SERIALIZED_NAME_S_BRANDING_LOGOEMAILURL = "sBrandingLogoemailurl";
  @SerializedName(SERIALIZED_NAME_S_BRANDING_LOGOEMAILURL)
  @javax.annotation.Nullable
  private String sBrandingLogoemailurl;

  public static final String SERIALIZED_NAME_S_BRANDING_LOGOINTERFACEURL = "sBrandingLogointerfaceurl";
  @SerializedName(SERIALIZED_NAME_S_BRANDING_LOGOINTERFACEURL)
  @javax.annotation.Nullable
  private String sBrandingLogointerfaceurl;

  public BrandingResponseCompoundV3() {
  }

  public BrandingResponseCompoundV3 sBrandingLogourl(@javax.annotation.Nullable String sBrandingLogourl) {
    this.sBrandingLogourl = sBrandingLogourl;
    return this;
  }

  /**
   * The url of the picture used as logo in the Branding
   * @return sBrandingLogourl
   */
  @javax.annotation.Nullable
  public String getsBrandingLogourl() {
    return sBrandingLogourl;
  }

  public void setsBrandingLogourl(@javax.annotation.Nullable String sBrandingLogourl) {
    this.sBrandingLogourl = sBrandingLogourl;
  }


  public BrandingResponseCompoundV3 sBrandingLogoemailurl(@javax.annotation.Nullable String sBrandingLogoemailurl) {
    this.sBrandingLogoemailurl = sBrandingLogoemailurl;
    return this;
  }

  /**
   * The url of the picture used in email as logo in the Branding
   * @return sBrandingLogoemailurl
   */
  @javax.annotation.Nullable
  public String getsBrandingLogoemailurl() {
    return sBrandingLogoemailurl;
  }

  public void setsBrandingLogoemailurl(@javax.annotation.Nullable String sBrandingLogoemailurl) {
    this.sBrandingLogoemailurl = sBrandingLogoemailurl;
  }


  public BrandingResponseCompoundV3 sBrandingLogointerfaceurl(@javax.annotation.Nullable String sBrandingLogointerfaceurl) {
    this.sBrandingLogointerfaceurl = sBrandingLogointerfaceurl;
    return this;
  }

  /**
   * The url of the picture used as logo in the Branding
   * @return sBrandingLogointerfaceurl
   */
  @javax.annotation.Nullable
  public String getsBrandingLogointerfaceurl() {
    return sBrandingLogointerfaceurl;
  }

  public void setsBrandingLogointerfaceurl(@javax.annotation.Nullable String sBrandingLogointerfaceurl) {
    this.sBrandingLogointerfaceurl = sBrandingLogointerfaceurl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BrandingResponseCompoundV3 brandingResponseCompoundV3 = (BrandingResponseCompoundV3) o;
    return Objects.equals(this.sBrandingLogourl, brandingResponseCompoundV3.sBrandingLogourl) &&
        Objects.equals(this.sBrandingLogoemailurl, brandingResponseCompoundV3.sBrandingLogoemailurl) &&
        Objects.equals(this.sBrandingLogointerfaceurl, brandingResponseCompoundV3.sBrandingLogointerfaceurl) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sBrandingLogourl, sBrandingLogoemailurl, sBrandingLogointerfaceurl, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BrandingResponseCompoundV3 {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    sBrandingLogourl: ").append(toIndentedString(sBrandingLogourl)).append("\n");
    sb.append("    sBrandingLogoemailurl: ").append(toIndentedString(sBrandingLogoemailurl)).append("\n");
    sb.append("    sBrandingLogointerfaceurl: ").append(toIndentedString(sBrandingLogointerfaceurl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiBrandingID");
    openapiFields.add("fkiEmailID");
    openapiFields.add("objBrandingDescription");
    openapiFields.add("sBrandingDescriptionX");
    openapiFields.add("sBrandingName");
    openapiFields.add("sEmailAddress");
    openapiFields.add("eBrandingLogo");
    openapiFields.add("eBrandingAlignlogo");
    openapiFields.add("iBrandingColor");
    openapiFields.add("bBrandingIsactive");
    openapiFields.add("sBrandingLogourl");
    openapiFields.add("sBrandingLogoemailurl");
    openapiFields.add("sBrandingLogointerfaceurl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiBrandingID");
    openapiRequiredFields.add("objBrandingDescription");
    openapiRequiredFields.add("sBrandingDescriptionX");
    openapiRequiredFields.add("eBrandingLogo");
    openapiRequiredFields.add("eBrandingAlignlogo");
    openapiRequiredFields.add("iBrandingColor");
    openapiRequiredFields.add("bBrandingIsactive");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BrandingResponseCompoundV3
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BrandingResponseCompoundV3.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BrandingResponseCompoundV3 is not found in the empty JSON string", BrandingResponseCompoundV3.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BrandingResponseCompoundV3.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BrandingResponseCompoundV3` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BrandingResponseCompoundV3.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("sBrandingLogourl") != null && !jsonObj.get("sBrandingLogourl").isJsonNull()) && !jsonObj.get("sBrandingLogourl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sBrandingLogourl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sBrandingLogourl").toString()));
      }
      if ((jsonObj.get("sBrandingLogoemailurl") != null && !jsonObj.get("sBrandingLogoemailurl").isJsonNull()) && !jsonObj.get("sBrandingLogoemailurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sBrandingLogoemailurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sBrandingLogoemailurl").toString()));
      }
      if ((jsonObj.get("sBrandingLogointerfaceurl") != null && !jsonObj.get("sBrandingLogointerfaceurl").isJsonNull()) && !jsonObj.get("sBrandingLogointerfaceurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sBrandingLogointerfaceurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sBrandingLogointerfaceurl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BrandingResponseCompoundV3.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BrandingResponseCompoundV3' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BrandingResponseCompoundV3> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BrandingResponseCompoundV3.class));

       return (TypeAdapter<T>) new TypeAdapter<BrandingResponseCompoundV3>() {
           @Override
           public void write(JsonWriter out, BrandingResponseCompoundV3 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BrandingResponseCompoundV3 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BrandingResponseCompoundV3 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BrandingResponseCompoundV3
   * @throws IOException if the JSON string is invalid with respect to BrandingResponseCompoundV3
   */
  public static BrandingResponseCompoundV3 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BrandingResponseCompoundV3.class);
  }

  /**
   * Convert an instance of BrandingResponseCompoundV3 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

