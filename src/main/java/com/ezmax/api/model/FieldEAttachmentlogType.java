/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The Type for the Attachmentlog
 */
@JsonAdapter(FieldEAttachmentlogType.Adapter.class)
public enum FieldEAttachmentlogType {
  
  AUTO_VALIDATION("AutoValidation"),
  
  COPY_FROM("CopyFrom"),
  
  COPY_TO("CopyTo"),
  
  COPY_TO_EZSIGN("CopyToEzsign"),
  
  CREATE_BY_EZSIGN("CreateByEzsign"),
  
  DOWNLOAD("Download"),
  
  DELETED("Deleted"),
  
  DESTROYED("Destroyed"),
  
  EMAIL("Email"),
  
  EMAIL_CC("EmailCC"),
  
  EMAIL_CCI("EmailCCI"),
  
  FAX("Fax"),
  
  IMPORTED_FROM_EXTERNAL_SYSTEM("ImportedFromExternalSystem"),
  
  IMPORTED_FROM_EZA("ImportedFromEZA"),
  
  IMPORTED_FROM_FALTOUR("ImportedFromFaltour"),
  
  IMPORTED_FROM_LONEWOLF("ImportedFromLonewolf"),
  
  IMPORTED_FROM_PROSPECTS("ImportedFromProspects"),
  
  MOVE("Move"),
  
  OPEN_FROM_EMAIL("OpenFromEmail"),
  
  PURGED("Purged"),
  
  REJECT("Reject"),
  
  RENAME("Rename"),
  
  RESTORE("Restore"),
  
  SCANNED("Scanned"),
  
  SEND_TO_GED("SendToGED"),
  
  UNVALIDATED_BY("UnvalidatedBy"),
  
  UPLOAD("Upload"),
  
  VALIDATED_BY("ValidatedBy"),
  
  VETINFO_UPLOAD("VetinfoUpload");

  private String value;

  FieldEAttachmentlogType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static FieldEAttachmentlogType fromValue(String value) {
    for (FieldEAttachmentlogType b : FieldEAttachmentlogType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<FieldEAttachmentlogType> {
    @Override
    public void write(final JsonWriter jsonWriter, final FieldEAttachmentlogType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public FieldEAttachmentlogType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return FieldEAttachmentlogType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    FieldEAttachmentlogType.fromValue(value);
  }
}

