/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.17
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.ezmax.api.model.CustomContactNameResponse;
import com.ezmax.api.model.FieldECommunicationEmailimportance;
import com.ezmax.api.model.FieldECommunicationType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Communication List Element
 */
@ApiModel(description = "A Communication List Element")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-03T17:09:39.725139908Z[Etc/UTC]")
public class CommunicationListElement {
  public static final String SERIALIZED_NAME_PKI_COMMUNICATION_I_D = "pkiCommunicationID";
  @SerializedName(SERIALIZED_NAME_PKI_COMMUNICATION_I_D)
  private Integer pkiCommunicationID;

  public static final String SERIALIZED_NAME_E_COMMUNICATION_EMAILIMPORTANCE = "eCommunicationEmailimportance";
  @SerializedName(SERIALIZED_NAME_E_COMMUNICATION_EMAILIMPORTANCE)
  private FieldECommunicationEmailimportance eCommunicationEmailimportance;

  public static final String SERIALIZED_NAME_E_COMMUNICATION_TYPE = "eCommunicationType";
  @SerializedName(SERIALIZED_NAME_E_COMMUNICATION_TYPE)
  private FieldECommunicationType eCommunicationType;

  public static final String SERIALIZED_NAME_S_COMMUNICATION_SUBJECT = "sCommunicationSubject";
  @SerializedName(SERIALIZED_NAME_S_COMMUNICATION_SUBJECT)
  private String sCommunicationSubject;

  public static final String SERIALIZED_NAME_DT_COMMUNICATION_SENTDATE = "dtCommunicationSentdate";
  @SerializedName(SERIALIZED_NAME_DT_COMMUNICATION_SENTDATE)
  private String dtCommunicationSentdate;

  public static final String SERIALIZED_NAME_OBJ_CONTACT_FROM = "objContactFrom";
  @SerializedName(SERIALIZED_NAME_OBJ_CONTACT_FROM)
  private CustomContactNameResponse objContactFrom;

  public CommunicationListElement() {
  }

  public CommunicationListElement pkiCommunicationID(Integer pkiCommunicationID) {
    
    this.pkiCommunicationID = pkiCommunicationID;
    return this;
  }

   /**
   * The unique ID of the Communication.
   * minimum: 0
   * @return pkiCommunicationID
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1", required = true, value = "The unique ID of the Communication.")

  public Integer getPkiCommunicationID() {
    return pkiCommunicationID;
  }


  public void setPkiCommunicationID(Integer pkiCommunicationID) {
    this.pkiCommunicationID = pkiCommunicationID;
  }


  public CommunicationListElement eCommunicationEmailimportance(FieldECommunicationEmailimportance eCommunicationEmailimportance) {
    
    this.eCommunicationEmailimportance = eCommunicationEmailimportance;
    return this;
  }

   /**
   * Get eCommunicationEmailimportance
   * @return eCommunicationEmailimportance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FieldECommunicationEmailimportance geteCommunicationEmailimportance() {
    return eCommunicationEmailimportance;
  }


  public void seteCommunicationEmailimportance(FieldECommunicationEmailimportance eCommunicationEmailimportance) {
    this.eCommunicationEmailimportance = eCommunicationEmailimportance;
  }


  public CommunicationListElement eCommunicationType(FieldECommunicationType eCommunicationType) {
    
    this.eCommunicationType = eCommunicationType;
    return this;
  }

   /**
   * Get eCommunicationType
   * @return eCommunicationType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public FieldECommunicationType geteCommunicationType() {
    return eCommunicationType;
  }


  public void seteCommunicationType(FieldECommunicationType eCommunicationType) {
    this.eCommunicationType = eCommunicationType;
  }


  public CommunicationListElement sCommunicationSubject(String sCommunicationSubject) {
    
    this.sCommunicationSubject = sCommunicationSubject;
    return this;
  }

   /**
   * The Subject of the Communication
   * @return sCommunicationSubject
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "This is an example of subject", required = true, value = "The Subject of the Communication")

  public String getsCommunicationSubject() {
    return sCommunicationSubject;
  }


  public void setsCommunicationSubject(String sCommunicationSubject) {
    this.sCommunicationSubject = sCommunicationSubject;
  }


  public CommunicationListElement dtCommunicationSentdate(String dtCommunicationSentdate) {
    
    this.dtCommunicationSentdate = dtCommunicationSentdate;
    return this;
  }

   /**
   * The send date and time at which the Communication was sent.
   * @return dtCommunicationSentdate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2020-12-31 23:59:59", required = true, value = "The send date and time at which the Communication was sent.")

  public String getDtCommunicationSentdate() {
    return dtCommunicationSentdate;
  }


  public void setDtCommunicationSentdate(String dtCommunicationSentdate) {
    this.dtCommunicationSentdate = dtCommunicationSentdate;
  }


  public CommunicationListElement objContactFrom(CustomContactNameResponse objContactFrom) {
    
    this.objContactFrom = objContactFrom;
    return this;
  }

   /**
   * Get objContactFrom
   * @return objContactFrom
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public CustomContactNameResponse getObjContactFrom() {
    return objContactFrom;
  }


  public void setObjContactFrom(CustomContactNameResponse objContactFrom) {
    this.objContactFrom = objContactFrom;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommunicationListElement communicationListElement = (CommunicationListElement) o;
    return Objects.equals(this.pkiCommunicationID, communicationListElement.pkiCommunicationID) &&
        Objects.equals(this.eCommunicationEmailimportance, communicationListElement.eCommunicationEmailimportance) &&
        Objects.equals(this.eCommunicationType, communicationListElement.eCommunicationType) &&
        Objects.equals(this.sCommunicationSubject, communicationListElement.sCommunicationSubject) &&
        Objects.equals(this.dtCommunicationSentdate, communicationListElement.dtCommunicationSentdate) &&
        Objects.equals(this.objContactFrom, communicationListElement.objContactFrom);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiCommunicationID, eCommunicationEmailimportance, eCommunicationType, sCommunicationSubject, dtCommunicationSentdate, objContactFrom);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommunicationListElement {\n");
    sb.append("    pkiCommunicationID: ").append(toIndentedString(pkiCommunicationID)).append("\n");
    sb.append("    eCommunicationEmailimportance: ").append(toIndentedString(eCommunicationEmailimportance)).append("\n");
    sb.append("    eCommunicationType: ").append(toIndentedString(eCommunicationType)).append("\n");
    sb.append("    sCommunicationSubject: ").append(toIndentedString(sCommunicationSubject)).append("\n");
    sb.append("    dtCommunicationSentdate: ").append(toIndentedString(dtCommunicationSentdate)).append("\n");
    sb.append("    objContactFrom: ").append(toIndentedString(objContactFrom)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiCommunicationID");
    openapiFields.add("eCommunicationEmailimportance");
    openapiFields.add("eCommunicationType");
    openapiFields.add("sCommunicationSubject");
    openapiFields.add("dtCommunicationSentdate");
    openapiFields.add("objContactFrom");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiCommunicationID");
    openapiRequiredFields.add("eCommunicationType");
    openapiRequiredFields.add("sCommunicationSubject");
    openapiRequiredFields.add("dtCommunicationSentdate");
    openapiRequiredFields.add("objContactFrom");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CommunicationListElement
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CommunicationListElement.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommunicationListElement is not found in the empty JSON string", CommunicationListElement.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CommunicationListElement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommunicationListElement` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CommunicationListElement.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("sCommunicationSubject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sCommunicationSubject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sCommunicationSubject").toString()));
      }
      if (!jsonObj.get("dtCommunicationSentdate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dtCommunicationSentdate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dtCommunicationSentdate").toString()));
      }
      // validate the required field `objContactFrom`
      CustomContactNameResponse.validateJsonObject(jsonObj.getAsJsonObject("objContactFrom"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommunicationListElement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommunicationListElement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommunicationListElement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommunicationListElement.class));

       return (TypeAdapter<T>) new TypeAdapter<CommunicationListElement>() {
           @Override
           public void write(JsonWriter out, CommunicationListElement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommunicationListElement read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CommunicationListElement given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CommunicationListElement
  * @throws IOException if the JSON string is invalid with respect to CommunicationListElement
  */
  public static CommunicationListElement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommunicationListElement.class);
  }

 /**
  * Convert an instance of CommunicationListElement to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

