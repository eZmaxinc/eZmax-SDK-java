/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * An Ezdoctemplatedocument Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-28T21:41:20.249020914Z[Etc/UTC]", comments = "Generator version: 7.11.0")
public class EzdoctemplatedocumentRequestPatch {
  /**
   * Indicates the format of the template.  This field is Required when sEzdoctemplatedocumentBase64 is set.
   */
  @JsonAdapter(EEzdoctemplatedocumentFormatEnum.Adapter.class)
  public enum EEzdoctemplatedocumentFormatEnum {
    DOCX("Docx"),
    
    HTML("Html"),
    
    TX("Tx");

    private String value;

    EEzdoctemplatedocumentFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EEzdoctemplatedocumentFormatEnum fromValue(String value) {
      for (EEzdoctemplatedocumentFormatEnum b : EEzdoctemplatedocumentFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EEzdoctemplatedocumentFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EEzdoctemplatedocumentFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EEzdoctemplatedocumentFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EEzdoctemplatedocumentFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EEzdoctemplatedocumentFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_E_EZDOCTEMPLATEDOCUMENT_FORMAT = "eEzdoctemplatedocumentFormat";
  @SerializedName(SERIALIZED_NAME_E_EZDOCTEMPLATEDOCUMENT_FORMAT)
  @javax.annotation.Nullable
  private EEzdoctemplatedocumentFormatEnum eEzdoctemplatedocumentFormat;

  public static final String SERIALIZED_NAME_S_EZDOCTEMPLATEDOCUMENT_FIELDS = "sEzdoctemplatedocumentFields";
  @SerializedName(SERIALIZED_NAME_S_EZDOCTEMPLATEDOCUMENT_FIELDS)
  @javax.annotation.Nullable
  private String sEzdoctemplatedocumentFields;

  public static final String SERIALIZED_NAME_S_EZDOCTEMPLATEDOCUMENT_BASE64 = "sEzdoctemplatedocumentBase64";
  @SerializedName(SERIALIZED_NAME_S_EZDOCTEMPLATEDOCUMENT_BASE64)
  @javax.annotation.Nullable
  private byte[] sEzdoctemplatedocumentBase64;

  public EzdoctemplatedocumentRequestPatch() {
  }

  public EzdoctemplatedocumentRequestPatch eEzdoctemplatedocumentFormat(@javax.annotation.Nullable EEzdoctemplatedocumentFormatEnum eEzdoctemplatedocumentFormat) {
    this.eEzdoctemplatedocumentFormat = eEzdoctemplatedocumentFormat;
    return this;
  }

  /**
   * Indicates the format of the template.  This field is Required when sEzdoctemplatedocumentBase64 is set.
   * @return eEzdoctemplatedocumentFormat
   */
  @javax.annotation.Nullable
  public EEzdoctemplatedocumentFormatEnum geteEzdoctemplatedocumentFormat() {
    return eEzdoctemplatedocumentFormat;
  }

  public void seteEzdoctemplatedocumentFormat(@javax.annotation.Nullable EEzdoctemplatedocumentFormatEnum eEzdoctemplatedocumentFormat) {
    this.eEzdoctemplatedocumentFormat = eEzdoctemplatedocumentFormat;
  }


  public EzdoctemplatedocumentRequestPatch sEzdoctemplatedocumentFields(@javax.annotation.Nullable String sEzdoctemplatedocumentFields) {
    this.sEzdoctemplatedocumentFields = sEzdoctemplatedocumentFields;
    return this;
  }

  /**
   * List of field in Ezdoctemplatedocument
   * @return sEzdoctemplatedocumentFields
   */
  @javax.annotation.Nullable
  public String getsEzdoctemplatedocumentFields() {
    return sEzdoctemplatedocumentFields;
  }

  public void setsEzdoctemplatedocumentFields(@javax.annotation.Nullable String sEzdoctemplatedocumentFields) {
    this.sEzdoctemplatedocumentFields = sEzdoctemplatedocumentFields;
  }


  public EzdoctemplatedocumentRequestPatch sEzdoctemplatedocumentBase64(@javax.annotation.Nullable byte[] sEzdoctemplatedocumentBase64) {
    this.sEzdoctemplatedocumentBase64 = sEzdoctemplatedocumentBase64;
    return this;
  }

  /**
   * The Base64 encoded binary content of the document.  This field is Required when eEzdoctemplatedocumentFormat is set.
   * @return sEzdoctemplatedocumentBase64
   */
  @javax.annotation.Nullable
  public byte[] getsEzdoctemplatedocumentBase64() {
    return sEzdoctemplatedocumentBase64;
  }

  public void setsEzdoctemplatedocumentBase64(@javax.annotation.Nullable byte[] sEzdoctemplatedocumentBase64) {
    this.sEzdoctemplatedocumentBase64 = sEzdoctemplatedocumentBase64;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzdoctemplatedocumentRequestPatch ezdoctemplatedocumentRequestPatch = (EzdoctemplatedocumentRequestPatch) o;
    return Objects.equals(this.eEzdoctemplatedocumentFormat, ezdoctemplatedocumentRequestPatch.eEzdoctemplatedocumentFormat) &&
        Objects.equals(this.sEzdoctemplatedocumentFields, ezdoctemplatedocumentRequestPatch.sEzdoctemplatedocumentFields) &&
        Arrays.equals(this.sEzdoctemplatedocumentBase64, ezdoctemplatedocumentRequestPatch.sEzdoctemplatedocumentBase64);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eEzdoctemplatedocumentFormat, sEzdoctemplatedocumentFields, Arrays.hashCode(sEzdoctemplatedocumentBase64));
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzdoctemplatedocumentRequestPatch {\n");
    sb.append("    eEzdoctemplatedocumentFormat: ").append(toIndentedString(eEzdoctemplatedocumentFormat)).append("\n");
    sb.append("    sEzdoctemplatedocumentFields: ").append(toIndentedString(sEzdoctemplatedocumentFields)).append("\n");
    sb.append("    sEzdoctemplatedocumentBase64: ").append(toIndentedString(sEzdoctemplatedocumentBase64)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eEzdoctemplatedocumentFormat");
    openapiFields.add("sEzdoctemplatedocumentFields");
    openapiFields.add("sEzdoctemplatedocumentBase64");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EzdoctemplatedocumentRequestPatch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EzdoctemplatedocumentRequestPatch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzdoctemplatedocumentRequestPatch is not found in the empty JSON string", EzdoctemplatedocumentRequestPatch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EzdoctemplatedocumentRequestPatch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzdoctemplatedocumentRequestPatch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("eEzdoctemplatedocumentFormat") != null && !jsonObj.get("eEzdoctemplatedocumentFormat").isJsonNull()) && !jsonObj.get("eEzdoctemplatedocumentFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eEzdoctemplatedocumentFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eEzdoctemplatedocumentFormat").toString()));
      }
      // validate the optional field `eEzdoctemplatedocumentFormat`
      if (jsonObj.get("eEzdoctemplatedocumentFormat") != null && !jsonObj.get("eEzdoctemplatedocumentFormat").isJsonNull()) {
        EEzdoctemplatedocumentFormatEnum.validateJsonElement(jsonObj.get("eEzdoctemplatedocumentFormat"));
      }
      if ((jsonObj.get("sEzdoctemplatedocumentFields") != null && !jsonObj.get("sEzdoctemplatedocumentFields").isJsonNull()) && !jsonObj.get("sEzdoctemplatedocumentFields").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzdoctemplatedocumentFields` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzdoctemplatedocumentFields").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzdoctemplatedocumentRequestPatch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzdoctemplatedocumentRequestPatch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzdoctemplatedocumentRequestPatch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzdoctemplatedocumentRequestPatch.class));

       return (TypeAdapter<T>) new TypeAdapter<EzdoctemplatedocumentRequestPatch>() {
           @Override
           public void write(JsonWriter out, EzdoctemplatedocumentRequestPatch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzdoctemplatedocumentRequestPatch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EzdoctemplatedocumentRequestPatch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EzdoctemplatedocumentRequestPatch
   * @throws IOException if the JSON string is invalid with respect to EzdoctemplatedocumentRequestPatch
   */
  public static EzdoctemplatedocumentRequestPatch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzdoctemplatedocumentRequestPatch.class);
  }

  /**
   * Convert an instance of EzdoctemplatedocumentRequestPatch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

