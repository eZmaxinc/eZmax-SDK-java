/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.EmailRequest;
import com.ezmax.api.model.FieldEUserEzsignaccess;
import com.ezmax.api.model.FieldEUserLogintype;
import com.ezmax.api.model.FieldEUserType;
import com.ezmax.api.model.PhoneRequest;
import com.ezmax.api.model.UserRequest;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A User Object and children
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-17T15:03:32.455495633Z[Etc/UTC]", comments = "Generator version: 7.10.0")
public class UserRequestCompound extends UserRequest {
  public UserRequestCompound() {
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    return super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserRequestCompound {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiUserID");
    openapiFields.add("fkiAgentID");
    openapiFields.add("fkiBrokerID");
    openapiFields.add("fkiAssistantID");
    openapiFields.add("fkiEmployeeID");
    openapiFields.add("fkiCompanyIDDefault");
    openapiFields.add("fkiDepartmentIDDefault");
    openapiFields.add("fkiTimezoneID");
    openapiFields.add("fkiLanguageID");
    openapiFields.add("objEmail");
    openapiFields.add("fkiBillingentityinternalID");
    openapiFields.add("objPhoneHome");
    openapiFields.add("objPhoneSMS");
    openapiFields.add("fkiSecretquestionID");
    openapiFields.add("sUserSecretresponse");
    openapiFields.add("fkiModuleIDForm");
    openapiFields.add("eUserType");
    openapiFields.add("eUserLogintype");
    openapiFields.add("sUserFirstname");
    openapiFields.add("sUserLastname");
    openapiFields.add("sUserLoginname");
    openapiFields.add("sUserJobtitle");
    openapiFields.add("eUserEzsignaccess");
    openapiFields.add("bUserIsactive");
    openapiFields.add("bUserValidatebyadministration");
    openapiFields.add("bUserValidatebydirector");
    openapiFields.add("bUserAttachmentautoverified");
    openapiFields.add("bUserChangepassword");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fkiCompanyIDDefault");
    openapiRequiredFields.add("fkiDepartmentIDDefault");
    openapiRequiredFields.add("fkiTimezoneID");
    openapiRequiredFields.add("fkiLanguageID");
    openapiRequiredFields.add("objEmail");
    openapiRequiredFields.add("fkiBillingentityinternalID");
    openapiRequiredFields.add("eUserType");
    openapiRequiredFields.add("eUserLogintype");
    openapiRequiredFields.add("sUserFirstname");
    openapiRequiredFields.add("sUserLastname");
    openapiRequiredFields.add("sUserLoginname");
    openapiRequiredFields.add("eUserEzsignaccess");
    openapiRequiredFields.add("bUserIsactive");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserRequestCompound
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserRequestCompound.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserRequestCompound is not found in the empty JSON string", UserRequestCompound.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserRequestCompound.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserRequestCompound` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserRequestCompound.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserRequestCompound.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserRequestCompound' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserRequestCompound> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserRequestCompound.class));

       return (TypeAdapter<T>) new TypeAdapter<UserRequestCompound>() {
           @Override
           public void write(JsonWriter out, UserRequestCompound value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserRequestCompound read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserRequestCompound given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserRequestCompound
   * @throws IOException if the JSON string is invalid with respect to UserRequestCompound
   */
  public static UserRequestCompound fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserRequestCompound.class);
  }

  /**
   * Convert an instance of UserRequestCompound to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

