/*
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.6
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.ezmax.api.model.EzsignsignaturecustomdateResponse;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * An Ezsignsignaturecustomdate Object and children to create a complete structure
 */
@ApiModel(description = "An Ezsignsignaturecustomdate Object and children to create a complete structure")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-03-04T22:02:18.461140Z[Etc/UTC]")
public class EzsignsignaturecustomdateResponseCompound {
  public static final String SERIALIZED_NAME_PKI_EZSIGNSIGNATURECUSTOMDATE_I_D = "pkiEzsignsignaturecustomdateID";
  @SerializedName(SERIALIZED_NAME_PKI_EZSIGNSIGNATURECUSTOMDATE_I_D)
  private Integer pkiEzsignsignaturecustomdateID;

  public static final String SERIALIZED_NAME_I_EZSIGNSIGNATURECUSTOMDATE_X = "iEzsignsignaturecustomdateX";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNSIGNATURECUSTOMDATE_X)
  private Integer iEzsignsignaturecustomdateX;

  public static final String SERIALIZED_NAME_I_EZSIGNSIGNATURECUSTOMDATE_Y = "iEzsignsignaturecustomdateY";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNSIGNATURECUSTOMDATE_Y)
  private Integer iEzsignsignaturecustomdateY;

  public static final String SERIALIZED_NAME_S_EZSIGNSIGNATURECUSTOMDATE_FORMAT = "sEzsignsignaturecustomdateFormat";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNSIGNATURECUSTOMDATE_FORMAT)
  private String sEzsignsignaturecustomdateFormat;

  public EzsignsignaturecustomdateResponseCompound() { 
  }

  public EzsignsignaturecustomdateResponseCompound pkiEzsignsignaturecustomdateID(Integer pkiEzsignsignaturecustomdateID) {
    
    this.pkiEzsignsignaturecustomdateID = pkiEzsignsignaturecustomdateID;
    return this;
  }

   /**
   * The unique ID of the Ezsignsignaturecustomdate
   * @return pkiEzsignsignaturecustomdateID
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "27", required = true, value = "The unique ID of the Ezsignsignaturecustomdate")

  public Integer getPkiEzsignsignaturecustomdateID() {
    return pkiEzsignsignaturecustomdateID;
  }


  public void setPkiEzsignsignaturecustomdateID(Integer pkiEzsignsignaturecustomdateID) {
    this.pkiEzsignsignaturecustomdateID = pkiEzsignsignaturecustomdateID;
  }


  public EzsignsignaturecustomdateResponseCompound iEzsignsignaturecustomdateX(Integer iEzsignsignaturecustomdateX) {
    
    this.iEzsignsignaturecustomdateX = iEzsignsignaturecustomdateX;
    return this;
  }

   /**
   * The X coordinate (Horizontal) where to put the Ezsignsignaturecustomdate on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignaturecustomdate block 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate.
   * @return iEzsignsignaturecustomdateX
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "200", required = true, value = "The X coordinate (Horizontal) where to put the Ezsignsignaturecustomdate on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignaturecustomdate block 2 inches from the left border of the page, you would use \"200\" for the X coordinate.")

  public Integer getiEzsignsignaturecustomdateX() {
    return iEzsignsignaturecustomdateX;
  }


  public void setiEzsignsignaturecustomdateX(Integer iEzsignsignaturecustomdateX) {
    this.iEzsignsignaturecustomdateX = iEzsignsignaturecustomdateX;
  }


  public EzsignsignaturecustomdateResponseCompound iEzsignsignaturecustomdateY(Integer iEzsignsignaturecustomdateY) {
    
    this.iEzsignsignaturecustomdateY = iEzsignsignaturecustomdateY;
    return this;
  }

   /**
   * The Y coordinate (Vertical) where to put the Ezsignsignaturecustomdate on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignaturecustomdate block 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate.
   * @return iEzsignsignaturecustomdateY
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "300", required = true, value = "The Y coordinate (Vertical) where to put the Ezsignsignaturecustomdate on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignaturecustomdate block 3 inches from the top border of the page, you would use \"300\" for the Y coordinate.")

  public Integer getiEzsignsignaturecustomdateY() {
    return iEzsignsignaturecustomdateY;
  }


  public void setiEzsignsignaturecustomdateY(Integer iEzsignsignaturecustomdateY) {
    this.iEzsignsignaturecustomdateY = iEzsignsignaturecustomdateY;
  }


  public EzsignsignaturecustomdateResponseCompound sEzsignsignaturecustomdateFormat(String sEzsignsignaturecustomdateFormat) {
    
    this.sEzsignsignaturecustomdateFormat = sEzsignsignaturecustomdateFormat;
    return this;
  }

   /**
   * The custom date format to use  You can use the codes below and they will be replaced at signature time. Text values like month and day names will be rendered in the proper language. Other text will be left as-is.  The codes examples below are based on the following datetime: Thursday, January 6, 2022 at 08:07:09 EST  For example, the format \&quot;Signature date: {MM}/{DD}/{YYYY} {hh}:{mm}\&quot; would become \&quot;Signature date: 01/06/2022 08:07\&quot;  **Year**  | Code | Example | | - | - | | {YYYY} | 2022 | | {YY} | 22 |  **Month**  | Code | Example | | - | - | | {MonthCapitalize} | Janvier | | {Month} | janvier | | {MM} | 01 | | {M} | 1 |  **Day**  | Code | Example | | - | - | | {DayCapitalize} | Jeudi | | {Day} | jeudi | | {DD} | 06 | | {D} | 6 |  **Hour**  | Code | Example | | - | - | | {hh} | 08 |  **Minute**  | Code | Example | | - | - | | {mm} | 07 |  **Second**  | Code | Example | | - | - | | {ss} | 09 |        **Timezone**  | Code | Example | | - | - | | {Z} | EST |       **Time**  | Code | Example | | - | - | | {Time} | 08:07:09 |   | {TimeZ} | 08:07:09 EST |     **Date**  | Code | Example | | - | - | | {Date} | 2022-01-06 |   | {DateText} | 1er Janvier 2022 |  **Full**  | Code | Example | | - | - | | {DateTime} | 2022-01-06 08:07:09 |   | {DateTimeZ} | 2022-01-06 08:07:09 EST | 
   * @return sEzsignsignaturecustomdateFormat
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Signature date: {YYYY}/{MM}/{DD} {hh}:{mm}{ss} {Z}", required = true, value = "The custom date format to use  You can use the codes below and they will be replaced at signature time. Text values like month and day names will be rendered in the proper language. Other text will be left as-is.  The codes examples below are based on the following datetime: Thursday, January 6, 2022 at 08:07:09 EST  For example, the format \"Signature date: {MM}/{DD}/{YYYY} {hh}:{mm}\" would become \"Signature date: 01/06/2022 08:07\"  **Year**  | Code | Example | | - | - | | {YYYY} | 2022 | | {YY} | 22 |  **Month**  | Code | Example | | - | - | | {MonthCapitalize} | Janvier | | {Month} | janvier | | {MM} | 01 | | {M} | 1 |  **Day**  | Code | Example | | - | - | | {DayCapitalize} | Jeudi | | {Day} | jeudi | | {DD} | 06 | | {D} | 6 |  **Hour**  | Code | Example | | - | - | | {hh} | 08 |  **Minute**  | Code | Example | | - | - | | {mm} | 07 |  **Second**  | Code | Example | | - | - | | {ss} | 09 |        **Timezone**  | Code | Example | | - | - | | {Z} | EST |       **Time**  | Code | Example | | - | - | | {Time} | 08:07:09 |   | {TimeZ} | 08:07:09 EST |     **Date**  | Code | Example | | - | - | | {Date} | 2022-01-06 |   | {DateText} | 1er Janvier 2022 |  **Full**  | Code | Example | | - | - | | {DateTime} | 2022-01-06 08:07:09 |   | {DateTimeZ} | 2022-01-06 08:07:09 EST | ")

  public String getsEzsignsignaturecustomdateFormat() {
    return sEzsignsignaturecustomdateFormat;
  }


  public void setsEzsignsignaturecustomdateFormat(String sEzsignsignaturecustomdateFormat) {
    this.sEzsignsignaturecustomdateFormat = sEzsignsignaturecustomdateFormat;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsignsignaturecustomdateResponseCompound ezsignsignaturecustomdateResponseCompound = (EzsignsignaturecustomdateResponseCompound) o;
    return Objects.equals(this.pkiEzsignsignaturecustomdateID, ezsignsignaturecustomdateResponseCompound.pkiEzsignsignaturecustomdateID) &&
        Objects.equals(this.iEzsignsignaturecustomdateX, ezsignsignaturecustomdateResponseCompound.iEzsignsignaturecustomdateX) &&
        Objects.equals(this.iEzsignsignaturecustomdateY, ezsignsignaturecustomdateResponseCompound.iEzsignsignaturecustomdateY) &&
        Objects.equals(this.sEzsignsignaturecustomdateFormat, ezsignsignaturecustomdateResponseCompound.sEzsignsignaturecustomdateFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiEzsignsignaturecustomdateID, iEzsignsignaturecustomdateX, iEzsignsignaturecustomdateY, sEzsignsignaturecustomdateFormat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsignsignaturecustomdateResponseCompound {\n");
    sb.append("    pkiEzsignsignaturecustomdateID: ").append(toIndentedString(pkiEzsignsignaturecustomdateID)).append("\n");
    sb.append("    iEzsignsignaturecustomdateX: ").append(toIndentedString(iEzsignsignaturecustomdateX)).append("\n");
    sb.append("    iEzsignsignaturecustomdateY: ").append(toIndentedString(iEzsignsignaturecustomdateY)).append("\n");
    sb.append("    sEzsignsignaturecustomdateFormat: ").append(toIndentedString(sEzsignsignaturecustomdateFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiEzsignsignaturecustomdateID");
    openapiFields.add("iEzsignsignaturecustomdateX");
    openapiFields.add("iEzsignsignaturecustomdateY");
    openapiFields.add("sEzsignsignaturecustomdateFormat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiEzsignsignaturecustomdateID");
    openapiRequiredFields.add("iEzsignsignaturecustomdateX");
    openapiRequiredFields.add("iEzsignsignaturecustomdateY");
    openapiRequiredFields.add("sEzsignsignaturecustomdateFormat");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EzsignsignaturecustomdateResponseCompound
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (EzsignsignaturecustomdateResponseCompound.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsignsignaturecustomdateResponseCompound is not found in the empty JSON string", EzsignsignaturecustomdateResponseCompound.openapiRequiredFields.toString()));
        }
      }
      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EzsignsignaturecustomdateResponseCompound.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsignsignaturecustomdateResponseCompound` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EzsignsignaturecustomdateResponseCompound.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsignsignaturecustomdateResponseCompound.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsignsignaturecustomdateResponseCompound' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsignsignaturecustomdateResponseCompound> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsignsignaturecustomdateResponseCompound.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsignsignaturecustomdateResponseCompound>() {
           @Override
           public void write(JsonWriter out, EzsignsignaturecustomdateResponseCompound value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsignsignaturecustomdateResponseCompound read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EzsignsignaturecustomdateResponseCompound given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EzsignsignaturecustomdateResponseCompound
  * @throws IOException if the JSON string is invalid with respect to EzsignsignaturecustomdateResponseCompound
  */
  public static EzsignsignaturecustomdateResponseCompound fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsignsignaturecustomdateResponseCompound.class);
  }

 /**
  * Convert an instance of EzsignsignaturecustomdateResponseCompound to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

