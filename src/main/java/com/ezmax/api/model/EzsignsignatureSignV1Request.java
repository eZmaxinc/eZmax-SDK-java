/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.CommonFile;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * Request for POST /1/object/ezsignsignature/{pkiEzsignsignatureID}/sign
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-25T00:28:51.495500552Z[Etc/UTC]")
public class EzsignsignatureSignV1Request {
  public static final String SERIALIZED_NAME_S_VALUE = "sValue";
  @SerializedName(SERIALIZED_NAME_S_VALUE)
  private String sValue;

  /**
   * Whether the attachment are accepted or refused.  This can only be set if eEzsignsignatureType is **AttachmentsConfirmation**
   */
  @JsonAdapter(EAttachmentsConfirmationDecisionEnum.Adapter.class)
  public enum EAttachmentsConfirmationDecisionEnum {
    ACCEPTED("Accepted"),
    
    REFUSED("Refused");

    private String value;

    EAttachmentsConfirmationDecisionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EAttachmentsConfirmationDecisionEnum fromValue(String value) {
      for (EAttachmentsConfirmationDecisionEnum b : EAttachmentsConfirmationDecisionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EAttachmentsConfirmationDecisionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EAttachmentsConfirmationDecisionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EAttachmentsConfirmationDecisionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EAttachmentsConfirmationDecisionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_E_ATTACHMENTS_CONFIRMATION_DECISION = "eAttachmentsConfirmationDecision";
  @SerializedName(SERIALIZED_NAME_E_ATTACHMENTS_CONFIRMATION_DECISION)
  private EAttachmentsConfirmationDecisionEnum eAttachmentsConfirmationDecision;

  public static final String SERIALIZED_NAME_S_ATTACHMENTS_REFUSAL_REASON = "sAttachmentsRefusalReason";
  @SerializedName(SERIALIZED_NAME_S_ATTACHMENTS_REFUSAL_REASON)
  private String sAttachmentsRefusalReason;

  public static final String SERIALIZED_NAME_S_SVG = "sSvg";
  @SerializedName(SERIALIZED_NAME_S_SVG)
  private String sSvg;

  public static final String SERIALIZED_NAME_A_OBJ_FILE = "a_objFile";
  @SerializedName(SERIALIZED_NAME_A_OBJ_FILE)
  private List<CommonFile> aObjFile;

  public static final String SERIALIZED_NAME_B_IS_AUTOMATIC = "bIsAutomatic";
  @SerializedName(SERIALIZED_NAME_B_IS_AUTOMATIC)
  private Boolean bIsAutomatic;

  public EzsignsignatureSignV1Request() {
  }

  public EzsignsignatureSignV1Request sValue(String sValue) {
    
    this.sValue = sValue;
    return this;
  }

   /**
   * The value required for the Ezsignsignature.  This can only be set if eEzsignsignatureType is **City**, **FieldText** or **FieldTextarea**
   * @return sValue
  **/
  @javax.annotation.Nullable
  public String getsValue() {
    return sValue;
  }


  public void setsValue(String sValue) {
    this.sValue = sValue;
  }


  public EzsignsignatureSignV1Request eAttachmentsConfirmationDecision(EAttachmentsConfirmationDecisionEnum eAttachmentsConfirmationDecision) {
    
    this.eAttachmentsConfirmationDecision = eAttachmentsConfirmationDecision;
    return this;
  }

   /**
   * Whether the attachment are accepted or refused.  This can only be set if eEzsignsignatureType is **AttachmentsConfirmation**
   * @return eAttachmentsConfirmationDecision
  **/
  @javax.annotation.Nullable
  public EAttachmentsConfirmationDecisionEnum geteAttachmentsConfirmationDecision() {
    return eAttachmentsConfirmationDecision;
  }


  public void seteAttachmentsConfirmationDecision(EAttachmentsConfirmationDecisionEnum eAttachmentsConfirmationDecision) {
    this.eAttachmentsConfirmationDecision = eAttachmentsConfirmationDecision;
  }


  public EzsignsignatureSignV1Request sAttachmentsRefusalReason(String sAttachmentsRefusalReason) {
    
    this.sAttachmentsRefusalReason = sAttachmentsRefusalReason;
    return this;
  }

   /**
   * The reason of refused.  This can only be set if eEzsignsignatureType is **AttachmentsConfirmation**
   * @return sAttachmentsRefusalReason
  **/
  @javax.annotation.Nullable
  public String getsAttachmentsRefusalReason() {
    return sAttachmentsRefusalReason;
  }


  public void setsAttachmentsRefusalReason(String sAttachmentsRefusalReason) {
    this.sAttachmentsRefusalReason = sAttachmentsRefusalReason;
  }


  public EzsignsignatureSignV1Request sSvg(String sSvg) {
    
    this.sSvg = sSvg;
    return this;
  }

   /**
   * The SVG of the handwritten signature.  This can only be set if eEzsignsignatureType is **Handwritten** and **bIsAutomatic** is false
   * @return sSvg
  **/
  @javax.annotation.Nullable
  public String getsSvg() {
    return sSvg;
  }


  public void setsSvg(String sSvg) {
    this.sSvg = sSvg;
  }


  public EzsignsignatureSignV1Request aObjFile(List<CommonFile> aObjFile) {
    
    this.aObjFile = aObjFile;
    return this;
  }

  public EzsignsignatureSignV1Request addAObjFileItem(CommonFile aObjFileItem) {
    if (this.aObjFile == null) {
      this.aObjFile = new ArrayList<>();
    }
    this.aObjFile.add(aObjFileItem);
    return this;
  }

   /**
   * Get aObjFile
   * @return aObjFile
  **/
  @javax.annotation.Nullable
  public List<CommonFile> getaObjFile() {
    return aObjFile;
  }


  public void setaObjFile(List<CommonFile> aObjFile) {
    this.aObjFile = aObjFile;
  }


  public EzsignsignatureSignV1Request bIsAutomatic(Boolean bIsAutomatic) {
    
    this.bIsAutomatic = bIsAutomatic;
    return this;
  }

   /**
   * Indicates if the Ezsignsignature was part of an automatic process or not.  This can only be true if eEzsignsignatureType is **Acknowledgement**, **City**, **Handwritten**, **Initials**, **Name** or **Stamp**. 
   * @return bIsAutomatic
  **/
  @javax.annotation.Nonnull
  public Boolean getbIsAutomatic() {
    return bIsAutomatic;
  }


  public void setbIsAutomatic(Boolean bIsAutomatic) {
    this.bIsAutomatic = bIsAutomatic;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsignsignatureSignV1Request ezsignsignatureSignV1Request = (EzsignsignatureSignV1Request) o;
    return Objects.equals(this.sValue, ezsignsignatureSignV1Request.sValue) &&
        Objects.equals(this.eAttachmentsConfirmationDecision, ezsignsignatureSignV1Request.eAttachmentsConfirmationDecision) &&
        Objects.equals(this.sAttachmentsRefusalReason, ezsignsignatureSignV1Request.sAttachmentsRefusalReason) &&
        Objects.equals(this.sSvg, ezsignsignatureSignV1Request.sSvg) &&
        Objects.equals(this.aObjFile, ezsignsignatureSignV1Request.aObjFile) &&
        Objects.equals(this.bIsAutomatic, ezsignsignatureSignV1Request.bIsAutomatic);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sValue, eAttachmentsConfirmationDecision, sAttachmentsRefusalReason, sSvg, aObjFile, bIsAutomatic);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsignsignatureSignV1Request {\n");
    sb.append("    sValue: ").append(toIndentedString(sValue)).append("\n");
    sb.append("    eAttachmentsConfirmationDecision: ").append(toIndentedString(eAttachmentsConfirmationDecision)).append("\n");
    sb.append("    sAttachmentsRefusalReason: ").append(toIndentedString(sAttachmentsRefusalReason)).append("\n");
    sb.append("    sSvg: ").append(toIndentedString(sSvg)).append("\n");
    sb.append("    aObjFile: ").append(toIndentedString(aObjFile)).append("\n");
    sb.append("    bIsAutomatic: ").append(toIndentedString(bIsAutomatic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sValue");
    openapiFields.add("eAttachmentsConfirmationDecision");
    openapiFields.add("sAttachmentsRefusalReason");
    openapiFields.add("sSvg");
    openapiFields.add("a_objFile");
    openapiFields.add("bIsAutomatic");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("bIsAutomatic");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EzsignsignatureSignV1Request
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EzsignsignatureSignV1Request.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsignsignatureSignV1Request is not found in the empty JSON string", EzsignsignatureSignV1Request.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EzsignsignatureSignV1Request.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsignsignatureSignV1Request` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EzsignsignatureSignV1Request.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("sValue") != null && !jsonObj.get("sValue").isJsonNull()) && !jsonObj.get("sValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sValue").toString()));
      }
      if ((jsonObj.get("eAttachmentsConfirmationDecision") != null && !jsonObj.get("eAttachmentsConfirmationDecision").isJsonNull()) && !jsonObj.get("eAttachmentsConfirmationDecision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eAttachmentsConfirmationDecision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eAttachmentsConfirmationDecision").toString()));
      }
      if ((jsonObj.get("sAttachmentsRefusalReason") != null && !jsonObj.get("sAttachmentsRefusalReason").isJsonNull()) && !jsonObj.get("sAttachmentsRefusalReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sAttachmentsRefusalReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sAttachmentsRefusalReason").toString()));
      }
      if ((jsonObj.get("sSvg") != null && !jsonObj.get("sSvg").isJsonNull()) && !jsonObj.get("sSvg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sSvg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sSvg").toString()));
      }
      if (jsonObj.get("a_objFile") != null && !jsonObj.get("a_objFile").isJsonNull()) {
        JsonArray jsonArrayaObjFile = jsonObj.getAsJsonArray("a_objFile");
        if (jsonArrayaObjFile != null) {
          // ensure the json data is an array
          if (!jsonObj.get("a_objFile").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `a_objFile` to be an array in the JSON string but got `%s`", jsonObj.get("a_objFile").toString()));
          }

          // validate the optional field `a_objFile` (array)
          for (int i = 0; i < jsonArrayaObjFile.size(); i++) {
            CommonFile.validateJsonElement(jsonArrayaObjFile.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsignsignatureSignV1Request.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsignsignatureSignV1Request' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsignsignatureSignV1Request> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsignsignatureSignV1Request.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsignsignatureSignV1Request>() {
           @Override
           public void write(JsonWriter out, EzsignsignatureSignV1Request value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsignsignatureSignV1Request read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EzsignsignatureSignV1Request given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EzsignsignatureSignV1Request
  * @throws IOException if the JSON string is invalid with respect to EzsignsignatureSignV1Request
  */
  public static EzsignsignatureSignV1Request fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsignsignatureSignV1Request.class);
  }

 /**
  * Convert an instance of EzsignsignatureSignV1Request to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

