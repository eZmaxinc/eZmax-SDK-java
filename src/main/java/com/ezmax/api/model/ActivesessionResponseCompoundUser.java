/*
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * An Activesession-&gt;User Object and children to create a complete structure
 */
@ApiModel(description = "An Activesession->User Object and children to create a complete structure")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-02-25T03:24:27.571324Z[Etc/UTC]")
public class ActivesessionResponseCompoundUser {
  public static final String SERIALIZED_NAME_PKI_USER_I_D = "pkiUserID";
  @SerializedName(SERIALIZED_NAME_PKI_USER_I_D)
  private Integer pkiUserID;

  public static final String SERIALIZED_NAME_S_AVATAR_URL = "sAvatarUrl";
  @SerializedName(SERIALIZED_NAME_S_AVATAR_URL)
  private String sAvatarUrl;

  public static final String SERIALIZED_NAME_S_USER_FIRSTNAME = "sUserFirstname";
  @SerializedName(SERIALIZED_NAME_S_USER_FIRSTNAME)
  private String sUserFirstname;

  public static final String SERIALIZED_NAME_S_USER_LASTNAME = "sUserLastname";
  @SerializedName(SERIALIZED_NAME_S_USER_LASTNAME)
  private String sUserLastname;

  public static final String SERIALIZED_NAME_S_EMAIL_ADDRESS = "sEmailAddress";
  @SerializedName(SERIALIZED_NAME_S_EMAIL_ADDRESS)
  private String sEmailAddress;

  public ActivesessionResponseCompoundUser() { 
  }

  public ActivesessionResponseCompoundUser pkiUserID(Integer pkiUserID) {
    
    this.pkiUserID = pkiUserID;
    return this;
  }

   /**
   * The unique ID of the User
   * @return pkiUserID
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "70", required = true, value = "The unique ID of the User")

  public Integer getPkiUserID() {
    return pkiUserID;
  }


  public void setPkiUserID(Integer pkiUserID) {
    this.pkiUserID = pkiUserID;
  }


  public ActivesessionResponseCompoundUser sAvatarUrl(String sAvatarUrl) {
    
    this.sAvatarUrl = sAvatarUrl;
    return this;
  }

   /**
   * The url of the picture used as avatar
   * @return sAvatarUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "http://www.website.com/avatar.jpg", required = true, value = "The url of the picture used as avatar")

  public String getsAvatarUrl() {
    return sAvatarUrl;
  }


  public void setsAvatarUrl(String sAvatarUrl) {
    this.sAvatarUrl = sAvatarUrl;
  }


  public ActivesessionResponseCompoundUser sUserFirstname(String sUserFirstname) {
    
    this.sUserFirstname = sUserFirstname;
    return this;
  }

   /**
   * The First name of the user
   * @return sUserFirstname
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "John", required = true, value = "The First name of the user")

  public String getsUserFirstname() {
    return sUserFirstname;
  }


  public void setsUserFirstname(String sUserFirstname) {
    this.sUserFirstname = sUserFirstname;
  }


  public ActivesessionResponseCompoundUser sUserLastname(String sUserLastname) {
    
    this.sUserLastname = sUserLastname;
    return this;
  }

   /**
   * The Last name of the user
   * @return sUserLastname
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Doe", required = true, value = "The Last name of the user")

  public String getsUserLastname() {
    return sUserLastname;
  }


  public void setsUserLastname(String sUserLastname) {
    this.sUserLastname = sUserLastname;
  }


  public ActivesessionResponseCompoundUser sEmailAddress(String sEmailAddress) {
    
    this.sEmailAddress = sEmailAddress;
    return this;
  }

   /**
   * The email address.
   * @return sEmailAddress
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "example@domain.com", required = true, value = "The email address.")

  public String getsEmailAddress() {
    return sEmailAddress;
  }


  public void setsEmailAddress(String sEmailAddress) {
    this.sEmailAddress = sEmailAddress;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActivesessionResponseCompoundUser activesessionResponseCompoundUser = (ActivesessionResponseCompoundUser) o;
    return Objects.equals(this.pkiUserID, activesessionResponseCompoundUser.pkiUserID) &&
        Objects.equals(this.sAvatarUrl, activesessionResponseCompoundUser.sAvatarUrl) &&
        Objects.equals(this.sUserFirstname, activesessionResponseCompoundUser.sUserFirstname) &&
        Objects.equals(this.sUserLastname, activesessionResponseCompoundUser.sUserLastname) &&
        Objects.equals(this.sEmailAddress, activesessionResponseCompoundUser.sEmailAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiUserID, sAvatarUrl, sUserFirstname, sUserLastname, sEmailAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActivesessionResponseCompoundUser {\n");
    sb.append("    pkiUserID: ").append(toIndentedString(pkiUserID)).append("\n");
    sb.append("    sAvatarUrl: ").append(toIndentedString(sAvatarUrl)).append("\n");
    sb.append("    sUserFirstname: ").append(toIndentedString(sUserFirstname)).append("\n");
    sb.append("    sUserLastname: ").append(toIndentedString(sUserLastname)).append("\n");
    sb.append("    sEmailAddress: ").append(toIndentedString(sEmailAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiUserID");
    openapiFields.add("sAvatarUrl");
    openapiFields.add("sUserFirstname");
    openapiFields.add("sUserLastname");
    openapiFields.add("sEmailAddress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiUserID");
    openapiRequiredFields.add("sAvatarUrl");
    openapiRequiredFields.add("sUserFirstname");
    openapiRequiredFields.add("sUserLastname");
    openapiRequiredFields.add("sEmailAddress");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ActivesessionResponseCompoundUser
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ActivesessionResponseCompoundUser.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has reuqired fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActivesessionResponseCompoundUser is not found in the empty JSON string", ActivesessionResponseCompoundUser.openapiRequiredFields.toString()));
        }
      }
      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ActivesessionResponseCompoundUser.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActivesessionResponseCompoundUser` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ActivesessionResponseCompoundUser.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActivesessionResponseCompoundUser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActivesessionResponseCompoundUser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActivesessionResponseCompoundUser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActivesessionResponseCompoundUser.class));

       return (TypeAdapter<T>) new TypeAdapter<ActivesessionResponseCompoundUser>() {
           @Override
           public void write(JsonWriter out, ActivesessionResponseCompoundUser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActivesessionResponseCompoundUser read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ActivesessionResponseCompoundUser given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ActivesessionResponseCompoundUser
  * @throws IOException if the JSON string is invalid with respect to ActivesessionResponseCompoundUser
  */
  public static ActivesessionResponseCompoundUser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActivesessionResponseCompoundUser.class);
  }

 /**
  * Convert an instance of ActivesessionResponseCompoundUser to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

