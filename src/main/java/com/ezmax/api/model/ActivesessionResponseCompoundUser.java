/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.FieldEUserEzsignsendreminderfrequency;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * An Activesession-&gt;User Object and children to create a complete structure
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-07T15:28:42.505152975Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class ActivesessionResponseCompoundUser {
  public static final String SERIALIZED_NAME_PKI_USER_I_D = "pkiUserID";
  @SerializedName(SERIALIZED_NAME_PKI_USER_I_D)
  @javax.annotation.Nonnull
  private Integer pkiUserID;

  public static final String SERIALIZED_NAME_FKI_TIMEZONE_I_D = "fkiTimezoneID";
  @SerializedName(SERIALIZED_NAME_FKI_TIMEZONE_I_D)
  @javax.annotation.Nonnull
  private Integer fkiTimezoneID;

  public static final String SERIALIZED_NAME_S_AVATAR_URL = "sAvatarUrl";
  @SerializedName(SERIALIZED_NAME_S_AVATAR_URL)
  @javax.annotation.Nullable
  private String sAvatarUrl;

  public static final String SERIALIZED_NAME_S_USER_FIRSTNAME = "sUserFirstname";
  @SerializedName(SERIALIZED_NAME_S_USER_FIRSTNAME)
  @javax.annotation.Nonnull
  private String sUserFirstname;

  public static final String SERIALIZED_NAME_S_USER_LASTNAME = "sUserLastname";
  @SerializedName(SERIALIZED_NAME_S_USER_LASTNAME)
  @javax.annotation.Nonnull
  private String sUserLastname;

  public static final String SERIALIZED_NAME_S_EMAIL_ADDRESS = "sEmailAddress";
  @SerializedName(SERIALIZED_NAME_S_EMAIL_ADDRESS)
  @javax.annotation.Nullable
  private String sEmailAddress;

  public static final String SERIALIZED_NAME_E_USER_EZSIGNSENDREMINDERFREQUENCY = "eUserEzsignsendreminderfrequency";
  @SerializedName(SERIALIZED_NAME_E_USER_EZSIGNSENDREMINDERFREQUENCY)
  @javax.annotation.Nonnull
  private FieldEUserEzsignsendreminderfrequency eUserEzsignsendreminderfrequency;

  public static final String SERIALIZED_NAME_I_USER_INTERFACECOLOR = "iUserInterfacecolor";
  @SerializedName(SERIALIZED_NAME_I_USER_INTERFACECOLOR)
  @javax.annotation.Nonnull
  private Integer iUserInterfacecolor;

  public static final String SERIALIZED_NAME_B_USER_INTERFACEDARK = "bUserInterfacedark";
  @SerializedName(SERIALIZED_NAME_B_USER_INTERFACEDARK)
  @javax.annotation.Nonnull
  private Boolean bUserInterfacedark;

  public static final String SERIALIZED_NAME_I_USER_LISTRESULT = "iUserListresult";
  @SerializedName(SERIALIZED_NAME_I_USER_LISTRESULT)
  @javax.annotation.Nonnull
  private Integer iUserListresult;

  public ActivesessionResponseCompoundUser() {
  }

  public ActivesessionResponseCompoundUser pkiUserID(@javax.annotation.Nonnull Integer pkiUserID) {
    this.pkiUserID = pkiUserID;
    return this;
  }

  /**
   * The unique ID of the User
   * minimum: 0
   * @return pkiUserID
   */
  @javax.annotation.Nonnull
  public Integer getPkiUserID() {
    return pkiUserID;
  }

  public void setPkiUserID(@javax.annotation.Nonnull Integer pkiUserID) {
    this.pkiUserID = pkiUserID;
  }


  public ActivesessionResponseCompoundUser fkiTimezoneID(@javax.annotation.Nonnull Integer fkiTimezoneID) {
    this.fkiTimezoneID = fkiTimezoneID;
    return this;
  }

  /**
   * The unique ID of the Timezone
   * minimum: 0
   * @return fkiTimezoneID
   */
  @javax.annotation.Nonnull
  public Integer getFkiTimezoneID() {
    return fkiTimezoneID;
  }

  public void setFkiTimezoneID(@javax.annotation.Nonnull Integer fkiTimezoneID) {
    this.fkiTimezoneID = fkiTimezoneID;
  }


  public ActivesessionResponseCompoundUser sAvatarUrl(@javax.annotation.Nullable String sAvatarUrl) {
    this.sAvatarUrl = sAvatarUrl;
    return this;
  }

  /**
   * The url of the picture used as avatar
   * @return sAvatarUrl
   */
  @javax.annotation.Nullable
  public String getsAvatarUrl() {
    return sAvatarUrl;
  }

  public void setsAvatarUrl(@javax.annotation.Nullable String sAvatarUrl) {
    this.sAvatarUrl = sAvatarUrl;
  }


  public ActivesessionResponseCompoundUser sUserFirstname(@javax.annotation.Nonnull String sUserFirstname) {
    this.sUserFirstname = sUserFirstname;
    return this;
  }

  /**
   * The first name of the user
   * @return sUserFirstname
   */
  @javax.annotation.Nonnull
  public String getsUserFirstname() {
    return sUserFirstname;
  }

  public void setsUserFirstname(@javax.annotation.Nonnull String sUserFirstname) {
    this.sUserFirstname = sUserFirstname;
  }


  public ActivesessionResponseCompoundUser sUserLastname(@javax.annotation.Nonnull String sUserLastname) {
    this.sUserLastname = sUserLastname;
    return this;
  }

  /**
   * The last name of the user
   * @return sUserLastname
   */
  @javax.annotation.Nonnull
  public String getsUserLastname() {
    return sUserLastname;
  }

  public void setsUserLastname(@javax.annotation.Nonnull String sUserLastname) {
    this.sUserLastname = sUserLastname;
  }


  public ActivesessionResponseCompoundUser sEmailAddress(@javax.annotation.Nullable String sEmailAddress) {
    this.sEmailAddress = sEmailAddress;
    return this;
  }

  /**
   * The email address.
   * @return sEmailAddress
   */
  @javax.annotation.Nullable
  public String getsEmailAddress() {
    return sEmailAddress;
  }

  public void setsEmailAddress(@javax.annotation.Nullable String sEmailAddress) {
    this.sEmailAddress = sEmailAddress;
  }


  public ActivesessionResponseCompoundUser eUserEzsignsendreminderfrequency(@javax.annotation.Nonnull FieldEUserEzsignsendreminderfrequency eUserEzsignsendreminderfrequency) {
    this.eUserEzsignsendreminderfrequency = eUserEzsignsendreminderfrequency;
    return this;
  }

  /**
   * Get eUserEzsignsendreminderfrequency
   * @return eUserEzsignsendreminderfrequency
   */
  @javax.annotation.Nonnull
  public FieldEUserEzsignsendreminderfrequency geteUserEzsignsendreminderfrequency() {
    return eUserEzsignsendreminderfrequency;
  }

  public void seteUserEzsignsendreminderfrequency(@javax.annotation.Nonnull FieldEUserEzsignsendreminderfrequency eUserEzsignsendreminderfrequency) {
    this.eUserEzsignsendreminderfrequency = eUserEzsignsendreminderfrequency;
  }


  public ActivesessionResponseCompoundUser iUserInterfacecolor(@javax.annotation.Nonnull Integer iUserInterfacecolor) {
    this.iUserInterfacecolor = iUserInterfacecolor;
    return this;
  }

  /**
   * The int32 representation of the interface color. For example, RGB color #39435B would be 3752795
   * minimum: 0
   * @return iUserInterfacecolor
   */
  @javax.annotation.Nonnull
  public Integer getiUserInterfacecolor() {
    return iUserInterfacecolor;
  }

  public void setiUserInterfacecolor(@javax.annotation.Nonnull Integer iUserInterfacecolor) {
    this.iUserInterfacecolor = iUserInterfacecolor;
  }


  public ActivesessionResponseCompoundUser bUserInterfacedark(@javax.annotation.Nonnull Boolean bUserInterfacedark) {
    this.bUserInterfacedark = bUserInterfacedark;
    return this;
  }

  /**
   * Whether to use a dark mode interface
   * @return bUserInterfacedark
   */
  @javax.annotation.Nonnull
  public Boolean getbUserInterfacedark() {
    return bUserInterfacedark;
  }

  public void setbUserInterfacedark(@javax.annotation.Nonnull Boolean bUserInterfacedark) {
    this.bUserInterfacedark = bUserInterfacedark;
  }


  public ActivesessionResponseCompoundUser iUserListresult(@javax.annotation.Nonnull Integer iUserListresult) {
    this.iUserListresult = iUserListresult;
    return this;
  }

  /**
   * The number of rows to return by default in lists
   * minimum: 5
   * maximum: 500
   * @return iUserListresult
   */
  @javax.annotation.Nonnull
  public Integer getiUserListresult() {
    return iUserListresult;
  }

  public void setiUserListresult(@javax.annotation.Nonnull Integer iUserListresult) {
    this.iUserListresult = iUserListresult;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActivesessionResponseCompoundUser activesessionResponseCompoundUser = (ActivesessionResponseCompoundUser) o;
    return Objects.equals(this.pkiUserID, activesessionResponseCompoundUser.pkiUserID) &&
        Objects.equals(this.fkiTimezoneID, activesessionResponseCompoundUser.fkiTimezoneID) &&
        Objects.equals(this.sAvatarUrl, activesessionResponseCompoundUser.sAvatarUrl) &&
        Objects.equals(this.sUserFirstname, activesessionResponseCompoundUser.sUserFirstname) &&
        Objects.equals(this.sUserLastname, activesessionResponseCompoundUser.sUserLastname) &&
        Objects.equals(this.sEmailAddress, activesessionResponseCompoundUser.sEmailAddress) &&
        Objects.equals(this.eUserEzsignsendreminderfrequency, activesessionResponseCompoundUser.eUserEzsignsendreminderfrequency) &&
        Objects.equals(this.iUserInterfacecolor, activesessionResponseCompoundUser.iUserInterfacecolor) &&
        Objects.equals(this.bUserInterfacedark, activesessionResponseCompoundUser.bUserInterfacedark) &&
        Objects.equals(this.iUserListresult, activesessionResponseCompoundUser.iUserListresult);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiUserID, fkiTimezoneID, sAvatarUrl, sUserFirstname, sUserLastname, sEmailAddress, eUserEzsignsendreminderfrequency, iUserInterfacecolor, bUserInterfacedark, iUserListresult);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActivesessionResponseCompoundUser {\n");
    sb.append("    pkiUserID: ").append(toIndentedString(pkiUserID)).append("\n");
    sb.append("    fkiTimezoneID: ").append(toIndentedString(fkiTimezoneID)).append("\n");
    sb.append("    sAvatarUrl: ").append(toIndentedString(sAvatarUrl)).append("\n");
    sb.append("    sUserFirstname: ").append(toIndentedString(sUserFirstname)).append("\n");
    sb.append("    sUserLastname: ").append(toIndentedString(sUserLastname)).append("\n");
    sb.append("    sEmailAddress: ").append(toIndentedString(sEmailAddress)).append("\n");
    sb.append("    eUserEzsignsendreminderfrequency: ").append(toIndentedString(eUserEzsignsendreminderfrequency)).append("\n");
    sb.append("    iUserInterfacecolor: ").append(toIndentedString(iUserInterfacecolor)).append("\n");
    sb.append("    bUserInterfacedark: ").append(toIndentedString(bUserInterfacedark)).append("\n");
    sb.append("    iUserListresult: ").append(toIndentedString(iUserListresult)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiUserID");
    openapiFields.add("fkiTimezoneID");
    openapiFields.add("sAvatarUrl");
    openapiFields.add("sUserFirstname");
    openapiFields.add("sUserLastname");
    openapiFields.add("sEmailAddress");
    openapiFields.add("eUserEzsignsendreminderfrequency");
    openapiFields.add("iUserInterfacecolor");
    openapiFields.add("bUserInterfacedark");
    openapiFields.add("iUserListresult");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiUserID");
    openapiRequiredFields.add("fkiTimezoneID");
    openapiRequiredFields.add("sUserFirstname");
    openapiRequiredFields.add("sUserLastname");
    openapiRequiredFields.add("eUserEzsignsendreminderfrequency");
    openapiRequiredFields.add("iUserInterfacecolor");
    openapiRequiredFields.add("bUserInterfacedark");
    openapiRequiredFields.add("iUserListresult");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActivesessionResponseCompoundUser
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActivesessionResponseCompoundUser.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActivesessionResponseCompoundUser is not found in the empty JSON string", ActivesessionResponseCompoundUser.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActivesessionResponseCompoundUser.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActivesessionResponseCompoundUser` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ActivesessionResponseCompoundUser.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("sAvatarUrl") != null && !jsonObj.get("sAvatarUrl").isJsonNull()) && !jsonObj.get("sAvatarUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sAvatarUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sAvatarUrl").toString()));
      }
      if (!jsonObj.get("sUserFirstname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sUserFirstname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sUserFirstname").toString()));
      }
      if (!jsonObj.get("sUserLastname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sUserLastname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sUserLastname").toString()));
      }
      if ((jsonObj.get("sEmailAddress") != null && !jsonObj.get("sEmailAddress").isJsonNull()) && !jsonObj.get("sEmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEmailAddress").toString()));
      }
      // validate the required field `eUserEzsignsendreminderfrequency`
      FieldEUserEzsignsendreminderfrequency.validateJsonElement(jsonObj.get("eUserEzsignsendreminderfrequency"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActivesessionResponseCompoundUser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActivesessionResponseCompoundUser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActivesessionResponseCompoundUser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActivesessionResponseCompoundUser.class));

       return (TypeAdapter<T>) new TypeAdapter<ActivesessionResponseCompoundUser>() {
           @Override
           public void write(JsonWriter out, ActivesessionResponseCompoundUser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActivesessionResponseCompoundUser read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActivesessionResponseCompoundUser given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActivesessionResponseCompoundUser
   * @throws IOException if the JSON string is invalid with respect to ActivesessionResponseCompoundUser
   */
  public static ActivesessionResponseCompoundUser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActivesessionResponseCompoundUser.class);
  }

  /**
   * Convert an instance of ActivesessionResponseCompoundUser to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

