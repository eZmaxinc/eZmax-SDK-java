/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.CustomContactNameResponse;
import com.ezmax.api.model.EnumTextvalidation;
import com.ezmax.api.model.FieldEEzsignsignatureAttachmentnamesource;
import com.ezmax.api.model.FieldEEzsignsignatureFont;
import com.ezmax.api.model.FieldEEzsignsignatureTooltipposition;
import com.ezmax.api.model.FieldEEzsignsignatureType;
import com.ezmax.api.model.SignatureResponseCompound;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * An Ezsignsignature Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-29T19:56:36.375886991Z[Etc/UTC]")
public class EzsignsignatureResponse {
  public static final String SERIALIZED_NAME_PKI_EZSIGNSIGNATURE_I_D = "pkiEzsignsignatureID";
  @SerializedName(SERIALIZED_NAME_PKI_EZSIGNSIGNATURE_I_D)
  private Integer pkiEzsignsignatureID;

  public static final String SERIALIZED_NAME_FKI_EZSIGNDOCUMENT_I_D = "fkiEzsigndocumentID";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNDOCUMENT_I_D)
  private Integer fkiEzsigndocumentID;

  public static final String SERIALIZED_NAME_FKI_EZSIGNFOLDERSIGNERASSOCIATION_I_D = "fkiEzsignfoldersignerassociationID";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNFOLDERSIGNERASSOCIATION_I_D)
  private Integer fkiEzsignfoldersignerassociationID;

  public static final String SERIALIZED_NAME_I_EZSIGNPAGE_PAGENUMBER = "iEzsignpagePagenumber";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNPAGE_PAGENUMBER)
  private Integer iEzsignpagePagenumber;

  public static final String SERIALIZED_NAME_I_EZSIGNSIGNATURE_X = "iEzsignsignatureX";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNSIGNATURE_X)
  private Integer iEzsignsignatureX;

  public static final String SERIALIZED_NAME_I_EZSIGNSIGNATURE_Y = "iEzsignsignatureY";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNSIGNATURE_Y)
  private Integer iEzsignsignatureY;

  public static final String SERIALIZED_NAME_I_EZSIGNSIGNATURE_HEIGHT = "iEzsignsignatureHeight";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNSIGNATURE_HEIGHT)
  private Integer iEzsignsignatureHeight;

  public static final String SERIALIZED_NAME_I_EZSIGNSIGNATURE_WIDTH = "iEzsignsignatureWidth";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNSIGNATURE_WIDTH)
  private Integer iEzsignsignatureWidth;

  public static final String SERIALIZED_NAME_I_EZSIGNSIGNATURE_STEP = "iEzsignsignatureStep";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNSIGNATURE_STEP)
  private Integer iEzsignsignatureStep;

  public static final String SERIALIZED_NAME_E_EZSIGNSIGNATURE_TYPE = "eEzsignsignatureType";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNSIGNATURE_TYPE)
  private FieldEEzsignsignatureType eEzsignsignatureType;

  public static final String SERIALIZED_NAME_T_EZSIGNSIGNATURE_TOOLTIP = "tEzsignsignatureTooltip";
  @SerializedName(SERIALIZED_NAME_T_EZSIGNSIGNATURE_TOOLTIP)
  private String tEzsignsignatureTooltip;

  public static final String SERIALIZED_NAME_E_EZSIGNSIGNATURE_TOOLTIPPOSITION = "eEzsignsignatureTooltipposition";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNSIGNATURE_TOOLTIPPOSITION)
  private FieldEEzsignsignatureTooltipposition eEzsignsignatureTooltipposition;

  public static final String SERIALIZED_NAME_E_EZSIGNSIGNATURE_FONT = "eEzsignsignatureFont";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNSIGNATURE_FONT)
  private FieldEEzsignsignatureFont eEzsignsignatureFont;

  public static final String SERIALIZED_NAME_I_EZSIGNSIGNATURE_VALIDATIONSTEP = "iEzsignsignatureValidationstep";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNSIGNATURE_VALIDATIONSTEP)
  private Integer iEzsignsignatureValidationstep;

  public static final String SERIALIZED_NAME_S_EZSIGNSIGNATURE_ATTACHMENTDESCRIPTION = "sEzsignsignatureAttachmentdescription";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNSIGNATURE_ATTACHMENTDESCRIPTION)
  private String sEzsignsignatureAttachmentdescription;

  public static final String SERIALIZED_NAME_E_EZSIGNSIGNATURE_ATTACHMENTNAMESOURCE = "eEzsignsignatureAttachmentnamesource";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNSIGNATURE_ATTACHMENTNAMESOURCE)
  private FieldEEzsignsignatureAttachmentnamesource eEzsignsignatureAttachmentnamesource;

  public static final String SERIALIZED_NAME_B_EZSIGNSIGNATURE_REQUIRED = "bEzsignsignatureRequired";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNSIGNATURE_REQUIRED)
  private Boolean bEzsignsignatureRequired;

  public static final String SERIALIZED_NAME_FKI_EZSIGNFOLDERSIGNERASSOCIATION_I_D_VALIDATION = "fkiEzsignfoldersignerassociationIDValidation";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNFOLDERSIGNERASSOCIATION_I_D_VALIDATION)
  private Integer fkiEzsignfoldersignerassociationIDValidation;

  public static final String SERIALIZED_NAME_DT_EZSIGNSIGNATURE_DATE = "dtEzsignsignatureDate";
  @SerializedName(SERIALIZED_NAME_DT_EZSIGNSIGNATURE_DATE)
  private String dtEzsignsignatureDate;

  public static final String SERIALIZED_NAME_I_EZSIGNSIGNATUREATTACHMENT_COUNT = "iEzsignsignatureattachmentCount";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNSIGNATUREATTACHMENT_COUNT)
  private Integer iEzsignsignatureattachmentCount;

  public static final String SERIALIZED_NAME_S_EZSIGNSIGNATURE_DESCRIPTION = "sEzsignsignatureDescription";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNSIGNATURE_DESCRIPTION)
  private String sEzsignsignatureDescription;

  public static final String SERIALIZED_NAME_I_EZSIGNSIGNATURE_MAXLENGTH = "iEzsignsignatureMaxlength";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNSIGNATURE_MAXLENGTH)
  private Integer iEzsignsignatureMaxlength;

  public static final String SERIALIZED_NAME_E_EZSIGNSIGNATURE_TEXTVALIDATION = "eEzsignsignatureTextvalidation";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNSIGNATURE_TEXTVALIDATION)
  private EnumTextvalidation eEzsignsignatureTextvalidation;

  public static final String SERIALIZED_NAME_S_EZSIGNSIGNATURE_REGEXP = "sEzsignsignatureRegexp";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNSIGNATURE_REGEXP)
  private String sEzsignsignatureRegexp;

  public static final String SERIALIZED_NAME_OBJ_CONTACT_NAME = "objContactName";
  @SerializedName(SERIALIZED_NAME_OBJ_CONTACT_NAME)
  private CustomContactNameResponse objContactName;

  public static final String SERIALIZED_NAME_OBJ_SIGNATURE = "objSignature";
  @SerializedName(SERIALIZED_NAME_OBJ_SIGNATURE)
  private SignatureResponseCompound objSignature;

  public EzsignsignatureResponse() {
  }

  public EzsignsignatureResponse pkiEzsignsignatureID(Integer pkiEzsignsignatureID) {
    
    this.pkiEzsignsignatureID = pkiEzsignsignatureID;
    return this;
  }

   /**
   * The unique ID of the Ezsignsignature
   * minimum: 0
   * @return pkiEzsignsignatureID
  **/
  @javax.annotation.Nonnull
  public Integer getPkiEzsignsignatureID() {
    return pkiEzsignsignatureID;
  }


  public void setPkiEzsignsignatureID(Integer pkiEzsignsignatureID) {
    this.pkiEzsignsignatureID = pkiEzsignsignatureID;
  }


  public EzsignsignatureResponse fkiEzsigndocumentID(Integer fkiEzsigndocumentID) {
    
    this.fkiEzsigndocumentID = fkiEzsigndocumentID;
    return this;
  }

   /**
   * The unique ID of the Ezsigndocument
   * minimum: 0
   * @return fkiEzsigndocumentID
  **/
  @javax.annotation.Nonnull
  public Integer getFkiEzsigndocumentID() {
    return fkiEzsigndocumentID;
  }


  public void setFkiEzsigndocumentID(Integer fkiEzsigndocumentID) {
    this.fkiEzsigndocumentID = fkiEzsigndocumentID;
  }


  public EzsignsignatureResponse fkiEzsignfoldersignerassociationID(Integer fkiEzsignfoldersignerassociationID) {
    
    this.fkiEzsignfoldersignerassociationID = fkiEzsignfoldersignerassociationID;
    return this;
  }

   /**
   * The unique ID of the Ezsignfoldersignerassociation
   * minimum: 0
   * @return fkiEzsignfoldersignerassociationID
  **/
  @javax.annotation.Nonnull
  public Integer getFkiEzsignfoldersignerassociationID() {
    return fkiEzsignfoldersignerassociationID;
  }


  public void setFkiEzsignfoldersignerassociationID(Integer fkiEzsignfoldersignerassociationID) {
    this.fkiEzsignfoldersignerassociationID = fkiEzsignfoldersignerassociationID;
  }


  public EzsignsignatureResponse iEzsignpagePagenumber(Integer iEzsignpagePagenumber) {
    
    this.iEzsignpagePagenumber = iEzsignpagePagenumber;
    return this;
  }

   /**
   * The page number in the Ezsigndocument
   * minimum: 1
   * @return iEzsignpagePagenumber
  **/
  @javax.annotation.Nonnull
  public Integer getiEzsignpagePagenumber() {
    return iEzsignpagePagenumber;
  }


  public void setiEzsignpagePagenumber(Integer iEzsignpagePagenumber) {
    this.iEzsignpagePagenumber = iEzsignpagePagenumber;
  }


  public EzsignsignatureResponse iEzsignsignatureX(Integer iEzsignsignatureX) {
    
    this.iEzsignsignatureX = iEzsignsignatureX;
    return this;
  }

   /**
   * The X coordinate (Horizontal) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate.
   * minimum: 0
   * @return iEzsignsignatureX
  **/
  @javax.annotation.Nonnull
  public Integer getiEzsignsignatureX() {
    return iEzsignsignatureX;
  }


  public void setiEzsignsignatureX(Integer iEzsignsignatureX) {
    this.iEzsignsignatureX = iEzsignsignatureX;
  }


  public EzsignsignatureResponse iEzsignsignatureY(Integer iEzsignsignatureY) {
    
    this.iEzsignsignatureY = iEzsignsignatureY;
    return this;
  }

   /**
   * The Y coordinate (Vertical) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate.
   * minimum: 0
   * @return iEzsignsignatureY
  **/
  @javax.annotation.Nonnull
  public Integer getiEzsignsignatureY() {
    return iEzsignsignatureY;
  }


  public void setiEzsignsignatureY(Integer iEzsignsignatureY) {
    this.iEzsignsignatureY = iEzsignsignatureY;
  }


  public EzsignsignatureResponse iEzsignsignatureHeight(Integer iEzsignsignatureHeight) {
    
    this.iEzsignsignatureHeight = iEzsignsignatureHeight;
    return this;
  }

   /**
   * The height of the Ezsignsignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsignsignature to have an height of 2 inches, you would use \&quot;200\&quot; for the iEzsignsignatureHeight.
   * minimum: 0
   * @return iEzsignsignatureHeight
  **/
  @javax.annotation.Nullable
  public Integer getiEzsignsignatureHeight() {
    return iEzsignsignatureHeight;
  }


  public void setiEzsignsignatureHeight(Integer iEzsignsignatureHeight) {
    this.iEzsignsignatureHeight = iEzsignsignatureHeight;
  }


  public EzsignsignatureResponse iEzsignsignatureWidth(Integer iEzsignsignatureWidth) {
    
    this.iEzsignsignatureWidth = iEzsignsignatureWidth;
    return this;
  }

   /**
   * The width of the Ezsignsignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsignsignature to have a width of 2 inches, you would use \&quot;200\&quot; for the iEzsignsignatureWidth.
   * minimum: 0
   * @return iEzsignsignatureWidth
  **/
  @javax.annotation.Nullable
  public Integer getiEzsignsignatureWidth() {
    return iEzsignsignatureWidth;
  }


  public void setiEzsignsignatureWidth(Integer iEzsignsignatureWidth) {
    this.iEzsignsignatureWidth = iEzsignsignatureWidth;
  }


  public EzsignsignatureResponse iEzsignsignatureStep(Integer iEzsignsignatureStep) {
    
    this.iEzsignsignatureStep = iEzsignsignatureStep;
    return this;
  }

   /**
   * The step when the Ezsignsigner will be invited to sign
   * @return iEzsignsignatureStep
  **/
  @javax.annotation.Nonnull
  public Integer getiEzsignsignatureStep() {
    return iEzsignsignatureStep;
  }


  public void setiEzsignsignatureStep(Integer iEzsignsignatureStep) {
    this.iEzsignsignatureStep = iEzsignsignatureStep;
  }


  public EzsignsignatureResponse eEzsignsignatureType(FieldEEzsignsignatureType eEzsignsignatureType) {
    
    this.eEzsignsignatureType = eEzsignsignatureType;
    return this;
  }

   /**
   * Get eEzsignsignatureType
   * @return eEzsignsignatureType
  **/
  @javax.annotation.Nonnull
  public FieldEEzsignsignatureType geteEzsignsignatureType() {
    return eEzsignsignatureType;
  }


  public void seteEzsignsignatureType(FieldEEzsignsignatureType eEzsignsignatureType) {
    this.eEzsignsignatureType = eEzsignsignatureType;
  }


  public EzsignsignatureResponse tEzsignsignatureTooltip(String tEzsignsignatureTooltip) {
    
    this.tEzsignsignatureTooltip = tEzsignsignatureTooltip;
    return this;
  }

   /**
   * A tooltip that will be presented to Ezsignsigner about the Ezsignsignature
   * @return tEzsignsignatureTooltip
  **/
  @javax.annotation.Nullable
  public String gettEzsignsignatureTooltip() {
    return tEzsignsignatureTooltip;
  }


  public void settEzsignsignatureTooltip(String tEzsignsignatureTooltip) {
    this.tEzsignsignatureTooltip = tEzsignsignatureTooltip;
  }


  public EzsignsignatureResponse eEzsignsignatureTooltipposition(FieldEEzsignsignatureTooltipposition eEzsignsignatureTooltipposition) {
    
    this.eEzsignsignatureTooltipposition = eEzsignsignatureTooltipposition;
    return this;
  }

   /**
   * Get eEzsignsignatureTooltipposition
   * @return eEzsignsignatureTooltipposition
  **/
  @javax.annotation.Nullable
  public FieldEEzsignsignatureTooltipposition geteEzsignsignatureTooltipposition() {
    return eEzsignsignatureTooltipposition;
  }


  public void seteEzsignsignatureTooltipposition(FieldEEzsignsignatureTooltipposition eEzsignsignatureTooltipposition) {
    this.eEzsignsignatureTooltipposition = eEzsignsignatureTooltipposition;
  }


  public EzsignsignatureResponse eEzsignsignatureFont(FieldEEzsignsignatureFont eEzsignsignatureFont) {
    
    this.eEzsignsignatureFont = eEzsignsignatureFont;
    return this;
  }

   /**
   * Get eEzsignsignatureFont
   * @return eEzsignsignatureFont
  **/
  @javax.annotation.Nullable
  public FieldEEzsignsignatureFont geteEzsignsignatureFont() {
    return eEzsignsignatureFont;
  }


  public void seteEzsignsignatureFont(FieldEEzsignsignatureFont eEzsignsignatureFont) {
    this.eEzsignsignatureFont = eEzsignsignatureFont;
  }


  public EzsignsignatureResponse iEzsignsignatureValidationstep(Integer iEzsignsignatureValidationstep) {
    
    this.iEzsignsignatureValidationstep = iEzsignsignatureValidationstep;
    return this;
  }

   /**
   * The step when the Ezsignsigner will be invited to validate the Ezsignsignature of eEzsignsignatureType Attachments
   * @return iEzsignsignatureValidationstep
  **/
  @javax.annotation.Nullable
  public Integer getiEzsignsignatureValidationstep() {
    return iEzsignsignatureValidationstep;
  }


  public void setiEzsignsignatureValidationstep(Integer iEzsignsignatureValidationstep) {
    this.iEzsignsignatureValidationstep = iEzsignsignatureValidationstep;
  }


  public EzsignsignatureResponse sEzsignsignatureAttachmentdescription(String sEzsignsignatureAttachmentdescription) {
    
    this.sEzsignsignatureAttachmentdescription = sEzsignsignatureAttachmentdescription;
    return this;
  }

   /**
   * The description attached to the attachment name added in Ezsignsignature of eEzsignsignatureType Attachments
   * @return sEzsignsignatureAttachmentdescription
  **/
  @javax.annotation.Nullable
  public String getsEzsignsignatureAttachmentdescription() {
    return sEzsignsignatureAttachmentdescription;
  }


  public void setsEzsignsignatureAttachmentdescription(String sEzsignsignatureAttachmentdescription) {
    this.sEzsignsignatureAttachmentdescription = sEzsignsignatureAttachmentdescription;
  }


  public EzsignsignatureResponse eEzsignsignatureAttachmentnamesource(FieldEEzsignsignatureAttachmentnamesource eEzsignsignatureAttachmentnamesource) {
    
    this.eEzsignsignatureAttachmentnamesource = eEzsignsignatureAttachmentnamesource;
    return this;
  }

   /**
   * Get eEzsignsignatureAttachmentnamesource
   * @return eEzsignsignatureAttachmentnamesource
  **/
  @javax.annotation.Nullable
  public FieldEEzsignsignatureAttachmentnamesource geteEzsignsignatureAttachmentnamesource() {
    return eEzsignsignatureAttachmentnamesource;
  }


  public void seteEzsignsignatureAttachmentnamesource(FieldEEzsignsignatureAttachmentnamesource eEzsignsignatureAttachmentnamesource) {
    this.eEzsignsignatureAttachmentnamesource = eEzsignsignatureAttachmentnamesource;
  }


  public EzsignsignatureResponse bEzsignsignatureRequired(Boolean bEzsignsignatureRequired) {
    
    this.bEzsignsignatureRequired = bEzsignsignatureRequired;
    return this;
  }

   /**
   * Whether the Ezsignsignature is required or not. This field is relevant only with Ezsignsignature with eEzsignsignatureType &#x3D; Attachments.
   * @return bEzsignsignatureRequired
  **/
  @javax.annotation.Nullable
  public Boolean getbEzsignsignatureRequired() {
    return bEzsignsignatureRequired;
  }


  public void setbEzsignsignatureRequired(Boolean bEzsignsignatureRequired) {
    this.bEzsignsignatureRequired = bEzsignsignatureRequired;
  }


  public EzsignsignatureResponse fkiEzsignfoldersignerassociationIDValidation(Integer fkiEzsignfoldersignerassociationIDValidation) {
    
    this.fkiEzsignfoldersignerassociationIDValidation = fkiEzsignfoldersignerassociationIDValidation;
    return this;
  }

   /**
   * The unique ID of the Ezsignfoldersignerassociation
   * minimum: 0
   * @return fkiEzsignfoldersignerassociationIDValidation
  **/
  @javax.annotation.Nullable
  public Integer getFkiEzsignfoldersignerassociationIDValidation() {
    return fkiEzsignfoldersignerassociationIDValidation;
  }


  public void setFkiEzsignfoldersignerassociationIDValidation(Integer fkiEzsignfoldersignerassociationIDValidation) {
    this.fkiEzsignfoldersignerassociationIDValidation = fkiEzsignfoldersignerassociationIDValidation;
  }


  public EzsignsignatureResponse dtEzsignsignatureDate(String dtEzsignsignatureDate) {
    
    this.dtEzsignsignatureDate = dtEzsignsignatureDate;
    return this;
  }

   /**
   * The date the Ezsignsignature was signed
   * @return dtEzsignsignatureDate
  **/
  @javax.annotation.Nullable
  public String getDtEzsignsignatureDate() {
    return dtEzsignsignatureDate;
  }


  public void setDtEzsignsignatureDate(String dtEzsignsignatureDate) {
    this.dtEzsignsignatureDate = dtEzsignsignatureDate;
  }


  public EzsignsignatureResponse iEzsignsignatureattachmentCount(Integer iEzsignsignatureattachmentCount) {
    
    this.iEzsignsignatureattachmentCount = iEzsignsignatureattachmentCount;
    return this;
  }

   /**
   * The count of Ezsignsignatureattachment
   * @return iEzsignsignatureattachmentCount
  **/
  @javax.annotation.Nullable
  public Integer getiEzsignsignatureattachmentCount() {
    return iEzsignsignatureattachmentCount;
  }


  public void setiEzsignsignatureattachmentCount(Integer iEzsignsignatureattachmentCount) {
    this.iEzsignsignatureattachmentCount = iEzsignsignatureattachmentCount;
  }


  public EzsignsignatureResponse sEzsignsignatureDescription(String sEzsignsignatureDescription) {
    
    this.sEzsignsignatureDescription = sEzsignsignatureDescription;
    return this;
  }

   /**
   * The value entered while signing Ezsignsignature of eEzsignsignatureType **City**, **FieldText** and **FieldTextarea**
   * @return sEzsignsignatureDescription
  **/
  @javax.annotation.Nullable
  public String getsEzsignsignatureDescription() {
    return sEzsignsignatureDescription;
  }


  public void setsEzsignsignatureDescription(String sEzsignsignatureDescription) {
    this.sEzsignsignatureDescription = sEzsignsignatureDescription;
  }


  public EzsignsignatureResponse iEzsignsignatureMaxlength(Integer iEzsignsignatureMaxlength) {
    
    this.iEzsignsignatureMaxlength = iEzsignsignatureMaxlength;
    return this;
  }

   /**
   * The maximum length for the value in the Ezsignsignature  This can only be set if eEzsignsignatureType is **FieldText** or **FieldTextarea**
   * minimum: 0
   * maximum: 65535
   * @return iEzsignsignatureMaxlength
  **/
  @javax.annotation.Nullable
  public Integer getiEzsignsignatureMaxlength() {
    return iEzsignsignatureMaxlength;
  }


  public void setiEzsignsignatureMaxlength(Integer iEzsignsignatureMaxlength) {
    this.iEzsignsignatureMaxlength = iEzsignsignatureMaxlength;
  }


  public EzsignsignatureResponse eEzsignsignatureTextvalidation(EnumTextvalidation eEzsignsignatureTextvalidation) {
    
    this.eEzsignsignatureTextvalidation = eEzsignsignatureTextvalidation;
    return this;
  }

   /**
   * Get eEzsignsignatureTextvalidation
   * @return eEzsignsignatureTextvalidation
  **/
  @javax.annotation.Nullable
  public EnumTextvalidation geteEzsignsignatureTextvalidation() {
    return eEzsignsignatureTextvalidation;
  }


  public void seteEzsignsignatureTextvalidation(EnumTextvalidation eEzsignsignatureTextvalidation) {
    this.eEzsignsignatureTextvalidation = eEzsignsignatureTextvalidation;
  }


  public EzsignsignatureResponse sEzsignsignatureRegexp(String sEzsignsignatureRegexp) {
    
    this.sEzsignsignatureRegexp = sEzsignsignatureRegexp;
    return this;
  }

   /**
   * A regular expression to indicate what values are acceptable for the Ezsignsignature.  This can only be set if eEzsignsignatureType is **FieldText** or **FieldTextarea** and eEzsignsignatureTextvalidation is **Custom**
   * @return sEzsignsignatureRegexp
  **/
  @javax.annotation.Nullable
  public String getsEzsignsignatureRegexp() {
    return sEzsignsignatureRegexp;
  }


  public void setsEzsignsignatureRegexp(String sEzsignsignatureRegexp) {
    this.sEzsignsignatureRegexp = sEzsignsignatureRegexp;
  }


  public EzsignsignatureResponse objContactName(CustomContactNameResponse objContactName) {
    
    this.objContactName = objContactName;
    return this;
  }

   /**
   * Get objContactName
   * @return objContactName
  **/
  @javax.annotation.Nonnull
  public CustomContactNameResponse getObjContactName() {
    return objContactName;
  }


  public void setObjContactName(CustomContactNameResponse objContactName) {
    this.objContactName = objContactName;
  }


  public EzsignsignatureResponse objSignature(SignatureResponseCompound objSignature) {
    
    this.objSignature = objSignature;
    return this;
  }

   /**
   * Get objSignature
   * @return objSignature
  **/
  @javax.annotation.Nullable
  public SignatureResponseCompound getObjSignature() {
    return objSignature;
  }


  public void setObjSignature(SignatureResponseCompound objSignature) {
    this.objSignature = objSignature;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsignsignatureResponse ezsignsignatureResponse = (EzsignsignatureResponse) o;
    return Objects.equals(this.pkiEzsignsignatureID, ezsignsignatureResponse.pkiEzsignsignatureID) &&
        Objects.equals(this.fkiEzsigndocumentID, ezsignsignatureResponse.fkiEzsigndocumentID) &&
        Objects.equals(this.fkiEzsignfoldersignerassociationID, ezsignsignatureResponse.fkiEzsignfoldersignerassociationID) &&
        Objects.equals(this.iEzsignpagePagenumber, ezsignsignatureResponse.iEzsignpagePagenumber) &&
        Objects.equals(this.iEzsignsignatureX, ezsignsignatureResponse.iEzsignsignatureX) &&
        Objects.equals(this.iEzsignsignatureY, ezsignsignatureResponse.iEzsignsignatureY) &&
        Objects.equals(this.iEzsignsignatureHeight, ezsignsignatureResponse.iEzsignsignatureHeight) &&
        Objects.equals(this.iEzsignsignatureWidth, ezsignsignatureResponse.iEzsignsignatureWidth) &&
        Objects.equals(this.iEzsignsignatureStep, ezsignsignatureResponse.iEzsignsignatureStep) &&
        Objects.equals(this.eEzsignsignatureType, ezsignsignatureResponse.eEzsignsignatureType) &&
        Objects.equals(this.tEzsignsignatureTooltip, ezsignsignatureResponse.tEzsignsignatureTooltip) &&
        Objects.equals(this.eEzsignsignatureTooltipposition, ezsignsignatureResponse.eEzsignsignatureTooltipposition) &&
        Objects.equals(this.eEzsignsignatureFont, ezsignsignatureResponse.eEzsignsignatureFont) &&
        Objects.equals(this.iEzsignsignatureValidationstep, ezsignsignatureResponse.iEzsignsignatureValidationstep) &&
        Objects.equals(this.sEzsignsignatureAttachmentdescription, ezsignsignatureResponse.sEzsignsignatureAttachmentdescription) &&
        Objects.equals(this.eEzsignsignatureAttachmentnamesource, ezsignsignatureResponse.eEzsignsignatureAttachmentnamesource) &&
        Objects.equals(this.bEzsignsignatureRequired, ezsignsignatureResponse.bEzsignsignatureRequired) &&
        Objects.equals(this.fkiEzsignfoldersignerassociationIDValidation, ezsignsignatureResponse.fkiEzsignfoldersignerassociationIDValidation) &&
        Objects.equals(this.dtEzsignsignatureDate, ezsignsignatureResponse.dtEzsignsignatureDate) &&
        Objects.equals(this.iEzsignsignatureattachmentCount, ezsignsignatureResponse.iEzsignsignatureattachmentCount) &&
        Objects.equals(this.sEzsignsignatureDescription, ezsignsignatureResponse.sEzsignsignatureDescription) &&
        Objects.equals(this.iEzsignsignatureMaxlength, ezsignsignatureResponse.iEzsignsignatureMaxlength) &&
        Objects.equals(this.eEzsignsignatureTextvalidation, ezsignsignatureResponse.eEzsignsignatureTextvalidation) &&
        Objects.equals(this.sEzsignsignatureRegexp, ezsignsignatureResponse.sEzsignsignatureRegexp) &&
        Objects.equals(this.objContactName, ezsignsignatureResponse.objContactName) &&
        Objects.equals(this.objSignature, ezsignsignatureResponse.objSignature);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiEzsignsignatureID, fkiEzsigndocumentID, fkiEzsignfoldersignerassociationID, iEzsignpagePagenumber, iEzsignsignatureX, iEzsignsignatureY, iEzsignsignatureHeight, iEzsignsignatureWidth, iEzsignsignatureStep, eEzsignsignatureType, tEzsignsignatureTooltip, eEzsignsignatureTooltipposition, eEzsignsignatureFont, iEzsignsignatureValidationstep, sEzsignsignatureAttachmentdescription, eEzsignsignatureAttachmentnamesource, bEzsignsignatureRequired, fkiEzsignfoldersignerassociationIDValidation, dtEzsignsignatureDate, iEzsignsignatureattachmentCount, sEzsignsignatureDescription, iEzsignsignatureMaxlength, eEzsignsignatureTextvalidation, sEzsignsignatureRegexp, objContactName, objSignature);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsignsignatureResponse {\n");
    sb.append("    pkiEzsignsignatureID: ").append(toIndentedString(pkiEzsignsignatureID)).append("\n");
    sb.append("    fkiEzsigndocumentID: ").append(toIndentedString(fkiEzsigndocumentID)).append("\n");
    sb.append("    fkiEzsignfoldersignerassociationID: ").append(toIndentedString(fkiEzsignfoldersignerassociationID)).append("\n");
    sb.append("    iEzsignpagePagenumber: ").append(toIndentedString(iEzsignpagePagenumber)).append("\n");
    sb.append("    iEzsignsignatureX: ").append(toIndentedString(iEzsignsignatureX)).append("\n");
    sb.append("    iEzsignsignatureY: ").append(toIndentedString(iEzsignsignatureY)).append("\n");
    sb.append("    iEzsignsignatureHeight: ").append(toIndentedString(iEzsignsignatureHeight)).append("\n");
    sb.append("    iEzsignsignatureWidth: ").append(toIndentedString(iEzsignsignatureWidth)).append("\n");
    sb.append("    iEzsignsignatureStep: ").append(toIndentedString(iEzsignsignatureStep)).append("\n");
    sb.append("    eEzsignsignatureType: ").append(toIndentedString(eEzsignsignatureType)).append("\n");
    sb.append("    tEzsignsignatureTooltip: ").append(toIndentedString(tEzsignsignatureTooltip)).append("\n");
    sb.append("    eEzsignsignatureTooltipposition: ").append(toIndentedString(eEzsignsignatureTooltipposition)).append("\n");
    sb.append("    eEzsignsignatureFont: ").append(toIndentedString(eEzsignsignatureFont)).append("\n");
    sb.append("    iEzsignsignatureValidationstep: ").append(toIndentedString(iEzsignsignatureValidationstep)).append("\n");
    sb.append("    sEzsignsignatureAttachmentdescription: ").append(toIndentedString(sEzsignsignatureAttachmentdescription)).append("\n");
    sb.append("    eEzsignsignatureAttachmentnamesource: ").append(toIndentedString(eEzsignsignatureAttachmentnamesource)).append("\n");
    sb.append("    bEzsignsignatureRequired: ").append(toIndentedString(bEzsignsignatureRequired)).append("\n");
    sb.append("    fkiEzsignfoldersignerassociationIDValidation: ").append(toIndentedString(fkiEzsignfoldersignerassociationIDValidation)).append("\n");
    sb.append("    dtEzsignsignatureDate: ").append(toIndentedString(dtEzsignsignatureDate)).append("\n");
    sb.append("    iEzsignsignatureattachmentCount: ").append(toIndentedString(iEzsignsignatureattachmentCount)).append("\n");
    sb.append("    sEzsignsignatureDescription: ").append(toIndentedString(sEzsignsignatureDescription)).append("\n");
    sb.append("    iEzsignsignatureMaxlength: ").append(toIndentedString(iEzsignsignatureMaxlength)).append("\n");
    sb.append("    eEzsignsignatureTextvalidation: ").append(toIndentedString(eEzsignsignatureTextvalidation)).append("\n");
    sb.append("    sEzsignsignatureRegexp: ").append(toIndentedString(sEzsignsignatureRegexp)).append("\n");
    sb.append("    objContactName: ").append(toIndentedString(objContactName)).append("\n");
    sb.append("    objSignature: ").append(toIndentedString(objSignature)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiEzsignsignatureID");
    openapiFields.add("fkiEzsigndocumentID");
    openapiFields.add("fkiEzsignfoldersignerassociationID");
    openapiFields.add("iEzsignpagePagenumber");
    openapiFields.add("iEzsignsignatureX");
    openapiFields.add("iEzsignsignatureY");
    openapiFields.add("iEzsignsignatureHeight");
    openapiFields.add("iEzsignsignatureWidth");
    openapiFields.add("iEzsignsignatureStep");
    openapiFields.add("eEzsignsignatureType");
    openapiFields.add("tEzsignsignatureTooltip");
    openapiFields.add("eEzsignsignatureTooltipposition");
    openapiFields.add("eEzsignsignatureFont");
    openapiFields.add("iEzsignsignatureValidationstep");
    openapiFields.add("sEzsignsignatureAttachmentdescription");
    openapiFields.add("eEzsignsignatureAttachmentnamesource");
    openapiFields.add("bEzsignsignatureRequired");
    openapiFields.add("fkiEzsignfoldersignerassociationIDValidation");
    openapiFields.add("dtEzsignsignatureDate");
    openapiFields.add("iEzsignsignatureattachmentCount");
    openapiFields.add("sEzsignsignatureDescription");
    openapiFields.add("iEzsignsignatureMaxlength");
    openapiFields.add("eEzsignsignatureTextvalidation");
    openapiFields.add("sEzsignsignatureRegexp");
    openapiFields.add("objContactName");
    openapiFields.add("objSignature");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiEzsignsignatureID");
    openapiRequiredFields.add("fkiEzsigndocumentID");
    openapiRequiredFields.add("fkiEzsignfoldersignerassociationID");
    openapiRequiredFields.add("iEzsignpagePagenumber");
    openapiRequiredFields.add("iEzsignsignatureX");
    openapiRequiredFields.add("iEzsignsignatureY");
    openapiRequiredFields.add("iEzsignsignatureStep");
    openapiRequiredFields.add("eEzsignsignatureType");
    openapiRequiredFields.add("objContactName");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EzsignsignatureResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EzsignsignatureResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsignsignatureResponse is not found in the empty JSON string", EzsignsignatureResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EzsignsignatureResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsignsignatureResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EzsignsignatureResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("tEzsignsignatureTooltip") != null && !jsonObj.get("tEzsignsignatureTooltip").isJsonNull()) && !jsonObj.get("tEzsignsignatureTooltip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tEzsignsignatureTooltip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tEzsignsignatureTooltip").toString()));
      }
      if ((jsonObj.get("sEzsignsignatureAttachmentdescription") != null && !jsonObj.get("sEzsignsignatureAttachmentdescription").isJsonNull()) && !jsonObj.get("sEzsignsignatureAttachmentdescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsignsignatureAttachmentdescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsignsignatureAttachmentdescription").toString()));
      }
      if ((jsonObj.get("dtEzsignsignatureDate") != null && !jsonObj.get("dtEzsignsignatureDate").isJsonNull()) && !jsonObj.get("dtEzsignsignatureDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dtEzsignsignatureDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dtEzsignsignatureDate").toString()));
      }
      if ((jsonObj.get("sEzsignsignatureDescription") != null && !jsonObj.get("sEzsignsignatureDescription").isJsonNull()) && !jsonObj.get("sEzsignsignatureDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsignsignatureDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsignsignatureDescription").toString()));
      }
      if ((jsonObj.get("sEzsignsignatureRegexp") != null && !jsonObj.get("sEzsignsignatureRegexp").isJsonNull()) && !jsonObj.get("sEzsignsignatureRegexp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsignsignatureRegexp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsignsignatureRegexp").toString()));
      }
      // validate the required field `objContactName`
      CustomContactNameResponse.validateJsonElement(jsonObj.get("objContactName"));
      // validate the optional field `objSignature`
      if (jsonObj.get("objSignature") != null && !jsonObj.get("objSignature").isJsonNull()) {
        SignatureResponseCompound.validateJsonElement(jsonObj.get("objSignature"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsignsignatureResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsignsignatureResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsignsignatureResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsignsignatureResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsignsignatureResponse>() {
           @Override
           public void write(JsonWriter out, EzsignsignatureResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsignsignatureResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EzsignsignatureResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EzsignsignatureResponse
  * @throws IOException if the JSON string is invalid with respect to EzsignsignatureResponse
  */
  public static EzsignsignatureResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsignsignatureResponse.class);
  }

 /**
  * Convert an instance of EzsignsignatureResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

