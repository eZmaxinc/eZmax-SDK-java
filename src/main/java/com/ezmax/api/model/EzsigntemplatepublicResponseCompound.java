/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.CommonAudit;
import com.ezmax.api.model.CustomEzsignfolderezsigntemplatepublicResponse;
import com.ezmax.api.model.FieldEEzsigntemplatepublicLimittype;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Ezsigntemplatepublic Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-20T19:31:15.190691479Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class EzsigntemplatepublicResponseCompound {
  public static final String SERIALIZED_NAME_PKI_EZSIGNTEMPLATEPUBLIC_I_D = "pkiEzsigntemplatepublicID";
  @SerializedName(SERIALIZED_NAME_PKI_EZSIGNTEMPLATEPUBLIC_I_D)
  private Integer pkiEzsigntemplatepublicID;

  public static final String SERIALIZED_NAME_FKI_EZSIGNFOLDERTYPE_I_D = "fkiEzsignfoldertypeID";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNFOLDERTYPE_I_D)
  private Integer fkiEzsignfoldertypeID;

  public static final String SERIALIZED_NAME_S_EZSIGNFOLDERTYPE_NAME_X = "sEzsignfoldertypeNameX";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNFOLDERTYPE_NAME_X)
  private String sEzsignfoldertypeNameX;

  public static final String SERIALIZED_NAME_FKI_USERLOGINTYPE_I_D = "fkiUserlogintypeID";
  @SerializedName(SERIALIZED_NAME_FKI_USERLOGINTYPE_I_D)
  private Integer fkiUserlogintypeID;

  public static final String SERIALIZED_NAME_S_USERLOGINTYPE_DESCRIPTION_X = "sUserlogintypeDescriptionX";
  @SerializedName(SERIALIZED_NAME_S_USERLOGINTYPE_DESCRIPTION_X)
  private String sUserlogintypeDescriptionX;

  public static final String SERIALIZED_NAME_FKI_EZSIGNTEMPLATE_I_D = "fkiEzsigntemplateID";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNTEMPLATE_I_D)
  private Integer fkiEzsigntemplateID;

  public static final String SERIALIZED_NAME_FKI_EZSIGNTEMPLATEPACKAGE_I_D = "fkiEzsigntemplatepackageID";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNTEMPLATEPACKAGE_I_D)
  private Integer fkiEzsigntemplatepackageID;

  public static final String SERIALIZED_NAME_S_EZSIGNTEMPLATEPUBLIC_DESCRIPTION = "sEzsigntemplatepublicDescription";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNTEMPLATEPUBLIC_DESCRIPTION)
  private String sEzsigntemplatepublicDescription;

  public static final String SERIALIZED_NAME_S_EZSIGNTEMPLATEPUBLIC_REFERENCEID = "sEzsigntemplatepublicReferenceid";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNTEMPLATEPUBLIC_REFERENCEID)
  private String sEzsigntemplatepublicReferenceid;

  public static final String SERIALIZED_NAME_B_EZSIGNTEMPLATEPUBLIC_ISACTIVE = "bEzsigntemplatepublicIsactive";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNTEMPLATEPUBLIC_ISACTIVE)
  private Boolean bEzsigntemplatepublicIsactive;

  public static final String SERIALIZED_NAME_T_EZSIGNTEMPLATEPUBLIC_NOTE = "tEzsigntemplatepublicNote";
  @SerializedName(SERIALIZED_NAME_T_EZSIGNTEMPLATEPUBLIC_NOTE)
  private String tEzsigntemplatepublicNote;

  public static final String SERIALIZED_NAME_E_EZSIGNTEMPLATEPUBLIC_LIMITTYPE = "eEzsigntemplatepublicLimittype";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNTEMPLATEPUBLIC_LIMITTYPE)
  private FieldEEzsigntemplatepublicLimittype eEzsigntemplatepublicLimittype;

  public static final String SERIALIZED_NAME_I_EZSIGNTEMPLATEPUBLIC_LIMIT = "iEzsigntemplatepublicLimit";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNTEMPLATEPUBLIC_LIMIT)
  private Integer iEzsigntemplatepublicLimit;

  public static final String SERIALIZED_NAME_I_EZSIGNTEMPLATEPUBLIC_LIMITEXCEEDED = "iEzsigntemplatepublicLimitexceeded";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNTEMPLATEPUBLIC_LIMITEXCEEDED)
  private Integer iEzsigntemplatepublicLimitexceeded;

  public static final String SERIALIZED_NAME_DT_EZSIGNTEMPLATEPUBLIC_LIMITEXCEEDEDSINCE = "dtEzsigntemplatepublicLimitexceededsince";
  @SerializedName(SERIALIZED_NAME_DT_EZSIGNTEMPLATEPUBLIC_LIMITEXCEEDEDSINCE)
  private String dtEzsigntemplatepublicLimitexceededsince;

  public static final String SERIALIZED_NAME_S_EZSIGNTEMPLATEPUBLIC_URL = "sEzsigntemplatepublicUrl";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNTEMPLATEPUBLIC_URL)
  private String sEzsigntemplatepublicUrl;

  public static final String SERIALIZED_NAME_S_EZSIGNTEMPLATEPUBLIC_EZSIGNTEMPLATEDESCRIPTION = "sEzsigntemplatepublicEzsigntemplatedescription";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNTEMPLATEPUBLIC_EZSIGNTEMPLATEDESCRIPTION)
  private String sEzsigntemplatepublicEzsigntemplatedescription;

  public static final String SERIALIZED_NAME_OBJ_AUDIT = "objAudit";
  @SerializedName(SERIALIZED_NAME_OBJ_AUDIT)
  private CommonAudit objAudit;

  public static final String SERIALIZED_NAME_A_OBJ_EZSIGNFOLDEREZSIGNTEMPLATEPUBLIC = "a_objEzsignfolderezsigntemplatepublic";
  @SerializedName(SERIALIZED_NAME_A_OBJ_EZSIGNFOLDEREZSIGNTEMPLATEPUBLIC)
  private List<CustomEzsignfolderezsigntemplatepublicResponse> aObjEzsignfolderezsigntemplatepublic = new ArrayList<>();

  public EzsigntemplatepublicResponseCompound() {
  }

  public EzsigntemplatepublicResponseCompound pkiEzsigntemplatepublicID(Integer pkiEzsigntemplatepublicID) {
    this.pkiEzsigntemplatepublicID = pkiEzsigntemplatepublicID;
    return this;
  }

  /**
   * The unique ID of the Ezsigntemplatepublic
   * minimum: 0
   * maximum: 65535
   * @return pkiEzsigntemplatepublicID
   */
  @javax.annotation.Nonnull
  public Integer getPkiEzsigntemplatepublicID() {
    return pkiEzsigntemplatepublicID;
  }

  public void setPkiEzsigntemplatepublicID(Integer pkiEzsigntemplatepublicID) {
    this.pkiEzsigntemplatepublicID = pkiEzsigntemplatepublicID;
  }


  public EzsigntemplatepublicResponseCompound fkiEzsignfoldertypeID(Integer fkiEzsignfoldertypeID) {
    this.fkiEzsignfoldertypeID = fkiEzsignfoldertypeID;
    return this;
  }

  /**
   * The unique ID of the Ezsignfoldertype.
   * minimum: 0
   * maximum: 65535
   * @return fkiEzsignfoldertypeID
   */
  @javax.annotation.Nonnull
  public Integer getFkiEzsignfoldertypeID() {
    return fkiEzsignfoldertypeID;
  }

  public void setFkiEzsignfoldertypeID(Integer fkiEzsignfoldertypeID) {
    this.fkiEzsignfoldertypeID = fkiEzsignfoldertypeID;
  }


  public EzsigntemplatepublicResponseCompound sEzsignfoldertypeNameX(String sEzsignfoldertypeNameX) {
    this.sEzsignfoldertypeNameX = sEzsignfoldertypeNameX;
    return this;
  }

  /**
   * The name of the Ezsignfoldertype in the language of the requester
   * @return sEzsignfoldertypeNameX
   */
  @javax.annotation.Nonnull
  public String getsEzsignfoldertypeNameX() {
    return sEzsignfoldertypeNameX;
  }

  public void setsEzsignfoldertypeNameX(String sEzsignfoldertypeNameX) {
    this.sEzsignfoldertypeNameX = sEzsignfoldertypeNameX;
  }


  public EzsigntemplatepublicResponseCompound fkiUserlogintypeID(Integer fkiUserlogintypeID) {
    this.fkiUserlogintypeID = fkiUserlogintypeID;
    return this;
  }

  /**
   * The unique ID of the Userlogintype  Valid values:  |Value|Description|Detail| |-|-|-| |1|**Email Only**|The Ezsignsigner will receive a secure link by email| |2|**Email and phone or SMS**|The Ezsignsigner will receive a secure link by email and will need to authenticate using SMS or Phone call. **Additional fee applies**| |3|**Email and secret question**|The Ezsignsigner will receive a secure link by email and will need to authenticate using a predefined question and answer| |4|**In person only**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and there won&#39;t be any authentication. No email will be sent for invitation to sign. Make sure you evaluate the risk of signature denial and at minimum, we recommend you use a handwritten signature type| |5|**In person with phone or SMS**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**| |6|**Embedded**|The Ezsignsigner will only be able to sign in the embedded solution. No email will be sent for invitation to sign. **Additional fee applies**|   |7|**Embedded with phone or SMS**|The Ezsignsigner will only be able to sign in the embedded solution and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**|   |8|**No validation**|The Ezsignsigner will not receive an email and won&#39;t have to validate his connection using 2 factor. **Additional fee applies**|      |9|**Sms only**|The Ezsignsigner will not receive an email but will will need to authenticate using SMS. **Additional fee applies**|     
   * minimum: 0
   * @return fkiUserlogintypeID
   */
  @javax.annotation.Nonnull
  public Integer getFkiUserlogintypeID() {
    return fkiUserlogintypeID;
  }

  public void setFkiUserlogintypeID(Integer fkiUserlogintypeID) {
    this.fkiUserlogintypeID = fkiUserlogintypeID;
  }


  public EzsigntemplatepublicResponseCompound sUserlogintypeDescriptionX(String sUserlogintypeDescriptionX) {
    this.sUserlogintypeDescriptionX = sUserlogintypeDescriptionX;
    return this;
  }

  /**
   * The description of the Userlogintype in the language of the requester
   * @return sUserlogintypeDescriptionX
   */
  @javax.annotation.Nonnull
  public String getsUserlogintypeDescriptionX() {
    return sUserlogintypeDescriptionX;
  }

  public void setsUserlogintypeDescriptionX(String sUserlogintypeDescriptionX) {
    this.sUserlogintypeDescriptionX = sUserlogintypeDescriptionX;
  }


  public EzsigntemplatepublicResponseCompound fkiEzsigntemplateID(Integer fkiEzsigntemplateID) {
    this.fkiEzsigntemplateID = fkiEzsigntemplateID;
    return this;
  }

  /**
   * The unique ID of the Ezsigntemplate
   * minimum: 0
   * @return fkiEzsigntemplateID
   */
  @javax.annotation.Nullable
  public Integer getFkiEzsigntemplateID() {
    return fkiEzsigntemplateID;
  }

  public void setFkiEzsigntemplateID(Integer fkiEzsigntemplateID) {
    this.fkiEzsigntemplateID = fkiEzsigntemplateID;
  }


  public EzsigntemplatepublicResponseCompound fkiEzsigntemplatepackageID(Integer fkiEzsigntemplatepackageID) {
    this.fkiEzsigntemplatepackageID = fkiEzsigntemplatepackageID;
    return this;
  }

  /**
   * The unique ID of the Ezsigntemplatepackage
   * minimum: 0
   * @return fkiEzsigntemplatepackageID
   */
  @javax.annotation.Nullable
  public Integer getFkiEzsigntemplatepackageID() {
    return fkiEzsigntemplatepackageID;
  }

  public void setFkiEzsigntemplatepackageID(Integer fkiEzsigntemplatepackageID) {
    this.fkiEzsigntemplatepackageID = fkiEzsigntemplatepackageID;
  }


  public EzsigntemplatepublicResponseCompound sEzsigntemplatepublicDescription(String sEzsigntemplatepublicDescription) {
    this.sEzsigntemplatepublicDescription = sEzsigntemplatepublicDescription;
    return this;
  }

  /**
   * The description of the Ezsigntemplatepublic
   * @return sEzsigntemplatepublicDescription
   */
  @javax.annotation.Nonnull
  public String getsEzsigntemplatepublicDescription() {
    return sEzsigntemplatepublicDescription;
  }

  public void setsEzsigntemplatepublicDescription(String sEzsigntemplatepublicDescription) {
    this.sEzsigntemplatepublicDescription = sEzsigntemplatepublicDescription;
  }


  public EzsigntemplatepublicResponseCompound sEzsigntemplatepublicReferenceid(String sEzsigntemplatepublicReferenceid) {
    this.sEzsigntemplatepublicReferenceid = sEzsigntemplatepublicReferenceid;
    return this;
  }

  /**
   * The referenceid of the Ezsigntemplatepublic
   * @return sEzsigntemplatepublicReferenceid
   */
  @javax.annotation.Nonnull
  public String getsEzsigntemplatepublicReferenceid() {
    return sEzsigntemplatepublicReferenceid;
  }

  public void setsEzsigntemplatepublicReferenceid(String sEzsigntemplatepublicReferenceid) {
    this.sEzsigntemplatepublicReferenceid = sEzsigntemplatepublicReferenceid;
  }


  public EzsigntemplatepublicResponseCompound bEzsigntemplatepublicIsactive(Boolean bEzsigntemplatepublicIsactive) {
    this.bEzsigntemplatepublicIsactive = bEzsigntemplatepublicIsactive;
    return this;
  }

  /**
   * Whether the ezsigntemplatepublic is active or not
   * @return bEzsigntemplatepublicIsactive
   */
  @javax.annotation.Nonnull
  public Boolean getbEzsigntemplatepublicIsactive() {
    return bEzsigntemplatepublicIsactive;
  }

  public void setbEzsigntemplatepublicIsactive(Boolean bEzsigntemplatepublicIsactive) {
    this.bEzsigntemplatepublicIsactive = bEzsigntemplatepublicIsactive;
  }


  public EzsigntemplatepublicResponseCompound tEzsigntemplatepublicNote(String tEzsigntemplatepublicNote) {
    this.tEzsigntemplatepublicNote = tEzsigntemplatepublicNote;
    return this;
  }

  /**
   * The note of the Ezsigntemplatepublic
   * @return tEzsigntemplatepublicNote
   */
  @javax.annotation.Nonnull
  public String gettEzsigntemplatepublicNote() {
    return tEzsigntemplatepublicNote;
  }

  public void settEzsigntemplatepublicNote(String tEzsigntemplatepublicNote) {
    this.tEzsigntemplatepublicNote = tEzsigntemplatepublicNote;
  }


  public EzsigntemplatepublicResponseCompound eEzsigntemplatepublicLimittype(FieldEEzsigntemplatepublicLimittype eEzsigntemplatepublicLimittype) {
    this.eEzsigntemplatepublicLimittype = eEzsigntemplatepublicLimittype;
    return this;
  }

  /**
   * Get eEzsigntemplatepublicLimittype
   * @return eEzsigntemplatepublicLimittype
   */
  @javax.annotation.Nonnull
  public FieldEEzsigntemplatepublicLimittype geteEzsigntemplatepublicLimittype() {
    return eEzsigntemplatepublicLimittype;
  }

  public void seteEzsigntemplatepublicLimittype(FieldEEzsigntemplatepublicLimittype eEzsigntemplatepublicLimittype) {
    this.eEzsigntemplatepublicLimittype = eEzsigntemplatepublicLimittype;
  }


  public EzsigntemplatepublicResponseCompound iEzsigntemplatepublicLimit(Integer iEzsigntemplatepublicLimit) {
    this.iEzsigntemplatepublicLimit = iEzsigntemplatepublicLimit;
    return this;
  }

  /**
   * The limit of the Ezsigntemplatepublic
   * minimum: 0
   * maximum: 65535
   * @return iEzsigntemplatepublicLimit
   */
  @javax.annotation.Nonnull
  public Integer getiEzsigntemplatepublicLimit() {
    return iEzsigntemplatepublicLimit;
  }

  public void setiEzsigntemplatepublicLimit(Integer iEzsigntemplatepublicLimit) {
    this.iEzsigntemplatepublicLimit = iEzsigntemplatepublicLimit;
  }


  public EzsigntemplatepublicResponseCompound iEzsigntemplatepublicLimitexceeded(Integer iEzsigntemplatepublicLimitexceeded) {
    this.iEzsigntemplatepublicLimitexceeded = iEzsigntemplatepublicLimitexceeded;
    return this;
  }

  /**
   * The limitexceeded of the Ezsigntemplatepublic
   * minimum: 0
   * maximum: 65535
   * @return iEzsigntemplatepublicLimitexceeded
   */
  @javax.annotation.Nonnull
  public Integer getiEzsigntemplatepublicLimitexceeded() {
    return iEzsigntemplatepublicLimitexceeded;
  }

  public void setiEzsigntemplatepublicLimitexceeded(Integer iEzsigntemplatepublicLimitexceeded) {
    this.iEzsigntemplatepublicLimitexceeded = iEzsigntemplatepublicLimitexceeded;
  }


  public EzsigntemplatepublicResponseCompound dtEzsigntemplatepublicLimitexceededsince(String dtEzsigntemplatepublicLimitexceededsince) {
    this.dtEzsigntemplatepublicLimitexceededsince = dtEzsigntemplatepublicLimitexceededsince;
    return this;
  }

  /**
   * The limitexceededsince of the Ezsigntemplatepublic
   * @return dtEzsigntemplatepublicLimitexceededsince
   */
  @javax.annotation.Nonnull
  public String getDtEzsigntemplatepublicLimitexceededsince() {
    return dtEzsigntemplatepublicLimitexceededsince;
  }

  public void setDtEzsigntemplatepublicLimitexceededsince(String dtEzsigntemplatepublicLimitexceededsince) {
    this.dtEzsigntemplatepublicLimitexceededsince = dtEzsigntemplatepublicLimitexceededsince;
  }


  public EzsigntemplatepublicResponseCompound sEzsigntemplatepublicUrl(String sEzsigntemplatepublicUrl) {
    this.sEzsigntemplatepublicUrl = sEzsigntemplatepublicUrl;
    return this;
  }

  /**
   * The url of the Ezsigntemplatepublic  You can add these value as query parameters to prefill the corresponding role  |Parameter|Description| |-|-| |sEzsigntemplatesignerDescription|The role to fill| |sContactFirstname|The contact firstname| |sContactLastname|The contact lastname| |sEmailAddress|The contact email| |sPhoneE164|The contact phone number| |sPhoneE164Cell|The contact cell phone number|
   * @return sEzsigntemplatepublicUrl
   */
  @javax.annotation.Nonnull
  public String getsEzsigntemplatepublicUrl() {
    return sEzsigntemplatepublicUrl;
  }

  public void setsEzsigntemplatepublicUrl(String sEzsigntemplatepublicUrl) {
    this.sEzsigntemplatepublicUrl = sEzsigntemplatepublicUrl;
  }


  public EzsigntemplatepublicResponseCompound sEzsigntemplatepublicEzsigntemplatedescription(String sEzsigntemplatepublicEzsigntemplatedescription) {
    this.sEzsigntemplatepublicEzsigntemplatedescription = sEzsigntemplatepublicEzsigntemplatedescription;
    return this;
  }

  /**
   * The Ezsigntemplate/Ezsigntemplatepackage description
   * @return sEzsigntemplatepublicEzsigntemplatedescription
   */
  @javax.annotation.Nonnull
  public String getsEzsigntemplatepublicEzsigntemplatedescription() {
    return sEzsigntemplatepublicEzsigntemplatedescription;
  }

  public void setsEzsigntemplatepublicEzsigntemplatedescription(String sEzsigntemplatepublicEzsigntemplatedescription) {
    this.sEzsigntemplatepublicEzsigntemplatedescription = sEzsigntemplatepublicEzsigntemplatedescription;
  }


  public EzsigntemplatepublicResponseCompound objAudit(CommonAudit objAudit) {
    this.objAudit = objAudit;
    return this;
  }

  /**
   * Get objAudit
   * @return objAudit
   */
  @javax.annotation.Nullable
  public CommonAudit getObjAudit() {
    return objAudit;
  }

  public void setObjAudit(CommonAudit objAudit) {
    this.objAudit = objAudit;
  }


  public EzsigntemplatepublicResponseCompound aObjEzsignfolderezsigntemplatepublic(List<CustomEzsignfolderezsigntemplatepublicResponse> aObjEzsignfolderezsigntemplatepublic) {
    this.aObjEzsignfolderezsigntemplatepublic = aObjEzsignfolderezsigntemplatepublic;
    return this;
  }

  public EzsigntemplatepublicResponseCompound addAObjEzsignfolderezsigntemplatepublicItem(CustomEzsignfolderezsigntemplatepublicResponse aObjEzsignfolderezsigntemplatepublicItem) {
    if (this.aObjEzsignfolderezsigntemplatepublic == null) {
      this.aObjEzsignfolderezsigntemplatepublic = new ArrayList<>();
    }
    this.aObjEzsignfolderezsigntemplatepublic.add(aObjEzsignfolderezsigntemplatepublicItem);
    return this;
  }

  /**
   * Get aObjEzsignfolderezsigntemplatepublic
   * @return aObjEzsignfolderezsigntemplatepublic
   */
  @javax.annotation.Nonnull
  public List<CustomEzsignfolderezsigntemplatepublicResponse> getaObjEzsignfolderezsigntemplatepublic() {
    return aObjEzsignfolderezsigntemplatepublic;
  }

  public void setaObjEzsignfolderezsigntemplatepublic(List<CustomEzsignfolderezsigntemplatepublicResponse> aObjEzsignfolderezsigntemplatepublic) {
    this.aObjEzsignfolderezsigntemplatepublic = aObjEzsignfolderezsigntemplatepublic;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsigntemplatepublicResponseCompound ezsigntemplatepublicResponseCompound = (EzsigntemplatepublicResponseCompound) o;
    return Objects.equals(this.pkiEzsigntemplatepublicID, ezsigntemplatepublicResponseCompound.pkiEzsigntemplatepublicID) &&
        Objects.equals(this.fkiEzsignfoldertypeID, ezsigntemplatepublicResponseCompound.fkiEzsignfoldertypeID) &&
        Objects.equals(this.sEzsignfoldertypeNameX, ezsigntemplatepublicResponseCompound.sEzsignfoldertypeNameX) &&
        Objects.equals(this.fkiUserlogintypeID, ezsigntemplatepublicResponseCompound.fkiUserlogintypeID) &&
        Objects.equals(this.sUserlogintypeDescriptionX, ezsigntemplatepublicResponseCompound.sUserlogintypeDescriptionX) &&
        Objects.equals(this.fkiEzsigntemplateID, ezsigntemplatepublicResponseCompound.fkiEzsigntemplateID) &&
        Objects.equals(this.fkiEzsigntemplatepackageID, ezsigntemplatepublicResponseCompound.fkiEzsigntemplatepackageID) &&
        Objects.equals(this.sEzsigntemplatepublicDescription, ezsigntemplatepublicResponseCompound.sEzsigntemplatepublicDescription) &&
        Objects.equals(this.sEzsigntemplatepublicReferenceid, ezsigntemplatepublicResponseCompound.sEzsigntemplatepublicReferenceid) &&
        Objects.equals(this.bEzsigntemplatepublicIsactive, ezsigntemplatepublicResponseCompound.bEzsigntemplatepublicIsactive) &&
        Objects.equals(this.tEzsigntemplatepublicNote, ezsigntemplatepublicResponseCompound.tEzsigntemplatepublicNote) &&
        Objects.equals(this.eEzsigntemplatepublicLimittype, ezsigntemplatepublicResponseCompound.eEzsigntemplatepublicLimittype) &&
        Objects.equals(this.iEzsigntemplatepublicLimit, ezsigntemplatepublicResponseCompound.iEzsigntemplatepublicLimit) &&
        Objects.equals(this.iEzsigntemplatepublicLimitexceeded, ezsigntemplatepublicResponseCompound.iEzsigntemplatepublicLimitexceeded) &&
        Objects.equals(this.dtEzsigntemplatepublicLimitexceededsince, ezsigntemplatepublicResponseCompound.dtEzsigntemplatepublicLimitexceededsince) &&
        Objects.equals(this.sEzsigntemplatepublicUrl, ezsigntemplatepublicResponseCompound.sEzsigntemplatepublicUrl) &&
        Objects.equals(this.sEzsigntemplatepublicEzsigntemplatedescription, ezsigntemplatepublicResponseCompound.sEzsigntemplatepublicEzsigntemplatedescription) &&
        Objects.equals(this.objAudit, ezsigntemplatepublicResponseCompound.objAudit) &&
        Objects.equals(this.aObjEzsignfolderezsigntemplatepublic, ezsigntemplatepublicResponseCompound.aObjEzsignfolderezsigntemplatepublic);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiEzsigntemplatepublicID, fkiEzsignfoldertypeID, sEzsignfoldertypeNameX, fkiUserlogintypeID, sUserlogintypeDescriptionX, fkiEzsigntemplateID, fkiEzsigntemplatepackageID, sEzsigntemplatepublicDescription, sEzsigntemplatepublicReferenceid, bEzsigntemplatepublicIsactive, tEzsigntemplatepublicNote, eEzsigntemplatepublicLimittype, iEzsigntemplatepublicLimit, iEzsigntemplatepublicLimitexceeded, dtEzsigntemplatepublicLimitexceededsince, sEzsigntemplatepublicUrl, sEzsigntemplatepublicEzsigntemplatedescription, objAudit, aObjEzsignfolderezsigntemplatepublic);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsigntemplatepublicResponseCompound {\n");
    sb.append("    pkiEzsigntemplatepublicID: ").append(toIndentedString(pkiEzsigntemplatepublicID)).append("\n");
    sb.append("    fkiEzsignfoldertypeID: ").append(toIndentedString(fkiEzsignfoldertypeID)).append("\n");
    sb.append("    sEzsignfoldertypeNameX: ").append(toIndentedString(sEzsignfoldertypeNameX)).append("\n");
    sb.append("    fkiUserlogintypeID: ").append(toIndentedString(fkiUserlogintypeID)).append("\n");
    sb.append("    sUserlogintypeDescriptionX: ").append(toIndentedString(sUserlogintypeDescriptionX)).append("\n");
    sb.append("    fkiEzsigntemplateID: ").append(toIndentedString(fkiEzsigntemplateID)).append("\n");
    sb.append("    fkiEzsigntemplatepackageID: ").append(toIndentedString(fkiEzsigntemplatepackageID)).append("\n");
    sb.append("    sEzsigntemplatepublicDescription: ").append(toIndentedString(sEzsigntemplatepublicDescription)).append("\n");
    sb.append("    sEzsigntemplatepublicReferenceid: ").append(toIndentedString(sEzsigntemplatepublicReferenceid)).append("\n");
    sb.append("    bEzsigntemplatepublicIsactive: ").append(toIndentedString(bEzsigntemplatepublicIsactive)).append("\n");
    sb.append("    tEzsigntemplatepublicNote: ").append(toIndentedString(tEzsigntemplatepublicNote)).append("\n");
    sb.append("    eEzsigntemplatepublicLimittype: ").append(toIndentedString(eEzsigntemplatepublicLimittype)).append("\n");
    sb.append("    iEzsigntemplatepublicLimit: ").append(toIndentedString(iEzsigntemplatepublicLimit)).append("\n");
    sb.append("    iEzsigntemplatepublicLimitexceeded: ").append(toIndentedString(iEzsigntemplatepublicLimitexceeded)).append("\n");
    sb.append("    dtEzsigntemplatepublicLimitexceededsince: ").append(toIndentedString(dtEzsigntemplatepublicLimitexceededsince)).append("\n");
    sb.append("    sEzsigntemplatepublicUrl: ").append(toIndentedString(sEzsigntemplatepublicUrl)).append("\n");
    sb.append("    sEzsigntemplatepublicEzsigntemplatedescription: ").append(toIndentedString(sEzsigntemplatepublicEzsigntemplatedescription)).append("\n");
    sb.append("    objAudit: ").append(toIndentedString(objAudit)).append("\n");
    sb.append("    aObjEzsignfolderezsigntemplatepublic: ").append(toIndentedString(aObjEzsignfolderezsigntemplatepublic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiEzsigntemplatepublicID");
    openapiFields.add("fkiEzsignfoldertypeID");
    openapiFields.add("sEzsignfoldertypeNameX");
    openapiFields.add("fkiUserlogintypeID");
    openapiFields.add("sUserlogintypeDescriptionX");
    openapiFields.add("fkiEzsigntemplateID");
    openapiFields.add("fkiEzsigntemplatepackageID");
    openapiFields.add("sEzsigntemplatepublicDescription");
    openapiFields.add("sEzsigntemplatepublicReferenceid");
    openapiFields.add("bEzsigntemplatepublicIsactive");
    openapiFields.add("tEzsigntemplatepublicNote");
    openapiFields.add("eEzsigntemplatepublicLimittype");
    openapiFields.add("iEzsigntemplatepublicLimit");
    openapiFields.add("iEzsigntemplatepublicLimitexceeded");
    openapiFields.add("dtEzsigntemplatepublicLimitexceededsince");
    openapiFields.add("sEzsigntemplatepublicUrl");
    openapiFields.add("sEzsigntemplatepublicEzsigntemplatedescription");
    openapiFields.add("objAudit");
    openapiFields.add("a_objEzsignfolderezsigntemplatepublic");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiEzsigntemplatepublicID");
    openapiRequiredFields.add("fkiEzsignfoldertypeID");
    openapiRequiredFields.add("sEzsignfoldertypeNameX");
    openapiRequiredFields.add("fkiUserlogintypeID");
    openapiRequiredFields.add("sUserlogintypeDescriptionX");
    openapiRequiredFields.add("sEzsigntemplatepublicDescription");
    openapiRequiredFields.add("sEzsigntemplatepublicReferenceid");
    openapiRequiredFields.add("bEzsigntemplatepublicIsactive");
    openapiRequiredFields.add("tEzsigntemplatepublicNote");
    openapiRequiredFields.add("eEzsigntemplatepublicLimittype");
    openapiRequiredFields.add("iEzsigntemplatepublicLimit");
    openapiRequiredFields.add("iEzsigntemplatepublicLimitexceeded");
    openapiRequiredFields.add("dtEzsigntemplatepublicLimitexceededsince");
    openapiRequiredFields.add("sEzsigntemplatepublicUrl");
    openapiRequiredFields.add("sEzsigntemplatepublicEzsigntemplatedescription");
    openapiRequiredFields.add("a_objEzsignfolderezsigntemplatepublic");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EzsigntemplatepublicResponseCompound
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EzsigntemplatepublicResponseCompound.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsigntemplatepublicResponseCompound is not found in the empty JSON string", EzsigntemplatepublicResponseCompound.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EzsigntemplatepublicResponseCompound.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsigntemplatepublicResponseCompound` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EzsigntemplatepublicResponseCompound.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("sEzsignfoldertypeNameX").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsignfoldertypeNameX` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsignfoldertypeNameX").toString()));
      }
      if (!jsonObj.get("sUserlogintypeDescriptionX").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sUserlogintypeDescriptionX` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sUserlogintypeDescriptionX").toString()));
      }
      if (!jsonObj.get("sEzsigntemplatepublicDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsigntemplatepublicDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsigntemplatepublicDescription").toString()));
      }
      if (!jsonObj.get("sEzsigntemplatepublicReferenceid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsigntemplatepublicReferenceid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsigntemplatepublicReferenceid").toString()));
      }
      if (!jsonObj.get("tEzsigntemplatepublicNote").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tEzsigntemplatepublicNote` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tEzsigntemplatepublicNote").toString()));
      }
      // validate the required field `eEzsigntemplatepublicLimittype`
      FieldEEzsigntemplatepublicLimittype.validateJsonElement(jsonObj.get("eEzsigntemplatepublicLimittype"));
      if (!jsonObj.get("dtEzsigntemplatepublicLimitexceededsince").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dtEzsigntemplatepublicLimitexceededsince` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dtEzsigntemplatepublicLimitexceededsince").toString()));
      }
      if (!jsonObj.get("sEzsigntemplatepublicUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsigntemplatepublicUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsigntemplatepublicUrl").toString()));
      }
      if (!jsonObj.get("sEzsigntemplatepublicEzsigntemplatedescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsigntemplatepublicEzsigntemplatedescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsigntemplatepublicEzsigntemplatedescription").toString()));
      }
      // validate the optional field `objAudit`
      if (jsonObj.get("objAudit") != null && !jsonObj.get("objAudit").isJsonNull()) {
        CommonAudit.validateJsonElement(jsonObj.get("objAudit"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("a_objEzsignfolderezsigntemplatepublic").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_objEzsignfolderezsigntemplatepublic` to be an array in the JSON string but got `%s`", jsonObj.get("a_objEzsignfolderezsigntemplatepublic").toString()));
      }

      JsonArray jsonArrayaObjEzsignfolderezsigntemplatepublic = jsonObj.getAsJsonArray("a_objEzsignfolderezsigntemplatepublic");
      // validate the required field `a_objEzsignfolderezsigntemplatepublic` (array)
      for (int i = 0; i < jsonArrayaObjEzsignfolderezsigntemplatepublic.size(); i++) {
        CustomEzsignfolderezsigntemplatepublicResponse.validateJsonElement(jsonArrayaObjEzsignfolderezsigntemplatepublic.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsigntemplatepublicResponseCompound.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsigntemplatepublicResponseCompound' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsigntemplatepublicResponseCompound> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsigntemplatepublicResponseCompound.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsigntemplatepublicResponseCompound>() {
           @Override
           public void write(JsonWriter out, EzsigntemplatepublicResponseCompound value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsigntemplatepublicResponseCompound read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EzsigntemplatepublicResponseCompound given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EzsigntemplatepublicResponseCompound
   * @throws IOException if the JSON string is invalid with respect to EzsigntemplatepublicResponseCompound
   */
  public static EzsigntemplatepublicResponseCompound fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsigntemplatepublicResponseCompound.class);
  }

  /**
   * Convert an instance of EzsigntemplatepublicResponseCompound to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

