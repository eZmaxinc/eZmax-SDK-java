/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.FieldEEzsigntemplateglobalModule;
import com.ezmax.api.model.FieldEEzsigntemplateglobalSupplier;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Ezsigntemplateglobal Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-29T18:53:15.033493285Z[Etc/UTC]", comments = "Generator version: 7.11.0")
public class EzsigntemplateglobalResponse {
  public static final String SERIALIZED_NAME_PKI_EZSIGNTEMPLATEGLOBAL_I_D = "pkiEzsigntemplateglobalID";
  @SerializedName(SERIALIZED_NAME_PKI_EZSIGNTEMPLATEGLOBAL_I_D)
  @javax.annotation.Nonnull
  private Integer pkiEzsigntemplateglobalID;

  public static final String SERIALIZED_NAME_FKI_EZSIGNTEMPLATEGLOBALDOCUMENT_I_D = "fkiEzsigntemplateglobaldocumentID";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNTEMPLATEGLOBALDOCUMENT_I_D)
  @javax.annotation.Nonnull
  private Integer fkiEzsigntemplateglobaldocumentID;

  public static final String SERIALIZED_NAME_FKI_MODULE_I_D = "fkiModuleID";
  @SerializedName(SERIALIZED_NAME_FKI_MODULE_I_D)
  @javax.annotation.Nonnull
  private Integer fkiModuleID;

  public static final String SERIALIZED_NAME_S_MODULE_NAME_X = "sModuleNameX";
  @SerializedName(SERIALIZED_NAME_S_MODULE_NAME_X)
  @javax.annotation.Nullable
  private String sModuleNameX;

  public static final String SERIALIZED_NAME_FKI_LANGUAGE_I_D = "fkiLanguageID";
  @SerializedName(SERIALIZED_NAME_FKI_LANGUAGE_I_D)
  @javax.annotation.Nonnull
  private Integer fkiLanguageID;

  public static final String SERIALIZED_NAME_S_LANGUAGE_NAME_X = "sLanguageNameX";
  @SerializedName(SERIALIZED_NAME_S_LANGUAGE_NAME_X)
  @javax.annotation.Nonnull
  private String sLanguageNameX;

  public static final String SERIALIZED_NAME_E_EZSIGNTEMPLATEGLOBAL_MODULE = "eEzsigntemplateglobalModule";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNTEMPLATEGLOBAL_MODULE)
  @javax.annotation.Nonnull
  private FieldEEzsigntemplateglobalModule eEzsigntemplateglobalModule;

  public static final String SERIALIZED_NAME_E_EZSIGNTEMPLATEGLOBAL_SUPPLIER = "eEzsigntemplateglobalSupplier";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNTEMPLATEGLOBAL_SUPPLIER)
  @javax.annotation.Nonnull
  private FieldEEzsigntemplateglobalSupplier eEzsigntemplateglobalSupplier;

  public static final String SERIALIZED_NAME_S_EZSIGNTEMPLATEGLOBAL_CODE = "sEzsigntemplateglobalCode";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNTEMPLATEGLOBAL_CODE)
  @javax.annotation.Nonnull
  private String sEzsigntemplateglobalCode;

  public static final String SERIALIZED_NAME_S_EZSIGNTEMPLATEGLOBAL_DESCRIPTION = "sEzsigntemplateglobalDescription";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNTEMPLATEGLOBAL_DESCRIPTION)
  @javax.annotation.Nonnull
  private String sEzsigntemplateglobalDescription;

  public EzsigntemplateglobalResponse() {
  }

  public EzsigntemplateglobalResponse pkiEzsigntemplateglobalID(@javax.annotation.Nonnull Integer pkiEzsigntemplateglobalID) {
    this.pkiEzsigntemplateglobalID = pkiEzsigntemplateglobalID;
    return this;
  }

  /**
   * The unique ID of the Ezsigntemplateglobal
   * minimum: 0
   * @return pkiEzsigntemplateglobalID
   */
  @javax.annotation.Nonnull
  public Integer getPkiEzsigntemplateglobalID() {
    return pkiEzsigntemplateglobalID;
  }

  public void setPkiEzsigntemplateglobalID(@javax.annotation.Nonnull Integer pkiEzsigntemplateglobalID) {
    this.pkiEzsigntemplateglobalID = pkiEzsigntemplateglobalID;
  }


  public EzsigntemplateglobalResponse fkiEzsigntemplateglobaldocumentID(@javax.annotation.Nonnull Integer fkiEzsigntemplateglobaldocumentID) {
    this.fkiEzsigntemplateglobaldocumentID = fkiEzsigntemplateglobaldocumentID;
    return this;
  }

  /**
   * The unique ID of the Ezsigntemplateglobaldocument
   * minimum: 0
   * @return fkiEzsigntemplateglobaldocumentID
   */
  @javax.annotation.Nonnull
  public Integer getFkiEzsigntemplateglobaldocumentID() {
    return fkiEzsigntemplateglobaldocumentID;
  }

  public void setFkiEzsigntemplateglobaldocumentID(@javax.annotation.Nonnull Integer fkiEzsigntemplateglobaldocumentID) {
    this.fkiEzsigntemplateglobaldocumentID = fkiEzsigntemplateglobaldocumentID;
  }


  public EzsigntemplateglobalResponse fkiModuleID(@javax.annotation.Nonnull Integer fkiModuleID) {
    this.fkiModuleID = fkiModuleID;
    return this;
  }

  /**
   * The unique ID of the Module
   * minimum: 0
   * @return fkiModuleID
   */
  @javax.annotation.Nonnull
  public Integer getFkiModuleID() {
    return fkiModuleID;
  }

  public void setFkiModuleID(@javax.annotation.Nonnull Integer fkiModuleID) {
    this.fkiModuleID = fkiModuleID;
  }


  public EzsigntemplateglobalResponse sModuleNameX(@javax.annotation.Nullable String sModuleNameX) {
    this.sModuleNameX = sModuleNameX;
    return this;
  }

  /**
   * The Name of the Module in the language of the requester
   * @return sModuleNameX
   */
  @javax.annotation.Nullable
  public String getsModuleNameX() {
    return sModuleNameX;
  }

  public void setsModuleNameX(@javax.annotation.Nullable String sModuleNameX) {
    this.sModuleNameX = sModuleNameX;
  }


  public EzsigntemplateglobalResponse fkiLanguageID(@javax.annotation.Nonnull Integer fkiLanguageID) {
    this.fkiLanguageID = fkiLanguageID;
    return this;
  }

  /**
   * The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
   * minimum: 1
   * maximum: 2
   * @return fkiLanguageID
   */
  @javax.annotation.Nonnull
  public Integer getFkiLanguageID() {
    return fkiLanguageID;
  }

  public void setFkiLanguageID(@javax.annotation.Nonnull Integer fkiLanguageID) {
    this.fkiLanguageID = fkiLanguageID;
  }


  public EzsigntemplateglobalResponse sLanguageNameX(@javax.annotation.Nonnull String sLanguageNameX) {
    this.sLanguageNameX = sLanguageNameX;
    return this;
  }

  /**
   * The Name of the Language in the language of the requester
   * @return sLanguageNameX
   */
  @javax.annotation.Nonnull
  public String getsLanguageNameX() {
    return sLanguageNameX;
  }

  public void setsLanguageNameX(@javax.annotation.Nonnull String sLanguageNameX) {
    this.sLanguageNameX = sLanguageNameX;
  }


  public EzsigntemplateglobalResponse eEzsigntemplateglobalModule(@javax.annotation.Nonnull FieldEEzsigntemplateglobalModule eEzsigntemplateglobalModule) {
    this.eEzsigntemplateglobalModule = eEzsigntemplateglobalModule;
    return this;
  }

  /**
   * Get eEzsigntemplateglobalModule
   * @return eEzsigntemplateglobalModule
   */
  @javax.annotation.Nonnull
  public FieldEEzsigntemplateglobalModule geteEzsigntemplateglobalModule() {
    return eEzsigntemplateglobalModule;
  }

  public void seteEzsigntemplateglobalModule(@javax.annotation.Nonnull FieldEEzsigntemplateglobalModule eEzsigntemplateglobalModule) {
    this.eEzsigntemplateglobalModule = eEzsigntemplateglobalModule;
  }


  public EzsigntemplateglobalResponse eEzsigntemplateglobalSupplier(@javax.annotation.Nonnull FieldEEzsigntemplateglobalSupplier eEzsigntemplateglobalSupplier) {
    this.eEzsigntemplateglobalSupplier = eEzsigntemplateglobalSupplier;
    return this;
  }

  /**
   * Get eEzsigntemplateglobalSupplier
   * @return eEzsigntemplateglobalSupplier
   */
  @javax.annotation.Nonnull
  public FieldEEzsigntemplateglobalSupplier geteEzsigntemplateglobalSupplier() {
    return eEzsigntemplateglobalSupplier;
  }

  public void seteEzsigntemplateglobalSupplier(@javax.annotation.Nonnull FieldEEzsigntemplateglobalSupplier eEzsigntemplateglobalSupplier) {
    this.eEzsigntemplateglobalSupplier = eEzsigntemplateglobalSupplier;
  }


  public EzsigntemplateglobalResponse sEzsigntemplateglobalCode(@javax.annotation.Nonnull String sEzsigntemplateglobalCode) {
    this.sEzsigntemplateglobalCode = sEzsigntemplateglobalCode;
    return this;
  }

  /**
   * The Code of the Ezsigntemplateglobal
   * @return sEzsigntemplateglobalCode
   */
  @javax.annotation.Nonnull
  public String getsEzsigntemplateglobalCode() {
    return sEzsigntemplateglobalCode;
  }

  public void setsEzsigntemplateglobalCode(@javax.annotation.Nonnull String sEzsigntemplateglobalCode) {
    this.sEzsigntemplateglobalCode = sEzsigntemplateglobalCode;
  }


  public EzsigntemplateglobalResponse sEzsigntemplateglobalDescription(@javax.annotation.Nonnull String sEzsigntemplateglobalDescription) {
    this.sEzsigntemplateglobalDescription = sEzsigntemplateglobalDescription;
    return this;
  }

  /**
   * The description of the Ezsigntemplate
   * @return sEzsigntemplateglobalDescription
   */
  @javax.annotation.Nonnull
  public String getsEzsigntemplateglobalDescription() {
    return sEzsigntemplateglobalDescription;
  }

  public void setsEzsigntemplateglobalDescription(@javax.annotation.Nonnull String sEzsigntemplateglobalDescription) {
    this.sEzsigntemplateglobalDescription = sEzsigntemplateglobalDescription;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsigntemplateglobalResponse ezsigntemplateglobalResponse = (EzsigntemplateglobalResponse) o;
    return Objects.equals(this.pkiEzsigntemplateglobalID, ezsigntemplateglobalResponse.pkiEzsigntemplateglobalID) &&
        Objects.equals(this.fkiEzsigntemplateglobaldocumentID, ezsigntemplateglobalResponse.fkiEzsigntemplateglobaldocumentID) &&
        Objects.equals(this.fkiModuleID, ezsigntemplateglobalResponse.fkiModuleID) &&
        Objects.equals(this.sModuleNameX, ezsigntemplateglobalResponse.sModuleNameX) &&
        Objects.equals(this.fkiLanguageID, ezsigntemplateglobalResponse.fkiLanguageID) &&
        Objects.equals(this.sLanguageNameX, ezsigntemplateglobalResponse.sLanguageNameX) &&
        Objects.equals(this.eEzsigntemplateglobalModule, ezsigntemplateglobalResponse.eEzsigntemplateglobalModule) &&
        Objects.equals(this.eEzsigntemplateglobalSupplier, ezsigntemplateglobalResponse.eEzsigntemplateglobalSupplier) &&
        Objects.equals(this.sEzsigntemplateglobalCode, ezsigntemplateglobalResponse.sEzsigntemplateglobalCode) &&
        Objects.equals(this.sEzsigntemplateglobalDescription, ezsigntemplateglobalResponse.sEzsigntemplateglobalDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiEzsigntemplateglobalID, fkiEzsigntemplateglobaldocumentID, fkiModuleID, sModuleNameX, fkiLanguageID, sLanguageNameX, eEzsigntemplateglobalModule, eEzsigntemplateglobalSupplier, sEzsigntemplateglobalCode, sEzsigntemplateglobalDescription);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsigntemplateglobalResponse {\n");
    sb.append("    pkiEzsigntemplateglobalID: ").append(toIndentedString(pkiEzsigntemplateglobalID)).append("\n");
    sb.append("    fkiEzsigntemplateglobaldocumentID: ").append(toIndentedString(fkiEzsigntemplateglobaldocumentID)).append("\n");
    sb.append("    fkiModuleID: ").append(toIndentedString(fkiModuleID)).append("\n");
    sb.append("    sModuleNameX: ").append(toIndentedString(sModuleNameX)).append("\n");
    sb.append("    fkiLanguageID: ").append(toIndentedString(fkiLanguageID)).append("\n");
    sb.append("    sLanguageNameX: ").append(toIndentedString(sLanguageNameX)).append("\n");
    sb.append("    eEzsigntemplateglobalModule: ").append(toIndentedString(eEzsigntemplateglobalModule)).append("\n");
    sb.append("    eEzsigntemplateglobalSupplier: ").append(toIndentedString(eEzsigntemplateglobalSupplier)).append("\n");
    sb.append("    sEzsigntemplateglobalCode: ").append(toIndentedString(sEzsigntemplateglobalCode)).append("\n");
    sb.append("    sEzsigntemplateglobalDescription: ").append(toIndentedString(sEzsigntemplateglobalDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiEzsigntemplateglobalID");
    openapiFields.add("fkiEzsigntemplateglobaldocumentID");
    openapiFields.add("fkiModuleID");
    openapiFields.add("sModuleNameX");
    openapiFields.add("fkiLanguageID");
    openapiFields.add("sLanguageNameX");
    openapiFields.add("eEzsigntemplateglobalModule");
    openapiFields.add("eEzsigntemplateglobalSupplier");
    openapiFields.add("sEzsigntemplateglobalCode");
    openapiFields.add("sEzsigntemplateglobalDescription");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiEzsigntemplateglobalID");
    openapiRequiredFields.add("fkiEzsigntemplateglobaldocumentID");
    openapiRequiredFields.add("fkiModuleID");
    openapiRequiredFields.add("fkiLanguageID");
    openapiRequiredFields.add("sLanguageNameX");
    openapiRequiredFields.add("eEzsigntemplateglobalModule");
    openapiRequiredFields.add("eEzsigntemplateglobalSupplier");
    openapiRequiredFields.add("sEzsigntemplateglobalCode");
    openapiRequiredFields.add("sEzsigntemplateglobalDescription");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EzsigntemplateglobalResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EzsigntemplateglobalResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsigntemplateglobalResponse is not found in the empty JSON string", EzsigntemplateglobalResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EzsigntemplateglobalResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsigntemplateglobalResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EzsigntemplateglobalResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("sModuleNameX") != null && !jsonObj.get("sModuleNameX").isJsonNull()) && !jsonObj.get("sModuleNameX").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sModuleNameX` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sModuleNameX").toString()));
      }
      if (!jsonObj.get("sLanguageNameX").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sLanguageNameX` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sLanguageNameX").toString()));
      }
      // validate the required field `eEzsigntemplateglobalModule`
      FieldEEzsigntemplateglobalModule.validateJsonElement(jsonObj.get("eEzsigntemplateglobalModule"));
      // validate the required field `eEzsigntemplateglobalSupplier`
      FieldEEzsigntemplateglobalSupplier.validateJsonElement(jsonObj.get("eEzsigntemplateglobalSupplier"));
      if (!jsonObj.get("sEzsigntemplateglobalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsigntemplateglobalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsigntemplateglobalCode").toString()));
      }
      if (!jsonObj.get("sEzsigntemplateglobalDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsigntemplateglobalDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsigntemplateglobalDescription").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsigntemplateglobalResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsigntemplateglobalResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsigntemplateglobalResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsigntemplateglobalResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsigntemplateglobalResponse>() {
           @Override
           public void write(JsonWriter out, EzsigntemplateglobalResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsigntemplateglobalResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EzsigntemplateglobalResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EzsigntemplateglobalResponse
   * @throws IOException if the JSON string is invalid with respect to EzsigntemplateglobalResponse
   */
  public static EzsigntemplateglobalResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsigntemplateglobalResponse.class);
  }

  /**
   * Convert an instance of EzsigntemplateglobalResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

