/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Ezsignformfieldgroupsigner Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-20T21:23:27.769116941Z[Etc/UTC]", comments = "Generator version: 7.10.0")
public class EzsignformfieldgroupsignerRequest {
  public static final String SERIALIZED_NAME_PKI_EZSIGNFORMFIELDGROUPSIGNER_I_D = "pkiEzsignformfieldgroupsignerID";
  @SerializedName(SERIALIZED_NAME_PKI_EZSIGNFORMFIELDGROUPSIGNER_I_D)
  @javax.annotation.Nullable
  private Integer pkiEzsignformfieldgroupsignerID;

  public static final String SERIALIZED_NAME_FKI_EZSIGNFOLDERSIGNERASSOCIATION_I_D = "fkiEzsignfoldersignerassociationID";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNFOLDERSIGNERASSOCIATION_I_D)
  @javax.annotation.Nonnull
  private Integer fkiEzsignfoldersignerassociationID;

  public EzsignformfieldgroupsignerRequest() {
  }

  public EzsignformfieldgroupsignerRequest pkiEzsignformfieldgroupsignerID(@javax.annotation.Nullable Integer pkiEzsignformfieldgroupsignerID) {
    this.pkiEzsignformfieldgroupsignerID = pkiEzsignformfieldgroupsignerID;
    return this;
  }

  /**
   * The unique ID of the Ezsignformfieldgroupsigner
   * minimum: 0
   * @return pkiEzsignformfieldgroupsignerID
   */
  @javax.annotation.Nullable
  public Integer getPkiEzsignformfieldgroupsignerID() {
    return pkiEzsignformfieldgroupsignerID;
  }

  public void setPkiEzsignformfieldgroupsignerID(@javax.annotation.Nullable Integer pkiEzsignformfieldgroupsignerID) {
    this.pkiEzsignformfieldgroupsignerID = pkiEzsignformfieldgroupsignerID;
  }


  public EzsignformfieldgroupsignerRequest fkiEzsignfoldersignerassociationID(@javax.annotation.Nonnull Integer fkiEzsignfoldersignerassociationID) {
    this.fkiEzsignfoldersignerassociationID = fkiEzsignfoldersignerassociationID;
    return this;
  }

  /**
   * The unique ID of the Ezsignfoldersignerassociation
   * minimum: 0
   * @return fkiEzsignfoldersignerassociationID
   */
  @javax.annotation.Nonnull
  public Integer getFkiEzsignfoldersignerassociationID() {
    return fkiEzsignfoldersignerassociationID;
  }

  public void setFkiEzsignfoldersignerassociationID(@javax.annotation.Nonnull Integer fkiEzsignfoldersignerassociationID) {
    this.fkiEzsignfoldersignerassociationID = fkiEzsignfoldersignerassociationID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsignformfieldgroupsignerRequest ezsignformfieldgroupsignerRequest = (EzsignformfieldgroupsignerRequest) o;
    return Objects.equals(this.pkiEzsignformfieldgroupsignerID, ezsignformfieldgroupsignerRequest.pkiEzsignformfieldgroupsignerID) &&
        Objects.equals(this.fkiEzsignfoldersignerassociationID, ezsignformfieldgroupsignerRequest.fkiEzsignfoldersignerassociationID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiEzsignformfieldgroupsignerID, fkiEzsignfoldersignerassociationID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsignformfieldgroupsignerRequest {\n");
    sb.append("    pkiEzsignformfieldgroupsignerID: ").append(toIndentedString(pkiEzsignformfieldgroupsignerID)).append("\n");
    sb.append("    fkiEzsignfoldersignerassociationID: ").append(toIndentedString(fkiEzsignfoldersignerassociationID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiEzsignformfieldgroupsignerID");
    openapiFields.add("fkiEzsignfoldersignerassociationID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fkiEzsignfoldersignerassociationID");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EzsignformfieldgroupsignerRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EzsignformfieldgroupsignerRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsignformfieldgroupsignerRequest is not found in the empty JSON string", EzsignformfieldgroupsignerRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EzsignformfieldgroupsignerRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsignformfieldgroupsignerRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EzsignformfieldgroupsignerRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsignformfieldgroupsignerRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsignformfieldgroupsignerRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsignformfieldgroupsignerRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsignformfieldgroupsignerRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsignformfieldgroupsignerRequest>() {
           @Override
           public void write(JsonWriter out, EzsignformfieldgroupsignerRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsignformfieldgroupsignerRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EzsignformfieldgroupsignerRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EzsignformfieldgroupsignerRequest
   * @throws IOException if the JSON string is invalid with respect to EzsignformfieldgroupsignerRequest
   */
  public static EzsignformfieldgroupsignerRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsignformfieldgroupsignerRequest.class);
  }

  /**
   * Convert an instance of EzsignformfieldgroupsignerRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

