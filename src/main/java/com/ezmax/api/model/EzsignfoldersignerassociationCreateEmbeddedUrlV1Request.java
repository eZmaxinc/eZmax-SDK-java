/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * Request for POST /1/object/ezsignfoldersignerassociation/createEmbeddedUrl
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-16T21:39:53.290322577Z[Etc/UTC]", comments = "Generator version: 7.10.0")
public class EzsignfoldersignerassociationCreateEmbeddedUrlV1Request {
  public static final String SERIALIZED_NAME_S_RETURN_URL = "sReturnUrl";
  @SerializedName(SERIALIZED_NAME_S_RETURN_URL)
  @javax.annotation.Nullable
  private String sReturnUrl;

  public static final String SERIALIZED_NAME_S_IFRAMEDOMAIN = "sIframedomain";
  @SerializedName(SERIALIZED_NAME_S_IFRAMEDOMAIN)
  @javax.annotation.Nullable
  private String sIframedomain;

  public static final String SERIALIZED_NAME_B_IS_IFRAME = "bIsIframe";
  @SerializedName(SERIALIZED_NAME_B_IS_IFRAME)
  @javax.annotation.Nullable
  private Boolean bIsIframe;

  public EzsignfoldersignerassociationCreateEmbeddedUrlV1Request() {
  }

  public EzsignfoldersignerassociationCreateEmbeddedUrlV1Request sReturnUrl(@javax.annotation.Nullable String sReturnUrl) {
    this.sReturnUrl = sReturnUrl;
    return this;
  }

  /**
   * The return Url to redirect after the signing is completed  **Warning** Due to the potential for Ezsignsigners to cancel redirection, close their browser post-signing, or spoof the landing URL, it&#39;s advisable not to solely depend on the sReturnUrl for accurate status within your integration.  Once the Ezsignsigner finishes, they are directed back to your application. Your application can retain transaction state details by either storing data in a cookie or incorporating query parameters in the sReturnUrl. For example: https://www.example.com/sReturnUrl?sSessionID&#x3D;ABC123  The actual url that will be called will have an extra url parameter appended to give details about the process. The possible values are listed in the table below. For example: https://www.example.com/sReturnUrl?sSessionID&#x3D;ABC123&amp;eEzsignEvent&#x3D;CompletedEzsignfolder   |**Query parameters appended**| |---| |eEzsignEvent|   |**eEzsignEvent**|**Description**| |---|---| |SessionTimeout|The session timed out| |SessionLogout|The Ezsignsigner signed out| |DeclinedTermOfUse|The Ezsignsigner refused the terms| |DeclinedSign|The Ezsignsigner refused to sign| |Reassigned|The Ezsignsigner reassigned his signatures to someone else| |CompletedStep|The Ezsignsigner completed his step. There is other signatures to complete the Ezsigndocument| |CompletedEzsignfolder|The Ezsignfolder is completed. Everyone signed their signatures|
   * @return sReturnUrl
   */
  @javax.annotation.Nullable
  public String getsReturnUrl() {
    return sReturnUrl;
  }

  public void setsReturnUrl(@javax.annotation.Nullable String sReturnUrl) {
    this.sReturnUrl = sReturnUrl;
  }


  public EzsignfoldersignerassociationCreateEmbeddedUrlV1Request sIframedomain(@javax.annotation.Nullable String sIframedomain) {
    this.sIframedomain = sIframedomain;
    return this;
  }

  /**
   * Domain protection for the iFrame
   * @return sIframedomain
   */
  @javax.annotation.Nullable
  public String getsIframedomain() {
    return sIframedomain;
  }

  public void setsIframedomain(@javax.annotation.Nullable String sIframedomain) {
    this.sIframedomain = sIframedomain;
  }


  public EzsignfoldersignerassociationCreateEmbeddedUrlV1Request bIsIframe(@javax.annotation.Nullable Boolean bIsIframe) {
    this.bIsIframe = bIsIframe;
    return this;
  }

  /**
   * Whether the url would be in an iFrame or not
   * @return bIsIframe
   */
  @javax.annotation.Nullable
  public Boolean getbIsIframe() {
    return bIsIframe;
  }

  public void setbIsIframe(@javax.annotation.Nullable Boolean bIsIframe) {
    this.bIsIframe = bIsIframe;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsignfoldersignerassociationCreateEmbeddedUrlV1Request ezsignfoldersignerassociationCreateEmbeddedUrlV1Request = (EzsignfoldersignerassociationCreateEmbeddedUrlV1Request) o;
    return Objects.equals(this.sReturnUrl, ezsignfoldersignerassociationCreateEmbeddedUrlV1Request.sReturnUrl) &&
        Objects.equals(this.sIframedomain, ezsignfoldersignerassociationCreateEmbeddedUrlV1Request.sIframedomain) &&
        Objects.equals(this.bIsIframe, ezsignfoldersignerassociationCreateEmbeddedUrlV1Request.bIsIframe);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sReturnUrl, sIframedomain, bIsIframe);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsignfoldersignerassociationCreateEmbeddedUrlV1Request {\n");
    sb.append("    sReturnUrl: ").append(toIndentedString(sReturnUrl)).append("\n");
    sb.append("    sIframedomain: ").append(toIndentedString(sIframedomain)).append("\n");
    sb.append("    bIsIframe: ").append(toIndentedString(bIsIframe)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sReturnUrl");
    openapiFields.add("sIframedomain");
    openapiFields.add("bIsIframe");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EzsignfoldersignerassociationCreateEmbeddedUrlV1Request
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EzsignfoldersignerassociationCreateEmbeddedUrlV1Request.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsignfoldersignerassociationCreateEmbeddedUrlV1Request is not found in the empty JSON string", EzsignfoldersignerassociationCreateEmbeddedUrlV1Request.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EzsignfoldersignerassociationCreateEmbeddedUrlV1Request.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsignfoldersignerassociationCreateEmbeddedUrlV1Request` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("sReturnUrl") != null && !jsonObj.get("sReturnUrl").isJsonNull()) && !jsonObj.get("sReturnUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sReturnUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sReturnUrl").toString()));
      }
      if ((jsonObj.get("sIframedomain") != null && !jsonObj.get("sIframedomain").isJsonNull()) && !jsonObj.get("sIframedomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sIframedomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sIframedomain").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsignfoldersignerassociationCreateEmbeddedUrlV1Request.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsignfoldersignerassociationCreateEmbeddedUrlV1Request' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsignfoldersignerassociationCreateEmbeddedUrlV1Request> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsignfoldersignerassociationCreateEmbeddedUrlV1Request.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsignfoldersignerassociationCreateEmbeddedUrlV1Request>() {
           @Override
           public void write(JsonWriter out, EzsignfoldersignerassociationCreateEmbeddedUrlV1Request value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsignfoldersignerassociationCreateEmbeddedUrlV1Request read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EzsignfoldersignerassociationCreateEmbeddedUrlV1Request given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EzsignfoldersignerassociationCreateEmbeddedUrlV1Request
   * @throws IOException if the JSON string is invalid with respect to EzsignfoldersignerassociationCreateEmbeddedUrlV1Request
   */
  public static EzsignfoldersignerassociationCreateEmbeddedUrlV1Request fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsignfoldersignerassociationCreateEmbeddedUrlV1Request.class);
  }

  /**
   * Convert an instance of EzsignfoldersignerassociationCreateEmbeddedUrlV1Request to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

