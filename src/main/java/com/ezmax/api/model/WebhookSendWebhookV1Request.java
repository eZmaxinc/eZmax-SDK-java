/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.CustomEWebhookEzsignevent;
import com.ezmax.api.model.FieldEWebhookManagementevent;
import com.ezmax.api.model.FieldEWebhookModule;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * Request for POST /1/object/webhook/sendWebhook
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-29T18:53:15.033493285Z[Etc/UTC]", comments = "Generator version: 7.11.0")
public class WebhookSendWebhookV1Request {
  public static final String SERIALIZED_NAME_E_WEBHOOK_MODULE = "eWebhookModule";
  @SerializedName(SERIALIZED_NAME_E_WEBHOOK_MODULE)
  @javax.annotation.Nonnull
  private FieldEWebhookModule eWebhookModule;

  public static final String SERIALIZED_NAME_E_WEBHOOK_EZSIGNEVENT = "eWebhookEzsignevent";
  @SerializedName(SERIALIZED_NAME_E_WEBHOOK_EZSIGNEVENT)
  @javax.annotation.Nullable
  private CustomEWebhookEzsignevent eWebhookEzsignevent;

  public static final String SERIALIZED_NAME_E_WEBHOOK_MANAGEMENTEVENT = "eWebhookManagementevent";
  @SerializedName(SERIALIZED_NAME_E_WEBHOOK_MANAGEMENTEVENT)
  @javax.annotation.Nullable
  private FieldEWebhookManagementevent eWebhookManagementevent;

  public static final String SERIALIZED_NAME_FKI_EZSIGNFOLDER_I_D = "fkiEzsignfolderID";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNFOLDER_I_D)
  @javax.annotation.Nullable
  private Integer fkiEzsignfolderID;

  public static final String SERIALIZED_NAME_FKI_EZSIGNDOCUMENT_I_D = "fkiEzsigndocumentID";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNDOCUMENT_I_D)
  @javax.annotation.Nullable
  private Integer fkiEzsigndocumentID;

  public static final String SERIALIZED_NAME_FKI_EZSIGNSIGNER_I_D = "fkiEzsignsignerID";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNSIGNER_I_D)
  @javax.annotation.Nullable
  private Integer fkiEzsignsignerID;

  public static final String SERIALIZED_NAME_FKI_USER_I_D = "fkiUserID";
  @SerializedName(SERIALIZED_NAME_FKI_USER_I_D)
  @javax.annotation.Nullable
  private Integer fkiUserID;

  public static final String SERIALIZED_NAME_FKI_USERSTAGED_I_D = "fkiUserstagedID";
  @SerializedName(SERIALIZED_NAME_FKI_USERSTAGED_I_D)
  @javax.annotation.Nullable
  private Integer fkiUserstagedID;

  public WebhookSendWebhookV1Request() {
  }

  public WebhookSendWebhookV1Request eWebhookModule(@javax.annotation.Nonnull FieldEWebhookModule eWebhookModule) {
    this.eWebhookModule = eWebhookModule;
    return this;
  }

  /**
   * Get eWebhookModule
   * @return eWebhookModule
   */
  @javax.annotation.Nonnull
  public FieldEWebhookModule geteWebhookModule() {
    return eWebhookModule;
  }

  public void seteWebhookModule(@javax.annotation.Nonnull FieldEWebhookModule eWebhookModule) {
    this.eWebhookModule = eWebhookModule;
  }


  public WebhookSendWebhookV1Request eWebhookEzsignevent(@javax.annotation.Nullable CustomEWebhookEzsignevent eWebhookEzsignevent) {
    this.eWebhookEzsignevent = eWebhookEzsignevent;
    return this;
  }

  /**
   * Get eWebhookEzsignevent
   * @return eWebhookEzsignevent
   */
  @javax.annotation.Nullable
  public CustomEWebhookEzsignevent geteWebhookEzsignevent() {
    return eWebhookEzsignevent;
  }

  public void seteWebhookEzsignevent(@javax.annotation.Nullable CustomEWebhookEzsignevent eWebhookEzsignevent) {
    this.eWebhookEzsignevent = eWebhookEzsignevent;
  }


  public WebhookSendWebhookV1Request eWebhookManagementevent(@javax.annotation.Nullable FieldEWebhookManagementevent eWebhookManagementevent) {
    this.eWebhookManagementevent = eWebhookManagementevent;
    return this;
  }

  /**
   * Get eWebhookManagementevent
   * @return eWebhookManagementevent
   */
  @javax.annotation.Nullable
  public FieldEWebhookManagementevent geteWebhookManagementevent() {
    return eWebhookManagementevent;
  }

  public void seteWebhookManagementevent(@javax.annotation.Nullable FieldEWebhookManagementevent eWebhookManagementevent) {
    this.eWebhookManagementevent = eWebhookManagementevent;
  }


  public WebhookSendWebhookV1Request fkiEzsignfolderID(@javax.annotation.Nullable Integer fkiEzsignfolderID) {
    this.fkiEzsignfolderID = fkiEzsignfolderID;
    return this;
  }

  /**
   * The unique ID of the Ezsignfolder
   * minimum: 0
   * @return fkiEzsignfolderID
   */
  @javax.annotation.Nullable
  public Integer getFkiEzsignfolderID() {
    return fkiEzsignfolderID;
  }

  public void setFkiEzsignfolderID(@javax.annotation.Nullable Integer fkiEzsignfolderID) {
    this.fkiEzsignfolderID = fkiEzsignfolderID;
  }


  public WebhookSendWebhookV1Request fkiEzsigndocumentID(@javax.annotation.Nullable Integer fkiEzsigndocumentID) {
    this.fkiEzsigndocumentID = fkiEzsigndocumentID;
    return this;
  }

  /**
   * The unique ID of the Ezsigndocument
   * minimum: 0
   * @return fkiEzsigndocumentID
   */
  @javax.annotation.Nullable
  public Integer getFkiEzsigndocumentID() {
    return fkiEzsigndocumentID;
  }

  public void setFkiEzsigndocumentID(@javax.annotation.Nullable Integer fkiEzsigndocumentID) {
    this.fkiEzsigndocumentID = fkiEzsigndocumentID;
  }


  public WebhookSendWebhookV1Request fkiEzsignsignerID(@javax.annotation.Nullable Integer fkiEzsignsignerID) {
    this.fkiEzsignsignerID = fkiEzsignsignerID;
    return this;
  }

  /**
   * The unique ID of the Ezsignsigner
   * minimum: 0
   * @return fkiEzsignsignerID
   */
  @javax.annotation.Nullable
  public Integer getFkiEzsignsignerID() {
    return fkiEzsignsignerID;
  }

  public void setFkiEzsignsignerID(@javax.annotation.Nullable Integer fkiEzsignsignerID) {
    this.fkiEzsignsignerID = fkiEzsignsignerID;
  }


  public WebhookSendWebhookV1Request fkiUserID(@javax.annotation.Nullable Integer fkiUserID) {
    this.fkiUserID = fkiUserID;
    return this;
  }

  /**
   * The unique ID of the User
   * minimum: 0
   * @return fkiUserID
   */
  @javax.annotation.Nullable
  public Integer getFkiUserID() {
    return fkiUserID;
  }

  public void setFkiUserID(@javax.annotation.Nullable Integer fkiUserID) {
    this.fkiUserID = fkiUserID;
  }


  public WebhookSendWebhookV1Request fkiUserstagedID(@javax.annotation.Nullable Integer fkiUserstagedID) {
    this.fkiUserstagedID = fkiUserstagedID;
    return this;
  }

  /**
   * The unique ID of the Userstaged
   * minimum: 1
   * maximum: 65535
   * @return fkiUserstagedID
   */
  @javax.annotation.Nullable
  public Integer getFkiUserstagedID() {
    return fkiUserstagedID;
  }

  public void setFkiUserstagedID(@javax.annotation.Nullable Integer fkiUserstagedID) {
    this.fkiUserstagedID = fkiUserstagedID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookSendWebhookV1Request webhookSendWebhookV1Request = (WebhookSendWebhookV1Request) o;
    return Objects.equals(this.eWebhookModule, webhookSendWebhookV1Request.eWebhookModule) &&
        Objects.equals(this.eWebhookEzsignevent, webhookSendWebhookV1Request.eWebhookEzsignevent) &&
        Objects.equals(this.eWebhookManagementevent, webhookSendWebhookV1Request.eWebhookManagementevent) &&
        Objects.equals(this.fkiEzsignfolderID, webhookSendWebhookV1Request.fkiEzsignfolderID) &&
        Objects.equals(this.fkiEzsigndocumentID, webhookSendWebhookV1Request.fkiEzsigndocumentID) &&
        Objects.equals(this.fkiEzsignsignerID, webhookSendWebhookV1Request.fkiEzsignsignerID) &&
        Objects.equals(this.fkiUserID, webhookSendWebhookV1Request.fkiUserID) &&
        Objects.equals(this.fkiUserstagedID, webhookSendWebhookV1Request.fkiUserstagedID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eWebhookModule, eWebhookEzsignevent, eWebhookManagementevent, fkiEzsignfolderID, fkiEzsigndocumentID, fkiEzsignsignerID, fkiUserID, fkiUserstagedID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookSendWebhookV1Request {\n");
    sb.append("    eWebhookModule: ").append(toIndentedString(eWebhookModule)).append("\n");
    sb.append("    eWebhookEzsignevent: ").append(toIndentedString(eWebhookEzsignevent)).append("\n");
    sb.append("    eWebhookManagementevent: ").append(toIndentedString(eWebhookManagementevent)).append("\n");
    sb.append("    fkiEzsignfolderID: ").append(toIndentedString(fkiEzsignfolderID)).append("\n");
    sb.append("    fkiEzsigndocumentID: ").append(toIndentedString(fkiEzsigndocumentID)).append("\n");
    sb.append("    fkiEzsignsignerID: ").append(toIndentedString(fkiEzsignsignerID)).append("\n");
    sb.append("    fkiUserID: ").append(toIndentedString(fkiUserID)).append("\n");
    sb.append("    fkiUserstagedID: ").append(toIndentedString(fkiUserstagedID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eWebhookModule");
    openapiFields.add("eWebhookEzsignevent");
    openapiFields.add("eWebhookManagementevent");
    openapiFields.add("fkiEzsignfolderID");
    openapiFields.add("fkiEzsigndocumentID");
    openapiFields.add("fkiEzsignsignerID");
    openapiFields.add("fkiUserID");
    openapiFields.add("fkiUserstagedID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("eWebhookModule");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebhookSendWebhookV1Request
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebhookSendWebhookV1Request.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookSendWebhookV1Request is not found in the empty JSON string", WebhookSendWebhookV1Request.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebhookSendWebhookV1Request.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookSendWebhookV1Request` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebhookSendWebhookV1Request.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `eWebhookModule`
      FieldEWebhookModule.validateJsonElement(jsonObj.get("eWebhookModule"));
      // validate the optional field `eWebhookEzsignevent`
      if (jsonObj.get("eWebhookEzsignevent") != null && !jsonObj.get("eWebhookEzsignevent").isJsonNull()) {
        CustomEWebhookEzsignevent.validateJsonElement(jsonObj.get("eWebhookEzsignevent"));
      }
      // validate the optional field `eWebhookManagementevent`
      if (jsonObj.get("eWebhookManagementevent") != null && !jsonObj.get("eWebhookManagementevent").isJsonNull()) {
        FieldEWebhookManagementevent.validateJsonElement(jsonObj.get("eWebhookManagementevent"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookSendWebhookV1Request.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookSendWebhookV1Request' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookSendWebhookV1Request> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookSendWebhookV1Request.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookSendWebhookV1Request>() {
           @Override
           public void write(JsonWriter out, WebhookSendWebhookV1Request value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookSendWebhookV1Request read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebhookSendWebhookV1Request given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebhookSendWebhookV1Request
   * @throws IOException if the JSON string is invalid with respect to WebhookSendWebhookV1Request
   */
  public static WebhookSendWebhookV1Request fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookSendWebhookV1Request.class);
  }

  /**
   * Convert an instance of WebhookSendWebhookV1Request to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

