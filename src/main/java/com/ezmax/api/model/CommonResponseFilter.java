/*
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.3
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Definition of Filters for getList
 */
@ApiModel(description = "Definition of Filters for getList")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-12-17T16:52:01.309038Z[Etc/UTC]")
public class CommonResponseFilter {
  public static final String SERIALIZED_NAME_A_AUTO_TYPE = "a_AutoType";
  @SerializedName(SERIALIZED_NAME_A_AUTO_TYPE)
  private Map<String, String> aAutoType = null;

  public static final String SERIALIZED_NAME_A_ENUM = "a_Enum";
  @SerializedName(SERIALIZED_NAME_A_ENUM)
  private Map<String, Map<String, String>> aEnum = null;

  public CommonResponseFilter() { 
  }

  public CommonResponseFilter aAutoType(Map<String, String> aAutoType) {
    
    this.aAutoType = aAutoType;
    return this;
  }

  public CommonResponseFilter putAAutoTypeItem(String key, String aAutoTypeItem) {
    if (this.aAutoType == null) {
      this.aAutoType = new HashMap<String, String>();
    }
    this.aAutoType.put(key, aAutoTypeItem);
    return this;
  }

   /**
   * List of filters that can be used in *sFilter* (Automatic types)
   * @return aAutoType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of filters that can be used in *sFilter* (Automatic types)")

  public Map<String, String> getaAutoType() {
    return aAutoType;
  }


  public void setaAutoType(Map<String, String> aAutoType) {
    this.aAutoType = aAutoType;
  }


  public CommonResponseFilter aEnum(Map<String, Map<String, String>> aEnum) {
    
    this.aEnum = aEnum;
    return this;
  }

  public CommonResponseFilter putAEnumItem(String key, Map<String, String> aEnumItem) {
    if (this.aEnum == null) {
      this.aEnum = new HashMap<String, Map<String, String>>();
    }
    this.aEnum.put(key, aEnumItem);
    return this;
  }

   /**
   * List of filters that can be used in *sFilter* (Enum types)
   * @return aEnum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of filters that can be used in *sFilter* (Enum types)")

  public Map<String, Map<String, String>> getaEnum() {
    return aEnum;
  }


  public void setaEnum(Map<String, Map<String, String>> aEnum) {
    this.aEnum = aEnum;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommonResponseFilter commonResponseFilter = (CommonResponseFilter) o;
    return Objects.equals(this.aAutoType, commonResponseFilter.aAutoType) &&
        Objects.equals(this.aEnum, commonResponseFilter.aEnum);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aAutoType, aEnum);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommonResponseFilter {\n");
    sb.append("    aAutoType: ").append(toIndentedString(aAutoType)).append("\n");
    sb.append("    aEnum: ").append(toIndentedString(aEnum)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

