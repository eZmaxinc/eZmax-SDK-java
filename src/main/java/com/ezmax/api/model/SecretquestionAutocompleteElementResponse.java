/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Secretquestion AutocompleteElement Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-04T21:44:04.165556308Z[Etc/UTC]", comments = "Generator version: 7.11.0")
public class SecretquestionAutocompleteElementResponse {
  public static final String SERIALIZED_NAME_S_SECRETQUESTION_TEXT_X = "sSecretquestionTextX";
  @SerializedName(SERIALIZED_NAME_S_SECRETQUESTION_TEXT_X)
  @javax.annotation.Nonnull
  private String sSecretquestionTextX;

  public static final String SERIALIZED_NAME_PKI_SECRETQUESTION_I_D = "pkiSecretquestionID";
  @SerializedName(SERIALIZED_NAME_PKI_SECRETQUESTION_I_D)
  @javax.annotation.Nonnull
  private Integer pkiSecretquestionID;

  public static final String SERIALIZED_NAME_B_SECRETQUESTION_ISACTIVE = "bSecretquestionIsactive";
  @SerializedName(SERIALIZED_NAME_B_SECRETQUESTION_ISACTIVE)
  @javax.annotation.Nonnull
  private Boolean bSecretquestionIsactive;

  public SecretquestionAutocompleteElementResponse() {
  }

  public SecretquestionAutocompleteElementResponse sSecretquestionTextX(@javax.annotation.Nonnull String sSecretquestionTextX) {
    this.sSecretquestionTextX = sSecretquestionTextX;
    return this;
  }

  /**
   * The text of the Secretquestion in the language of the requester
   * @return sSecretquestionTextX
   */
  @javax.annotation.Nonnull
  public String getsSecretquestionTextX() {
    return sSecretquestionTextX;
  }

  public void setsSecretquestionTextX(@javax.annotation.Nonnull String sSecretquestionTextX) {
    this.sSecretquestionTextX = sSecretquestionTextX;
  }


  public SecretquestionAutocompleteElementResponse pkiSecretquestionID(@javax.annotation.Nonnull Integer pkiSecretquestionID) {
    this.pkiSecretquestionID = pkiSecretquestionID;
    return this;
  }

  /**
   * The unique ID of the Secretquestion.  Valid values:  |Value|Description| |-|-| |1|The name of the hospital in which you were born| |2|The name of your grade school| |3|The last name of your favorite teacher| |4|Your favorite sports team| |5|Your favorite TV show| |6|Your favorite movie| |7|The name of the street on which you grew up| |8|The name of your first employer| |9|Your first car| |10|Your favorite food| |11|The name of your first pet| |12|Favorite musician/band| |13|What instrument you play| |14|Your father&#39;s middle name| |15|Your mother&#39;s maiden name| |16|Name of your eldest child| |17|Your spouse&#39;s middle name| |18|Favorite restaurant| |19|Childhood nickname| |20|Favorite vacation destination| |21|Your boat&#39;s name| |22|Date of Birth (YYYY-MM-DD)| |22|Secret Code| |22|Your reference code|
   * minimum: 0
   * @return pkiSecretquestionID
   */
  @javax.annotation.Nonnull
  public Integer getPkiSecretquestionID() {
    return pkiSecretquestionID;
  }

  public void setPkiSecretquestionID(@javax.annotation.Nonnull Integer pkiSecretquestionID) {
    this.pkiSecretquestionID = pkiSecretquestionID;
  }


  public SecretquestionAutocompleteElementResponse bSecretquestionIsactive(@javax.annotation.Nonnull Boolean bSecretquestionIsactive) {
    this.bSecretquestionIsactive = bSecretquestionIsactive;
    return this;
  }

  /**
   * Whether the Secretquestion is active or not
   * @return bSecretquestionIsactive
   */
  @javax.annotation.Nonnull
  public Boolean getbSecretquestionIsactive() {
    return bSecretquestionIsactive;
  }

  public void setbSecretquestionIsactive(@javax.annotation.Nonnull Boolean bSecretquestionIsactive) {
    this.bSecretquestionIsactive = bSecretquestionIsactive;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SecretquestionAutocompleteElementResponse secretquestionAutocompleteElementResponse = (SecretquestionAutocompleteElementResponse) o;
    return Objects.equals(this.sSecretquestionTextX, secretquestionAutocompleteElementResponse.sSecretquestionTextX) &&
        Objects.equals(this.pkiSecretquestionID, secretquestionAutocompleteElementResponse.pkiSecretquestionID) &&
        Objects.equals(this.bSecretquestionIsactive, secretquestionAutocompleteElementResponse.bSecretquestionIsactive);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sSecretquestionTextX, pkiSecretquestionID, bSecretquestionIsactive);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SecretquestionAutocompleteElementResponse {\n");
    sb.append("    sSecretquestionTextX: ").append(toIndentedString(sSecretquestionTextX)).append("\n");
    sb.append("    pkiSecretquestionID: ").append(toIndentedString(pkiSecretquestionID)).append("\n");
    sb.append("    bSecretquestionIsactive: ").append(toIndentedString(bSecretquestionIsactive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sSecretquestionTextX");
    openapiFields.add("pkiSecretquestionID");
    openapiFields.add("bSecretquestionIsactive");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sSecretquestionTextX");
    openapiRequiredFields.add("pkiSecretquestionID");
    openapiRequiredFields.add("bSecretquestionIsactive");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SecretquestionAutocompleteElementResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SecretquestionAutocompleteElementResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SecretquestionAutocompleteElementResponse is not found in the empty JSON string", SecretquestionAutocompleteElementResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SecretquestionAutocompleteElementResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SecretquestionAutocompleteElementResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SecretquestionAutocompleteElementResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("sSecretquestionTextX").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sSecretquestionTextX` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sSecretquestionTextX").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SecretquestionAutocompleteElementResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SecretquestionAutocompleteElementResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SecretquestionAutocompleteElementResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SecretquestionAutocompleteElementResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SecretquestionAutocompleteElementResponse>() {
           @Override
           public void write(JsonWriter out, SecretquestionAutocompleteElementResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SecretquestionAutocompleteElementResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SecretquestionAutocompleteElementResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SecretquestionAutocompleteElementResponse
   * @throws IOException if the JSON string is invalid with respect to SecretquestionAutocompleteElementResponse
   */
  public static SecretquestionAutocompleteElementResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SecretquestionAutocompleteElementResponse.class);
  }

  /**
   * Convert an instance of SecretquestionAutocompleteElementResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

