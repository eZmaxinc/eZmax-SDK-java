/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.ezmax.api.model.ActivesessionResponseCompoundApikey;
import com.ezmax.api.model.ActivesessionResponseCompoundUser;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * ActivesessionResponseCompoundAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-22T13:32:26.779643241Z[Etc/UTC]")
public class ActivesessionResponseCompoundAllOf {
  public static final String SERIALIZED_NAME_A_PKI_PERMISSION_I_D = "a_pkiPermissionID";
  @SerializedName(SERIALIZED_NAME_A_PKI_PERMISSION_I_D)
  private List<Integer> aPkiPermissionID = new ArrayList<>();

  public static final String SERIALIZED_NAME_OBJ_USER_REAL = "objUserReal";
  @SerializedName(SERIALIZED_NAME_OBJ_USER_REAL)
  private ActivesessionResponseCompoundUser objUserReal;

  public static final String SERIALIZED_NAME_OBJ_USER_CLONED = "objUserCloned";
  @SerializedName(SERIALIZED_NAME_OBJ_USER_CLONED)
  private ActivesessionResponseCompoundUser objUserCloned;

  public static final String SERIALIZED_NAME_OBJ_APIKEY = "objApikey";
  @SerializedName(SERIALIZED_NAME_OBJ_APIKEY)
  private ActivesessionResponseCompoundApikey objApikey;

  public static final String SERIALIZED_NAME_A_E_MODULE_INTERNALNAME = "a_eModuleInternalname";
  @SerializedName(SERIALIZED_NAME_A_E_MODULE_INTERNALNAME)
  private List<String> aEModuleInternalname = new ArrayList<>();

  public ActivesessionResponseCompoundAllOf() {
  }

  public ActivesessionResponseCompoundAllOf aPkiPermissionID(List<Integer> aPkiPermissionID) {
    
    this.aPkiPermissionID = aPkiPermissionID;
    return this;
  }

  public ActivesessionResponseCompoundAllOf addAPkiPermissionIDItem(Integer aPkiPermissionIDItem) {
    if (this.aPkiPermissionID == null) {
      this.aPkiPermissionID = new ArrayList<>();
    }
    this.aPkiPermissionID.add(aPkiPermissionIDItem);
    return this;
  }

   /**
   * An array of permissions granted to the user or api key
   * @return aPkiPermissionID
  **/
  @javax.annotation.Nonnull
  public List<Integer> getaPkiPermissionID() {
    return aPkiPermissionID;
  }


  public void setaPkiPermissionID(List<Integer> aPkiPermissionID) {
    this.aPkiPermissionID = aPkiPermissionID;
  }


  public ActivesessionResponseCompoundAllOf objUserReal(ActivesessionResponseCompoundUser objUserReal) {
    
    this.objUserReal = objUserReal;
    return this;
  }

   /**
   * Get objUserReal
   * @return objUserReal
  **/
  @javax.annotation.Nonnull
  public ActivesessionResponseCompoundUser getObjUserReal() {
    return objUserReal;
  }


  public void setObjUserReal(ActivesessionResponseCompoundUser objUserReal) {
    this.objUserReal = objUserReal;
  }


  public ActivesessionResponseCompoundAllOf objUserCloned(ActivesessionResponseCompoundUser objUserCloned) {
    
    this.objUserCloned = objUserCloned;
    return this;
  }

   /**
   * Get objUserCloned
   * @return objUserCloned
  **/
  @javax.annotation.Nullable
  public ActivesessionResponseCompoundUser getObjUserCloned() {
    return objUserCloned;
  }


  public void setObjUserCloned(ActivesessionResponseCompoundUser objUserCloned) {
    this.objUserCloned = objUserCloned;
  }


  public ActivesessionResponseCompoundAllOf objApikey(ActivesessionResponseCompoundApikey objApikey) {
    
    this.objApikey = objApikey;
    return this;
  }

   /**
   * Get objApikey
   * @return objApikey
  **/
  @javax.annotation.Nullable
  public ActivesessionResponseCompoundApikey getObjApikey() {
    return objApikey;
  }


  public void setObjApikey(ActivesessionResponseCompoundApikey objApikey) {
    this.objApikey = objApikey;
  }


  public ActivesessionResponseCompoundAllOf aEModuleInternalname(List<String> aEModuleInternalname) {
    
    this.aEModuleInternalname = aEModuleInternalname;
    return this;
  }

  public ActivesessionResponseCompoundAllOf addAEModuleInternalnameItem(String aEModuleInternalnameItem) {
    if (this.aEModuleInternalname == null) {
      this.aEModuleInternalname = new ArrayList<>();
    }
    this.aEModuleInternalname.add(aEModuleInternalnameItem);
    return this;
  }

   /**
   * An Array of Registered modules.  These are the modules that are Licensed to be used by the User or the API Key.
   * @return aEModuleInternalname
  **/
  @javax.annotation.Nonnull
  public List<String> getaEModuleInternalname() {
    return aEModuleInternalname;
  }


  public void setaEModuleInternalname(List<String> aEModuleInternalname) {
    this.aEModuleInternalname = aEModuleInternalname;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActivesessionResponseCompoundAllOf activesessionResponseCompoundAllOf = (ActivesessionResponseCompoundAllOf) o;
    return Objects.equals(this.aPkiPermissionID, activesessionResponseCompoundAllOf.aPkiPermissionID) &&
        Objects.equals(this.objUserReal, activesessionResponseCompoundAllOf.objUserReal) &&
        Objects.equals(this.objUserCloned, activesessionResponseCompoundAllOf.objUserCloned) &&
        Objects.equals(this.objApikey, activesessionResponseCompoundAllOf.objApikey) &&
        Objects.equals(this.aEModuleInternalname, activesessionResponseCompoundAllOf.aEModuleInternalname);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aPkiPermissionID, objUserReal, objUserCloned, objApikey, aEModuleInternalname);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActivesessionResponseCompoundAllOf {\n");
    sb.append("    aPkiPermissionID: ").append(toIndentedString(aPkiPermissionID)).append("\n");
    sb.append("    objUserReal: ").append(toIndentedString(objUserReal)).append("\n");
    sb.append("    objUserCloned: ").append(toIndentedString(objUserCloned)).append("\n");
    sb.append("    objApikey: ").append(toIndentedString(objApikey)).append("\n");
    sb.append("    aEModuleInternalname: ").append(toIndentedString(aEModuleInternalname)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("a_pkiPermissionID");
    openapiFields.add("objUserReal");
    openapiFields.add("objUserCloned");
    openapiFields.add("objApikey");
    openapiFields.add("a_eModuleInternalname");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("a_pkiPermissionID");
    openapiRequiredFields.add("objUserReal");
    openapiRequiredFields.add("a_eModuleInternalname");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ActivesessionResponseCompoundAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ActivesessionResponseCompoundAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActivesessionResponseCompoundAllOf is not found in the empty JSON string", ActivesessionResponseCompoundAllOf.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ActivesessionResponseCompoundAllOf.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActivesessionResponseCompoundAllOf` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ActivesessionResponseCompoundAllOf.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("a_pkiPermissionID") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("a_pkiPermissionID").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_pkiPermissionID` to be an array in the JSON string but got `%s`", jsonObj.get("a_pkiPermissionID").toString()));
      }
      // validate the required field `objUserReal`
      ActivesessionResponseCompoundUser.validateJsonObject(jsonObj.getAsJsonObject("objUserReal"));
      // validate the optional field `objUserCloned`
      if (jsonObj.get("objUserCloned") != null && !jsonObj.get("objUserCloned").isJsonNull()) {
        ActivesessionResponseCompoundUser.validateJsonObject(jsonObj.getAsJsonObject("objUserCloned"));
      }
      // validate the optional field `objApikey`
      if (jsonObj.get("objApikey") != null && !jsonObj.get("objApikey").isJsonNull()) {
        ActivesessionResponseCompoundApikey.validateJsonObject(jsonObj.getAsJsonObject("objApikey"));
      }
      // ensure the required json array is present
      if (jsonObj.get("a_eModuleInternalname") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("a_eModuleInternalname").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_eModuleInternalname` to be an array in the JSON string but got `%s`", jsonObj.get("a_eModuleInternalname").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActivesessionResponseCompoundAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActivesessionResponseCompoundAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActivesessionResponseCompoundAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActivesessionResponseCompoundAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<ActivesessionResponseCompoundAllOf>() {
           @Override
           public void write(JsonWriter out, ActivesessionResponseCompoundAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActivesessionResponseCompoundAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ActivesessionResponseCompoundAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ActivesessionResponseCompoundAllOf
  * @throws IOException if the JSON string is invalid with respect to ActivesessionResponseCompoundAllOf
  */
  public static ActivesessionResponseCompoundAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActivesessionResponseCompoundAllOf.class);
  }

 /**
  * Convert an instance of ActivesessionResponseCompoundAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

