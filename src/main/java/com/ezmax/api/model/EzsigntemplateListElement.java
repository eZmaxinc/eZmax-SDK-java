/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Ezsigntemplate List Element
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-29T16:57:52.082381355Z[Etc/UTC]")
public class EzsigntemplateListElement {
  public static final String SERIALIZED_NAME_PKI_EZSIGNTEMPLATE_I_D = "pkiEzsigntemplateID";
  @SerializedName(SERIALIZED_NAME_PKI_EZSIGNTEMPLATE_I_D)
  private Integer pkiEzsigntemplateID;

  public static final String SERIALIZED_NAME_FKI_EZSIGNFOLDERTYPE_I_D = "fkiEzsignfoldertypeID";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNFOLDERTYPE_I_D)
  private Integer fkiEzsignfoldertypeID;

  public static final String SERIALIZED_NAME_FKI_LANGUAGE_I_D = "fkiLanguageID";
  @SerializedName(SERIALIZED_NAME_FKI_LANGUAGE_I_D)
  private Integer fkiLanguageID;

  public static final String SERIALIZED_NAME_S_EZSIGNTEMPLATE_DESCRIPTION = "sEzsigntemplateDescription";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNTEMPLATE_DESCRIPTION)
  private String sEzsigntemplateDescription;

  public static final String SERIALIZED_NAME_I_EZSIGNTEMPLATEDOCUMENT_PAGETOTAL = "iEzsigntemplatedocumentPagetotal";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNTEMPLATEDOCUMENT_PAGETOTAL)
  private Integer iEzsigntemplatedocumentPagetotal;

  public static final String SERIALIZED_NAME_I_EZSIGNTEMPLATE_SIGNATURETOTAL = "iEzsigntemplateSignaturetotal";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNTEMPLATE_SIGNATURETOTAL)
  private Integer iEzsigntemplateSignaturetotal;

  public static final String SERIALIZED_NAME_I_EZSIGNTEMPLATE_FORMFIELDTOTAL = "iEzsigntemplateFormfieldtotal";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNTEMPLATE_FORMFIELDTOTAL)
  private Integer iEzsigntemplateFormfieldtotal;

  public static final String SERIALIZED_NAME_B_EZSIGNTEMPLATE_INCOMPLETE = "bEzsigntemplateIncomplete";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNTEMPLATE_INCOMPLETE)
  private Boolean bEzsigntemplateIncomplete;

  public static final String SERIALIZED_NAME_S_EZSIGNFOLDERTYPE_NAME_X = "sEzsignfoldertypeNameX";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNFOLDERTYPE_NAME_X)
  private String sEzsignfoldertypeNameX;

  public EzsigntemplateListElement() {
  }

  public EzsigntemplateListElement pkiEzsigntemplateID(Integer pkiEzsigntemplateID) {
    
    this.pkiEzsigntemplateID = pkiEzsigntemplateID;
    return this;
  }

   /**
   * The unique ID of the Ezsigntemplate
   * minimum: 0
   * @return pkiEzsigntemplateID
  **/
  @javax.annotation.Nonnull
  public Integer getPkiEzsigntemplateID() {
    return pkiEzsigntemplateID;
  }


  public void setPkiEzsigntemplateID(Integer pkiEzsigntemplateID) {
    this.pkiEzsigntemplateID = pkiEzsigntemplateID;
  }


  public EzsigntemplateListElement fkiEzsignfoldertypeID(Integer fkiEzsignfoldertypeID) {
    
    this.fkiEzsignfoldertypeID = fkiEzsignfoldertypeID;
    return this;
  }

   /**
   * The unique ID of the Ezsignfoldertype.
   * minimum: 0
   * @return fkiEzsignfoldertypeID
  **/
  @javax.annotation.Nonnull
  public Integer getFkiEzsignfoldertypeID() {
    return fkiEzsignfoldertypeID;
  }


  public void setFkiEzsignfoldertypeID(Integer fkiEzsignfoldertypeID) {
    this.fkiEzsignfoldertypeID = fkiEzsignfoldertypeID;
  }


  public EzsigntemplateListElement fkiLanguageID(Integer fkiLanguageID) {
    
    this.fkiLanguageID = fkiLanguageID;
    return this;
  }

   /**
   * The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
   * minimum: 1
   * maximum: 2
   * @return fkiLanguageID
  **/
  @javax.annotation.Nonnull
  public Integer getFkiLanguageID() {
    return fkiLanguageID;
  }


  public void setFkiLanguageID(Integer fkiLanguageID) {
    this.fkiLanguageID = fkiLanguageID;
  }


  public EzsigntemplateListElement sEzsigntemplateDescription(String sEzsigntemplateDescription) {
    
    this.sEzsigntemplateDescription = sEzsigntemplateDescription;
    return this;
  }

   /**
   * The description of the Ezsigntemplate
   * @return sEzsigntemplateDescription
  **/
  @javax.annotation.Nonnull
  public String getsEzsigntemplateDescription() {
    return sEzsigntemplateDescription;
  }


  public void setsEzsigntemplateDescription(String sEzsigntemplateDescription) {
    this.sEzsigntemplateDescription = sEzsigntemplateDescription;
  }


  public EzsigntemplateListElement iEzsigntemplatedocumentPagetotal(Integer iEzsigntemplatedocumentPagetotal) {
    
    this.iEzsigntemplatedocumentPagetotal = iEzsigntemplatedocumentPagetotal;
    return this;
  }

   /**
   * The number of pages in the Ezsigntemplatedocument.
   * minimum: 1
   * @return iEzsigntemplatedocumentPagetotal
  **/
  @javax.annotation.Nullable
  public Integer getiEzsigntemplatedocumentPagetotal() {
    return iEzsigntemplatedocumentPagetotal;
  }


  public void setiEzsigntemplatedocumentPagetotal(Integer iEzsigntemplatedocumentPagetotal) {
    this.iEzsigntemplatedocumentPagetotal = iEzsigntemplatedocumentPagetotal;
  }


  public EzsigntemplateListElement iEzsigntemplateSignaturetotal(Integer iEzsigntemplateSignaturetotal) {
    
    this.iEzsigntemplateSignaturetotal = iEzsigntemplateSignaturetotal;
    return this;
  }

   /**
   * The number of total signatures in the Ezsigntemplate.
   * @return iEzsigntemplateSignaturetotal
  **/
  @javax.annotation.Nullable
  public Integer getiEzsigntemplateSignaturetotal() {
    return iEzsigntemplateSignaturetotal;
  }


  public void setiEzsigntemplateSignaturetotal(Integer iEzsigntemplateSignaturetotal) {
    this.iEzsigntemplateSignaturetotal = iEzsigntemplateSignaturetotal;
  }


  public EzsigntemplateListElement iEzsigntemplateFormfieldtotal(Integer iEzsigntemplateFormfieldtotal) {
    
    this.iEzsigntemplateFormfieldtotal = iEzsigntemplateFormfieldtotal;
    return this;
  }

   /**
   * The number of total form fields in the Ezsigntemplate.
   * @return iEzsigntemplateFormfieldtotal
  **/
  @javax.annotation.Nullable
  public Integer getiEzsigntemplateFormfieldtotal() {
    return iEzsigntemplateFormfieldtotal;
  }


  public void setiEzsigntemplateFormfieldtotal(Integer iEzsigntemplateFormfieldtotal) {
    this.iEzsigntemplateFormfieldtotal = iEzsigntemplateFormfieldtotal;
  }


  public EzsigntemplateListElement bEzsigntemplateIncomplete(Boolean bEzsigntemplateIncomplete) {
    
    this.bEzsigntemplateIncomplete = bEzsigntemplateIncomplete;
    return this;
  }

   /**
   * Indicate the Ezsigntemplate is incomplete and cannot be used
   * @return bEzsigntemplateIncomplete
  **/
  @javax.annotation.Nonnull
  public Boolean getbEzsigntemplateIncomplete() {
    return bEzsigntemplateIncomplete;
  }


  public void setbEzsigntemplateIncomplete(Boolean bEzsigntemplateIncomplete) {
    this.bEzsigntemplateIncomplete = bEzsigntemplateIncomplete;
  }


  public EzsigntemplateListElement sEzsignfoldertypeNameX(String sEzsignfoldertypeNameX) {
    
    this.sEzsignfoldertypeNameX = sEzsignfoldertypeNameX;
    return this;
  }

   /**
   * The name of the Ezsignfoldertype in the language of the requester
   * @return sEzsignfoldertypeNameX
  **/
  @javax.annotation.Nonnull
  public String getsEzsignfoldertypeNameX() {
    return sEzsignfoldertypeNameX;
  }


  public void setsEzsignfoldertypeNameX(String sEzsignfoldertypeNameX) {
    this.sEzsignfoldertypeNameX = sEzsignfoldertypeNameX;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsigntemplateListElement ezsigntemplateListElement = (EzsigntemplateListElement) o;
    return Objects.equals(this.pkiEzsigntemplateID, ezsigntemplateListElement.pkiEzsigntemplateID) &&
        Objects.equals(this.fkiEzsignfoldertypeID, ezsigntemplateListElement.fkiEzsignfoldertypeID) &&
        Objects.equals(this.fkiLanguageID, ezsigntemplateListElement.fkiLanguageID) &&
        Objects.equals(this.sEzsigntemplateDescription, ezsigntemplateListElement.sEzsigntemplateDescription) &&
        Objects.equals(this.iEzsigntemplatedocumentPagetotal, ezsigntemplateListElement.iEzsigntemplatedocumentPagetotal) &&
        Objects.equals(this.iEzsigntemplateSignaturetotal, ezsigntemplateListElement.iEzsigntemplateSignaturetotal) &&
        Objects.equals(this.iEzsigntemplateFormfieldtotal, ezsigntemplateListElement.iEzsigntemplateFormfieldtotal) &&
        Objects.equals(this.bEzsigntemplateIncomplete, ezsigntemplateListElement.bEzsigntemplateIncomplete) &&
        Objects.equals(this.sEzsignfoldertypeNameX, ezsigntemplateListElement.sEzsignfoldertypeNameX);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiEzsigntemplateID, fkiEzsignfoldertypeID, fkiLanguageID, sEzsigntemplateDescription, iEzsigntemplatedocumentPagetotal, iEzsigntemplateSignaturetotal, iEzsigntemplateFormfieldtotal, bEzsigntemplateIncomplete, sEzsignfoldertypeNameX);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsigntemplateListElement {\n");
    sb.append("    pkiEzsigntemplateID: ").append(toIndentedString(pkiEzsigntemplateID)).append("\n");
    sb.append("    fkiEzsignfoldertypeID: ").append(toIndentedString(fkiEzsignfoldertypeID)).append("\n");
    sb.append("    fkiLanguageID: ").append(toIndentedString(fkiLanguageID)).append("\n");
    sb.append("    sEzsigntemplateDescription: ").append(toIndentedString(sEzsigntemplateDescription)).append("\n");
    sb.append("    iEzsigntemplatedocumentPagetotal: ").append(toIndentedString(iEzsigntemplatedocumentPagetotal)).append("\n");
    sb.append("    iEzsigntemplateSignaturetotal: ").append(toIndentedString(iEzsigntemplateSignaturetotal)).append("\n");
    sb.append("    iEzsigntemplateFormfieldtotal: ").append(toIndentedString(iEzsigntemplateFormfieldtotal)).append("\n");
    sb.append("    bEzsigntemplateIncomplete: ").append(toIndentedString(bEzsigntemplateIncomplete)).append("\n");
    sb.append("    sEzsignfoldertypeNameX: ").append(toIndentedString(sEzsignfoldertypeNameX)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiEzsigntemplateID");
    openapiFields.add("fkiEzsignfoldertypeID");
    openapiFields.add("fkiLanguageID");
    openapiFields.add("sEzsigntemplateDescription");
    openapiFields.add("iEzsigntemplatedocumentPagetotal");
    openapiFields.add("iEzsigntemplateSignaturetotal");
    openapiFields.add("iEzsigntemplateFormfieldtotal");
    openapiFields.add("bEzsigntemplateIncomplete");
    openapiFields.add("sEzsignfoldertypeNameX");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiEzsigntemplateID");
    openapiRequiredFields.add("fkiEzsignfoldertypeID");
    openapiRequiredFields.add("fkiLanguageID");
    openapiRequiredFields.add("sEzsigntemplateDescription");
    openapiRequiredFields.add("bEzsigntemplateIncomplete");
    openapiRequiredFields.add("sEzsignfoldertypeNameX");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EzsigntemplateListElement
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EzsigntemplateListElement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsigntemplateListElement is not found in the empty JSON string", EzsigntemplateListElement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EzsigntemplateListElement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsigntemplateListElement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EzsigntemplateListElement.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("sEzsigntemplateDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsigntemplateDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsigntemplateDescription").toString()));
      }
      if (!jsonObj.get("sEzsignfoldertypeNameX").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsignfoldertypeNameX` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsignfoldertypeNameX").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsigntemplateListElement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsigntemplateListElement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsigntemplateListElement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsigntemplateListElement.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsigntemplateListElement>() {
           @Override
           public void write(JsonWriter out, EzsigntemplateListElement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsigntemplateListElement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EzsigntemplateListElement given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EzsigntemplateListElement
  * @throws IOException if the JSON string is invalid with respect to EzsigntemplateListElement
  */
  public static EzsigntemplateListElement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsigntemplateListElement.class);
  }

 /**
  * Convert an instance of EzsigntemplateListElement to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

