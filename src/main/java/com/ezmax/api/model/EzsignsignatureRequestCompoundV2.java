/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.EnumTextvalidation;
import com.ezmax.api.model.EzsignelementdependencyRequestCompound;
import com.ezmax.api.model.EzsignsignaturecustomdateRequestCompoundV2;
import com.ezmax.api.model.FieldEEzsignsignatureAttachmentnamesource;
import com.ezmax.api.model.FieldEEzsignsignatureConsultationtrigger;
import com.ezmax.api.model.FieldEEzsignsignatureDependencyrequirement;
import com.ezmax.api.model.FieldEEzsignsignatureFont;
import com.ezmax.api.model.FieldEEzsignsignatureTooltipposition;
import com.ezmax.api.model.FieldEEzsignsignatureType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * An Ezsignsignature Object and children to create a complete structure
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-30T20:25:06.858397322Z[Etc/UTC]", comments = "Generator version: 7.11.0")
public class EzsignsignatureRequestCompoundV2 {
  public static final String SERIALIZED_NAME_PKI_EZSIGNSIGNATURE_I_D = "pkiEzsignsignatureID";
  @SerializedName(SERIALIZED_NAME_PKI_EZSIGNSIGNATURE_I_D)
  @javax.annotation.Nullable
  private Integer pkiEzsignsignatureID;

  public static final String SERIALIZED_NAME_FKI_EZSIGNFOLDERSIGNERASSOCIATION_I_D = "fkiEzsignfoldersignerassociationID";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNFOLDERSIGNERASSOCIATION_I_D)
  @javax.annotation.Nonnull
  private Integer fkiEzsignfoldersignerassociationID;

  public static final String SERIALIZED_NAME_I_EZSIGNPAGE_PAGENUMBER = "iEzsignpagePagenumber";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNPAGE_PAGENUMBER)
  @javax.annotation.Nonnull
  private Integer iEzsignpagePagenumber;

  public static final String SERIALIZED_NAME_I_EZSIGNSIGNATURE_X = "iEzsignsignatureX";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNSIGNATURE_X)
  @javax.annotation.Nonnull
  private Integer iEzsignsignatureX;

  public static final String SERIALIZED_NAME_I_EZSIGNSIGNATURE_Y = "iEzsignsignatureY";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNSIGNATURE_Y)
  @javax.annotation.Nonnull
  private Integer iEzsignsignatureY;

  public static final String SERIALIZED_NAME_I_EZSIGNSIGNATURE_WIDTH = "iEzsignsignatureWidth";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNSIGNATURE_WIDTH)
  @javax.annotation.Nullable
  private Integer iEzsignsignatureWidth;

  public static final String SERIALIZED_NAME_I_EZSIGNSIGNATURE_HEIGHT = "iEzsignsignatureHeight";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNSIGNATURE_HEIGHT)
  @javax.annotation.Nullable
  private Integer iEzsignsignatureHeight;

  public static final String SERIALIZED_NAME_I_EZSIGNSIGNATURE_STEP = "iEzsignsignatureStep";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNSIGNATURE_STEP)
  @javax.annotation.Nonnull
  private Integer iEzsignsignatureStep;

  public static final String SERIALIZED_NAME_E_EZSIGNSIGNATURE_TYPE = "eEzsignsignatureType";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNSIGNATURE_TYPE)
  @javax.annotation.Nonnull
  private FieldEEzsignsignatureType eEzsignsignatureType;

  public static final String SERIALIZED_NAME_FKI_EZSIGNDOCUMENT_I_D = "fkiEzsigndocumentID";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNDOCUMENT_I_D)
  @javax.annotation.Nonnull
  private Integer fkiEzsigndocumentID;

  public static final String SERIALIZED_NAME_T_EZSIGNSIGNATURE_TOOLTIP = "tEzsignsignatureTooltip";
  @SerializedName(SERIALIZED_NAME_T_EZSIGNSIGNATURE_TOOLTIP)
  @javax.annotation.Nullable
  private String tEzsignsignatureTooltip;

  public static final String SERIALIZED_NAME_E_EZSIGNSIGNATURE_TOOLTIPPOSITION = "eEzsignsignatureTooltipposition";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNSIGNATURE_TOOLTIPPOSITION)
  @javax.annotation.Nullable
  private FieldEEzsignsignatureTooltipposition eEzsignsignatureTooltipposition;

  public static final String SERIALIZED_NAME_E_EZSIGNSIGNATURE_FONT = "eEzsignsignatureFont";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNSIGNATURE_FONT)
  @javax.annotation.Nullable
  private FieldEEzsignsignatureFont eEzsignsignatureFont;

  public static final String SERIALIZED_NAME_FKI_EZSIGNFOLDERSIGNERASSOCIATION_I_D_VALIDATION = "fkiEzsignfoldersignerassociationIDValidation";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNFOLDERSIGNERASSOCIATION_I_D_VALIDATION)
  @javax.annotation.Nullable
  private Integer fkiEzsignfoldersignerassociationIDValidation;

  public static final String SERIALIZED_NAME_B_EZSIGNSIGNATURE_HANDWRITTEN = "bEzsignsignatureHandwritten";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNSIGNATURE_HANDWRITTEN)
  @javax.annotation.Nullable
  private Boolean bEzsignsignatureHandwritten;

  public static final String SERIALIZED_NAME_B_EZSIGNSIGNATURE_REASON = "bEzsignsignatureReason";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNSIGNATURE_REASON)
  @javax.annotation.Nullable
  private Boolean bEzsignsignatureReason;

  public static final String SERIALIZED_NAME_B_EZSIGNSIGNATURE_REQUIRED = "bEzsignsignatureRequired";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNSIGNATURE_REQUIRED)
  @javax.annotation.Nullable
  private Boolean bEzsignsignatureRequired;

  public static final String SERIALIZED_NAME_E_EZSIGNSIGNATURE_ATTACHMENTNAMESOURCE = "eEzsignsignatureAttachmentnamesource";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNSIGNATURE_ATTACHMENTNAMESOURCE)
  @javax.annotation.Nullable
  private FieldEEzsignsignatureAttachmentnamesource eEzsignsignatureAttachmentnamesource;

  public static final String SERIALIZED_NAME_S_EZSIGNSIGNATURE_ATTACHMENTDESCRIPTION = "sEzsignsignatureAttachmentdescription";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNSIGNATURE_ATTACHMENTDESCRIPTION)
  @javax.annotation.Nullable
  private String sEzsignsignatureAttachmentdescription;

  public static final String SERIALIZED_NAME_E_EZSIGNSIGNATURE_CONSULTATIONTRIGGER = "eEzsignsignatureConsultationtrigger";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNSIGNATURE_CONSULTATIONTRIGGER)
  @javax.annotation.Nullable
  private FieldEEzsignsignatureConsultationtrigger eEzsignsignatureConsultationtrigger;

  public static final String SERIALIZED_NAME_I_EZSIGNSIGNATURE_VALIDATIONSTEP = "iEzsignsignatureValidationstep";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNSIGNATURE_VALIDATIONSTEP)
  @javax.annotation.Nullable
  private Integer iEzsignsignatureValidationstep;

  public static final String SERIALIZED_NAME_I_EZSIGNSIGNATURE_MAXLENGTH = "iEzsignsignatureMaxlength";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNSIGNATURE_MAXLENGTH)
  @javax.annotation.Nullable
  private Integer iEzsignsignatureMaxlength;

  public static final String SERIALIZED_NAME_S_EZSIGNSIGNATURE_DEFAULTVALUE = "sEzsignsignatureDefaultvalue";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNSIGNATURE_DEFAULTVALUE)
  @javax.annotation.Nullable
  private String sEzsignsignatureDefaultvalue;

  public static final String SERIALIZED_NAME_E_EZSIGNSIGNATURE_TEXTVALIDATION = "eEzsignsignatureTextvalidation";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNSIGNATURE_TEXTVALIDATION)
  @javax.annotation.Nullable
  private EnumTextvalidation eEzsignsignatureTextvalidation;

  public static final String SERIALIZED_NAME_S_EZSIGNSIGNATURE_TEXTVALIDATIONCUSTOMMESSAGE = "sEzsignsignatureTextvalidationcustommessage";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNSIGNATURE_TEXTVALIDATIONCUSTOMMESSAGE)
  @javax.annotation.Nullable
  private String sEzsignsignatureTextvalidationcustommessage;

  public static final String SERIALIZED_NAME_S_EZSIGNSIGNATURE_REGEXP = "sEzsignsignatureRegexp";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNSIGNATURE_REGEXP)
  @javax.annotation.Nullable
  private String sEzsignsignatureRegexp;

  public static final String SERIALIZED_NAME_E_EZSIGNSIGNATURE_DEPENDENCYREQUIREMENT = "eEzsignsignatureDependencyrequirement";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNSIGNATURE_DEPENDENCYREQUIREMENT)
  @javax.annotation.Nullable
  private FieldEEzsignsignatureDependencyrequirement eEzsignsignatureDependencyrequirement;

  public static final String SERIALIZED_NAME_B_EZSIGNSIGNATURE_CUSTOMDATE = "bEzsignsignatureCustomdate";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNSIGNATURE_CUSTOMDATE)
  @javax.annotation.Nullable
  private Boolean bEzsignsignatureCustomdate;

  public static final String SERIALIZED_NAME_A_OBJ_EZSIGNSIGNATURECUSTOMDATE = "a_objEzsignsignaturecustomdate";
  @SerializedName(SERIALIZED_NAME_A_OBJ_EZSIGNSIGNATURECUSTOMDATE)
  @javax.annotation.Nullable
  private List<EzsignsignaturecustomdateRequestCompoundV2> aObjEzsignsignaturecustomdate = new ArrayList<>();

  public static final String SERIALIZED_NAME_A_OBJ_EZSIGNELEMENTDEPENDENCY = "a_objEzsignelementdependency";
  @SerializedName(SERIALIZED_NAME_A_OBJ_EZSIGNELEMENTDEPENDENCY)
  @javax.annotation.Nullable
  private List<EzsignelementdependencyRequestCompound> aObjEzsignelementdependency = new ArrayList<>();

  public EzsignsignatureRequestCompoundV2() {
  }

  public EzsignsignatureRequestCompoundV2 pkiEzsignsignatureID(@javax.annotation.Nullable Integer pkiEzsignsignatureID) {
    this.pkiEzsignsignatureID = pkiEzsignsignatureID;
    return this;
  }

  /**
   * The unique ID of the Ezsignsignature
   * minimum: 0
   * @return pkiEzsignsignatureID
   */
  @javax.annotation.Nullable
  public Integer getPkiEzsignsignatureID() {
    return pkiEzsignsignatureID;
  }

  public void setPkiEzsignsignatureID(@javax.annotation.Nullable Integer pkiEzsignsignatureID) {
    this.pkiEzsignsignatureID = pkiEzsignsignatureID;
  }


  public EzsignsignatureRequestCompoundV2 fkiEzsignfoldersignerassociationID(@javax.annotation.Nonnull Integer fkiEzsignfoldersignerassociationID) {
    this.fkiEzsignfoldersignerassociationID = fkiEzsignfoldersignerassociationID;
    return this;
  }

  /**
   * The unique ID of the Ezsignfoldersignerassociation
   * minimum: 0
   * @return fkiEzsignfoldersignerassociationID
   */
  @javax.annotation.Nonnull
  public Integer getFkiEzsignfoldersignerassociationID() {
    return fkiEzsignfoldersignerassociationID;
  }

  public void setFkiEzsignfoldersignerassociationID(@javax.annotation.Nonnull Integer fkiEzsignfoldersignerassociationID) {
    this.fkiEzsignfoldersignerassociationID = fkiEzsignfoldersignerassociationID;
  }


  public EzsignsignatureRequestCompoundV2 iEzsignpagePagenumber(@javax.annotation.Nonnull Integer iEzsignpagePagenumber) {
    this.iEzsignpagePagenumber = iEzsignpagePagenumber;
    return this;
  }

  /**
   * The page number in the Ezsigndocument
   * minimum: 1
   * @return iEzsignpagePagenumber
   */
  @javax.annotation.Nonnull
  public Integer getiEzsignpagePagenumber() {
    return iEzsignpagePagenumber;
  }

  public void setiEzsignpagePagenumber(@javax.annotation.Nonnull Integer iEzsignpagePagenumber) {
    this.iEzsignpagePagenumber = iEzsignpagePagenumber;
  }


  public EzsignsignatureRequestCompoundV2 iEzsignsignatureX(@javax.annotation.Nonnull Integer iEzsignsignatureX) {
    this.iEzsignsignatureX = iEzsignsignatureX;
    return this;
  }

  /**
   * The X coordinate (Horizontal) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate.
   * minimum: 0
   * @return iEzsignsignatureX
   */
  @javax.annotation.Nonnull
  public Integer getiEzsignsignatureX() {
    return iEzsignsignatureX;
  }

  public void setiEzsignsignatureX(@javax.annotation.Nonnull Integer iEzsignsignatureX) {
    this.iEzsignsignatureX = iEzsignsignatureX;
  }


  public EzsignsignatureRequestCompoundV2 iEzsignsignatureY(@javax.annotation.Nonnull Integer iEzsignsignatureY) {
    this.iEzsignsignatureY = iEzsignsignatureY;
    return this;
  }

  /**
   * The Y coordinate (Vertical) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate.
   * minimum: 0
   * @return iEzsignsignatureY
   */
  @javax.annotation.Nonnull
  public Integer getiEzsignsignatureY() {
    return iEzsignsignatureY;
  }

  public void setiEzsignsignatureY(@javax.annotation.Nonnull Integer iEzsignsignatureY) {
    this.iEzsignsignatureY = iEzsignsignatureY;
  }


  public EzsignsignatureRequestCompoundV2 iEzsignsignatureWidth(@javax.annotation.Nullable Integer iEzsignsignatureWidth) {
    this.iEzsignsignatureWidth = iEzsignsignatureWidth;
    return this;
  }

  /**
   * The width of the Ezsignsignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsignsignature to have a width of 2 inches, you would use \&quot;200\&quot; for the iEzsignsignatureWidth.
   * minimum: 0
   * @return iEzsignsignatureWidth
   */
  @javax.annotation.Nullable
  public Integer getiEzsignsignatureWidth() {
    return iEzsignsignatureWidth;
  }

  public void setiEzsignsignatureWidth(@javax.annotation.Nullable Integer iEzsignsignatureWidth) {
    this.iEzsignsignatureWidth = iEzsignsignatureWidth;
  }


  public EzsignsignatureRequestCompoundV2 iEzsignsignatureHeight(@javax.annotation.Nullable Integer iEzsignsignatureHeight) {
    this.iEzsignsignatureHeight = iEzsignsignatureHeight;
    return this;
  }

  /**
   * The height of the Ezsignsignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsignsignature to have an height of 2 inches, you would use \&quot;200\&quot; for the iEzsignsignatureHeight.
   * minimum: 0
   * @return iEzsignsignatureHeight
   */
  @javax.annotation.Nullable
  public Integer getiEzsignsignatureHeight() {
    return iEzsignsignatureHeight;
  }

  public void setiEzsignsignatureHeight(@javax.annotation.Nullable Integer iEzsignsignatureHeight) {
    this.iEzsignsignatureHeight = iEzsignsignatureHeight;
  }


  public EzsignsignatureRequestCompoundV2 iEzsignsignatureStep(@javax.annotation.Nonnull Integer iEzsignsignatureStep) {
    this.iEzsignsignatureStep = iEzsignsignatureStep;
    return this;
  }

  /**
   * The step when the Ezsignsigner will be invited to sign
   * @return iEzsignsignatureStep
   */
  @javax.annotation.Nonnull
  public Integer getiEzsignsignatureStep() {
    return iEzsignsignatureStep;
  }

  public void setiEzsignsignatureStep(@javax.annotation.Nonnull Integer iEzsignsignatureStep) {
    this.iEzsignsignatureStep = iEzsignsignatureStep;
  }


  public EzsignsignatureRequestCompoundV2 eEzsignsignatureType(@javax.annotation.Nonnull FieldEEzsignsignatureType eEzsignsignatureType) {
    this.eEzsignsignatureType = eEzsignsignatureType;
    return this;
  }

  /**
   * Get eEzsignsignatureType
   * @return eEzsignsignatureType
   */
  @javax.annotation.Nonnull
  public FieldEEzsignsignatureType geteEzsignsignatureType() {
    return eEzsignsignatureType;
  }

  public void seteEzsignsignatureType(@javax.annotation.Nonnull FieldEEzsignsignatureType eEzsignsignatureType) {
    this.eEzsignsignatureType = eEzsignsignatureType;
  }


  public EzsignsignatureRequestCompoundV2 fkiEzsigndocumentID(@javax.annotation.Nonnull Integer fkiEzsigndocumentID) {
    this.fkiEzsigndocumentID = fkiEzsigndocumentID;
    return this;
  }

  /**
   * The unique ID of the Ezsigndocument
   * minimum: 0
   * @return fkiEzsigndocumentID
   */
  @javax.annotation.Nonnull
  public Integer getFkiEzsigndocumentID() {
    return fkiEzsigndocumentID;
  }

  public void setFkiEzsigndocumentID(@javax.annotation.Nonnull Integer fkiEzsigndocumentID) {
    this.fkiEzsigndocumentID = fkiEzsigndocumentID;
  }


  public EzsignsignatureRequestCompoundV2 tEzsignsignatureTooltip(@javax.annotation.Nullable String tEzsignsignatureTooltip) {
    this.tEzsignsignatureTooltip = tEzsignsignatureTooltip;
    return this;
  }

  /**
   * A tooltip that will be presented to Ezsignsigner about the Ezsignsignature
   * @return tEzsignsignatureTooltip
   */
  @javax.annotation.Nullable
  public String gettEzsignsignatureTooltip() {
    return tEzsignsignatureTooltip;
  }

  public void settEzsignsignatureTooltip(@javax.annotation.Nullable String tEzsignsignatureTooltip) {
    this.tEzsignsignatureTooltip = tEzsignsignatureTooltip;
  }


  public EzsignsignatureRequestCompoundV2 eEzsignsignatureTooltipposition(@javax.annotation.Nullable FieldEEzsignsignatureTooltipposition eEzsignsignatureTooltipposition) {
    this.eEzsignsignatureTooltipposition = eEzsignsignatureTooltipposition;
    return this;
  }

  /**
   * Get eEzsignsignatureTooltipposition
   * @return eEzsignsignatureTooltipposition
   */
  @javax.annotation.Nullable
  public FieldEEzsignsignatureTooltipposition geteEzsignsignatureTooltipposition() {
    return eEzsignsignatureTooltipposition;
  }

  public void seteEzsignsignatureTooltipposition(@javax.annotation.Nullable FieldEEzsignsignatureTooltipposition eEzsignsignatureTooltipposition) {
    this.eEzsignsignatureTooltipposition = eEzsignsignatureTooltipposition;
  }


  public EzsignsignatureRequestCompoundV2 eEzsignsignatureFont(@javax.annotation.Nullable FieldEEzsignsignatureFont eEzsignsignatureFont) {
    this.eEzsignsignatureFont = eEzsignsignatureFont;
    return this;
  }

  /**
   * Get eEzsignsignatureFont
   * @return eEzsignsignatureFont
   */
  @javax.annotation.Nullable
  public FieldEEzsignsignatureFont geteEzsignsignatureFont() {
    return eEzsignsignatureFont;
  }

  public void seteEzsignsignatureFont(@javax.annotation.Nullable FieldEEzsignsignatureFont eEzsignsignatureFont) {
    this.eEzsignsignatureFont = eEzsignsignatureFont;
  }


  public EzsignsignatureRequestCompoundV2 fkiEzsignfoldersignerassociationIDValidation(@javax.annotation.Nullable Integer fkiEzsignfoldersignerassociationIDValidation) {
    this.fkiEzsignfoldersignerassociationIDValidation = fkiEzsignfoldersignerassociationIDValidation;
    return this;
  }

  /**
   * The unique ID of the Ezsignfoldersignerassociation
   * minimum: 0
   * @return fkiEzsignfoldersignerassociationIDValidation
   */
  @javax.annotation.Nullable
  public Integer getFkiEzsignfoldersignerassociationIDValidation() {
    return fkiEzsignfoldersignerassociationIDValidation;
  }

  public void setFkiEzsignfoldersignerassociationIDValidation(@javax.annotation.Nullable Integer fkiEzsignfoldersignerassociationIDValidation) {
    this.fkiEzsignfoldersignerassociationIDValidation = fkiEzsignfoldersignerassociationIDValidation;
  }


  public EzsignsignatureRequestCompoundV2 bEzsignsignatureHandwritten(@javax.annotation.Nullable Boolean bEzsignsignatureHandwritten) {
    this.bEzsignsignatureHandwritten = bEzsignsignatureHandwritten;
    return this;
  }

  /**
   * Whether the Ezsignsignature must be handwritten or not when eEzsignsignatureType &#x3D; Signature.
   * @return bEzsignsignatureHandwritten
   */
  @javax.annotation.Nullable
  public Boolean getbEzsignsignatureHandwritten() {
    return bEzsignsignatureHandwritten;
  }

  public void setbEzsignsignatureHandwritten(@javax.annotation.Nullable Boolean bEzsignsignatureHandwritten) {
    this.bEzsignsignatureHandwritten = bEzsignsignatureHandwritten;
  }


  public EzsignsignatureRequestCompoundV2 bEzsignsignatureReason(@javax.annotation.Nullable Boolean bEzsignsignatureReason) {
    this.bEzsignsignatureReason = bEzsignsignatureReason;
    return this;
  }

  /**
   * Whether the Ezsignsignature must include a reason or not when eEzsignsignatureType &#x3D; Signature.
   * @return bEzsignsignatureReason
   */
  @javax.annotation.Nullable
  public Boolean getbEzsignsignatureReason() {
    return bEzsignsignatureReason;
  }

  public void setbEzsignsignatureReason(@javax.annotation.Nullable Boolean bEzsignsignatureReason) {
    this.bEzsignsignatureReason = bEzsignsignatureReason;
  }


  public EzsignsignatureRequestCompoundV2 bEzsignsignatureRequired(@javax.annotation.Nullable Boolean bEzsignsignatureRequired) {
    this.bEzsignsignatureRequired = bEzsignsignatureRequired;
    return this;
  }

  /**
   * Whether the Ezsignsignature is required or not. This field is relevant only with Ezsignsignature with eEzsignsignatureType &#x3D; Attachments, Text or Textarea.
   * @return bEzsignsignatureRequired
   */
  @javax.annotation.Nullable
  public Boolean getbEzsignsignatureRequired() {
    return bEzsignsignatureRequired;
  }

  public void setbEzsignsignatureRequired(@javax.annotation.Nullable Boolean bEzsignsignatureRequired) {
    this.bEzsignsignatureRequired = bEzsignsignatureRequired;
  }


  public EzsignsignatureRequestCompoundV2 eEzsignsignatureAttachmentnamesource(@javax.annotation.Nullable FieldEEzsignsignatureAttachmentnamesource eEzsignsignatureAttachmentnamesource) {
    this.eEzsignsignatureAttachmentnamesource = eEzsignsignatureAttachmentnamesource;
    return this;
  }

  /**
   * Get eEzsignsignatureAttachmentnamesource
   * @return eEzsignsignatureAttachmentnamesource
   */
  @javax.annotation.Nullable
  public FieldEEzsignsignatureAttachmentnamesource geteEzsignsignatureAttachmentnamesource() {
    return eEzsignsignatureAttachmentnamesource;
  }

  public void seteEzsignsignatureAttachmentnamesource(@javax.annotation.Nullable FieldEEzsignsignatureAttachmentnamesource eEzsignsignatureAttachmentnamesource) {
    this.eEzsignsignatureAttachmentnamesource = eEzsignsignatureAttachmentnamesource;
  }


  public EzsignsignatureRequestCompoundV2 sEzsignsignatureAttachmentdescription(@javax.annotation.Nullable String sEzsignsignatureAttachmentdescription) {
    this.sEzsignsignatureAttachmentdescription = sEzsignsignatureAttachmentdescription;
    return this;
  }

  /**
   * The description attached to the attachment name added in Ezsignsignature of eEzsignsignatureType Attachments
   * @return sEzsignsignatureAttachmentdescription
   */
  @javax.annotation.Nullable
  public String getsEzsignsignatureAttachmentdescription() {
    return sEzsignsignatureAttachmentdescription;
  }

  public void setsEzsignsignatureAttachmentdescription(@javax.annotation.Nullable String sEzsignsignatureAttachmentdescription) {
    this.sEzsignsignatureAttachmentdescription = sEzsignsignatureAttachmentdescription;
  }


  public EzsignsignatureRequestCompoundV2 eEzsignsignatureConsultationtrigger(@javax.annotation.Nullable FieldEEzsignsignatureConsultationtrigger eEzsignsignatureConsultationtrigger) {
    this.eEzsignsignatureConsultationtrigger = eEzsignsignatureConsultationtrigger;
    return this;
  }

  /**
   * Get eEzsignsignatureConsultationtrigger
   * @return eEzsignsignatureConsultationtrigger
   */
  @javax.annotation.Nullable
  public FieldEEzsignsignatureConsultationtrigger geteEzsignsignatureConsultationtrigger() {
    return eEzsignsignatureConsultationtrigger;
  }

  public void seteEzsignsignatureConsultationtrigger(@javax.annotation.Nullable FieldEEzsignsignatureConsultationtrigger eEzsignsignatureConsultationtrigger) {
    this.eEzsignsignatureConsultationtrigger = eEzsignsignatureConsultationtrigger;
  }


  public EzsignsignatureRequestCompoundV2 iEzsignsignatureValidationstep(@javax.annotation.Nullable Integer iEzsignsignatureValidationstep) {
    this.iEzsignsignatureValidationstep = iEzsignsignatureValidationstep;
    return this;
  }

  /**
   * The step when the Ezsignsigner will be invited to validate the Ezsignsignature of eEzsignsignatureType Attachments
   * @return iEzsignsignatureValidationstep
   */
  @javax.annotation.Nullable
  public Integer getiEzsignsignatureValidationstep() {
    return iEzsignsignatureValidationstep;
  }

  public void setiEzsignsignatureValidationstep(@javax.annotation.Nullable Integer iEzsignsignatureValidationstep) {
    this.iEzsignsignatureValidationstep = iEzsignsignatureValidationstep;
  }


  public EzsignsignatureRequestCompoundV2 iEzsignsignatureMaxlength(@javax.annotation.Nullable Integer iEzsignsignatureMaxlength) {
    this.iEzsignsignatureMaxlength = iEzsignsignatureMaxlength;
    return this;
  }

  /**
   * The maximum length for the value in the Ezsignsignature  This can only be set if eEzsignsignatureType is **FieldText** or **FieldTextarea**
   * minimum: 0
   * maximum: 65535
   * @return iEzsignsignatureMaxlength
   */
  @javax.annotation.Nullable
  public Integer getiEzsignsignatureMaxlength() {
    return iEzsignsignatureMaxlength;
  }

  public void setiEzsignsignatureMaxlength(@javax.annotation.Nullable Integer iEzsignsignatureMaxlength) {
    this.iEzsignsignatureMaxlength = iEzsignsignatureMaxlength;
  }


  public EzsignsignatureRequestCompoundV2 sEzsignsignatureDefaultvalue(@javax.annotation.Nullable String sEzsignsignatureDefaultvalue) {
    this.sEzsignsignatureDefaultvalue = sEzsignsignatureDefaultvalue;
    return this;
  }

  /**
   * The default value for the Ezsignsignature  You can use the codes below and they will be replaced at signature time.    | Code | Description | Example | | ------------------------- | ------------ | ------------ | | {sUserFirstname} | The first name of the contact | John | | {sUserLastname} | The last name of the contact | Doe | | {sUserJobtitle} | The job title | Sales Representative | | {sCompany} | Company name | eZmax Solutions Inc. | | {sEmailAddress} | The email address | email@example.com | | {sPhoneE164} | A phone number in E.164 Format | +15149901516 | | {sPhoneE164Cell} | A phone number in E.164 Format | +15149901516 |
   * @return sEzsignsignatureDefaultvalue
   */
  @javax.annotation.Nullable
  public String getsEzsignsignatureDefaultvalue() {
    return sEzsignsignatureDefaultvalue;
  }

  public void setsEzsignsignatureDefaultvalue(@javax.annotation.Nullable String sEzsignsignatureDefaultvalue) {
    this.sEzsignsignatureDefaultvalue = sEzsignsignatureDefaultvalue;
  }


  public EzsignsignatureRequestCompoundV2 eEzsignsignatureTextvalidation(@javax.annotation.Nullable EnumTextvalidation eEzsignsignatureTextvalidation) {
    this.eEzsignsignatureTextvalidation = eEzsignsignatureTextvalidation;
    return this;
  }

  /**
   * Get eEzsignsignatureTextvalidation
   * @return eEzsignsignatureTextvalidation
   */
  @javax.annotation.Nullable
  public EnumTextvalidation geteEzsignsignatureTextvalidation() {
    return eEzsignsignatureTextvalidation;
  }

  public void seteEzsignsignatureTextvalidation(@javax.annotation.Nullable EnumTextvalidation eEzsignsignatureTextvalidation) {
    this.eEzsignsignatureTextvalidation = eEzsignsignatureTextvalidation;
  }


  public EzsignsignatureRequestCompoundV2 sEzsignsignatureTextvalidationcustommessage(@javax.annotation.Nullable String sEzsignsignatureTextvalidationcustommessage) {
    this.sEzsignsignatureTextvalidationcustommessage = sEzsignsignatureTextvalidationcustommessage;
    return this;
  }

  /**
   * Description of validation rule. Show by signatory.
   * @return sEzsignsignatureTextvalidationcustommessage
   */
  @javax.annotation.Nullable
  public String getsEzsignsignatureTextvalidationcustommessage() {
    return sEzsignsignatureTextvalidationcustommessage;
  }

  public void setsEzsignsignatureTextvalidationcustommessage(@javax.annotation.Nullable String sEzsignsignatureTextvalidationcustommessage) {
    this.sEzsignsignatureTextvalidationcustommessage = sEzsignsignatureTextvalidationcustommessage;
  }


  public EzsignsignatureRequestCompoundV2 sEzsignsignatureRegexp(@javax.annotation.Nullable String sEzsignsignatureRegexp) {
    this.sEzsignsignatureRegexp = sEzsignsignatureRegexp;
    return this;
  }

  /**
   * A regular expression to indicate what values are acceptable for the Ezsignsignature.  This can only be set if eEzsignsignatureType is **FieldText** or **FieldTextarea** and eEzsignsignatureTextvalidation is **Custom**
   * @return sEzsignsignatureRegexp
   */
  @javax.annotation.Nullable
  public String getsEzsignsignatureRegexp() {
    return sEzsignsignatureRegexp;
  }

  public void setsEzsignsignatureRegexp(@javax.annotation.Nullable String sEzsignsignatureRegexp) {
    this.sEzsignsignatureRegexp = sEzsignsignatureRegexp;
  }


  public EzsignsignatureRequestCompoundV2 eEzsignsignatureDependencyrequirement(@javax.annotation.Nullable FieldEEzsignsignatureDependencyrequirement eEzsignsignatureDependencyrequirement) {
    this.eEzsignsignatureDependencyrequirement = eEzsignsignatureDependencyrequirement;
    return this;
  }

  /**
   * Get eEzsignsignatureDependencyrequirement
   * @return eEzsignsignatureDependencyrequirement
   */
  @javax.annotation.Nullable
  public FieldEEzsignsignatureDependencyrequirement geteEzsignsignatureDependencyrequirement() {
    return eEzsignsignatureDependencyrequirement;
  }

  public void seteEzsignsignatureDependencyrequirement(@javax.annotation.Nullable FieldEEzsignsignatureDependencyrequirement eEzsignsignatureDependencyrequirement) {
    this.eEzsignsignatureDependencyrequirement = eEzsignsignatureDependencyrequirement;
  }


  public EzsignsignatureRequestCompoundV2 bEzsignsignatureCustomdate(@javax.annotation.Nullable Boolean bEzsignsignatureCustomdate) {
    this.bEzsignsignatureCustomdate = bEzsignsignatureCustomdate;
    return this;
  }

  /**
   * Whether the Ezsignsignature has a custom date format or not. (Only possible when eEzsignsignatureType is **Name** or **Handwritten**)
   * @return bEzsignsignatureCustomdate
   */
  @javax.annotation.Nullable
  public Boolean getbEzsignsignatureCustomdate() {
    return bEzsignsignatureCustomdate;
  }

  public void setbEzsignsignatureCustomdate(@javax.annotation.Nullable Boolean bEzsignsignatureCustomdate) {
    this.bEzsignsignatureCustomdate = bEzsignsignatureCustomdate;
  }


  public EzsignsignatureRequestCompoundV2 aObjEzsignsignaturecustomdate(@javax.annotation.Nullable List<EzsignsignaturecustomdateRequestCompoundV2> aObjEzsignsignaturecustomdate) {
    this.aObjEzsignsignaturecustomdate = aObjEzsignsignaturecustomdate;
    return this;
  }

  public EzsignsignatureRequestCompoundV2 addAObjEzsignsignaturecustomdateItem(EzsignsignaturecustomdateRequestCompoundV2 aObjEzsignsignaturecustomdateItem) {
    if (this.aObjEzsignsignaturecustomdate == null) {
      this.aObjEzsignsignaturecustomdate = new ArrayList<>();
    }
    this.aObjEzsignsignaturecustomdate.add(aObjEzsignsignaturecustomdateItem);
    return this;
  }

  /**
   * An array of custom date blocks that will be filled at the time of signature.  Can only be used if bEzsignsignatureCustomdate is true.  Use an empty array if you don&#39;t want to have a date at all.
   * @return aObjEzsignsignaturecustomdate
   */
  @javax.annotation.Nullable
  public List<EzsignsignaturecustomdateRequestCompoundV2> getaObjEzsignsignaturecustomdate() {
    return aObjEzsignsignaturecustomdate;
  }

  public void setaObjEzsignsignaturecustomdate(@javax.annotation.Nullable List<EzsignsignaturecustomdateRequestCompoundV2> aObjEzsignsignaturecustomdate) {
    this.aObjEzsignsignaturecustomdate = aObjEzsignsignaturecustomdate;
  }


  public EzsignsignatureRequestCompoundV2 aObjEzsignelementdependency(@javax.annotation.Nullable List<EzsignelementdependencyRequestCompound> aObjEzsignelementdependency) {
    this.aObjEzsignelementdependency = aObjEzsignelementdependency;
    return this;
  }

  public EzsignsignatureRequestCompoundV2 addAObjEzsignelementdependencyItem(EzsignelementdependencyRequestCompound aObjEzsignelementdependencyItem) {
    if (this.aObjEzsignelementdependency == null) {
      this.aObjEzsignelementdependency = new ArrayList<>();
    }
    this.aObjEzsignelementdependency.add(aObjEzsignelementdependencyItem);
    return this;
  }

  /**
   * Get aObjEzsignelementdependency
   * @return aObjEzsignelementdependency
   */
  @javax.annotation.Nullable
  public List<EzsignelementdependencyRequestCompound> getaObjEzsignelementdependency() {
    return aObjEzsignelementdependency;
  }

  public void setaObjEzsignelementdependency(@javax.annotation.Nullable List<EzsignelementdependencyRequestCompound> aObjEzsignelementdependency) {
    this.aObjEzsignelementdependency = aObjEzsignelementdependency;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsignsignatureRequestCompoundV2 ezsignsignatureRequestCompoundV2 = (EzsignsignatureRequestCompoundV2) o;
    return Objects.equals(this.pkiEzsignsignatureID, ezsignsignatureRequestCompoundV2.pkiEzsignsignatureID) &&
        Objects.equals(this.fkiEzsignfoldersignerassociationID, ezsignsignatureRequestCompoundV2.fkiEzsignfoldersignerassociationID) &&
        Objects.equals(this.iEzsignpagePagenumber, ezsignsignatureRequestCompoundV2.iEzsignpagePagenumber) &&
        Objects.equals(this.iEzsignsignatureX, ezsignsignatureRequestCompoundV2.iEzsignsignatureX) &&
        Objects.equals(this.iEzsignsignatureY, ezsignsignatureRequestCompoundV2.iEzsignsignatureY) &&
        Objects.equals(this.iEzsignsignatureWidth, ezsignsignatureRequestCompoundV2.iEzsignsignatureWidth) &&
        Objects.equals(this.iEzsignsignatureHeight, ezsignsignatureRequestCompoundV2.iEzsignsignatureHeight) &&
        Objects.equals(this.iEzsignsignatureStep, ezsignsignatureRequestCompoundV2.iEzsignsignatureStep) &&
        Objects.equals(this.eEzsignsignatureType, ezsignsignatureRequestCompoundV2.eEzsignsignatureType) &&
        Objects.equals(this.fkiEzsigndocumentID, ezsignsignatureRequestCompoundV2.fkiEzsigndocumentID) &&
        Objects.equals(this.tEzsignsignatureTooltip, ezsignsignatureRequestCompoundV2.tEzsignsignatureTooltip) &&
        Objects.equals(this.eEzsignsignatureTooltipposition, ezsignsignatureRequestCompoundV2.eEzsignsignatureTooltipposition) &&
        Objects.equals(this.eEzsignsignatureFont, ezsignsignatureRequestCompoundV2.eEzsignsignatureFont) &&
        Objects.equals(this.fkiEzsignfoldersignerassociationIDValidation, ezsignsignatureRequestCompoundV2.fkiEzsignfoldersignerassociationIDValidation) &&
        Objects.equals(this.bEzsignsignatureHandwritten, ezsignsignatureRequestCompoundV2.bEzsignsignatureHandwritten) &&
        Objects.equals(this.bEzsignsignatureReason, ezsignsignatureRequestCompoundV2.bEzsignsignatureReason) &&
        Objects.equals(this.bEzsignsignatureRequired, ezsignsignatureRequestCompoundV2.bEzsignsignatureRequired) &&
        Objects.equals(this.eEzsignsignatureAttachmentnamesource, ezsignsignatureRequestCompoundV2.eEzsignsignatureAttachmentnamesource) &&
        Objects.equals(this.sEzsignsignatureAttachmentdescription, ezsignsignatureRequestCompoundV2.sEzsignsignatureAttachmentdescription) &&
        Objects.equals(this.eEzsignsignatureConsultationtrigger, ezsignsignatureRequestCompoundV2.eEzsignsignatureConsultationtrigger) &&
        Objects.equals(this.iEzsignsignatureValidationstep, ezsignsignatureRequestCompoundV2.iEzsignsignatureValidationstep) &&
        Objects.equals(this.iEzsignsignatureMaxlength, ezsignsignatureRequestCompoundV2.iEzsignsignatureMaxlength) &&
        Objects.equals(this.sEzsignsignatureDefaultvalue, ezsignsignatureRequestCompoundV2.sEzsignsignatureDefaultvalue) &&
        Objects.equals(this.eEzsignsignatureTextvalidation, ezsignsignatureRequestCompoundV2.eEzsignsignatureTextvalidation) &&
        Objects.equals(this.sEzsignsignatureTextvalidationcustommessage, ezsignsignatureRequestCompoundV2.sEzsignsignatureTextvalidationcustommessage) &&
        Objects.equals(this.sEzsignsignatureRegexp, ezsignsignatureRequestCompoundV2.sEzsignsignatureRegexp) &&
        Objects.equals(this.eEzsignsignatureDependencyrequirement, ezsignsignatureRequestCompoundV2.eEzsignsignatureDependencyrequirement) &&
        Objects.equals(this.bEzsignsignatureCustomdate, ezsignsignatureRequestCompoundV2.bEzsignsignatureCustomdate) &&
        Objects.equals(this.aObjEzsignsignaturecustomdate, ezsignsignatureRequestCompoundV2.aObjEzsignsignaturecustomdate) &&
        Objects.equals(this.aObjEzsignelementdependency, ezsignsignatureRequestCompoundV2.aObjEzsignelementdependency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiEzsignsignatureID, fkiEzsignfoldersignerassociationID, iEzsignpagePagenumber, iEzsignsignatureX, iEzsignsignatureY, iEzsignsignatureWidth, iEzsignsignatureHeight, iEzsignsignatureStep, eEzsignsignatureType, fkiEzsigndocumentID, tEzsignsignatureTooltip, eEzsignsignatureTooltipposition, eEzsignsignatureFont, fkiEzsignfoldersignerassociationIDValidation, bEzsignsignatureHandwritten, bEzsignsignatureReason, bEzsignsignatureRequired, eEzsignsignatureAttachmentnamesource, sEzsignsignatureAttachmentdescription, eEzsignsignatureConsultationtrigger, iEzsignsignatureValidationstep, iEzsignsignatureMaxlength, sEzsignsignatureDefaultvalue, eEzsignsignatureTextvalidation, sEzsignsignatureTextvalidationcustommessage, sEzsignsignatureRegexp, eEzsignsignatureDependencyrequirement, bEzsignsignatureCustomdate, aObjEzsignsignaturecustomdate, aObjEzsignelementdependency);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsignsignatureRequestCompoundV2 {\n");
    sb.append("    pkiEzsignsignatureID: ").append(toIndentedString(pkiEzsignsignatureID)).append("\n");
    sb.append("    fkiEzsignfoldersignerassociationID: ").append(toIndentedString(fkiEzsignfoldersignerassociationID)).append("\n");
    sb.append("    iEzsignpagePagenumber: ").append(toIndentedString(iEzsignpagePagenumber)).append("\n");
    sb.append("    iEzsignsignatureX: ").append(toIndentedString(iEzsignsignatureX)).append("\n");
    sb.append("    iEzsignsignatureY: ").append(toIndentedString(iEzsignsignatureY)).append("\n");
    sb.append("    iEzsignsignatureWidth: ").append(toIndentedString(iEzsignsignatureWidth)).append("\n");
    sb.append("    iEzsignsignatureHeight: ").append(toIndentedString(iEzsignsignatureHeight)).append("\n");
    sb.append("    iEzsignsignatureStep: ").append(toIndentedString(iEzsignsignatureStep)).append("\n");
    sb.append("    eEzsignsignatureType: ").append(toIndentedString(eEzsignsignatureType)).append("\n");
    sb.append("    fkiEzsigndocumentID: ").append(toIndentedString(fkiEzsigndocumentID)).append("\n");
    sb.append("    tEzsignsignatureTooltip: ").append(toIndentedString(tEzsignsignatureTooltip)).append("\n");
    sb.append("    eEzsignsignatureTooltipposition: ").append(toIndentedString(eEzsignsignatureTooltipposition)).append("\n");
    sb.append("    eEzsignsignatureFont: ").append(toIndentedString(eEzsignsignatureFont)).append("\n");
    sb.append("    fkiEzsignfoldersignerassociationIDValidation: ").append(toIndentedString(fkiEzsignfoldersignerassociationIDValidation)).append("\n");
    sb.append("    bEzsignsignatureHandwritten: ").append(toIndentedString(bEzsignsignatureHandwritten)).append("\n");
    sb.append("    bEzsignsignatureReason: ").append(toIndentedString(bEzsignsignatureReason)).append("\n");
    sb.append("    bEzsignsignatureRequired: ").append(toIndentedString(bEzsignsignatureRequired)).append("\n");
    sb.append("    eEzsignsignatureAttachmentnamesource: ").append(toIndentedString(eEzsignsignatureAttachmentnamesource)).append("\n");
    sb.append("    sEzsignsignatureAttachmentdescription: ").append(toIndentedString(sEzsignsignatureAttachmentdescription)).append("\n");
    sb.append("    eEzsignsignatureConsultationtrigger: ").append(toIndentedString(eEzsignsignatureConsultationtrigger)).append("\n");
    sb.append("    iEzsignsignatureValidationstep: ").append(toIndentedString(iEzsignsignatureValidationstep)).append("\n");
    sb.append("    iEzsignsignatureMaxlength: ").append(toIndentedString(iEzsignsignatureMaxlength)).append("\n");
    sb.append("    sEzsignsignatureDefaultvalue: ").append(toIndentedString(sEzsignsignatureDefaultvalue)).append("\n");
    sb.append("    eEzsignsignatureTextvalidation: ").append(toIndentedString(eEzsignsignatureTextvalidation)).append("\n");
    sb.append("    sEzsignsignatureTextvalidationcustommessage: ").append(toIndentedString(sEzsignsignatureTextvalidationcustommessage)).append("\n");
    sb.append("    sEzsignsignatureRegexp: ").append(toIndentedString(sEzsignsignatureRegexp)).append("\n");
    sb.append("    eEzsignsignatureDependencyrequirement: ").append(toIndentedString(eEzsignsignatureDependencyrequirement)).append("\n");
    sb.append("    bEzsignsignatureCustomdate: ").append(toIndentedString(bEzsignsignatureCustomdate)).append("\n");
    sb.append("    aObjEzsignsignaturecustomdate: ").append(toIndentedString(aObjEzsignsignaturecustomdate)).append("\n");
    sb.append("    aObjEzsignelementdependency: ").append(toIndentedString(aObjEzsignelementdependency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiEzsignsignatureID");
    openapiFields.add("fkiEzsignfoldersignerassociationID");
    openapiFields.add("iEzsignpagePagenumber");
    openapiFields.add("iEzsignsignatureX");
    openapiFields.add("iEzsignsignatureY");
    openapiFields.add("iEzsignsignatureWidth");
    openapiFields.add("iEzsignsignatureHeight");
    openapiFields.add("iEzsignsignatureStep");
    openapiFields.add("eEzsignsignatureType");
    openapiFields.add("fkiEzsigndocumentID");
    openapiFields.add("tEzsignsignatureTooltip");
    openapiFields.add("eEzsignsignatureTooltipposition");
    openapiFields.add("eEzsignsignatureFont");
    openapiFields.add("fkiEzsignfoldersignerassociationIDValidation");
    openapiFields.add("bEzsignsignatureHandwritten");
    openapiFields.add("bEzsignsignatureReason");
    openapiFields.add("bEzsignsignatureRequired");
    openapiFields.add("eEzsignsignatureAttachmentnamesource");
    openapiFields.add("sEzsignsignatureAttachmentdescription");
    openapiFields.add("eEzsignsignatureConsultationtrigger");
    openapiFields.add("iEzsignsignatureValidationstep");
    openapiFields.add("iEzsignsignatureMaxlength");
    openapiFields.add("sEzsignsignatureDefaultvalue");
    openapiFields.add("eEzsignsignatureTextvalidation");
    openapiFields.add("sEzsignsignatureTextvalidationcustommessage");
    openapiFields.add("sEzsignsignatureRegexp");
    openapiFields.add("eEzsignsignatureDependencyrequirement");
    openapiFields.add("bEzsignsignatureCustomdate");
    openapiFields.add("a_objEzsignsignaturecustomdate");
    openapiFields.add("a_objEzsignelementdependency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fkiEzsignfoldersignerassociationID");
    openapiRequiredFields.add("iEzsignpagePagenumber");
    openapiRequiredFields.add("iEzsignsignatureX");
    openapiRequiredFields.add("iEzsignsignatureY");
    openapiRequiredFields.add("iEzsignsignatureStep");
    openapiRequiredFields.add("eEzsignsignatureType");
    openapiRequiredFields.add("fkiEzsigndocumentID");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EzsignsignatureRequestCompoundV2
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EzsignsignatureRequestCompoundV2.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsignsignatureRequestCompoundV2 is not found in the empty JSON string", EzsignsignatureRequestCompoundV2.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EzsignsignatureRequestCompoundV2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsignsignatureRequestCompoundV2` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EzsignsignatureRequestCompoundV2.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `eEzsignsignatureType`
      FieldEEzsignsignatureType.validateJsonElement(jsonObj.get("eEzsignsignatureType"));
      if ((jsonObj.get("tEzsignsignatureTooltip") != null && !jsonObj.get("tEzsignsignatureTooltip").isJsonNull()) && !jsonObj.get("tEzsignsignatureTooltip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tEzsignsignatureTooltip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tEzsignsignatureTooltip").toString()));
      }
      // validate the optional field `eEzsignsignatureTooltipposition`
      if (jsonObj.get("eEzsignsignatureTooltipposition") != null && !jsonObj.get("eEzsignsignatureTooltipposition").isJsonNull()) {
        FieldEEzsignsignatureTooltipposition.validateJsonElement(jsonObj.get("eEzsignsignatureTooltipposition"));
      }
      // validate the optional field `eEzsignsignatureFont`
      if (jsonObj.get("eEzsignsignatureFont") != null && !jsonObj.get("eEzsignsignatureFont").isJsonNull()) {
        FieldEEzsignsignatureFont.validateJsonElement(jsonObj.get("eEzsignsignatureFont"));
      }
      // validate the optional field `eEzsignsignatureAttachmentnamesource`
      if (jsonObj.get("eEzsignsignatureAttachmentnamesource") != null && !jsonObj.get("eEzsignsignatureAttachmentnamesource").isJsonNull()) {
        FieldEEzsignsignatureAttachmentnamesource.validateJsonElement(jsonObj.get("eEzsignsignatureAttachmentnamesource"));
      }
      if ((jsonObj.get("sEzsignsignatureAttachmentdescription") != null && !jsonObj.get("sEzsignsignatureAttachmentdescription").isJsonNull()) && !jsonObj.get("sEzsignsignatureAttachmentdescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsignsignatureAttachmentdescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsignsignatureAttachmentdescription").toString()));
      }
      // validate the optional field `eEzsignsignatureConsultationtrigger`
      if (jsonObj.get("eEzsignsignatureConsultationtrigger") != null && !jsonObj.get("eEzsignsignatureConsultationtrigger").isJsonNull()) {
        FieldEEzsignsignatureConsultationtrigger.validateJsonElement(jsonObj.get("eEzsignsignatureConsultationtrigger"));
      }
      if ((jsonObj.get("sEzsignsignatureDefaultvalue") != null && !jsonObj.get("sEzsignsignatureDefaultvalue").isJsonNull()) && !jsonObj.get("sEzsignsignatureDefaultvalue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsignsignatureDefaultvalue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsignsignatureDefaultvalue").toString()));
      }
      // validate the optional field `eEzsignsignatureTextvalidation`
      if (jsonObj.get("eEzsignsignatureTextvalidation") != null && !jsonObj.get("eEzsignsignatureTextvalidation").isJsonNull()) {
        EnumTextvalidation.validateJsonElement(jsonObj.get("eEzsignsignatureTextvalidation"));
      }
      if ((jsonObj.get("sEzsignsignatureTextvalidationcustommessage") != null && !jsonObj.get("sEzsignsignatureTextvalidationcustommessage").isJsonNull()) && !jsonObj.get("sEzsignsignatureTextvalidationcustommessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsignsignatureTextvalidationcustommessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsignsignatureTextvalidationcustommessage").toString()));
      }
      if ((jsonObj.get("sEzsignsignatureRegexp") != null && !jsonObj.get("sEzsignsignatureRegexp").isJsonNull()) && !jsonObj.get("sEzsignsignatureRegexp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsignsignatureRegexp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsignsignatureRegexp").toString()));
      }
      // validate the optional field `eEzsignsignatureDependencyrequirement`
      if (jsonObj.get("eEzsignsignatureDependencyrequirement") != null && !jsonObj.get("eEzsignsignatureDependencyrequirement").isJsonNull()) {
        FieldEEzsignsignatureDependencyrequirement.validateJsonElement(jsonObj.get("eEzsignsignatureDependencyrequirement"));
      }
      if (jsonObj.get("a_objEzsignsignaturecustomdate") != null && !jsonObj.get("a_objEzsignsignaturecustomdate").isJsonNull()) {
        JsonArray jsonArrayaObjEzsignsignaturecustomdate = jsonObj.getAsJsonArray("a_objEzsignsignaturecustomdate");
        if (jsonArrayaObjEzsignsignaturecustomdate != null) {
          // ensure the json data is an array
          if (!jsonObj.get("a_objEzsignsignaturecustomdate").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `a_objEzsignsignaturecustomdate` to be an array in the JSON string but got `%s`", jsonObj.get("a_objEzsignsignaturecustomdate").toString()));
          }

          // validate the optional field `a_objEzsignsignaturecustomdate` (array)
          for (int i = 0; i < jsonArrayaObjEzsignsignaturecustomdate.size(); i++) {
            EzsignsignaturecustomdateRequestCompoundV2.validateJsonElement(jsonArrayaObjEzsignsignaturecustomdate.get(i));
          };
        }
      }
      if (jsonObj.get("a_objEzsignelementdependency") != null && !jsonObj.get("a_objEzsignelementdependency").isJsonNull()) {
        JsonArray jsonArrayaObjEzsignelementdependency = jsonObj.getAsJsonArray("a_objEzsignelementdependency");
        if (jsonArrayaObjEzsignelementdependency != null) {
          // ensure the json data is an array
          if (!jsonObj.get("a_objEzsignelementdependency").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `a_objEzsignelementdependency` to be an array in the JSON string but got `%s`", jsonObj.get("a_objEzsignelementdependency").toString()));
          }

          // validate the optional field `a_objEzsignelementdependency` (array)
          for (int i = 0; i < jsonArrayaObjEzsignelementdependency.size(); i++) {
            EzsignelementdependencyRequestCompound.validateJsonElement(jsonArrayaObjEzsignelementdependency.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsignsignatureRequestCompoundV2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsignsignatureRequestCompoundV2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsignsignatureRequestCompoundV2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsignsignatureRequestCompoundV2.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsignsignatureRequestCompoundV2>() {
           @Override
           public void write(JsonWriter out, EzsignsignatureRequestCompoundV2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsignsignatureRequestCompoundV2 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EzsignsignatureRequestCompoundV2 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EzsignsignatureRequestCompoundV2
   * @throws IOException if the JSON string is invalid with respect to EzsignsignatureRequestCompoundV2
   */
  public static EzsignsignatureRequestCompoundV2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsignsignatureRequestCompoundV2.class);
  }

  /**
   * Convert an instance of EzsignsignatureRequestCompoundV2 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

