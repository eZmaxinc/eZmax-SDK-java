/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.FieldEEzsigntemplateType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Ezsigntemplate Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-14T20:13:03.553513468Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class EzsigntemplateRequestV2 {
  public static final String SERIALIZED_NAME_PKI_EZSIGNTEMPLATE_I_D = "pkiEzsigntemplateID";
  @SerializedName(SERIALIZED_NAME_PKI_EZSIGNTEMPLATE_I_D)
  private Integer pkiEzsigntemplateID;

  public static final String SERIALIZED_NAME_FKI_EZSIGNFOLDERTYPE_I_D = "fkiEzsignfoldertypeID";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNFOLDERTYPE_I_D)
  private Integer fkiEzsignfoldertypeID;

  public static final String SERIALIZED_NAME_FKI_LANGUAGE_I_D = "fkiLanguageID";
  @SerializedName(SERIALIZED_NAME_FKI_LANGUAGE_I_D)
  private Integer fkiLanguageID;

  public static final String SERIALIZED_NAME_S_EZSIGNTEMPLATE_DESCRIPTION = "sEzsigntemplateDescription";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNTEMPLATE_DESCRIPTION)
  private String sEzsigntemplateDescription;

  public static final String SERIALIZED_NAME_S_EZSIGNTEMPLATE_FILENAMEPATTERN = "sEzsigntemplateFilenamepattern";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNTEMPLATE_FILENAMEPATTERN)
  private String sEzsigntemplateFilenamepattern;

  public static final String SERIALIZED_NAME_B_EZSIGNTEMPLATE_ADMINONLY = "bEzsigntemplateAdminonly";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNTEMPLATE_ADMINONLY)
  private Boolean bEzsigntemplateAdminonly;

  public static final String SERIALIZED_NAME_E_EZSIGNTEMPLATE_TYPE = "eEzsigntemplateType";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNTEMPLATE_TYPE)
  private FieldEEzsigntemplateType eEzsigntemplateType;

  public EzsigntemplateRequestV2() {
  }

  public EzsigntemplateRequestV2 pkiEzsigntemplateID(Integer pkiEzsigntemplateID) {
    this.pkiEzsigntemplateID = pkiEzsigntemplateID;
    return this;
  }

   /**
   * The unique ID of the Ezsigntemplate
   * minimum: 0
   * @return pkiEzsigntemplateID
  **/
  @javax.annotation.Nullable
  public Integer getPkiEzsigntemplateID() {
    return pkiEzsigntemplateID;
  }

  public void setPkiEzsigntemplateID(Integer pkiEzsigntemplateID) {
    this.pkiEzsigntemplateID = pkiEzsigntemplateID;
  }


  public EzsigntemplateRequestV2 fkiEzsignfoldertypeID(Integer fkiEzsignfoldertypeID) {
    this.fkiEzsignfoldertypeID = fkiEzsignfoldertypeID;
    return this;
  }

   /**
   * The unique ID of the Ezsignfoldertype.
   * minimum: 0
   * maximum: 65535
   * @return fkiEzsignfoldertypeID
  **/
  @javax.annotation.Nullable
  public Integer getFkiEzsignfoldertypeID() {
    return fkiEzsignfoldertypeID;
  }

  public void setFkiEzsignfoldertypeID(Integer fkiEzsignfoldertypeID) {
    this.fkiEzsignfoldertypeID = fkiEzsignfoldertypeID;
  }


  public EzsigntemplateRequestV2 fkiLanguageID(Integer fkiLanguageID) {
    this.fkiLanguageID = fkiLanguageID;
    return this;
  }

   /**
   * The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
   * minimum: 1
   * maximum: 2
   * @return fkiLanguageID
  **/
  @javax.annotation.Nonnull
  public Integer getFkiLanguageID() {
    return fkiLanguageID;
  }

  public void setFkiLanguageID(Integer fkiLanguageID) {
    this.fkiLanguageID = fkiLanguageID;
  }


  public EzsigntemplateRequestV2 sEzsigntemplateDescription(String sEzsigntemplateDescription) {
    this.sEzsigntemplateDescription = sEzsigntemplateDescription;
    return this;
  }

   /**
   * The description of the Ezsigntemplate
   * @return sEzsigntemplateDescription
  **/
  @javax.annotation.Nonnull
  public String getsEzsigntemplateDescription() {
    return sEzsigntemplateDescription;
  }

  public void setsEzsigntemplateDescription(String sEzsigntemplateDescription) {
    this.sEzsigntemplateDescription = sEzsigntemplateDescription;
  }


  public EzsigntemplateRequestV2 sEzsigntemplateFilenamepattern(String sEzsigntemplateFilenamepattern) {
    this.sEzsigntemplateFilenamepattern = sEzsigntemplateFilenamepattern;
    return this;
  }

   /**
   * The filename pattern of the Ezsigntemplate
   * @return sEzsigntemplateFilenamepattern
  **/
  @javax.annotation.Nullable
  public String getsEzsigntemplateFilenamepattern() {
    return sEzsigntemplateFilenamepattern;
  }

  public void setsEzsigntemplateFilenamepattern(String sEzsigntemplateFilenamepattern) {
    this.sEzsigntemplateFilenamepattern = sEzsigntemplateFilenamepattern;
  }


  public EzsigntemplateRequestV2 bEzsigntemplateAdminonly(Boolean bEzsigntemplateAdminonly) {
    this.bEzsigntemplateAdminonly = bEzsigntemplateAdminonly;
    return this;
  }

   /**
   * Whether the Ezsigntemplate can be accessed by admin users only (eUserType&#x3D;Normal)
   * @return bEzsigntemplateAdminonly
  **/
  @javax.annotation.Nonnull
  public Boolean getbEzsigntemplateAdminonly() {
    return bEzsigntemplateAdminonly;
  }

  public void setbEzsigntemplateAdminonly(Boolean bEzsigntemplateAdminonly) {
    this.bEzsigntemplateAdminonly = bEzsigntemplateAdminonly;
  }


  public EzsigntemplateRequestV2 eEzsigntemplateType(FieldEEzsigntemplateType eEzsigntemplateType) {
    this.eEzsigntemplateType = eEzsigntemplateType;
    return this;
  }

   /**
   * Get eEzsigntemplateType
   * @return eEzsigntemplateType
  **/
  @javax.annotation.Nonnull
  public FieldEEzsigntemplateType geteEzsigntemplateType() {
    return eEzsigntemplateType;
  }

  public void seteEzsigntemplateType(FieldEEzsigntemplateType eEzsigntemplateType) {
    this.eEzsigntemplateType = eEzsigntemplateType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsigntemplateRequestV2 ezsigntemplateRequestV2 = (EzsigntemplateRequestV2) o;
    return Objects.equals(this.pkiEzsigntemplateID, ezsigntemplateRequestV2.pkiEzsigntemplateID) &&
        Objects.equals(this.fkiEzsignfoldertypeID, ezsigntemplateRequestV2.fkiEzsignfoldertypeID) &&
        Objects.equals(this.fkiLanguageID, ezsigntemplateRequestV2.fkiLanguageID) &&
        Objects.equals(this.sEzsigntemplateDescription, ezsigntemplateRequestV2.sEzsigntemplateDescription) &&
        Objects.equals(this.sEzsigntemplateFilenamepattern, ezsigntemplateRequestV2.sEzsigntemplateFilenamepattern) &&
        Objects.equals(this.bEzsigntemplateAdminonly, ezsigntemplateRequestV2.bEzsigntemplateAdminonly) &&
        Objects.equals(this.eEzsigntemplateType, ezsigntemplateRequestV2.eEzsigntemplateType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiEzsigntemplateID, fkiEzsignfoldertypeID, fkiLanguageID, sEzsigntemplateDescription, sEzsigntemplateFilenamepattern, bEzsigntemplateAdminonly, eEzsigntemplateType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsigntemplateRequestV2 {\n");
    sb.append("    pkiEzsigntemplateID: ").append(toIndentedString(pkiEzsigntemplateID)).append("\n");
    sb.append("    fkiEzsignfoldertypeID: ").append(toIndentedString(fkiEzsignfoldertypeID)).append("\n");
    sb.append("    fkiLanguageID: ").append(toIndentedString(fkiLanguageID)).append("\n");
    sb.append("    sEzsigntemplateDescription: ").append(toIndentedString(sEzsigntemplateDescription)).append("\n");
    sb.append("    sEzsigntemplateFilenamepattern: ").append(toIndentedString(sEzsigntemplateFilenamepattern)).append("\n");
    sb.append("    bEzsigntemplateAdminonly: ").append(toIndentedString(bEzsigntemplateAdminonly)).append("\n");
    sb.append("    eEzsigntemplateType: ").append(toIndentedString(eEzsigntemplateType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiEzsigntemplateID");
    openapiFields.add("fkiEzsignfoldertypeID");
    openapiFields.add("fkiLanguageID");
    openapiFields.add("sEzsigntemplateDescription");
    openapiFields.add("sEzsigntemplateFilenamepattern");
    openapiFields.add("bEzsigntemplateAdminonly");
    openapiFields.add("eEzsigntemplateType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fkiLanguageID");
    openapiRequiredFields.add("sEzsigntemplateDescription");
    openapiRequiredFields.add("bEzsigntemplateAdminonly");
    openapiRequiredFields.add("eEzsigntemplateType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EzsigntemplateRequestV2
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EzsigntemplateRequestV2.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsigntemplateRequestV2 is not found in the empty JSON string", EzsigntemplateRequestV2.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EzsigntemplateRequestV2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsigntemplateRequestV2` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EzsigntemplateRequestV2.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("sEzsigntemplateDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsigntemplateDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsigntemplateDescription").toString()));
      }
      if ((jsonObj.get("sEzsigntemplateFilenamepattern") != null && !jsonObj.get("sEzsigntemplateFilenamepattern").isJsonNull()) && !jsonObj.get("sEzsigntemplateFilenamepattern").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsigntemplateFilenamepattern` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsigntemplateFilenamepattern").toString()));
      }
      // validate the required field `eEzsigntemplateType`
      FieldEEzsigntemplateType.validateJsonElement(jsonObj.get("eEzsigntemplateType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsigntemplateRequestV2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsigntemplateRequestV2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsigntemplateRequestV2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsigntemplateRequestV2.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsigntemplateRequestV2>() {
           @Override
           public void write(JsonWriter out, EzsigntemplateRequestV2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsigntemplateRequestV2 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EzsigntemplateRequestV2 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EzsigntemplateRequestV2
  * @throws IOException if the JSON string is invalid with respect to EzsigntemplateRequestV2
  */
  public static EzsigntemplateRequestV2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsigntemplateRequestV2.class);
  }

 /**
  * Convert an instance of EzsigntemplateRequestV2 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

