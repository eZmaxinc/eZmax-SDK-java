/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.CommonAudit;
import com.ezmax.api.model.CustomContactNameResponse;
import com.ezmax.api.model.MultilingualApikeyDescription;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * An Apikey Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-28T21:41:20.249020914Z[Etc/UTC]", comments = "Generator version: 7.11.0")
public class ApikeyResponse {
  public static final String SERIALIZED_NAME_PKI_APIKEY_I_D = "pkiApikeyID";
  @SerializedName(SERIALIZED_NAME_PKI_APIKEY_I_D)
  @javax.annotation.Nonnull
  private Integer pkiApikeyID;

  public static final String SERIALIZED_NAME_FKI_USER_I_D = "fkiUserID";
  @SerializedName(SERIALIZED_NAME_FKI_USER_I_D)
  @javax.annotation.Nonnull
  private Integer fkiUserID;

  public static final String SERIALIZED_NAME_OBJ_APIKEY_DESCRIPTION = "objApikeyDescription";
  @SerializedName(SERIALIZED_NAME_OBJ_APIKEY_DESCRIPTION)
  @javax.annotation.Nonnull
  private MultilingualApikeyDescription objApikeyDescription;

  public static final String SERIALIZED_NAME_OBJ_CONTACT_NAME = "objContactName";
  @SerializedName(SERIALIZED_NAME_OBJ_CONTACT_NAME)
  @javax.annotation.Nonnull
  private CustomContactNameResponse objContactName;

  public static final String SERIALIZED_NAME_S_APIKEY_APIKEY = "sApikeyApikey";
  @SerializedName(SERIALIZED_NAME_S_APIKEY_APIKEY)
  @javax.annotation.Nullable
  private String sApikeyApikey;

  public static final String SERIALIZED_NAME_S_APIKEY_SECRET = "sApikeySecret";
  @SerializedName(SERIALIZED_NAME_S_APIKEY_SECRET)
  @javax.annotation.Nullable
  private String sApikeySecret;

  public static final String SERIALIZED_NAME_B_APIKEY_ISACTIVE = "bApikeyIsactive";
  @SerializedName(SERIALIZED_NAME_B_APIKEY_ISACTIVE)
  @javax.annotation.Nonnull
  private Boolean bApikeyIsactive;

  public static final String SERIALIZED_NAME_B_APIKEY_ISSIGNED = "bApikeyIssigned";
  @SerializedName(SERIALIZED_NAME_B_APIKEY_ISSIGNED)
  @javax.annotation.Nullable
  private Boolean bApikeyIssigned;

  public static final String SERIALIZED_NAME_OBJ_AUDIT = "objAudit";
  @SerializedName(SERIALIZED_NAME_OBJ_AUDIT)
  @javax.annotation.Nonnull
  private CommonAudit objAudit;

  public ApikeyResponse() {
  }

  public ApikeyResponse pkiApikeyID(@javax.annotation.Nonnull Integer pkiApikeyID) {
    this.pkiApikeyID = pkiApikeyID;
    return this;
  }

  /**
   * The unique ID of the Apikey
   * minimum: 0
   * @return pkiApikeyID
   */
  @javax.annotation.Nonnull
  public Integer getPkiApikeyID() {
    return pkiApikeyID;
  }

  public void setPkiApikeyID(@javax.annotation.Nonnull Integer pkiApikeyID) {
    this.pkiApikeyID = pkiApikeyID;
  }


  public ApikeyResponse fkiUserID(@javax.annotation.Nonnull Integer fkiUserID) {
    this.fkiUserID = fkiUserID;
    return this;
  }

  /**
   * The unique ID of the User
   * minimum: 0
   * @return fkiUserID
   */
  @javax.annotation.Nonnull
  public Integer getFkiUserID() {
    return fkiUserID;
  }

  public void setFkiUserID(@javax.annotation.Nonnull Integer fkiUserID) {
    this.fkiUserID = fkiUserID;
  }


  public ApikeyResponse objApikeyDescription(@javax.annotation.Nonnull MultilingualApikeyDescription objApikeyDescription) {
    this.objApikeyDescription = objApikeyDescription;
    return this;
  }

  /**
   * Get objApikeyDescription
   * @return objApikeyDescription
   */
  @javax.annotation.Nonnull
  public MultilingualApikeyDescription getObjApikeyDescription() {
    return objApikeyDescription;
  }

  public void setObjApikeyDescription(@javax.annotation.Nonnull MultilingualApikeyDescription objApikeyDescription) {
    this.objApikeyDescription = objApikeyDescription;
  }


  public ApikeyResponse objContactName(@javax.annotation.Nonnull CustomContactNameResponse objContactName) {
    this.objContactName = objContactName;
    return this;
  }

  /**
   * Get objContactName
   * @return objContactName
   */
  @javax.annotation.Nonnull
  public CustomContactNameResponse getObjContactName() {
    return objContactName;
  }

  public void setObjContactName(@javax.annotation.Nonnull CustomContactNameResponse objContactName) {
    this.objContactName = objContactName;
  }


  public ApikeyResponse sApikeyApikey(@javax.annotation.Nullable String sApikeyApikey) {
    this.sApikeyApikey = sApikeyApikey;
    return this;
  }

  /**
   * The Apikey for the API key.  This will be hidden if we are not creating or regenerating the Apikey.
   * @return sApikeyApikey
   */
  @javax.annotation.Nullable
  public String getsApikeyApikey() {
    return sApikeyApikey;
  }

  public void setsApikeyApikey(@javax.annotation.Nullable String sApikeyApikey) {
    this.sApikeyApikey = sApikeyApikey;
  }


  public ApikeyResponse sApikeySecret(@javax.annotation.Nullable String sApikeySecret) {
    this.sApikeySecret = sApikeySecret;
    return this;
  }

  /**
   * The Secret for the API key.  This will be hidden if we are not creating or regenerating the Apikey.
   * @return sApikeySecret
   */
  @javax.annotation.Nullable
  public String getsApikeySecret() {
    return sApikeySecret;
  }

  public void setsApikeySecret(@javax.annotation.Nullable String sApikeySecret) {
    this.sApikeySecret = sApikeySecret;
  }


  public ApikeyResponse bApikeyIsactive(@javax.annotation.Nonnull Boolean bApikeyIsactive) {
    this.bApikeyIsactive = bApikeyIsactive;
    return this;
  }

  /**
   * Whether the apikey is active or not
   * @return bApikeyIsactive
   */
  @javax.annotation.Nonnull
  public Boolean getbApikeyIsactive() {
    return bApikeyIsactive;
  }

  public void setbApikeyIsactive(@javax.annotation.Nonnull Boolean bApikeyIsactive) {
    this.bApikeyIsactive = bApikeyIsactive;
  }


  public ApikeyResponse bApikeyIssigned(@javax.annotation.Nullable Boolean bApikeyIssigned) {
    this.bApikeyIssigned = bApikeyIssigned;
    return this;
  }

  /**
   * Whether the apikey is signed or not
   * @return bApikeyIssigned
   */
  @javax.annotation.Nullable
  public Boolean getbApikeyIssigned() {
    return bApikeyIssigned;
  }

  public void setbApikeyIssigned(@javax.annotation.Nullable Boolean bApikeyIssigned) {
    this.bApikeyIssigned = bApikeyIssigned;
  }


  public ApikeyResponse objAudit(@javax.annotation.Nonnull CommonAudit objAudit) {
    this.objAudit = objAudit;
    return this;
  }

  /**
   * Get objAudit
   * @return objAudit
   */
  @javax.annotation.Nonnull
  public CommonAudit getObjAudit() {
    return objAudit;
  }

  public void setObjAudit(@javax.annotation.Nonnull CommonAudit objAudit) {
    this.objAudit = objAudit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApikeyResponse apikeyResponse = (ApikeyResponse) o;
    return Objects.equals(this.pkiApikeyID, apikeyResponse.pkiApikeyID) &&
        Objects.equals(this.fkiUserID, apikeyResponse.fkiUserID) &&
        Objects.equals(this.objApikeyDescription, apikeyResponse.objApikeyDescription) &&
        Objects.equals(this.objContactName, apikeyResponse.objContactName) &&
        Objects.equals(this.sApikeyApikey, apikeyResponse.sApikeyApikey) &&
        Objects.equals(this.sApikeySecret, apikeyResponse.sApikeySecret) &&
        Objects.equals(this.bApikeyIsactive, apikeyResponse.bApikeyIsactive) &&
        Objects.equals(this.bApikeyIssigned, apikeyResponse.bApikeyIssigned) &&
        Objects.equals(this.objAudit, apikeyResponse.objAudit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiApikeyID, fkiUserID, objApikeyDescription, objContactName, sApikeyApikey, sApikeySecret, bApikeyIsactive, bApikeyIssigned, objAudit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApikeyResponse {\n");
    sb.append("    pkiApikeyID: ").append(toIndentedString(pkiApikeyID)).append("\n");
    sb.append("    fkiUserID: ").append(toIndentedString(fkiUserID)).append("\n");
    sb.append("    objApikeyDescription: ").append(toIndentedString(objApikeyDescription)).append("\n");
    sb.append("    objContactName: ").append(toIndentedString(objContactName)).append("\n");
    sb.append("    sApikeyApikey: ").append(toIndentedString(sApikeyApikey)).append("\n");
    sb.append("    sApikeySecret: ").append(toIndentedString(sApikeySecret)).append("\n");
    sb.append("    bApikeyIsactive: ").append(toIndentedString(bApikeyIsactive)).append("\n");
    sb.append("    bApikeyIssigned: ").append(toIndentedString(bApikeyIssigned)).append("\n");
    sb.append("    objAudit: ").append(toIndentedString(objAudit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiApikeyID");
    openapiFields.add("fkiUserID");
    openapiFields.add("objApikeyDescription");
    openapiFields.add("objContactName");
    openapiFields.add("sApikeyApikey");
    openapiFields.add("sApikeySecret");
    openapiFields.add("bApikeyIsactive");
    openapiFields.add("bApikeyIssigned");
    openapiFields.add("objAudit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiApikeyID");
    openapiRequiredFields.add("fkiUserID");
    openapiRequiredFields.add("objApikeyDescription");
    openapiRequiredFields.add("objContactName");
    openapiRequiredFields.add("bApikeyIsactive");
    openapiRequiredFields.add("objAudit");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApikeyResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApikeyResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApikeyResponse is not found in the empty JSON string", ApikeyResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApikeyResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApikeyResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApikeyResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `objApikeyDescription`
      MultilingualApikeyDescription.validateJsonElement(jsonObj.get("objApikeyDescription"));
      // validate the required field `objContactName`
      CustomContactNameResponse.validateJsonElement(jsonObj.get("objContactName"));
      if ((jsonObj.get("sApikeyApikey") != null && !jsonObj.get("sApikeyApikey").isJsonNull()) && !jsonObj.get("sApikeyApikey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sApikeyApikey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sApikeyApikey").toString()));
      }
      if ((jsonObj.get("sApikeySecret") != null && !jsonObj.get("sApikeySecret").isJsonNull()) && !jsonObj.get("sApikeySecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sApikeySecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sApikeySecret").toString()));
      }
      // validate the required field `objAudit`
      CommonAudit.validateJsonElement(jsonObj.get("objAudit"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApikeyResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApikeyResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApikeyResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApikeyResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ApikeyResponse>() {
           @Override
           public void write(JsonWriter out, ApikeyResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApikeyResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApikeyResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApikeyResponse
   * @throws IOException if the JSON string is invalid with respect to ApikeyResponse
   */
  public static ApikeyResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApikeyResponse.class);
  }

  /**
   * Convert an instance of ApikeyResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

