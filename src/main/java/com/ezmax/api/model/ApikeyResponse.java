/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.ezmax.api.model.CommonAudit;
import com.ezmax.api.model.MultilingualApikeyDescription;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * An Apikey Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-22T15:33:11.356591451Z[Etc/UTC]")
public class ApikeyResponse {
  public static final String SERIALIZED_NAME_PKI_APIKEY_I_D = "pkiApikeyID";
  @SerializedName(SERIALIZED_NAME_PKI_APIKEY_I_D)
  private Integer pkiApikeyID;

  public static final String SERIALIZED_NAME_FKI_USER_I_D = "fkiUserID";
  @SerializedName(SERIALIZED_NAME_FKI_USER_I_D)
  private Integer fkiUserID;

  public static final String SERIALIZED_NAME_OBJ_APIKEY_DESCRIPTION = "objApikeyDescription";
  @SerializedName(SERIALIZED_NAME_OBJ_APIKEY_DESCRIPTION)
  private MultilingualApikeyDescription objApikeyDescription;

  public static final String SERIALIZED_NAME_S_COMPUTED_TOKEN = "sComputedToken";
  @SerializedName(SERIALIZED_NAME_S_COMPUTED_TOKEN)
  private String sComputedToken;

  public static final String SERIALIZED_NAME_B_APIKEY_ISACTIVE = "bApikeyIsactive";
  @SerializedName(SERIALIZED_NAME_B_APIKEY_ISACTIVE)
  private Boolean bApikeyIsactive;

  public static final String SERIALIZED_NAME_OBJ_AUDIT = "objAudit";
  @SerializedName(SERIALIZED_NAME_OBJ_AUDIT)
  private CommonAudit objAudit;

  public ApikeyResponse() {
  }

  public ApikeyResponse pkiApikeyID(Integer pkiApikeyID) {
    
    this.pkiApikeyID = pkiApikeyID;
    return this;
  }

   /**
   * The unique ID of the Apikey
   * minimum: 0
   * @return pkiApikeyID
  **/
  @javax.annotation.Nonnull
  public Integer getPkiApikeyID() {
    return pkiApikeyID;
  }


  public void setPkiApikeyID(Integer pkiApikeyID) {
    this.pkiApikeyID = pkiApikeyID;
  }


  public ApikeyResponse fkiUserID(Integer fkiUserID) {
    
    this.fkiUserID = fkiUserID;
    return this;
  }

   /**
   * The unique ID of the User
   * minimum: 0
   * @return fkiUserID
  **/
  @javax.annotation.Nonnull
  public Integer getFkiUserID() {
    return fkiUserID;
  }


  public void setFkiUserID(Integer fkiUserID) {
    this.fkiUserID = fkiUserID;
  }


  public ApikeyResponse objApikeyDescription(MultilingualApikeyDescription objApikeyDescription) {
    
    this.objApikeyDescription = objApikeyDescription;
    return this;
  }

   /**
   * Get objApikeyDescription
   * @return objApikeyDescription
  **/
  @javax.annotation.Nonnull
  public MultilingualApikeyDescription getObjApikeyDescription() {
    return objApikeyDescription;
  }


  public void setObjApikeyDescription(MultilingualApikeyDescription objApikeyDescription) {
    this.objApikeyDescription = objApikeyDescription;
  }


  public ApikeyResponse sComputedToken(String sComputedToken) {
    
    this.sComputedToken = sComputedToken;
    return this;
  }

   /**
   * The secret token for the API key.  This will be returned only on creation.
   * @return sComputedToken
  **/
  @javax.annotation.Nullable
  public String getsComputedToken() {
    return sComputedToken;
  }


  public void setsComputedToken(String sComputedToken) {
    this.sComputedToken = sComputedToken;
  }


  public ApikeyResponse bApikeyIsactive(Boolean bApikeyIsactive) {
    
    this.bApikeyIsactive = bApikeyIsactive;
    return this;
  }

   /**
   * Whether the apikey is active or not
   * @return bApikeyIsactive
  **/
  @javax.annotation.Nonnull
  public Boolean getbApikeyIsactive() {
    return bApikeyIsactive;
  }


  public void setbApikeyIsactive(Boolean bApikeyIsactive) {
    this.bApikeyIsactive = bApikeyIsactive;
  }


  public ApikeyResponse objAudit(CommonAudit objAudit) {
    
    this.objAudit = objAudit;
    return this;
  }

   /**
   * Get objAudit
   * @return objAudit
  **/
  @javax.annotation.Nonnull
  public CommonAudit getObjAudit() {
    return objAudit;
  }


  public void setObjAudit(CommonAudit objAudit) {
    this.objAudit = objAudit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApikeyResponse apikeyResponse = (ApikeyResponse) o;
    return Objects.equals(this.pkiApikeyID, apikeyResponse.pkiApikeyID) &&
        Objects.equals(this.fkiUserID, apikeyResponse.fkiUserID) &&
        Objects.equals(this.objApikeyDescription, apikeyResponse.objApikeyDescription) &&
        Objects.equals(this.sComputedToken, apikeyResponse.sComputedToken) &&
        Objects.equals(this.bApikeyIsactive, apikeyResponse.bApikeyIsactive) &&
        Objects.equals(this.objAudit, apikeyResponse.objAudit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiApikeyID, fkiUserID, objApikeyDescription, sComputedToken, bApikeyIsactive, objAudit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApikeyResponse {\n");
    sb.append("    pkiApikeyID: ").append(toIndentedString(pkiApikeyID)).append("\n");
    sb.append("    fkiUserID: ").append(toIndentedString(fkiUserID)).append("\n");
    sb.append("    objApikeyDescription: ").append(toIndentedString(objApikeyDescription)).append("\n");
    sb.append("    sComputedToken: ").append(toIndentedString(sComputedToken)).append("\n");
    sb.append("    bApikeyIsactive: ").append(toIndentedString(bApikeyIsactive)).append("\n");
    sb.append("    objAudit: ").append(toIndentedString(objAudit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiApikeyID");
    openapiFields.add("fkiUserID");
    openapiFields.add("objApikeyDescription");
    openapiFields.add("sComputedToken");
    openapiFields.add("bApikeyIsactive");
    openapiFields.add("objAudit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiApikeyID");
    openapiRequiredFields.add("fkiUserID");
    openapiRequiredFields.add("objApikeyDescription");
    openapiRequiredFields.add("bApikeyIsactive");
    openapiRequiredFields.add("objAudit");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ApikeyResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ApikeyResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApikeyResponse is not found in the empty JSON string", ApikeyResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ApikeyResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApikeyResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApikeyResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `objApikeyDescription`
      MultilingualApikeyDescription.validateJsonObject(jsonObj.getAsJsonObject("objApikeyDescription"));
      if ((jsonObj.get("sComputedToken") != null && !jsonObj.get("sComputedToken").isJsonNull()) && !jsonObj.get("sComputedToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sComputedToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sComputedToken").toString()));
      }
      // validate the required field `objAudit`
      CommonAudit.validateJsonObject(jsonObj.getAsJsonObject("objAudit"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApikeyResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApikeyResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApikeyResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApikeyResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ApikeyResponse>() {
           @Override
           public void write(JsonWriter out, ApikeyResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApikeyResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApikeyResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApikeyResponse
  * @throws IOException if the JSON string is invalid with respect to ApikeyResponse
  */
  public static ApikeyResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApikeyResponse.class);
  }

 /**
  * Convert an instance of ApikeyResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

