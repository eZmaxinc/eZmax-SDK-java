/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Currency AutocompleteElement Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-05T21:55:04.724341195Z[Etc/UTC]", comments = "Generator version: 7.11.0")
public class CurrencyAutocompleteElementResponse {
  public static final String SERIALIZED_NAME_PKI_CURRENCY_I_D = "pkiCurrencyID";
  @SerializedName(SERIALIZED_NAME_PKI_CURRENCY_I_D)
  @javax.annotation.Nonnull
  private Integer pkiCurrencyID;

  public static final String SERIALIZED_NAME_S_CURRENCY_DESCRIPTION_X = "sCurrencyDescriptionX";
  @SerializedName(SERIALIZED_NAME_S_CURRENCY_DESCRIPTION_X)
  @javax.annotation.Nonnull
  private String sCurrencyDescriptionX;

  public static final String SERIALIZED_NAME_B_CURRENCY_ISACTIVE = "bCurrencyIsactive";
  @SerializedName(SERIALIZED_NAME_B_CURRENCY_ISACTIVE)
  @javax.annotation.Nonnull
  private Boolean bCurrencyIsactive;

  public CurrencyAutocompleteElementResponse() {
  }

  public CurrencyAutocompleteElementResponse pkiCurrencyID(@javax.annotation.Nonnull Integer pkiCurrencyID) {
    this.pkiCurrencyID = pkiCurrencyID;
    return this;
  }

  /**
   * The unique ID of the Currency.
   * minimum: 0
   * @return pkiCurrencyID
   */
  @javax.annotation.Nonnull
  public Integer getPkiCurrencyID() {
    return pkiCurrencyID;
  }

  public void setPkiCurrencyID(@javax.annotation.Nonnull Integer pkiCurrencyID) {
    this.pkiCurrencyID = pkiCurrencyID;
  }


  public CurrencyAutocompleteElementResponse sCurrencyDescriptionX(@javax.annotation.Nonnull String sCurrencyDescriptionX) {
    this.sCurrencyDescriptionX = sCurrencyDescriptionX;
    return this;
  }

  /**
   * The description of the Currency in the language of the requester
   * @return sCurrencyDescriptionX
   */
  @javax.annotation.Nonnull
  public String getsCurrencyDescriptionX() {
    return sCurrencyDescriptionX;
  }

  public void setsCurrencyDescriptionX(@javax.annotation.Nonnull String sCurrencyDescriptionX) {
    this.sCurrencyDescriptionX = sCurrencyDescriptionX;
  }


  public CurrencyAutocompleteElementResponse bCurrencyIsactive(@javax.annotation.Nonnull Boolean bCurrencyIsactive) {
    this.bCurrencyIsactive = bCurrencyIsactive;
    return this;
  }

  /**
   * Whether the Currency is active or not
   * @return bCurrencyIsactive
   */
  @javax.annotation.Nonnull
  public Boolean getbCurrencyIsactive() {
    return bCurrencyIsactive;
  }

  public void setbCurrencyIsactive(@javax.annotation.Nonnull Boolean bCurrencyIsactive) {
    this.bCurrencyIsactive = bCurrencyIsactive;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CurrencyAutocompleteElementResponse currencyAutocompleteElementResponse = (CurrencyAutocompleteElementResponse) o;
    return Objects.equals(this.pkiCurrencyID, currencyAutocompleteElementResponse.pkiCurrencyID) &&
        Objects.equals(this.sCurrencyDescriptionX, currencyAutocompleteElementResponse.sCurrencyDescriptionX) &&
        Objects.equals(this.bCurrencyIsactive, currencyAutocompleteElementResponse.bCurrencyIsactive);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiCurrencyID, sCurrencyDescriptionX, bCurrencyIsactive);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CurrencyAutocompleteElementResponse {\n");
    sb.append("    pkiCurrencyID: ").append(toIndentedString(pkiCurrencyID)).append("\n");
    sb.append("    sCurrencyDescriptionX: ").append(toIndentedString(sCurrencyDescriptionX)).append("\n");
    sb.append("    bCurrencyIsactive: ").append(toIndentedString(bCurrencyIsactive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiCurrencyID");
    openapiFields.add("sCurrencyDescriptionX");
    openapiFields.add("bCurrencyIsactive");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiCurrencyID");
    openapiRequiredFields.add("sCurrencyDescriptionX");
    openapiRequiredFields.add("bCurrencyIsactive");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CurrencyAutocompleteElementResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CurrencyAutocompleteElementResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CurrencyAutocompleteElementResponse is not found in the empty JSON string", CurrencyAutocompleteElementResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CurrencyAutocompleteElementResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CurrencyAutocompleteElementResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CurrencyAutocompleteElementResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("sCurrencyDescriptionX").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sCurrencyDescriptionX` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sCurrencyDescriptionX").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CurrencyAutocompleteElementResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CurrencyAutocompleteElementResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CurrencyAutocompleteElementResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CurrencyAutocompleteElementResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CurrencyAutocompleteElementResponse>() {
           @Override
           public void write(JsonWriter out, CurrencyAutocompleteElementResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CurrencyAutocompleteElementResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CurrencyAutocompleteElementResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CurrencyAutocompleteElementResponse
   * @throws IOException if the JSON string is invalid with respect to CurrencyAutocompleteElementResponse
   */
  public static CurrencyAutocompleteElementResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CurrencyAutocompleteElementResponse.class);
  }

  /**
   * Convert an instance of CurrencyAutocompleteElementResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

