/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.16
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * Request for POST /1/object/ezsigndocument/{pkiEzsigndocumentID}/applyezsigntemplate
 */
@ApiModel(description = "Request for POST /1/object/ezsigndocument/{pkiEzsigndocumentID}/applyezsigntemplate")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-10T15:21:40.493145Z[Etc/UTC]")
public class EzsigndocumentApplyEzsigntemplateV1Request {
  public static final String SERIALIZED_NAME_FKI_EZSIGNTEMPLATE_I_D = "fkiEzsigntemplateID";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNTEMPLATE_I_D)
  private Integer fkiEzsigntemplateID;

  public static final String SERIALIZED_NAME_A_S_EZSIGNTEMPLATESIGNER = "a_sEzsigntemplatesigner";
  @SerializedName(SERIALIZED_NAME_A_S_EZSIGNTEMPLATESIGNER)
  private List<String> aSEzsigntemplatesigner = new ArrayList<>();

  public static final String SERIALIZED_NAME_A_PKI_EZSIGNFOLDERSIGNERASSOCIATION_I_D = "a_pkiEzsignfoldersignerassociationID";
  @SerializedName(SERIALIZED_NAME_A_PKI_EZSIGNFOLDERSIGNERASSOCIATION_I_D)
  private List<Integer> aPkiEzsignfoldersignerassociationID = new ArrayList<>();

  public EzsigndocumentApplyEzsigntemplateV1Request() { 
  }

  public EzsigndocumentApplyEzsigntemplateV1Request fkiEzsigntemplateID(Integer fkiEzsigntemplateID) {
    
    this.fkiEzsigntemplateID = fkiEzsigntemplateID;
    return this;
  }

   /**
   * The unique ID of the Ezsigntemplate
   * minimum: 0
   * @return fkiEzsigntemplateID
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "36", required = true, value = "The unique ID of the Ezsigntemplate")

  public Integer getFkiEzsigntemplateID() {
    return fkiEzsigntemplateID;
  }


  public void setFkiEzsigntemplateID(Integer fkiEzsigntemplateID) {
    this.fkiEzsigntemplateID = fkiEzsigntemplateID;
  }


  public EzsigndocumentApplyEzsigntemplateV1Request aSEzsigntemplatesigner(List<String> aSEzsigntemplatesigner) {
    
    this.aSEzsigntemplatesigner = aSEzsigntemplatesigner;
    return this;
  }

  public EzsigndocumentApplyEzsigntemplateV1Request addASEzsigntemplatesignerItem(String aSEzsigntemplatesignerItem) {
    this.aSEzsigntemplatesigner.add(aSEzsigntemplatesignerItem);
    return this;
  }

   /**
   * Get aSEzsigntemplatesigner
   * @return aSEzsigntemplatesigner
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getaSEzsigntemplatesigner() {
    return aSEzsigntemplatesigner;
  }


  public void setaSEzsigntemplatesigner(List<String> aSEzsigntemplatesigner) {
    this.aSEzsigntemplatesigner = aSEzsigntemplatesigner;
  }


  public EzsigndocumentApplyEzsigntemplateV1Request aPkiEzsignfoldersignerassociationID(List<Integer> aPkiEzsignfoldersignerassociationID) {
    
    this.aPkiEzsignfoldersignerassociationID = aPkiEzsignfoldersignerassociationID;
    return this;
  }

  public EzsigndocumentApplyEzsigntemplateV1Request addAPkiEzsignfoldersignerassociationIDItem(Integer aPkiEzsignfoldersignerassociationIDItem) {
    this.aPkiEzsignfoldersignerassociationID.add(aPkiEzsignfoldersignerassociationIDItem);
    return this;
  }

   /**
   * Get aPkiEzsignfoldersignerassociationID
   * @return aPkiEzsignfoldersignerassociationID
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Integer> getaPkiEzsignfoldersignerassociationID() {
    return aPkiEzsignfoldersignerassociationID;
  }


  public void setaPkiEzsignfoldersignerassociationID(List<Integer> aPkiEzsignfoldersignerassociationID) {
    this.aPkiEzsignfoldersignerassociationID = aPkiEzsignfoldersignerassociationID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsigndocumentApplyEzsigntemplateV1Request ezsigndocumentApplyEzsigntemplateV1Request = (EzsigndocumentApplyEzsigntemplateV1Request) o;
    return Objects.equals(this.fkiEzsigntemplateID, ezsigndocumentApplyEzsigntemplateV1Request.fkiEzsigntemplateID) &&
        Objects.equals(this.aSEzsigntemplatesigner, ezsigndocumentApplyEzsigntemplateV1Request.aSEzsigntemplatesigner) &&
        Objects.equals(this.aPkiEzsignfoldersignerassociationID, ezsigndocumentApplyEzsigntemplateV1Request.aPkiEzsignfoldersignerassociationID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fkiEzsigntemplateID, aSEzsigntemplatesigner, aPkiEzsignfoldersignerassociationID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsigndocumentApplyEzsigntemplateV1Request {\n");
    sb.append("    fkiEzsigntemplateID: ").append(toIndentedString(fkiEzsigntemplateID)).append("\n");
    sb.append("    aSEzsigntemplatesigner: ").append(toIndentedString(aSEzsigntemplatesigner)).append("\n");
    sb.append("    aPkiEzsignfoldersignerassociationID: ").append(toIndentedString(aPkiEzsignfoldersignerassociationID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fkiEzsigntemplateID");
    openapiFields.add("a_sEzsigntemplatesigner");
    openapiFields.add("a_pkiEzsignfoldersignerassociationID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fkiEzsigntemplateID");
    openapiRequiredFields.add("a_sEzsigntemplatesigner");
    openapiRequiredFields.add("a_pkiEzsignfoldersignerassociationID");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EzsigndocumentApplyEzsigntemplateV1Request
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (EzsigndocumentApplyEzsigntemplateV1Request.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsigndocumentApplyEzsigntemplateV1Request is not found in the empty JSON string", EzsigndocumentApplyEzsigntemplateV1Request.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EzsigndocumentApplyEzsigntemplateV1Request.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsigndocumentApplyEzsigntemplateV1Request` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EzsigndocumentApplyEzsigntemplateV1Request.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (jsonObj.get("a_sEzsigntemplatesigner") != null && !jsonObj.get("a_sEzsigntemplatesigner").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_sEzsigntemplatesigner` to be an array in the JSON string but got `%s`", jsonObj.get("a_sEzsigntemplatesigner").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("a_pkiEzsignfoldersignerassociationID") != null && !jsonObj.get("a_pkiEzsignfoldersignerassociationID").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_pkiEzsignfoldersignerassociationID` to be an array in the JSON string but got `%s`", jsonObj.get("a_pkiEzsignfoldersignerassociationID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsigndocumentApplyEzsigntemplateV1Request.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsigndocumentApplyEzsigntemplateV1Request' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsigndocumentApplyEzsigntemplateV1Request> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsigndocumentApplyEzsigntemplateV1Request.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsigndocumentApplyEzsigntemplateV1Request>() {
           @Override
           public void write(JsonWriter out, EzsigndocumentApplyEzsigntemplateV1Request value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsigndocumentApplyEzsigntemplateV1Request read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EzsigndocumentApplyEzsigntemplateV1Request given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EzsigndocumentApplyEzsigntemplateV1Request
  * @throws IOException if the JSON string is invalid with respect to EzsigndocumentApplyEzsigntemplateV1Request
  */
  public static EzsigndocumentApplyEzsigntemplateV1Request fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsigndocumentApplyEzsigntemplateV1Request.class);
  }

 /**
  * Convert an instance of EzsigndocumentApplyEzsigntemplateV1Request to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

