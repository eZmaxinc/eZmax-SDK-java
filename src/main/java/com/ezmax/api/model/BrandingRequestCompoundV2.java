/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.FieldEBrandingAlignlogo;
import com.ezmax.api.model.FieldEBrandingLogo;
import com.ezmax.api.model.MultilingualBrandingDescription;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Branding Object and children
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-05T14:47:58.834564157Z[Etc/UTC]", comments = "Generator version: 7.11.0")
public class BrandingRequestCompoundV2 {
  public static final String SERIALIZED_NAME_PKI_BRANDING_I_D = "pkiBrandingID";
  @SerializedName(SERIALIZED_NAME_PKI_BRANDING_I_D)
  @javax.annotation.Nullable
  private Integer pkiBrandingID;

  public static final String SERIALIZED_NAME_OBJ_BRANDING_DESCRIPTION = "objBrandingDescription";
  @SerializedName(SERIALIZED_NAME_OBJ_BRANDING_DESCRIPTION)
  @javax.annotation.Nonnull
  private MultilingualBrandingDescription objBrandingDescription;

  public static final String SERIALIZED_NAME_E_BRANDING_LOGO = "eBrandingLogo";
  @SerializedName(SERIALIZED_NAME_E_BRANDING_LOGO)
  @javax.annotation.Nonnull
  private FieldEBrandingLogo eBrandingLogo;

  public static final String SERIALIZED_NAME_E_BRANDING_ALIGNLOGO = "eBrandingAlignlogo";
  @SerializedName(SERIALIZED_NAME_E_BRANDING_ALIGNLOGO)
  @javax.annotation.Nullable
  private FieldEBrandingAlignlogo eBrandingAlignlogo;

  public static final String SERIALIZED_NAME_S_BRANDING_BASE64 = "sBrandingBase64";
  @SerializedName(SERIALIZED_NAME_S_BRANDING_BASE64)
  @javax.annotation.Nullable
  private byte[] sBrandingBase64;

  public static final String SERIALIZED_NAME_I_BRANDING_COLOR = "iBrandingColor";
  @SerializedName(SERIALIZED_NAME_I_BRANDING_COLOR)
  @javax.annotation.Nonnull
  private Integer iBrandingColor;

  public static final String SERIALIZED_NAME_S_BRANDING_NAME = "sBrandingName";
  @SerializedName(SERIALIZED_NAME_S_BRANDING_NAME)
  @javax.annotation.Nullable
  private String sBrandingName;

  public static final String SERIALIZED_NAME_S_EMAIL_ADDRESS = "sEmailAddress";
  @SerializedName(SERIALIZED_NAME_S_EMAIL_ADDRESS)
  @javax.annotation.Nullable
  private String sEmailAddress;

  public static final String SERIALIZED_NAME_B_BRANDING_ISACTIVE = "bBrandingIsactive";
  @SerializedName(SERIALIZED_NAME_B_BRANDING_ISACTIVE)
  @javax.annotation.Nonnull
  private Boolean bBrandingIsactive;

  public BrandingRequestCompoundV2() {
  }

  public BrandingRequestCompoundV2 pkiBrandingID(@javax.annotation.Nullable Integer pkiBrandingID) {
    this.pkiBrandingID = pkiBrandingID;
    return this;
  }

  /**
   * The unique ID of the Branding
   * minimum: 0
   * @return pkiBrandingID
   */
  @javax.annotation.Nullable
  public Integer getPkiBrandingID() {
    return pkiBrandingID;
  }

  public void setPkiBrandingID(@javax.annotation.Nullable Integer pkiBrandingID) {
    this.pkiBrandingID = pkiBrandingID;
  }


  public BrandingRequestCompoundV2 objBrandingDescription(@javax.annotation.Nonnull MultilingualBrandingDescription objBrandingDescription) {
    this.objBrandingDescription = objBrandingDescription;
    return this;
  }

  /**
   * Get objBrandingDescription
   * @return objBrandingDescription
   */
  @javax.annotation.Nonnull
  public MultilingualBrandingDescription getObjBrandingDescription() {
    return objBrandingDescription;
  }

  public void setObjBrandingDescription(@javax.annotation.Nonnull MultilingualBrandingDescription objBrandingDescription) {
    this.objBrandingDescription = objBrandingDescription;
  }


  public BrandingRequestCompoundV2 eBrandingLogo(@javax.annotation.Nonnull FieldEBrandingLogo eBrandingLogo) {
    this.eBrandingLogo = eBrandingLogo;
    return this;
  }

  /**
   * Get eBrandingLogo
   * @return eBrandingLogo
   */
  @javax.annotation.Nonnull
  public FieldEBrandingLogo geteBrandingLogo() {
    return eBrandingLogo;
  }

  public void seteBrandingLogo(@javax.annotation.Nonnull FieldEBrandingLogo eBrandingLogo) {
    this.eBrandingLogo = eBrandingLogo;
  }


  public BrandingRequestCompoundV2 eBrandingAlignlogo(@javax.annotation.Nullable FieldEBrandingAlignlogo eBrandingAlignlogo) {
    this.eBrandingAlignlogo = eBrandingAlignlogo;
    return this;
  }

  /**
   * Get eBrandingAlignlogo
   * @return eBrandingAlignlogo
   */
  @javax.annotation.Nullable
  public FieldEBrandingAlignlogo geteBrandingAlignlogo() {
    return eBrandingAlignlogo;
  }

  public void seteBrandingAlignlogo(@javax.annotation.Nullable FieldEBrandingAlignlogo eBrandingAlignlogo) {
    this.eBrandingAlignlogo = eBrandingAlignlogo;
  }


  public BrandingRequestCompoundV2 sBrandingBase64(@javax.annotation.Nullable byte[] sBrandingBase64) {
    this.sBrandingBase64 = sBrandingBase64;
    return this;
  }

  /**
   * The Base64 encoded binary content of the branding logo. This need to match image type selected in eBrandingLogo if you supply an image. If you select &#39;Default&#39;, the logo will be deleted and the default one will be used.
   * @return sBrandingBase64
   */
  @javax.annotation.Nullable
  public byte[] getsBrandingBase64() {
    return sBrandingBase64;
  }

  public void setsBrandingBase64(@javax.annotation.Nullable byte[] sBrandingBase64) {
    this.sBrandingBase64 = sBrandingBase64;
  }


  public BrandingRequestCompoundV2 iBrandingColor(@javax.annotation.Nonnull Integer iBrandingColor) {
    this.iBrandingColor = iBrandingColor;
    return this;
  }

  /**
   * The primary color. This is a RGB color converted into integer
   * minimum: 0
   * maximum: 16777215
   * @return iBrandingColor
   */
  @javax.annotation.Nonnull
  public Integer getiBrandingColor() {
    return iBrandingColor;
  }

  public void setiBrandingColor(@javax.annotation.Nonnull Integer iBrandingColor) {
    this.iBrandingColor = iBrandingColor;
  }


  public BrandingRequestCompoundV2 sBrandingName(@javax.annotation.Nullable String sBrandingName) {
    this.sBrandingName = sBrandingName;
    return this;
  }

  /**
   * The name of the Branding  This value will only be set if you wish to overwrite the default name. If you want to keep the default name, leave this property empty
   * @return sBrandingName
   */
  @javax.annotation.Nullable
  public String getsBrandingName() {
    return sBrandingName;
  }

  public void setsBrandingName(@javax.annotation.Nullable String sBrandingName) {
    this.sBrandingName = sBrandingName;
  }


  public BrandingRequestCompoundV2 sEmailAddress(@javax.annotation.Nullable String sEmailAddress) {
    this.sEmailAddress = sEmailAddress;
    return this;
  }

  /**
   * The email address.
   * @return sEmailAddress
   */
  @javax.annotation.Nullable
  public String getsEmailAddress() {
    return sEmailAddress;
  }

  public void setsEmailAddress(@javax.annotation.Nullable String sEmailAddress) {
    this.sEmailAddress = sEmailAddress;
  }


  public BrandingRequestCompoundV2 bBrandingIsactive(@javax.annotation.Nonnull Boolean bBrandingIsactive) {
    this.bBrandingIsactive = bBrandingIsactive;
    return this;
  }

  /**
   * Whether the Branding is active or not
   * @return bBrandingIsactive
   */
  @javax.annotation.Nonnull
  public Boolean getbBrandingIsactive() {
    return bBrandingIsactive;
  }

  public void setbBrandingIsactive(@javax.annotation.Nonnull Boolean bBrandingIsactive) {
    this.bBrandingIsactive = bBrandingIsactive;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BrandingRequestCompoundV2 brandingRequestCompoundV2 = (BrandingRequestCompoundV2) o;
    return Objects.equals(this.pkiBrandingID, brandingRequestCompoundV2.pkiBrandingID) &&
        Objects.equals(this.objBrandingDescription, brandingRequestCompoundV2.objBrandingDescription) &&
        Objects.equals(this.eBrandingLogo, brandingRequestCompoundV2.eBrandingLogo) &&
        Objects.equals(this.eBrandingAlignlogo, brandingRequestCompoundV2.eBrandingAlignlogo) &&
        Arrays.equals(this.sBrandingBase64, brandingRequestCompoundV2.sBrandingBase64) &&
        Objects.equals(this.iBrandingColor, brandingRequestCompoundV2.iBrandingColor) &&
        Objects.equals(this.sBrandingName, brandingRequestCompoundV2.sBrandingName) &&
        Objects.equals(this.sEmailAddress, brandingRequestCompoundV2.sEmailAddress) &&
        Objects.equals(this.bBrandingIsactive, brandingRequestCompoundV2.bBrandingIsactive);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiBrandingID, objBrandingDescription, eBrandingLogo, eBrandingAlignlogo, Arrays.hashCode(sBrandingBase64), iBrandingColor, sBrandingName, sEmailAddress, bBrandingIsactive);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BrandingRequestCompoundV2 {\n");
    sb.append("    pkiBrandingID: ").append(toIndentedString(pkiBrandingID)).append("\n");
    sb.append("    objBrandingDescription: ").append(toIndentedString(objBrandingDescription)).append("\n");
    sb.append("    eBrandingLogo: ").append(toIndentedString(eBrandingLogo)).append("\n");
    sb.append("    eBrandingAlignlogo: ").append(toIndentedString(eBrandingAlignlogo)).append("\n");
    sb.append("    sBrandingBase64: ").append(toIndentedString(sBrandingBase64)).append("\n");
    sb.append("    iBrandingColor: ").append(toIndentedString(iBrandingColor)).append("\n");
    sb.append("    sBrandingName: ").append(toIndentedString(sBrandingName)).append("\n");
    sb.append("    sEmailAddress: ").append(toIndentedString(sEmailAddress)).append("\n");
    sb.append("    bBrandingIsactive: ").append(toIndentedString(bBrandingIsactive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiBrandingID");
    openapiFields.add("objBrandingDescription");
    openapiFields.add("eBrandingLogo");
    openapiFields.add("eBrandingAlignlogo");
    openapiFields.add("sBrandingBase64");
    openapiFields.add("iBrandingColor");
    openapiFields.add("sBrandingName");
    openapiFields.add("sEmailAddress");
    openapiFields.add("bBrandingIsactive");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("objBrandingDescription");
    openapiRequiredFields.add("eBrandingLogo");
    openapiRequiredFields.add("iBrandingColor");
    openapiRequiredFields.add("bBrandingIsactive");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BrandingRequestCompoundV2
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BrandingRequestCompoundV2.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BrandingRequestCompoundV2 is not found in the empty JSON string", BrandingRequestCompoundV2.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BrandingRequestCompoundV2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BrandingRequestCompoundV2` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BrandingRequestCompoundV2.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `objBrandingDescription`
      MultilingualBrandingDescription.validateJsonElement(jsonObj.get("objBrandingDescription"));
      // validate the required field `eBrandingLogo`
      FieldEBrandingLogo.validateJsonElement(jsonObj.get("eBrandingLogo"));
      // validate the optional field `eBrandingAlignlogo`
      if (jsonObj.get("eBrandingAlignlogo") != null && !jsonObj.get("eBrandingAlignlogo").isJsonNull()) {
        FieldEBrandingAlignlogo.validateJsonElement(jsonObj.get("eBrandingAlignlogo"));
      }
      if ((jsonObj.get("sBrandingName") != null && !jsonObj.get("sBrandingName").isJsonNull()) && !jsonObj.get("sBrandingName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sBrandingName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sBrandingName").toString()));
      }
      if ((jsonObj.get("sEmailAddress") != null && !jsonObj.get("sEmailAddress").isJsonNull()) && !jsonObj.get("sEmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEmailAddress").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BrandingRequestCompoundV2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BrandingRequestCompoundV2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BrandingRequestCompoundV2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BrandingRequestCompoundV2.class));

       return (TypeAdapter<T>) new TypeAdapter<BrandingRequestCompoundV2>() {
           @Override
           public void write(JsonWriter out, BrandingRequestCompoundV2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BrandingRequestCompoundV2 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BrandingRequestCompoundV2 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BrandingRequestCompoundV2
   * @throws IOException if the JSON string is invalid with respect to BrandingRequestCompoundV2
   */
  public static BrandingRequestCompoundV2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BrandingRequestCompoundV2.class);
  }

  /**
   * Convert an instance of BrandingRequestCompoundV2 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

