/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.FieldEEzsignfolderStep;
import com.ezmax.api.model.FieldEEzsignfoldertypePrivacylevel;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * An Ezsignfolder List Element
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-25T02:19:53.232565035Z[Etc/UTC]")
public class EzsignfolderListElement {
  public static final String SERIALIZED_NAME_PKI_EZSIGNFOLDER_I_D = "pkiEzsignfolderID";
  @SerializedName(SERIALIZED_NAME_PKI_EZSIGNFOLDER_I_D)
  private Integer pkiEzsignfolderID;

  public static final String SERIALIZED_NAME_FKI_EZSIGNFOLDERTYPE_I_D = "fkiEzsignfoldertypeID";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNFOLDERTYPE_I_D)
  private Integer fkiEzsignfoldertypeID;

  public static final String SERIALIZED_NAME_E_EZSIGNFOLDERTYPE_PRIVACYLEVEL = "eEzsignfoldertypePrivacylevel";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNFOLDERTYPE_PRIVACYLEVEL)
  private FieldEEzsignfoldertypePrivacylevel eEzsignfoldertypePrivacylevel;

  public static final String SERIALIZED_NAME_S_EZSIGNFOLDERTYPE_NAME_X = "sEzsignfoldertypeNameX";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNFOLDERTYPE_NAME_X)
  private String sEzsignfoldertypeNameX;

  public static final String SERIALIZED_NAME_S_EZSIGNFOLDER_DESCRIPTION = "sEzsignfolderDescription";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNFOLDER_DESCRIPTION)
  private String sEzsignfolderDescription;

  public static final String SERIALIZED_NAME_E_EZSIGNFOLDER_STEP = "eEzsignfolderStep";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNFOLDER_STEP)
  private FieldEEzsignfolderStep eEzsignfolderStep;

  public static final String SERIALIZED_NAME_DT_CREATED_DATE = "dtCreatedDate";
  @SerializedName(SERIALIZED_NAME_DT_CREATED_DATE)
  private String dtCreatedDate;

  public static final String SERIALIZED_NAME_DT_EZSIGNFOLDER_SENTDATE = "dtEzsignfolderSentdate";
  @SerializedName(SERIALIZED_NAME_DT_EZSIGNFOLDER_SENTDATE)
  private String dtEzsignfolderSentdate;

  public static final String SERIALIZED_NAME_DT_EZSIGNFOLDER_DUEDATE = "dtEzsignfolderDuedate";
  @SerializedName(SERIALIZED_NAME_DT_EZSIGNFOLDER_DUEDATE)
  private String dtEzsignfolderDuedate;

  public static final String SERIALIZED_NAME_I_EZSIGNDOCUMENT = "iEzsigndocument";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNDOCUMENT)
  private Integer iEzsigndocument;

  public static final String SERIALIZED_NAME_I_EZSIGNDOCUMENT_EDM = "iEzsigndocumentEdm";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNDOCUMENT_EDM)
  private Integer iEzsigndocumentEdm;

  public static final String SERIALIZED_NAME_I_EZSIGNSIGNATURE = "iEzsignsignature";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNSIGNATURE)
  private Integer iEzsignsignature;

  public static final String SERIALIZED_NAME_I_EZSIGNSIGNATURE_SIGNED = "iEzsignsignatureSigned";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNSIGNATURE_SIGNED)
  private Integer iEzsignsignatureSigned;

  public EzsignfolderListElement() {
  }

  public EzsignfolderListElement pkiEzsignfolderID(Integer pkiEzsignfolderID) {
    
    this.pkiEzsignfolderID = pkiEzsignfolderID;
    return this;
  }

   /**
   * The unique ID of the Ezsignfolder
   * minimum: 0
   * @return pkiEzsignfolderID
  **/
  @javax.annotation.Nonnull
  public Integer getPkiEzsignfolderID() {
    return pkiEzsignfolderID;
  }


  public void setPkiEzsignfolderID(Integer pkiEzsignfolderID) {
    this.pkiEzsignfolderID = pkiEzsignfolderID;
  }


  public EzsignfolderListElement fkiEzsignfoldertypeID(Integer fkiEzsignfoldertypeID) {
    
    this.fkiEzsignfoldertypeID = fkiEzsignfoldertypeID;
    return this;
  }

   /**
   * The unique ID of the Ezsignfoldertype.
   * minimum: 0
   * @return fkiEzsignfoldertypeID
  **/
  @javax.annotation.Nonnull
  public Integer getFkiEzsignfoldertypeID() {
    return fkiEzsignfoldertypeID;
  }


  public void setFkiEzsignfoldertypeID(Integer fkiEzsignfoldertypeID) {
    this.fkiEzsignfoldertypeID = fkiEzsignfoldertypeID;
  }


  public EzsignfolderListElement eEzsignfoldertypePrivacylevel(FieldEEzsignfoldertypePrivacylevel eEzsignfoldertypePrivacylevel) {
    
    this.eEzsignfoldertypePrivacylevel = eEzsignfoldertypePrivacylevel;
    return this;
  }

   /**
   * Get eEzsignfoldertypePrivacylevel
   * @return eEzsignfoldertypePrivacylevel
  **/
  @javax.annotation.Nonnull
  public FieldEEzsignfoldertypePrivacylevel geteEzsignfoldertypePrivacylevel() {
    return eEzsignfoldertypePrivacylevel;
  }


  public void seteEzsignfoldertypePrivacylevel(FieldEEzsignfoldertypePrivacylevel eEzsignfoldertypePrivacylevel) {
    this.eEzsignfoldertypePrivacylevel = eEzsignfoldertypePrivacylevel;
  }


  public EzsignfolderListElement sEzsignfoldertypeNameX(String sEzsignfoldertypeNameX) {
    
    this.sEzsignfoldertypeNameX = sEzsignfoldertypeNameX;
    return this;
  }

   /**
   * The name of the Ezsignfoldertype in the language of the requester
   * @return sEzsignfoldertypeNameX
  **/
  @javax.annotation.Nonnull
  public String getsEzsignfoldertypeNameX() {
    return sEzsignfoldertypeNameX;
  }


  public void setsEzsignfoldertypeNameX(String sEzsignfoldertypeNameX) {
    this.sEzsignfoldertypeNameX = sEzsignfoldertypeNameX;
  }


  public EzsignfolderListElement sEzsignfolderDescription(String sEzsignfolderDescription) {
    
    this.sEzsignfolderDescription = sEzsignfolderDescription;
    return this;
  }

   /**
   * The description of the Ezsignfolder
   * @return sEzsignfolderDescription
  **/
  @javax.annotation.Nonnull
  public String getsEzsignfolderDescription() {
    return sEzsignfolderDescription;
  }


  public void setsEzsignfolderDescription(String sEzsignfolderDescription) {
    this.sEzsignfolderDescription = sEzsignfolderDescription;
  }


  public EzsignfolderListElement eEzsignfolderStep(FieldEEzsignfolderStep eEzsignfolderStep) {
    
    this.eEzsignfolderStep = eEzsignfolderStep;
    return this;
  }

   /**
   * Get eEzsignfolderStep
   * @return eEzsignfolderStep
  **/
  @javax.annotation.Nonnull
  public FieldEEzsignfolderStep geteEzsignfolderStep() {
    return eEzsignfolderStep;
  }


  public void seteEzsignfolderStep(FieldEEzsignfolderStep eEzsignfolderStep) {
    this.eEzsignfolderStep = eEzsignfolderStep;
  }


  public EzsignfolderListElement dtCreatedDate(String dtCreatedDate) {
    
    this.dtCreatedDate = dtCreatedDate;
    return this;
  }

   /**
   * The date and time at which the object was created
   * @return dtCreatedDate
  **/
  @javax.annotation.Nonnull
  public String getDtCreatedDate() {
    return dtCreatedDate;
  }


  public void setDtCreatedDate(String dtCreatedDate) {
    this.dtCreatedDate = dtCreatedDate;
  }


  public EzsignfolderListElement dtEzsignfolderSentdate(String dtEzsignfolderSentdate) {
    
    this.dtEzsignfolderSentdate = dtEzsignfolderSentdate;
    return this;
  }

   /**
   * The date and time at which the Ezsignfolder was sent the last time.
   * @return dtEzsignfolderSentdate
  **/
  @javax.annotation.Nullable
  public String getDtEzsignfolderSentdate() {
    return dtEzsignfolderSentdate;
  }


  public void setDtEzsignfolderSentdate(String dtEzsignfolderSentdate) {
    this.dtEzsignfolderSentdate = dtEzsignfolderSentdate;
  }


  public EzsignfolderListElement dtEzsignfolderDuedate(String dtEzsignfolderDuedate) {
    
    this.dtEzsignfolderDuedate = dtEzsignfolderDuedate;
    return this;
  }

   /**
   * The maximum date and time at which the Ezsignfolder can be signed.
   * @return dtEzsignfolderDuedate
  **/
  @javax.annotation.Nullable
  public String getDtEzsignfolderDuedate() {
    return dtEzsignfolderDuedate;
  }


  public void setDtEzsignfolderDuedate(String dtEzsignfolderDuedate) {
    this.dtEzsignfolderDuedate = dtEzsignfolderDuedate;
  }


  public EzsignfolderListElement iEzsigndocument(Integer iEzsigndocument) {
    
    this.iEzsigndocument = iEzsigndocument;
    return this;
  }

   /**
   * The total number of Ezsigndocument in the folder
   * @return iEzsigndocument
  **/
  @javax.annotation.Nonnull
  public Integer getiEzsigndocument() {
    return iEzsigndocument;
  }


  public void setiEzsigndocument(Integer iEzsigndocument) {
    this.iEzsigndocument = iEzsigndocument;
  }


  public EzsignfolderListElement iEzsigndocumentEdm(Integer iEzsigndocumentEdm) {
    
    this.iEzsigndocumentEdm = iEzsigndocumentEdm;
    return this;
  }

   /**
   * The total number of Ezsigndocument in the folder that were saved in the edm system
   * @return iEzsigndocumentEdm
  **/
  @javax.annotation.Nonnull
  public Integer getiEzsigndocumentEdm() {
    return iEzsigndocumentEdm;
  }


  public void setiEzsigndocumentEdm(Integer iEzsigndocumentEdm) {
    this.iEzsigndocumentEdm = iEzsigndocumentEdm;
  }


  public EzsignfolderListElement iEzsignsignature(Integer iEzsignsignature) {
    
    this.iEzsignsignature = iEzsignsignature;
    return this;
  }

   /**
   * The total number of signature blocks in all Ezsigndocuments in the folder
   * @return iEzsignsignature
  **/
  @javax.annotation.Nonnull
  public Integer getiEzsignsignature() {
    return iEzsignsignature;
  }


  public void setiEzsignsignature(Integer iEzsignsignature) {
    this.iEzsignsignature = iEzsignsignature;
  }


  public EzsignfolderListElement iEzsignsignatureSigned(Integer iEzsignsignatureSigned) {
    
    this.iEzsignsignatureSigned = iEzsignsignatureSigned;
    return this;
  }

   /**
   * The total number of already signed signature blocks in all Ezsigndocuments in the folder
   * @return iEzsignsignatureSigned
  **/
  @javax.annotation.Nonnull
  public Integer getiEzsignsignatureSigned() {
    return iEzsignsignatureSigned;
  }


  public void setiEzsignsignatureSigned(Integer iEzsignsignatureSigned) {
    this.iEzsignsignatureSigned = iEzsignsignatureSigned;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsignfolderListElement ezsignfolderListElement = (EzsignfolderListElement) o;
    return Objects.equals(this.pkiEzsignfolderID, ezsignfolderListElement.pkiEzsignfolderID) &&
        Objects.equals(this.fkiEzsignfoldertypeID, ezsignfolderListElement.fkiEzsignfoldertypeID) &&
        Objects.equals(this.eEzsignfoldertypePrivacylevel, ezsignfolderListElement.eEzsignfoldertypePrivacylevel) &&
        Objects.equals(this.sEzsignfoldertypeNameX, ezsignfolderListElement.sEzsignfoldertypeNameX) &&
        Objects.equals(this.sEzsignfolderDescription, ezsignfolderListElement.sEzsignfolderDescription) &&
        Objects.equals(this.eEzsignfolderStep, ezsignfolderListElement.eEzsignfolderStep) &&
        Objects.equals(this.dtCreatedDate, ezsignfolderListElement.dtCreatedDate) &&
        Objects.equals(this.dtEzsignfolderSentdate, ezsignfolderListElement.dtEzsignfolderSentdate) &&
        Objects.equals(this.dtEzsignfolderDuedate, ezsignfolderListElement.dtEzsignfolderDuedate) &&
        Objects.equals(this.iEzsigndocument, ezsignfolderListElement.iEzsigndocument) &&
        Objects.equals(this.iEzsigndocumentEdm, ezsignfolderListElement.iEzsigndocumentEdm) &&
        Objects.equals(this.iEzsignsignature, ezsignfolderListElement.iEzsignsignature) &&
        Objects.equals(this.iEzsignsignatureSigned, ezsignfolderListElement.iEzsignsignatureSigned);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiEzsignfolderID, fkiEzsignfoldertypeID, eEzsignfoldertypePrivacylevel, sEzsignfoldertypeNameX, sEzsignfolderDescription, eEzsignfolderStep, dtCreatedDate, dtEzsignfolderSentdate, dtEzsignfolderDuedate, iEzsigndocument, iEzsigndocumentEdm, iEzsignsignature, iEzsignsignatureSigned);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsignfolderListElement {\n");
    sb.append("    pkiEzsignfolderID: ").append(toIndentedString(pkiEzsignfolderID)).append("\n");
    sb.append("    fkiEzsignfoldertypeID: ").append(toIndentedString(fkiEzsignfoldertypeID)).append("\n");
    sb.append("    eEzsignfoldertypePrivacylevel: ").append(toIndentedString(eEzsignfoldertypePrivacylevel)).append("\n");
    sb.append("    sEzsignfoldertypeNameX: ").append(toIndentedString(sEzsignfoldertypeNameX)).append("\n");
    sb.append("    sEzsignfolderDescription: ").append(toIndentedString(sEzsignfolderDescription)).append("\n");
    sb.append("    eEzsignfolderStep: ").append(toIndentedString(eEzsignfolderStep)).append("\n");
    sb.append("    dtCreatedDate: ").append(toIndentedString(dtCreatedDate)).append("\n");
    sb.append("    dtEzsignfolderSentdate: ").append(toIndentedString(dtEzsignfolderSentdate)).append("\n");
    sb.append("    dtEzsignfolderDuedate: ").append(toIndentedString(dtEzsignfolderDuedate)).append("\n");
    sb.append("    iEzsigndocument: ").append(toIndentedString(iEzsigndocument)).append("\n");
    sb.append("    iEzsigndocumentEdm: ").append(toIndentedString(iEzsigndocumentEdm)).append("\n");
    sb.append("    iEzsignsignature: ").append(toIndentedString(iEzsignsignature)).append("\n");
    sb.append("    iEzsignsignatureSigned: ").append(toIndentedString(iEzsignsignatureSigned)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiEzsignfolderID");
    openapiFields.add("fkiEzsignfoldertypeID");
    openapiFields.add("eEzsignfoldertypePrivacylevel");
    openapiFields.add("sEzsignfoldertypeNameX");
    openapiFields.add("sEzsignfolderDescription");
    openapiFields.add("eEzsignfolderStep");
    openapiFields.add("dtCreatedDate");
    openapiFields.add("dtEzsignfolderSentdate");
    openapiFields.add("dtEzsignfolderDuedate");
    openapiFields.add("iEzsigndocument");
    openapiFields.add("iEzsigndocumentEdm");
    openapiFields.add("iEzsignsignature");
    openapiFields.add("iEzsignsignatureSigned");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiEzsignfolderID");
    openapiRequiredFields.add("fkiEzsignfoldertypeID");
    openapiRequiredFields.add("eEzsignfoldertypePrivacylevel");
    openapiRequiredFields.add("sEzsignfoldertypeNameX");
    openapiRequiredFields.add("sEzsignfolderDescription");
    openapiRequiredFields.add("eEzsignfolderStep");
    openapiRequiredFields.add("dtCreatedDate");
    openapiRequiredFields.add("iEzsigndocument");
    openapiRequiredFields.add("iEzsigndocumentEdm");
    openapiRequiredFields.add("iEzsignsignature");
    openapiRequiredFields.add("iEzsignsignatureSigned");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EzsignfolderListElement
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EzsignfolderListElement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsignfolderListElement is not found in the empty JSON string", EzsignfolderListElement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EzsignfolderListElement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsignfolderListElement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EzsignfolderListElement.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("sEzsignfoldertypeNameX").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsignfoldertypeNameX` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsignfoldertypeNameX").toString()));
      }
      if (!jsonObj.get("sEzsignfolderDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsignfolderDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsignfolderDescription").toString()));
      }
      if (!jsonObj.get("dtCreatedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dtCreatedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dtCreatedDate").toString()));
      }
      if ((jsonObj.get("dtEzsignfolderSentdate") != null && !jsonObj.get("dtEzsignfolderSentdate").isJsonNull()) && !jsonObj.get("dtEzsignfolderSentdate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dtEzsignfolderSentdate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dtEzsignfolderSentdate").toString()));
      }
      if ((jsonObj.get("dtEzsignfolderDuedate") != null && !jsonObj.get("dtEzsignfolderDuedate").isJsonNull()) && !jsonObj.get("dtEzsignfolderDuedate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dtEzsignfolderDuedate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dtEzsignfolderDuedate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsignfolderListElement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsignfolderListElement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsignfolderListElement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsignfolderListElement.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsignfolderListElement>() {
           @Override
           public void write(JsonWriter out, EzsignfolderListElement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsignfolderListElement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EzsignfolderListElement given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EzsignfolderListElement
  * @throws IOException if the JSON string is invalid with respect to EzsignfolderListElement
  */
  public static EzsignfolderListElement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsignfolderListElement.class);
  }

 /**
  * Convert an instance of EzsignfolderListElement to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

