/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.CommonReportrow;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A part in the Reportsubsection 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-16T21:39:53.290322577Z[Etc/UTC]", comments = "Generator version: 7.10.0")
public class CommonReportsubsectionpart {
  /**
   * The type of the Reportsubsectionpart
   */
  @JsonAdapter(EReportsubsectionpartTypeEnum.Adapter.class)
  public enum EReportsubsectionpartTypeEnum {
    HEADER("Header"),
    
    BODY("Body"),
    
    FOOTER("Footer");

    private String value;

    EReportsubsectionpartTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EReportsubsectionpartTypeEnum fromValue(String value) {
      for (EReportsubsectionpartTypeEnum b : EReportsubsectionpartTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EReportsubsectionpartTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EReportsubsectionpartTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EReportsubsectionpartTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EReportsubsectionpartTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EReportsubsectionpartTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_E_REPORTSUBSECTIONPART_TYPE = "eReportsubsectionpartType";
  @SerializedName(SERIALIZED_NAME_E_REPORTSUBSECTIONPART_TYPE)
  @javax.annotation.Nonnull
  private EReportsubsectionpartTypeEnum eReportsubsectionpartType;

  public static final String SERIALIZED_NAME_A_OBJ_REPORTROW = "a_objReportrow";
  @SerializedName(SERIALIZED_NAME_A_OBJ_REPORTROW)
  @javax.annotation.Nonnull
  private List<CommonReportrow> aObjReportrow = new ArrayList<>();

  public CommonReportsubsectionpart() {
  }

  public CommonReportsubsectionpart eReportsubsectionpartType(@javax.annotation.Nonnull EReportsubsectionpartTypeEnum eReportsubsectionpartType) {
    this.eReportsubsectionpartType = eReportsubsectionpartType;
    return this;
  }

  /**
   * The type of the Reportsubsectionpart
   * @return eReportsubsectionpartType
   */
  @javax.annotation.Nonnull
  public EReportsubsectionpartTypeEnum geteReportsubsectionpartType() {
    return eReportsubsectionpartType;
  }

  public void seteReportsubsectionpartType(@javax.annotation.Nonnull EReportsubsectionpartTypeEnum eReportsubsectionpartType) {
    this.eReportsubsectionpartType = eReportsubsectionpartType;
  }


  public CommonReportsubsectionpart aObjReportrow(@javax.annotation.Nonnull List<CommonReportrow> aObjReportrow) {
    this.aObjReportrow = aObjReportrow;
    return this;
  }

  public CommonReportsubsectionpart addAObjReportrowItem(CommonReportrow aObjReportrowItem) {
    if (this.aObjReportrow == null) {
      this.aObjReportrow = new ArrayList<>();
    }
    this.aObjReportrow.add(aObjReportrowItem);
    return this;
  }

  /**
   * Get aObjReportrow
   * @return aObjReportrow
   */
  @javax.annotation.Nonnull
  public List<CommonReportrow> getaObjReportrow() {
    return aObjReportrow;
  }

  public void setaObjReportrow(@javax.annotation.Nonnull List<CommonReportrow> aObjReportrow) {
    this.aObjReportrow = aObjReportrow;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommonReportsubsectionpart commonReportsubsectionpart = (CommonReportsubsectionpart) o;
    return Objects.equals(this.eReportsubsectionpartType, commonReportsubsectionpart.eReportsubsectionpartType) &&
        Objects.equals(this.aObjReportrow, commonReportsubsectionpart.aObjReportrow);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eReportsubsectionpartType, aObjReportrow);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommonReportsubsectionpart {\n");
    sb.append("    eReportsubsectionpartType: ").append(toIndentedString(eReportsubsectionpartType)).append("\n");
    sb.append("    aObjReportrow: ").append(toIndentedString(aObjReportrow)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eReportsubsectionpartType");
    openapiFields.add("a_objReportrow");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("eReportsubsectionpartType");
    openapiRequiredFields.add("a_objReportrow");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CommonReportsubsectionpart
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CommonReportsubsectionpart.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommonReportsubsectionpart is not found in the empty JSON string", CommonReportsubsectionpart.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CommonReportsubsectionpart.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommonReportsubsectionpart` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CommonReportsubsectionpart.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("eReportsubsectionpartType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eReportsubsectionpartType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eReportsubsectionpartType").toString()));
      }
      // validate the required field `eReportsubsectionpartType`
      EReportsubsectionpartTypeEnum.validateJsonElement(jsonObj.get("eReportsubsectionpartType"));
      // ensure the json data is an array
      if (!jsonObj.get("a_objReportrow").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_objReportrow` to be an array in the JSON string but got `%s`", jsonObj.get("a_objReportrow").toString()));
      }

      JsonArray jsonArrayaObjReportrow = jsonObj.getAsJsonArray("a_objReportrow");
      // validate the required field `a_objReportrow` (array)
      for (int i = 0; i < jsonArrayaObjReportrow.size(); i++) {
        CommonReportrow.validateJsonElement(jsonArrayaObjReportrow.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommonReportsubsectionpart.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommonReportsubsectionpart' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommonReportsubsectionpart> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommonReportsubsectionpart.class));

       return (TypeAdapter<T>) new TypeAdapter<CommonReportsubsectionpart>() {
           @Override
           public void write(JsonWriter out, CommonReportsubsectionpart value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommonReportsubsectionpart read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CommonReportsubsectionpart given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CommonReportsubsectionpart
   * @throws IOException if the JSON string is invalid with respect to CommonReportsubsectionpart
   */
  public static CommonReportsubsectionpart fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommonReportsubsectionpart.class);
  }

  /**
   * Convert an instance of CommonReportsubsectionpart to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

