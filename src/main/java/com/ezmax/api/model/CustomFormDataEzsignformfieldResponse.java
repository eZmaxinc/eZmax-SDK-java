/*
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.7
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * An Ezsignformfield Object
 */
@ApiModel(description = "An Ezsignformfield Object")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-03-04T22:24:48.193620Z[Etc/UTC]")
public class CustomFormDataEzsignformfieldResponse {
  public static final String SERIALIZED_NAME_S_EZSIGNFORMFIELD_LABEL = "sEzsignformfieldLabel";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNFORMFIELD_LABEL)
  private String sEzsignformfieldLabel;

  public static final String SERIALIZED_NAME_S_EZSIGNFORMFIELD_VALUE = "sEzsignformfieldValue";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNFORMFIELD_VALUE)
  private String sEzsignformfieldValue;

  public CustomFormDataEzsignformfieldResponse() { 
  }

  public CustomFormDataEzsignformfieldResponse sEzsignformfieldLabel(String sEzsignformfieldLabel) {
    
    this.sEzsignformfieldLabel = sEzsignformfieldLabel;
    return this;
  }

   /**
   * The Label for the Ezsignformfield
   * @return sEzsignformfieldLabel
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Peanuts", required = true, value = "The Label for the Ezsignformfield")

  public String getsEzsignformfieldLabel() {
    return sEzsignformfieldLabel;
  }


  public void setsEzsignformfieldLabel(String sEzsignformfieldLabel) {
    this.sEzsignformfieldLabel = sEzsignformfieldLabel;
  }


  public CustomFormDataEzsignformfieldResponse sEzsignformfieldValue(String sEzsignformfieldValue) {
    
    this.sEzsignformfieldValue = sEzsignformfieldValue;
    return this;
  }

   /**
   * The value for the Ezsignformfield  This can only be set if eEzsignformfieldgroupType is Checkbox or Radio
   * @return sEzsignformfieldValue
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Yes", required = true, value = "The value for the Ezsignformfield  This can only be set if eEzsignformfieldgroupType is Checkbox or Radio")

  public String getsEzsignformfieldValue() {
    return sEzsignformfieldValue;
  }


  public void setsEzsignformfieldValue(String sEzsignformfieldValue) {
    this.sEzsignformfieldValue = sEzsignformfieldValue;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomFormDataEzsignformfieldResponse customFormDataEzsignformfieldResponse = (CustomFormDataEzsignformfieldResponse) o;
    return Objects.equals(this.sEzsignformfieldLabel, customFormDataEzsignformfieldResponse.sEzsignformfieldLabel) &&
        Objects.equals(this.sEzsignformfieldValue, customFormDataEzsignformfieldResponse.sEzsignformfieldValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sEzsignformfieldLabel, sEzsignformfieldValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomFormDataEzsignformfieldResponse {\n");
    sb.append("    sEzsignformfieldLabel: ").append(toIndentedString(sEzsignformfieldLabel)).append("\n");
    sb.append("    sEzsignformfieldValue: ").append(toIndentedString(sEzsignformfieldValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sEzsignformfieldLabel");
    openapiFields.add("sEzsignformfieldValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sEzsignformfieldLabel");
    openapiRequiredFields.add("sEzsignformfieldValue");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomFormDataEzsignformfieldResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CustomFormDataEzsignformfieldResponse.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomFormDataEzsignformfieldResponse is not found in the empty JSON string", CustomFormDataEzsignformfieldResponse.openapiRequiredFields.toString()));
        }
      }
      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CustomFormDataEzsignformfieldResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomFormDataEzsignformfieldResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomFormDataEzsignformfieldResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomFormDataEzsignformfieldResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomFormDataEzsignformfieldResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomFormDataEzsignformfieldResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomFormDataEzsignformfieldResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomFormDataEzsignformfieldResponse>() {
           @Override
           public void write(JsonWriter out, CustomFormDataEzsignformfieldResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomFormDataEzsignformfieldResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomFormDataEzsignformfieldResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomFormDataEzsignformfieldResponse
  * @throws IOException if the JSON string is invalid with respect to CustomFormDataEzsignformfieldResponse
  */
  public static CustomFormDataEzsignformfieldResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomFormDataEzsignformfieldResponse.class);
  }

 /**
  * Convert an instance of CustomFormDataEzsignformfieldResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

