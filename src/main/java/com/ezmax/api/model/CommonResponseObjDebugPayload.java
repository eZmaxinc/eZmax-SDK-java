/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.13
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * This is a debug object containing debugging information on the actual function
 */
@ApiModel(description = "This is a debug object containing debugging information on the actual function")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-28T20:33:28.825661Z[Etc/UTC]")
public class CommonResponseObjDebugPayload {
  public static final String SERIALIZED_NAME_I_VERSION_MIN = "iVersionMin";
  @SerializedName(SERIALIZED_NAME_I_VERSION_MIN)
  private Integer iVersionMin;

  public static final String SERIALIZED_NAME_I_VERSION_MAX = "iVersionMax";
  @SerializedName(SERIALIZED_NAME_I_VERSION_MAX)
  private Integer iVersionMax;

  public static final String SERIALIZED_NAME_A_REQUIRED_PERMISSION = "a_RequiredPermission";
  @SerializedName(SERIALIZED_NAME_A_REQUIRED_PERMISSION)
  private List<Integer> aRequiredPermission = new ArrayList<>();

  public CommonResponseObjDebugPayload() { 
  }

  public CommonResponseObjDebugPayload iVersionMin(Integer iVersionMin) {
    
    this.iVersionMin = iVersionMin;
    return this;
  }

   /**
   * The minimum version of the function that can be called
   * @return iVersionMin
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1", required = true, value = "The minimum version of the function that can be called")

  public Integer getiVersionMin() {
    return iVersionMin;
  }


  public void setiVersionMin(Integer iVersionMin) {
    this.iVersionMin = iVersionMin;
  }


  public CommonResponseObjDebugPayload iVersionMax(Integer iVersionMax) {
    
    this.iVersionMax = iVersionMax;
    return this;
  }

   /**
   * The maximum version of the function that can be called
   * @return iVersionMax
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2", required = true, value = "The maximum version of the function that can be called")

  public Integer getiVersionMax() {
    return iVersionMax;
  }


  public void setiVersionMax(Integer iVersionMax) {
    this.iVersionMax = iVersionMax;
  }


  public CommonResponseObjDebugPayload aRequiredPermission(List<Integer> aRequiredPermission) {
    
    this.aRequiredPermission = aRequiredPermission;
    return this;
  }

  public CommonResponseObjDebugPayload addARequiredPermissionItem(Integer aRequiredPermissionItem) {
    this.aRequiredPermission.add(aRequiredPermissionItem);
    return this;
  }

   /**
   * An array of permissions required to access this function.  If the value \&quot;0\&quot; is present in the array, anyone can call this function.  You must have one of the permission to access the function. You don&#39;t need to have all of them.
   * @return aRequiredPermission
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An array of permissions required to access this function.  If the value \"0\" is present in the array, anyone can call this function.  You must have one of the permission to access the function. You don't need to have all of them.")

  public List<Integer> getaRequiredPermission() {
    return aRequiredPermission;
  }


  public void setaRequiredPermission(List<Integer> aRequiredPermission) {
    this.aRequiredPermission = aRequiredPermission;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommonResponseObjDebugPayload commonResponseObjDebugPayload = (CommonResponseObjDebugPayload) o;
    return Objects.equals(this.iVersionMin, commonResponseObjDebugPayload.iVersionMin) &&
        Objects.equals(this.iVersionMax, commonResponseObjDebugPayload.iVersionMax) &&
        Objects.equals(this.aRequiredPermission, commonResponseObjDebugPayload.aRequiredPermission);
  }

  @Override
  public int hashCode() {
    return Objects.hash(iVersionMin, iVersionMax, aRequiredPermission);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommonResponseObjDebugPayload {\n");
    sb.append("    iVersionMin: ").append(toIndentedString(iVersionMin)).append("\n");
    sb.append("    iVersionMax: ").append(toIndentedString(iVersionMax)).append("\n");
    sb.append("    aRequiredPermission: ").append(toIndentedString(aRequiredPermission)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("iVersionMin");
    openapiFields.add("iVersionMax");
    openapiFields.add("a_RequiredPermission");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("iVersionMin");
    openapiRequiredFields.add("iVersionMax");
    openapiRequiredFields.add("a_RequiredPermission");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CommonResponseObjDebugPayload
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CommonResponseObjDebugPayload.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommonResponseObjDebugPayload is not found in the empty JSON string", CommonResponseObjDebugPayload.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CommonResponseObjDebugPayload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommonResponseObjDebugPayload` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CommonResponseObjDebugPayload.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (jsonObj.get("a_RequiredPermission") != null && !jsonObj.get("a_RequiredPermission").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_RequiredPermission` to be an array in the JSON string but got `%s`", jsonObj.get("a_RequiredPermission").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommonResponseObjDebugPayload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommonResponseObjDebugPayload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommonResponseObjDebugPayload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommonResponseObjDebugPayload.class));

       return (TypeAdapter<T>) new TypeAdapter<CommonResponseObjDebugPayload>() {
           @Override
           public void write(JsonWriter out, CommonResponseObjDebugPayload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommonResponseObjDebugPayload read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CommonResponseObjDebugPayload given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CommonResponseObjDebugPayload
  * @throws IOException if the JSON string is invalid with respect to CommonResponseObjDebugPayload
  */
  public static CommonResponseObjDebugPayload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommonResponseObjDebugPayload.class);
  }

 /**
  * Convert an instance of CommonResponseObjDebugPayload to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

