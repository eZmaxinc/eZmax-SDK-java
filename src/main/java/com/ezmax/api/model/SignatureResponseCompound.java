/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Signature Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-07T19:20:13.445471985Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class SignatureResponseCompound {
  public static final String SERIALIZED_NAME_PKI_SIGNATURE_I_D = "pkiSignatureID";
  @SerializedName(SERIALIZED_NAME_PKI_SIGNATURE_I_D)
  @javax.annotation.Nonnull
  private Integer pkiSignatureID;

  public static final String SERIALIZED_NAME_FKI_FONT_I_D = "fkiFontID";
  @SerializedName(SERIALIZED_NAME_FKI_FONT_I_D)
  @javax.annotation.Nullable
  private Integer fkiFontID;

  public static final String SERIALIZED_NAME_S_SIGNATURE_URL = "sSignatureUrl";
  @SerializedName(SERIALIZED_NAME_S_SIGNATURE_URL)
  @javax.annotation.Nullable
  private String sSignatureUrl;

  public static final String SERIALIZED_NAME_S_SIGNATURE_URLINITIALS = "sSignatureUrlinitials";
  @SerializedName(SERIALIZED_NAME_S_SIGNATURE_URLINITIALS)
  @javax.annotation.Nullable
  private String sSignatureUrlinitials;

  public SignatureResponseCompound() {
  }

  public SignatureResponseCompound pkiSignatureID(@javax.annotation.Nonnull Integer pkiSignatureID) {
    this.pkiSignatureID = pkiSignatureID;
    return this;
  }

  /**
   * The unique ID of the Signature
   * minimum: 0
   * maximum: 16777215
   * @return pkiSignatureID
   */
  @javax.annotation.Nonnull
  public Integer getPkiSignatureID() {
    return pkiSignatureID;
  }

  public void setPkiSignatureID(@javax.annotation.Nonnull Integer pkiSignatureID) {
    this.pkiSignatureID = pkiSignatureID;
  }


  public SignatureResponseCompound fkiFontID(@javax.annotation.Nullable Integer fkiFontID) {
    this.fkiFontID = fkiFontID;
    return this;
  }

  /**
   * The unique ID of the Font
   * minimum: 0
   * @return fkiFontID
   */
  @javax.annotation.Nullable
  public Integer getFkiFontID() {
    return fkiFontID;
  }

  public void setFkiFontID(@javax.annotation.Nullable Integer fkiFontID) {
    this.fkiFontID = fkiFontID;
  }


  public SignatureResponseCompound sSignatureUrl(@javax.annotation.Nullable String sSignatureUrl) {
    this.sSignatureUrl = sSignatureUrl;
    return this;
  }

  /**
   * The URL of the SVG file for the Signature
   * @return sSignatureUrl
   */
  @javax.annotation.Nullable
  public String getsSignatureUrl() {
    return sSignatureUrl;
  }

  public void setsSignatureUrl(@javax.annotation.Nullable String sSignatureUrl) {
    this.sSignatureUrl = sSignatureUrl;
  }


  public SignatureResponseCompound sSignatureUrlinitials(@javax.annotation.Nullable String sSignatureUrlinitials) {
    this.sSignatureUrlinitials = sSignatureUrlinitials;
    return this;
  }

  /**
   * The URL of the SVG file for the Initials
   * @return sSignatureUrlinitials
   */
  @javax.annotation.Nullable
  public String getsSignatureUrlinitials() {
    return sSignatureUrlinitials;
  }

  public void setsSignatureUrlinitials(@javax.annotation.Nullable String sSignatureUrlinitials) {
    this.sSignatureUrlinitials = sSignatureUrlinitials;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignatureResponseCompound signatureResponseCompound = (SignatureResponseCompound) o;
    return Objects.equals(this.pkiSignatureID, signatureResponseCompound.pkiSignatureID) &&
        Objects.equals(this.fkiFontID, signatureResponseCompound.fkiFontID) &&
        Objects.equals(this.sSignatureUrl, signatureResponseCompound.sSignatureUrl) &&
        Objects.equals(this.sSignatureUrlinitials, signatureResponseCompound.sSignatureUrlinitials);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiSignatureID, fkiFontID, sSignatureUrl, sSignatureUrlinitials);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignatureResponseCompound {\n");
    sb.append("    pkiSignatureID: ").append(toIndentedString(pkiSignatureID)).append("\n");
    sb.append("    fkiFontID: ").append(toIndentedString(fkiFontID)).append("\n");
    sb.append("    sSignatureUrl: ").append(toIndentedString(sSignatureUrl)).append("\n");
    sb.append("    sSignatureUrlinitials: ").append(toIndentedString(sSignatureUrlinitials)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiSignatureID");
    openapiFields.add("fkiFontID");
    openapiFields.add("sSignatureUrl");
    openapiFields.add("sSignatureUrlinitials");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiSignatureID");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SignatureResponseCompound
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SignatureResponseCompound.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SignatureResponseCompound is not found in the empty JSON string", SignatureResponseCompound.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SignatureResponseCompound.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SignatureResponseCompound` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SignatureResponseCompound.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("sSignatureUrl") != null && !jsonObj.get("sSignatureUrl").isJsonNull()) && !jsonObj.get("sSignatureUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sSignatureUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sSignatureUrl").toString()));
      }
      if ((jsonObj.get("sSignatureUrlinitials") != null && !jsonObj.get("sSignatureUrlinitials").isJsonNull()) && !jsonObj.get("sSignatureUrlinitials").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sSignatureUrlinitials` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sSignatureUrlinitials").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SignatureResponseCompound.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SignatureResponseCompound' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SignatureResponseCompound> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SignatureResponseCompound.class));

       return (TypeAdapter<T>) new TypeAdapter<SignatureResponseCompound>() {
           @Override
           public void write(JsonWriter out, SignatureResponseCompound value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SignatureResponseCompound read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SignatureResponseCompound given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SignatureResponseCompound
   * @throws IOException if the JSON string is invalid with respect to SignatureResponseCompound
   */
  public static SignatureResponseCompound fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SignatureResponseCompound.class);
  }

  /**
   * Convert an instance of SignatureResponseCompound to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

