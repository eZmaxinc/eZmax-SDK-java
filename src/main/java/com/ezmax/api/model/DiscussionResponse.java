/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.CustomDiscussionconfigurationResponse;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Discussion Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-30T20:25:06.858397322Z[Etc/UTC]", comments = "Generator version: 7.11.0")
public class DiscussionResponse {
  public static final String SERIALIZED_NAME_PKI_DISCUSSION_I_D = "pkiDiscussionID";
  @SerializedName(SERIALIZED_NAME_PKI_DISCUSSION_I_D)
  @javax.annotation.Nonnull
  private Integer pkiDiscussionID;

  public static final String SERIALIZED_NAME_S_DISCUSSION_DESCRIPTION = "sDiscussionDescription";
  @SerializedName(SERIALIZED_NAME_S_DISCUSSION_DESCRIPTION)
  @javax.annotation.Nonnull
  private String sDiscussionDescription;

  public static final String SERIALIZED_NAME_B_DISCUSSION_CLOSED = "bDiscussionClosed";
  @SerializedName(SERIALIZED_NAME_B_DISCUSSION_CLOSED)
  @javax.annotation.Nonnull
  private Boolean bDiscussionClosed;

  public static final String SERIALIZED_NAME_DT_DISCUSSION_LASTREAD = "dtDiscussionLastread";
  @SerializedName(SERIALIZED_NAME_DT_DISCUSSION_LASTREAD)
  @javax.annotation.Nullable
  private String dtDiscussionLastread;

  public static final String SERIALIZED_NAME_I_DISCUSSIONMESSAGE_COUNT = "iDiscussionmessageCount";
  @SerializedName(SERIALIZED_NAME_I_DISCUSSIONMESSAGE_COUNT)
  @javax.annotation.Nonnull
  private Integer iDiscussionmessageCount;

  public static final String SERIALIZED_NAME_I_DISCUSSIONMESSAGE_COUNTUNREAD = "iDiscussionmessageCountunread";
  @SerializedName(SERIALIZED_NAME_I_DISCUSSIONMESSAGE_COUNTUNREAD)
  @javax.annotation.Nonnull
  private Integer iDiscussionmessageCountunread;

  public static final String SERIALIZED_NAME_OBJ_DISCUSSIONCONFIGURATION = "objDiscussionconfiguration";
  @SerializedName(SERIALIZED_NAME_OBJ_DISCUSSIONCONFIGURATION)
  @javax.annotation.Nullable
  private CustomDiscussionconfigurationResponse objDiscussionconfiguration;

  public DiscussionResponse() {
  }

  public DiscussionResponse pkiDiscussionID(@javax.annotation.Nonnull Integer pkiDiscussionID) {
    this.pkiDiscussionID = pkiDiscussionID;
    return this;
  }

  /**
   * The unique ID of the Discussion
   * minimum: 0
   * maximum: 16777215
   * @return pkiDiscussionID
   */
  @javax.annotation.Nonnull
  public Integer getPkiDiscussionID() {
    return pkiDiscussionID;
  }

  public void setPkiDiscussionID(@javax.annotation.Nonnull Integer pkiDiscussionID) {
    this.pkiDiscussionID = pkiDiscussionID;
  }


  public DiscussionResponse sDiscussionDescription(@javax.annotation.Nonnull String sDiscussionDescription) {
    this.sDiscussionDescription = sDiscussionDescription;
    return this;
  }

  /**
   * The description of the Discussion
   * @return sDiscussionDescription
   */
  @javax.annotation.Nonnull
  public String getsDiscussionDescription() {
    return sDiscussionDescription;
  }

  public void setsDiscussionDescription(@javax.annotation.Nonnull String sDiscussionDescription) {
    this.sDiscussionDescription = sDiscussionDescription;
  }


  public DiscussionResponse bDiscussionClosed(@javax.annotation.Nonnull Boolean bDiscussionClosed) {
    this.bDiscussionClosed = bDiscussionClosed;
    return this;
  }

  /**
   * Whether if it&#39;s an closed
   * @return bDiscussionClosed
   */
  @javax.annotation.Nonnull
  public Boolean getbDiscussionClosed() {
    return bDiscussionClosed;
  }

  public void setbDiscussionClosed(@javax.annotation.Nonnull Boolean bDiscussionClosed) {
    this.bDiscussionClosed = bDiscussionClosed;
  }


  public DiscussionResponse dtDiscussionLastread(@javax.annotation.Nullable String dtDiscussionLastread) {
    this.dtDiscussionLastread = dtDiscussionLastread;
    return this;
  }

  /**
   * The date the Discussion was last read
   * @return dtDiscussionLastread
   */
  @javax.annotation.Nullable
  public String getDtDiscussionLastread() {
    return dtDiscussionLastread;
  }

  public void setDtDiscussionLastread(@javax.annotation.Nullable String dtDiscussionLastread) {
    this.dtDiscussionLastread = dtDiscussionLastread;
  }


  public DiscussionResponse iDiscussionmessageCount(@javax.annotation.Nonnull Integer iDiscussionmessageCount) {
    this.iDiscussionmessageCount = iDiscussionmessageCount;
    return this;
  }

  /**
   * The count of Attachment.
   * @return iDiscussionmessageCount
   */
  @javax.annotation.Nonnull
  public Integer getiDiscussionmessageCount() {
    return iDiscussionmessageCount;
  }

  public void setiDiscussionmessageCount(@javax.annotation.Nonnull Integer iDiscussionmessageCount) {
    this.iDiscussionmessageCount = iDiscussionmessageCount;
  }


  public DiscussionResponse iDiscussionmessageCountunread(@javax.annotation.Nonnull Integer iDiscussionmessageCountunread) {
    this.iDiscussionmessageCountunread = iDiscussionmessageCountunread;
    return this;
  }

  /**
   * The count of Attachment.
   * @return iDiscussionmessageCountunread
   */
  @javax.annotation.Nonnull
  public Integer getiDiscussionmessageCountunread() {
    return iDiscussionmessageCountunread;
  }

  public void setiDiscussionmessageCountunread(@javax.annotation.Nonnull Integer iDiscussionmessageCountunread) {
    this.iDiscussionmessageCountunread = iDiscussionmessageCountunread;
  }


  public DiscussionResponse objDiscussionconfiguration(@javax.annotation.Nullable CustomDiscussionconfigurationResponse objDiscussionconfiguration) {
    this.objDiscussionconfiguration = objDiscussionconfiguration;
    return this;
  }

  /**
   * Get objDiscussionconfiguration
   * @return objDiscussionconfiguration
   */
  @javax.annotation.Nullable
  public CustomDiscussionconfigurationResponse getObjDiscussionconfiguration() {
    return objDiscussionconfiguration;
  }

  public void setObjDiscussionconfiguration(@javax.annotation.Nullable CustomDiscussionconfigurationResponse objDiscussionconfiguration) {
    this.objDiscussionconfiguration = objDiscussionconfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiscussionResponse discussionResponse = (DiscussionResponse) o;
    return Objects.equals(this.pkiDiscussionID, discussionResponse.pkiDiscussionID) &&
        Objects.equals(this.sDiscussionDescription, discussionResponse.sDiscussionDescription) &&
        Objects.equals(this.bDiscussionClosed, discussionResponse.bDiscussionClosed) &&
        Objects.equals(this.dtDiscussionLastread, discussionResponse.dtDiscussionLastread) &&
        Objects.equals(this.iDiscussionmessageCount, discussionResponse.iDiscussionmessageCount) &&
        Objects.equals(this.iDiscussionmessageCountunread, discussionResponse.iDiscussionmessageCountunread) &&
        Objects.equals(this.objDiscussionconfiguration, discussionResponse.objDiscussionconfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiDiscussionID, sDiscussionDescription, bDiscussionClosed, dtDiscussionLastread, iDiscussionmessageCount, iDiscussionmessageCountunread, objDiscussionconfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiscussionResponse {\n");
    sb.append("    pkiDiscussionID: ").append(toIndentedString(pkiDiscussionID)).append("\n");
    sb.append("    sDiscussionDescription: ").append(toIndentedString(sDiscussionDescription)).append("\n");
    sb.append("    bDiscussionClosed: ").append(toIndentedString(bDiscussionClosed)).append("\n");
    sb.append("    dtDiscussionLastread: ").append(toIndentedString(dtDiscussionLastread)).append("\n");
    sb.append("    iDiscussionmessageCount: ").append(toIndentedString(iDiscussionmessageCount)).append("\n");
    sb.append("    iDiscussionmessageCountunread: ").append(toIndentedString(iDiscussionmessageCountunread)).append("\n");
    sb.append("    objDiscussionconfiguration: ").append(toIndentedString(objDiscussionconfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiDiscussionID");
    openapiFields.add("sDiscussionDescription");
    openapiFields.add("bDiscussionClosed");
    openapiFields.add("dtDiscussionLastread");
    openapiFields.add("iDiscussionmessageCount");
    openapiFields.add("iDiscussionmessageCountunread");
    openapiFields.add("objDiscussionconfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiDiscussionID");
    openapiRequiredFields.add("sDiscussionDescription");
    openapiRequiredFields.add("bDiscussionClosed");
    openapiRequiredFields.add("iDiscussionmessageCount");
    openapiRequiredFields.add("iDiscussionmessageCountunread");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DiscussionResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiscussionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiscussionResponse is not found in the empty JSON string", DiscussionResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiscussionResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiscussionResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DiscussionResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("sDiscussionDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sDiscussionDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sDiscussionDescription").toString()));
      }
      if ((jsonObj.get("dtDiscussionLastread") != null && !jsonObj.get("dtDiscussionLastread").isJsonNull()) && !jsonObj.get("dtDiscussionLastread").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dtDiscussionLastread` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dtDiscussionLastread").toString()));
      }
      // validate the optional field `objDiscussionconfiguration`
      if (jsonObj.get("objDiscussionconfiguration") != null && !jsonObj.get("objDiscussionconfiguration").isJsonNull()) {
        CustomDiscussionconfigurationResponse.validateJsonElement(jsonObj.get("objDiscussionconfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiscussionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiscussionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiscussionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiscussionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DiscussionResponse>() {
           @Override
           public void write(JsonWriter out, DiscussionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiscussionResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DiscussionResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DiscussionResponse
   * @throws IOException if the JSON string is invalid with respect to DiscussionResponse
   */
  public static DiscussionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiscussionResponse.class);
  }

  /**
   * Convert an instance of DiscussionResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

