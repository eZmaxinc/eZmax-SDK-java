/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.CommonReportcolumn;
import com.ezmax.api.model.CommonReportsubsection;
import com.ezmax.api.model.EnumHorizontalalignment;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A section in a Report. Each Reportsection shares Reportcolumns disposition with all its Reportsubsection 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-07T15:28:42.505152975Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class CommonReportsection {
  public static final String SERIALIZED_NAME_A_OBJ_REPORTSUBSECTION = "a_objReportsubsection";
  @SerializedName(SERIALIZED_NAME_A_OBJ_REPORTSUBSECTION)
  @javax.annotation.Nonnull
  private List<CommonReportsubsection> aObjReportsubsection = new ArrayList<>();

  public static final String SERIALIZED_NAME_A_OBJ_REPORTCOLUMN = "a_objReportcolumn";
  @SerializedName(SERIALIZED_NAME_A_OBJ_REPORTCOLUMN)
  @javax.annotation.Nonnull
  private List<CommonReportcolumn> aObjReportcolumn = new ArrayList<>();

  public static final String SERIALIZED_NAME_E_REPORTSECTION_HORIZONTALALIGNMENT = "eReportsectionHorizontalalignment";
  @SerializedName(SERIALIZED_NAME_E_REPORTSECTION_HORIZONTALALIGNMENT)
  @javax.annotation.Nonnull
  private EnumHorizontalalignment eReportsectionHorizontalalignment;

  public static final String SERIALIZED_NAME_I_REPORTSECTION_COLUMNCOUNT = "iReportsectionColumncount";
  @SerializedName(SERIALIZED_NAME_I_REPORTSECTION_COLUMNCOUNT)
  @javax.annotation.Nonnull
  private Integer iReportsectionColumncount;

  public static final String SERIALIZED_NAME_I_REPORTSECTION_WIDTH = "iReportsectionWidth";
  @SerializedName(SERIALIZED_NAME_I_REPORTSECTION_WIDTH)
  @javax.annotation.Nonnull
  private Integer iReportsectionWidth;

  public static final String SERIALIZED_NAME_S_REPORTSECTION_TITLE = "sReportsectionTitle";
  @SerializedName(SERIALIZED_NAME_S_REPORTSECTION_TITLE)
  @javax.annotation.Nullable
  private String sReportsectionTitle;

  public CommonReportsection() {
  }

  public CommonReportsection aObjReportsubsection(@javax.annotation.Nonnull List<CommonReportsubsection> aObjReportsubsection) {
    this.aObjReportsubsection = aObjReportsubsection;
    return this;
  }

  public CommonReportsection addAObjReportsubsectionItem(CommonReportsubsection aObjReportsubsectionItem) {
    if (this.aObjReportsubsection == null) {
      this.aObjReportsubsection = new ArrayList<>();
    }
    this.aObjReportsubsection.add(aObjReportsubsectionItem);
    return this;
  }

  /**
   * Get aObjReportsubsection
   * @return aObjReportsubsection
   */
  @javax.annotation.Nonnull
  public List<CommonReportsubsection> getaObjReportsubsection() {
    return aObjReportsubsection;
  }

  public void setaObjReportsubsection(@javax.annotation.Nonnull List<CommonReportsubsection> aObjReportsubsection) {
    this.aObjReportsubsection = aObjReportsubsection;
  }


  public CommonReportsection aObjReportcolumn(@javax.annotation.Nonnull List<CommonReportcolumn> aObjReportcolumn) {
    this.aObjReportcolumn = aObjReportcolumn;
    return this;
  }

  public CommonReportsection addAObjReportcolumnItem(CommonReportcolumn aObjReportcolumnItem) {
    if (this.aObjReportcolumn == null) {
      this.aObjReportcolumn = new ArrayList<>();
    }
    this.aObjReportcolumn.add(aObjReportcolumnItem);
    return this;
  }

  /**
   * Get aObjReportcolumn
   * @return aObjReportcolumn
   */
  @javax.annotation.Nonnull
  public List<CommonReportcolumn> getaObjReportcolumn() {
    return aObjReportcolumn;
  }

  public void setaObjReportcolumn(@javax.annotation.Nonnull List<CommonReportcolumn> aObjReportcolumn) {
    this.aObjReportcolumn = aObjReportcolumn;
  }


  public CommonReportsection eReportsectionHorizontalalignment(@javax.annotation.Nonnull EnumHorizontalalignment eReportsectionHorizontalalignment) {
    this.eReportsectionHorizontalalignment = eReportsectionHorizontalalignment;
    return this;
  }

  /**
   * Get eReportsectionHorizontalalignment
   * @return eReportsectionHorizontalalignment
   */
  @javax.annotation.Nonnull
  public EnumHorizontalalignment geteReportsectionHorizontalalignment() {
    return eReportsectionHorizontalalignment;
  }

  public void seteReportsectionHorizontalalignment(@javax.annotation.Nonnull EnumHorizontalalignment eReportsectionHorizontalalignment) {
    this.eReportsectionHorizontalalignment = eReportsectionHorizontalalignment;
  }


  public CommonReportsection iReportsectionColumncount(@javax.annotation.Nonnull Integer iReportsectionColumncount) {
    this.iReportsectionColumncount = iReportsectionColumncount;
    return this;
  }

  /**
   * The number of Reportcolumns in the Reportsection
   * @return iReportsectionColumncount
   */
  @javax.annotation.Nonnull
  public Integer getiReportsectionColumncount() {
    return iReportsectionColumncount;
  }

  public void setiReportsectionColumncount(@javax.annotation.Nonnull Integer iReportsectionColumncount) {
    this.iReportsectionColumncount = iReportsectionColumncount;
  }


  public CommonReportsection iReportsectionWidth(@javax.annotation.Nonnull Integer iReportsectionWidth) {
    this.iReportsectionWidth = iReportsectionWidth;
    return this;
  }

  /**
   * The combined width of all the Reportcolumns in the Reportsection
   * @return iReportsectionWidth
   */
  @javax.annotation.Nonnull
  public Integer getiReportsectionWidth() {
    return iReportsectionWidth;
  }

  public void setiReportsectionWidth(@javax.annotation.Nonnull Integer iReportsectionWidth) {
    this.iReportsectionWidth = iReportsectionWidth;
  }


  public CommonReportsection sReportsectionTitle(@javax.annotation.Nullable String sReportsectionTitle) {
    this.sReportsectionTitle = sReportsectionTitle;
    return this;
  }

  /**
   * The title of this Reportsection
   * @return sReportsectionTitle
   */
  @javax.annotation.Nullable
  public String getsReportsectionTitle() {
    return sReportsectionTitle;
  }

  public void setsReportsectionTitle(@javax.annotation.Nullable String sReportsectionTitle) {
    this.sReportsectionTitle = sReportsectionTitle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommonReportsection commonReportsection = (CommonReportsection) o;
    return Objects.equals(this.aObjReportsubsection, commonReportsection.aObjReportsubsection) &&
        Objects.equals(this.aObjReportcolumn, commonReportsection.aObjReportcolumn) &&
        Objects.equals(this.eReportsectionHorizontalalignment, commonReportsection.eReportsectionHorizontalalignment) &&
        Objects.equals(this.iReportsectionColumncount, commonReportsection.iReportsectionColumncount) &&
        Objects.equals(this.iReportsectionWidth, commonReportsection.iReportsectionWidth) &&
        Objects.equals(this.sReportsectionTitle, commonReportsection.sReportsectionTitle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aObjReportsubsection, aObjReportcolumn, eReportsectionHorizontalalignment, iReportsectionColumncount, iReportsectionWidth, sReportsectionTitle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommonReportsection {\n");
    sb.append("    aObjReportsubsection: ").append(toIndentedString(aObjReportsubsection)).append("\n");
    sb.append("    aObjReportcolumn: ").append(toIndentedString(aObjReportcolumn)).append("\n");
    sb.append("    eReportsectionHorizontalalignment: ").append(toIndentedString(eReportsectionHorizontalalignment)).append("\n");
    sb.append("    iReportsectionColumncount: ").append(toIndentedString(iReportsectionColumncount)).append("\n");
    sb.append("    iReportsectionWidth: ").append(toIndentedString(iReportsectionWidth)).append("\n");
    sb.append("    sReportsectionTitle: ").append(toIndentedString(sReportsectionTitle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("a_objReportsubsection");
    openapiFields.add("a_objReportcolumn");
    openapiFields.add("eReportsectionHorizontalalignment");
    openapiFields.add("iReportsectionColumncount");
    openapiFields.add("iReportsectionWidth");
    openapiFields.add("sReportsectionTitle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("a_objReportsubsection");
    openapiRequiredFields.add("a_objReportcolumn");
    openapiRequiredFields.add("eReportsectionHorizontalalignment");
    openapiRequiredFields.add("iReportsectionColumncount");
    openapiRequiredFields.add("iReportsectionWidth");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CommonReportsection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CommonReportsection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommonReportsection is not found in the empty JSON string", CommonReportsection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CommonReportsection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommonReportsection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CommonReportsection.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("a_objReportsubsection").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_objReportsubsection` to be an array in the JSON string but got `%s`", jsonObj.get("a_objReportsubsection").toString()));
      }

      JsonArray jsonArrayaObjReportsubsection = jsonObj.getAsJsonArray("a_objReportsubsection");
      // validate the required field `a_objReportsubsection` (array)
      for (int i = 0; i < jsonArrayaObjReportsubsection.size(); i++) {
        CommonReportsubsection.validateJsonElement(jsonArrayaObjReportsubsection.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("a_objReportcolumn").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_objReportcolumn` to be an array in the JSON string but got `%s`", jsonObj.get("a_objReportcolumn").toString()));
      }

      JsonArray jsonArrayaObjReportcolumn = jsonObj.getAsJsonArray("a_objReportcolumn");
      // validate the required field `a_objReportcolumn` (array)
      for (int i = 0; i < jsonArrayaObjReportcolumn.size(); i++) {
        CommonReportcolumn.validateJsonElement(jsonArrayaObjReportcolumn.get(i));
      };
      // validate the required field `eReportsectionHorizontalalignment`
      EnumHorizontalalignment.validateJsonElement(jsonObj.get("eReportsectionHorizontalalignment"));
      if ((jsonObj.get("sReportsectionTitle") != null && !jsonObj.get("sReportsectionTitle").isJsonNull()) && !jsonObj.get("sReportsectionTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sReportsectionTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sReportsectionTitle").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommonReportsection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommonReportsection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommonReportsection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommonReportsection.class));

       return (TypeAdapter<T>) new TypeAdapter<CommonReportsection>() {
           @Override
           public void write(JsonWriter out, CommonReportsection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommonReportsection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CommonReportsection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CommonReportsection
   * @throws IOException if the JSON string is invalid with respect to CommonReportsection
   */
  public static CommonReportsection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommonReportsection.class);
  }

  /**
   * Convert an instance of CommonReportsection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

