/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.BrandingListElement;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * Payload for GET /1/object/branding/getList
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-19T17:55:55.222327902Z[Etc/UTC]")
public class BrandingGetListV1ResponseMPayload {
  public static final String SERIALIZED_NAME_I_ROW_RETURNED = "iRowReturned";
  @SerializedName(SERIALIZED_NAME_I_ROW_RETURNED)
  private Integer iRowReturned;

  public static final String SERIALIZED_NAME_I_ROW_FILTERED = "iRowFiltered";
  @SerializedName(SERIALIZED_NAME_I_ROW_FILTERED)
  private Integer iRowFiltered;

  public static final String SERIALIZED_NAME_A_OBJ_BRANDING = "a_objBranding";
  @SerializedName(SERIALIZED_NAME_A_OBJ_BRANDING)
  private List<BrandingListElement> aObjBranding = new ArrayList<>();

  public BrandingGetListV1ResponseMPayload() {
  }

  public BrandingGetListV1ResponseMPayload iRowReturned(Integer iRowReturned) {
    this.iRowReturned = iRowReturned;
    return this;
  }

   /**
   * The number of rows returned
   * @return iRowReturned
  **/
  @javax.annotation.Nonnull
  public Integer getiRowReturned() {
    return iRowReturned;
  }

  public void setiRowReturned(Integer iRowReturned) {
    this.iRowReturned = iRowReturned;
  }


  public BrandingGetListV1ResponseMPayload iRowFiltered(Integer iRowFiltered) {
    this.iRowFiltered = iRowFiltered;
    return this;
  }

   /**
   * The number of rows matching your filters (if any) or the total number of rows
   * @return iRowFiltered
  **/
  @javax.annotation.Nonnull
  public Integer getiRowFiltered() {
    return iRowFiltered;
  }

  public void setiRowFiltered(Integer iRowFiltered) {
    this.iRowFiltered = iRowFiltered;
  }


  public BrandingGetListV1ResponseMPayload aObjBranding(List<BrandingListElement> aObjBranding) {
    this.aObjBranding = aObjBranding;
    return this;
  }

  public BrandingGetListV1ResponseMPayload addAObjBrandingItem(BrandingListElement aObjBrandingItem) {
    if (this.aObjBranding == null) {
      this.aObjBranding = new ArrayList<>();
    }
    this.aObjBranding.add(aObjBrandingItem);
    return this;
  }

   /**
   * Get aObjBranding
   * @return aObjBranding
  **/
  @javax.annotation.Nonnull
  public List<BrandingListElement> getaObjBranding() {
    return aObjBranding;
  }

  public void setaObjBranding(List<BrandingListElement> aObjBranding) {
    this.aObjBranding = aObjBranding;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BrandingGetListV1ResponseMPayload brandingGetListV1ResponseMPayload = (BrandingGetListV1ResponseMPayload) o;
    return Objects.equals(this.iRowReturned, brandingGetListV1ResponseMPayload.iRowReturned) &&
        Objects.equals(this.iRowFiltered, brandingGetListV1ResponseMPayload.iRowFiltered) &&
        Objects.equals(this.aObjBranding, brandingGetListV1ResponseMPayload.aObjBranding);
  }

  @Override
  public int hashCode() {
    return Objects.hash(iRowReturned, iRowFiltered, aObjBranding);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BrandingGetListV1ResponseMPayload {\n");
    sb.append("    iRowReturned: ").append(toIndentedString(iRowReturned)).append("\n");
    sb.append("    iRowFiltered: ").append(toIndentedString(iRowFiltered)).append("\n");
    sb.append("    aObjBranding: ").append(toIndentedString(aObjBranding)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("iRowReturned");
    openapiFields.add("iRowFiltered");
    openapiFields.add("a_objBranding");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("iRowReturned");
    openapiRequiredFields.add("iRowFiltered");
    openapiRequiredFields.add("a_objBranding");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BrandingGetListV1ResponseMPayload
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BrandingGetListV1ResponseMPayload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BrandingGetListV1ResponseMPayload is not found in the empty JSON string", BrandingGetListV1ResponseMPayload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BrandingGetListV1ResponseMPayload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BrandingGetListV1ResponseMPayload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BrandingGetListV1ResponseMPayload.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("a_objBranding").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_objBranding` to be an array in the JSON string but got `%s`", jsonObj.get("a_objBranding").toString()));
      }

      JsonArray jsonArrayaObjBranding = jsonObj.getAsJsonArray("a_objBranding");
      // validate the required field `a_objBranding` (array)
      for (int i = 0; i < jsonArrayaObjBranding.size(); i++) {
        BrandingListElement.validateJsonElement(jsonArrayaObjBranding.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BrandingGetListV1ResponseMPayload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BrandingGetListV1ResponseMPayload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BrandingGetListV1ResponseMPayload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BrandingGetListV1ResponseMPayload.class));

       return (TypeAdapter<T>) new TypeAdapter<BrandingGetListV1ResponseMPayload>() {
           @Override
           public void write(JsonWriter out, BrandingGetListV1ResponseMPayload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BrandingGetListV1ResponseMPayload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BrandingGetListV1ResponseMPayload given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BrandingGetListV1ResponseMPayload
  * @throws IOException if the JSON string is invalid with respect to BrandingGetListV1ResponseMPayload
  */
  public static BrandingGetListV1ResponseMPayload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BrandingGetListV1ResponseMPayload.class);
  }

 /**
  * Convert an instance of BrandingGetListV1ResponseMPayload to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

