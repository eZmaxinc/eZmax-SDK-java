/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Textstylestatic Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-25T01:26:32.973996052Z[Etc/UTC]")
public class TextstylestaticResponseCompound {
  public static final String SERIALIZED_NAME_PKI_TEXTSTYLESTATIC_I_D = "pkiTextstylestaticID";
  @SerializedName(SERIALIZED_NAME_PKI_TEXTSTYLESTATIC_I_D)
  private Integer pkiTextstylestaticID;

  public static final String SERIALIZED_NAME_FKI_FONT_I_D = "fkiFontID";
  @SerializedName(SERIALIZED_NAME_FKI_FONT_I_D)
  private Integer fkiFontID;

  public static final String SERIALIZED_NAME_B_TEXTSTYLESTATIC_BOLD = "bTextstylestaticBold";
  @SerializedName(SERIALIZED_NAME_B_TEXTSTYLESTATIC_BOLD)
  private Boolean bTextstylestaticBold;

  public static final String SERIALIZED_NAME_B_TEXTSTYLESTATIC_UNDERLINE = "bTextstylestaticUnderline";
  @SerializedName(SERIALIZED_NAME_B_TEXTSTYLESTATIC_UNDERLINE)
  private Boolean bTextstylestaticUnderline;

  public static final String SERIALIZED_NAME_B_TEXTSTYLESTATIC_ITALIC = "bTextstylestaticItalic";
  @SerializedName(SERIALIZED_NAME_B_TEXTSTYLESTATIC_ITALIC)
  private Boolean bTextstylestaticItalic;

  public static final String SERIALIZED_NAME_B_TEXTSTYLESTATIC_STRIKETHROUGH = "bTextstylestaticStrikethrough";
  @SerializedName(SERIALIZED_NAME_B_TEXTSTYLESTATIC_STRIKETHROUGH)
  private Boolean bTextstylestaticStrikethrough;

  public static final String SERIALIZED_NAME_I_TEXTSTYLESTATIC_FONTCOLOR = "iTextstylestaticFontcolor";
  @SerializedName(SERIALIZED_NAME_I_TEXTSTYLESTATIC_FONTCOLOR)
  private Integer iTextstylestaticFontcolor;

  public static final String SERIALIZED_NAME_I_TEXTSTYLESTATIC_SIZE = "iTextstylestaticSize";
  @SerializedName(SERIALIZED_NAME_I_TEXTSTYLESTATIC_SIZE)
  private Integer iTextstylestaticSize;

  public TextstylestaticResponseCompound() {
  }

  public TextstylestaticResponseCompound pkiTextstylestaticID(Integer pkiTextstylestaticID) {
    
    this.pkiTextstylestaticID = pkiTextstylestaticID;
    return this;
  }

   /**
   * The unique ID of the Textstylestatic
   * minimum: 0
   * @return pkiTextstylestaticID
  **/
  @javax.annotation.Nullable
  public Integer getPkiTextstylestaticID() {
    return pkiTextstylestaticID;
  }


  public void setPkiTextstylestaticID(Integer pkiTextstylestaticID) {
    this.pkiTextstylestaticID = pkiTextstylestaticID;
  }


  public TextstylestaticResponseCompound fkiFontID(Integer fkiFontID) {
    
    this.fkiFontID = fkiFontID;
    return this;
  }

   /**
   * The unique ID of the Font
   * minimum: 0
   * @return fkiFontID
  **/
  @javax.annotation.Nonnull
  public Integer getFkiFontID() {
    return fkiFontID;
  }


  public void setFkiFontID(Integer fkiFontID) {
    this.fkiFontID = fkiFontID;
  }


  public TextstylestaticResponseCompound bTextstylestaticBold(Boolean bTextstylestaticBold) {
    
    this.bTextstylestaticBold = bTextstylestaticBold;
    return this;
  }

   /**
   * Whether the Textstylestatic is Bold or not
   * @return bTextstylestaticBold
  **/
  @javax.annotation.Nonnull
  public Boolean getbTextstylestaticBold() {
    return bTextstylestaticBold;
  }


  public void setbTextstylestaticBold(Boolean bTextstylestaticBold) {
    this.bTextstylestaticBold = bTextstylestaticBold;
  }


  public TextstylestaticResponseCompound bTextstylestaticUnderline(Boolean bTextstylestaticUnderline) {
    
    this.bTextstylestaticUnderline = bTextstylestaticUnderline;
    return this;
  }

   /**
   * Whether the Textstylestatic is Underline or not
   * @return bTextstylestaticUnderline
  **/
  @javax.annotation.Nonnull
  public Boolean getbTextstylestaticUnderline() {
    return bTextstylestaticUnderline;
  }


  public void setbTextstylestaticUnderline(Boolean bTextstylestaticUnderline) {
    this.bTextstylestaticUnderline = bTextstylestaticUnderline;
  }


  public TextstylestaticResponseCompound bTextstylestaticItalic(Boolean bTextstylestaticItalic) {
    
    this.bTextstylestaticItalic = bTextstylestaticItalic;
    return this;
  }

   /**
   * Whether the Textstylestatic is Italic or not
   * @return bTextstylestaticItalic
  **/
  @javax.annotation.Nonnull
  public Boolean getbTextstylestaticItalic() {
    return bTextstylestaticItalic;
  }


  public void setbTextstylestaticItalic(Boolean bTextstylestaticItalic) {
    this.bTextstylestaticItalic = bTextstylestaticItalic;
  }


  public TextstylestaticResponseCompound bTextstylestaticStrikethrough(Boolean bTextstylestaticStrikethrough) {
    
    this.bTextstylestaticStrikethrough = bTextstylestaticStrikethrough;
    return this;
  }

   /**
   * Whether the Textstylestatic is Strikethrough or not
   * @return bTextstylestaticStrikethrough
  **/
  @javax.annotation.Nonnull
  public Boolean getbTextstylestaticStrikethrough() {
    return bTextstylestaticStrikethrough;
  }


  public void setbTextstylestaticStrikethrough(Boolean bTextstylestaticStrikethrough) {
    this.bTextstylestaticStrikethrough = bTextstylestaticStrikethrough;
  }


  public TextstylestaticResponseCompound iTextstylestaticFontcolor(Integer iTextstylestaticFontcolor) {
    
    this.iTextstylestaticFontcolor = iTextstylestaticFontcolor;
    return this;
  }

   /**
   * The int32 representation of the Fontcolor. For example, RGB color #39435B would be 3752795
   * minimum: 0
   * maximum: 16777215
   * @return iTextstylestaticFontcolor
  **/
  @javax.annotation.Nonnull
  public Integer getiTextstylestaticFontcolor() {
    return iTextstylestaticFontcolor;
  }


  public void setiTextstylestaticFontcolor(Integer iTextstylestaticFontcolor) {
    this.iTextstylestaticFontcolor = iTextstylestaticFontcolor;
  }


  public TextstylestaticResponseCompound iTextstylestaticSize(Integer iTextstylestaticSize) {
    
    this.iTextstylestaticSize = iTextstylestaticSize;
    return this;
  }

   /**
   * The Size for the Font of the Textstylestatic
   * minimum: 1
   * maximum: 255
   * @return iTextstylestaticSize
  **/
  @javax.annotation.Nonnull
  public Integer getiTextstylestaticSize() {
    return iTextstylestaticSize;
  }


  public void setiTextstylestaticSize(Integer iTextstylestaticSize) {
    this.iTextstylestaticSize = iTextstylestaticSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TextstylestaticResponseCompound textstylestaticResponseCompound = (TextstylestaticResponseCompound) o;
    return Objects.equals(this.pkiTextstylestaticID, textstylestaticResponseCompound.pkiTextstylestaticID) &&
        Objects.equals(this.fkiFontID, textstylestaticResponseCompound.fkiFontID) &&
        Objects.equals(this.bTextstylestaticBold, textstylestaticResponseCompound.bTextstylestaticBold) &&
        Objects.equals(this.bTextstylestaticUnderline, textstylestaticResponseCompound.bTextstylestaticUnderline) &&
        Objects.equals(this.bTextstylestaticItalic, textstylestaticResponseCompound.bTextstylestaticItalic) &&
        Objects.equals(this.bTextstylestaticStrikethrough, textstylestaticResponseCompound.bTextstylestaticStrikethrough) &&
        Objects.equals(this.iTextstylestaticFontcolor, textstylestaticResponseCompound.iTextstylestaticFontcolor) &&
        Objects.equals(this.iTextstylestaticSize, textstylestaticResponseCompound.iTextstylestaticSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiTextstylestaticID, fkiFontID, bTextstylestaticBold, bTextstylestaticUnderline, bTextstylestaticItalic, bTextstylestaticStrikethrough, iTextstylestaticFontcolor, iTextstylestaticSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TextstylestaticResponseCompound {\n");
    sb.append("    pkiTextstylestaticID: ").append(toIndentedString(pkiTextstylestaticID)).append("\n");
    sb.append("    fkiFontID: ").append(toIndentedString(fkiFontID)).append("\n");
    sb.append("    bTextstylestaticBold: ").append(toIndentedString(bTextstylestaticBold)).append("\n");
    sb.append("    bTextstylestaticUnderline: ").append(toIndentedString(bTextstylestaticUnderline)).append("\n");
    sb.append("    bTextstylestaticItalic: ").append(toIndentedString(bTextstylestaticItalic)).append("\n");
    sb.append("    bTextstylestaticStrikethrough: ").append(toIndentedString(bTextstylestaticStrikethrough)).append("\n");
    sb.append("    iTextstylestaticFontcolor: ").append(toIndentedString(iTextstylestaticFontcolor)).append("\n");
    sb.append("    iTextstylestaticSize: ").append(toIndentedString(iTextstylestaticSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiTextstylestaticID");
    openapiFields.add("fkiFontID");
    openapiFields.add("bTextstylestaticBold");
    openapiFields.add("bTextstylestaticUnderline");
    openapiFields.add("bTextstylestaticItalic");
    openapiFields.add("bTextstylestaticStrikethrough");
    openapiFields.add("iTextstylestaticFontcolor");
    openapiFields.add("iTextstylestaticSize");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fkiFontID");
    openapiRequiredFields.add("bTextstylestaticBold");
    openapiRequiredFields.add("bTextstylestaticUnderline");
    openapiRequiredFields.add("bTextstylestaticItalic");
    openapiRequiredFields.add("bTextstylestaticStrikethrough");
    openapiRequiredFields.add("iTextstylestaticFontcolor");
    openapiRequiredFields.add("iTextstylestaticSize");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TextstylestaticResponseCompound
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TextstylestaticResponseCompound.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TextstylestaticResponseCompound is not found in the empty JSON string", TextstylestaticResponseCompound.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TextstylestaticResponseCompound.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TextstylestaticResponseCompound` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TextstylestaticResponseCompound.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TextstylestaticResponseCompound.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TextstylestaticResponseCompound' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TextstylestaticResponseCompound> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TextstylestaticResponseCompound.class));

       return (TypeAdapter<T>) new TypeAdapter<TextstylestaticResponseCompound>() {
           @Override
           public void write(JsonWriter out, TextstylestaticResponseCompound value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TextstylestaticResponseCompound read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TextstylestaticResponseCompound given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TextstylestaticResponseCompound
  * @throws IOException if the JSON string is invalid with respect to TextstylestaticResponseCompound
  */
  public static TextstylestaticResponseCompound fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TextstylestaticResponseCompound.class);
  }

 /**
  * Convert an instance of TextstylestaticResponseCompound to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

