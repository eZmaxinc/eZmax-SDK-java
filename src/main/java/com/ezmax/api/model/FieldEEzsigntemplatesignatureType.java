/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The type of signature.  1. **Acknowledgement** is for an acknowledgment of receipt. 2. **City** is to request the city where the document is signed. 3. **Handwritten** is for a handwritten kind of signature where users needs to \&quot;draw\&quot; their signature on screen. 4. **Initials** is a simple \&quot;click to add initials\&quot; block. 5. **Name** is a simple \&quot;Click to sign\&quot; block. This is the most common block of signature. 6. **NameReason** is to ask for a signing reason.  7. **Attachments** is to ask for files as attachment that may be validate in another step.    
 */
@JsonAdapter(FieldEEzsigntemplatesignatureType.Adapter.class)
public enum FieldEEzsigntemplatesignatureType {
  
  ACKNOWLEDGEMENT("Acknowledgement"),
  
  CITY("City"),
  
  HANDWRITTEN("Handwritten"),
  
  INITIALS("Initials"),
  
  NAME("Name"),
  
  NAMEREASON("NameReason"),
  
  ATTACHMENTS("Attachments"),
  
  FIELDTEXT("FieldText"),
  
  FIELDTEXTAREA("FieldTextarea"),
  
  CONSULTATION("Consultation");

  private String value;

  FieldEEzsigntemplatesignatureType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static FieldEEzsigntemplatesignatureType fromValue(String value) {
    for (FieldEEzsigntemplatesignatureType b : FieldEEzsigntemplatesignatureType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<FieldEEzsigntemplatesignatureType> {
    @Override
    public void write(final JsonWriter jsonWriter, final FieldEEzsigntemplatesignatureType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public FieldEEzsigntemplatesignatureType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return FieldEEzsigntemplatesignatureType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    FieldEEzsigntemplatesignatureType.fromValue(value);
  }
}

