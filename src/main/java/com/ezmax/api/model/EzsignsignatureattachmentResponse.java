/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * An Ezsignsignatureattachment Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-30T20:25:06.858397322Z[Etc/UTC]", comments = "Generator version: 7.11.0")
public class EzsignsignatureattachmentResponse {
  public static final String SERIALIZED_NAME_PKI_EZSIGNSIGNATUREATTACHMENT_I_D = "pkiEzsignsignatureattachmentID";
  @SerializedName(SERIALIZED_NAME_PKI_EZSIGNSIGNATUREATTACHMENT_I_D)
  @javax.annotation.Nonnull
  private Integer pkiEzsignsignatureattachmentID;

  public static final String SERIALIZED_NAME_FKI_EZSIGNSIGNATURE_I_D = "fkiEzsignsignatureID";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNSIGNATURE_I_D)
  @javax.annotation.Nonnull
  private Integer fkiEzsignsignatureID;

  public static final String SERIALIZED_NAME_BIN_EZSIGNSIGNATUREATTACHMENT_M_D5 = "binEzsignsignatureattachmentMD5";
  @SerializedName(SERIALIZED_NAME_BIN_EZSIGNSIGNATUREATTACHMENT_M_D5)
  @javax.annotation.Nonnull
  private String binEzsignsignatureattachmentMD5;

  public static final String SERIALIZED_NAME_S_EZSIGNSIGNATUREATTACHMENT_NAME = "sEzsignsignatureattachmentName";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNSIGNATUREATTACHMENT_NAME)
  @javax.annotation.Nonnull
  private String sEzsignsignatureattachmentName;

  public static final String SERIALIZED_NAME_S_DOWNLOAD_URL = "sDownloadUrl";
  @SerializedName(SERIALIZED_NAME_S_DOWNLOAD_URL)
  @javax.annotation.Nonnull
  private String sDownloadUrl;

  public EzsignsignatureattachmentResponse() {
  }

  public EzsignsignatureattachmentResponse pkiEzsignsignatureattachmentID(@javax.annotation.Nonnull Integer pkiEzsignsignatureattachmentID) {
    this.pkiEzsignsignatureattachmentID = pkiEzsignsignatureattachmentID;
    return this;
  }

  /**
   * The unique ID of the Ezsignsignatureattachment
   * minimum: 1
   * maximum: 16777215
   * @return pkiEzsignsignatureattachmentID
   */
  @javax.annotation.Nonnull
  public Integer getPkiEzsignsignatureattachmentID() {
    return pkiEzsignsignatureattachmentID;
  }

  public void setPkiEzsignsignatureattachmentID(@javax.annotation.Nonnull Integer pkiEzsignsignatureattachmentID) {
    this.pkiEzsignsignatureattachmentID = pkiEzsignsignatureattachmentID;
  }


  public EzsignsignatureattachmentResponse fkiEzsignsignatureID(@javax.annotation.Nonnull Integer fkiEzsignsignatureID) {
    this.fkiEzsignsignatureID = fkiEzsignsignatureID;
    return this;
  }

  /**
   * The unique ID of the Ezsignsignature
   * minimum: 0
   * @return fkiEzsignsignatureID
   */
  @javax.annotation.Nonnull
  public Integer getFkiEzsignsignatureID() {
    return fkiEzsignsignatureID;
  }

  public void setFkiEzsignsignatureID(@javax.annotation.Nonnull Integer fkiEzsignsignatureID) {
    this.fkiEzsignsignatureID = fkiEzsignsignatureID;
  }


  public EzsignsignatureattachmentResponse binEzsignsignatureattachmentMD5(@javax.annotation.Nonnull String binEzsignsignatureattachmentMD5) {
    this.binEzsignsignatureattachmentMD5 = binEzsignsignatureattachmentMD5;
    return this;
  }

  /**
   * The md5 of the Ezsignsignatureattachment
   * @return binEzsignsignatureattachmentMD5
   */
  @javax.annotation.Nonnull
  public String getBinEzsignsignatureattachmentMD5() {
    return binEzsignsignatureattachmentMD5;
  }

  public void setBinEzsignsignatureattachmentMD5(@javax.annotation.Nonnull String binEzsignsignatureattachmentMD5) {
    this.binEzsignsignatureattachmentMD5 = binEzsignsignatureattachmentMD5;
  }


  public EzsignsignatureattachmentResponse sEzsignsignatureattachmentName(@javax.annotation.Nonnull String sEzsignsignatureattachmentName) {
    this.sEzsignsignatureattachmentName = sEzsignsignatureattachmentName;
    return this;
  }

  /**
   * The name of the Ezsignsignatureattachment
   * @return sEzsignsignatureattachmentName
   */
  @javax.annotation.Nonnull
  public String getsEzsignsignatureattachmentName() {
    return sEzsignsignatureattachmentName;
  }

  public void setsEzsignsignatureattachmentName(@javax.annotation.Nonnull String sEzsignsignatureattachmentName) {
    this.sEzsignsignatureattachmentName = sEzsignsignatureattachmentName;
  }


  public EzsignsignatureattachmentResponse sDownloadUrl(@javax.annotation.Nonnull String sDownloadUrl) {
    this.sDownloadUrl = sDownloadUrl;
    return this;
  }

  /**
   * The Url to the requested document.  Url will expire after 3 hours.
   * @return sDownloadUrl
   */
  @javax.annotation.Nonnull
  public String getsDownloadUrl() {
    return sDownloadUrl;
  }

  public void setsDownloadUrl(@javax.annotation.Nonnull String sDownloadUrl) {
    this.sDownloadUrl = sDownloadUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsignsignatureattachmentResponse ezsignsignatureattachmentResponse = (EzsignsignatureattachmentResponse) o;
    return Objects.equals(this.pkiEzsignsignatureattachmentID, ezsignsignatureattachmentResponse.pkiEzsignsignatureattachmentID) &&
        Objects.equals(this.fkiEzsignsignatureID, ezsignsignatureattachmentResponse.fkiEzsignsignatureID) &&
        Objects.equals(this.binEzsignsignatureattachmentMD5, ezsignsignatureattachmentResponse.binEzsignsignatureattachmentMD5) &&
        Objects.equals(this.sEzsignsignatureattachmentName, ezsignsignatureattachmentResponse.sEzsignsignatureattachmentName) &&
        Objects.equals(this.sDownloadUrl, ezsignsignatureattachmentResponse.sDownloadUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiEzsignsignatureattachmentID, fkiEzsignsignatureID, binEzsignsignatureattachmentMD5, sEzsignsignatureattachmentName, sDownloadUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsignsignatureattachmentResponse {\n");
    sb.append("    pkiEzsignsignatureattachmentID: ").append(toIndentedString(pkiEzsignsignatureattachmentID)).append("\n");
    sb.append("    fkiEzsignsignatureID: ").append(toIndentedString(fkiEzsignsignatureID)).append("\n");
    sb.append("    binEzsignsignatureattachmentMD5: ").append(toIndentedString(binEzsignsignatureattachmentMD5)).append("\n");
    sb.append("    sEzsignsignatureattachmentName: ").append(toIndentedString(sEzsignsignatureattachmentName)).append("\n");
    sb.append("    sDownloadUrl: ").append(toIndentedString(sDownloadUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiEzsignsignatureattachmentID");
    openapiFields.add("fkiEzsignsignatureID");
    openapiFields.add("binEzsignsignatureattachmentMD5");
    openapiFields.add("sEzsignsignatureattachmentName");
    openapiFields.add("sDownloadUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiEzsignsignatureattachmentID");
    openapiRequiredFields.add("fkiEzsignsignatureID");
    openapiRequiredFields.add("binEzsignsignatureattachmentMD5");
    openapiRequiredFields.add("sEzsignsignatureattachmentName");
    openapiRequiredFields.add("sDownloadUrl");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EzsignsignatureattachmentResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EzsignsignatureattachmentResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsignsignatureattachmentResponse is not found in the empty JSON string", EzsignsignatureattachmentResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EzsignsignatureattachmentResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsignsignatureattachmentResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EzsignsignatureattachmentResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("binEzsignsignatureattachmentMD5").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `binEzsignsignatureattachmentMD5` to be a primitive type in the JSON string but got `%s`", jsonObj.get("binEzsignsignatureattachmentMD5").toString()));
      }
      if (!jsonObj.get("sEzsignsignatureattachmentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsignsignatureattachmentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsignsignatureattachmentName").toString()));
      }
      if (!jsonObj.get("sDownloadUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sDownloadUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sDownloadUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsignsignatureattachmentResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsignsignatureattachmentResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsignsignatureattachmentResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsignsignatureattachmentResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsignsignatureattachmentResponse>() {
           @Override
           public void write(JsonWriter out, EzsignsignatureattachmentResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsignsignatureattachmentResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EzsignsignatureattachmentResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EzsignsignatureattachmentResponse
   * @throws IOException if the JSON string is invalid with respect to EzsignsignatureattachmentResponse
   */
  public static EzsignsignatureattachmentResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsignsignatureattachmentResponse.class);
  }

  /**
   * Convert an instance of EzsignsignatureattachmentResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

