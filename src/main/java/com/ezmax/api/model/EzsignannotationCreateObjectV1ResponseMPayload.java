/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * Payload for POST /1/object/ezsignannotation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-20T18:49:43.941195549Z[Etc/UTC]", comments = "Generator version: 7.10.0")
public class EzsignannotationCreateObjectV1ResponseMPayload {
  public static final String SERIALIZED_NAME_A_PKI_EZSIGNANNOTATION_I_D = "a_pkiEzsignannotationID";
  @SerializedName(SERIALIZED_NAME_A_PKI_EZSIGNANNOTATION_I_D)
  @javax.annotation.Nonnull
  private List<Integer> aPkiEzsignannotationID = new ArrayList<>();

  public EzsignannotationCreateObjectV1ResponseMPayload() {
  }

  public EzsignannotationCreateObjectV1ResponseMPayload aPkiEzsignannotationID(@javax.annotation.Nonnull List<Integer> aPkiEzsignannotationID) {
    this.aPkiEzsignannotationID = aPkiEzsignannotationID;
    return this;
  }

  public EzsignannotationCreateObjectV1ResponseMPayload addAPkiEzsignannotationIDItem(Integer aPkiEzsignannotationIDItem) {
    if (this.aPkiEzsignannotationID == null) {
      this.aPkiEzsignannotationID = new ArrayList<>();
    }
    this.aPkiEzsignannotationID.add(aPkiEzsignannotationIDItem);
    return this;
  }

  /**
   * An array of unique IDs representing the object that were requested to be created.  They are returned in the same order as the array containing the objects to be created that was sent in the request.
   * @return aPkiEzsignannotationID
   */
  @javax.annotation.Nonnull
  public List<Integer> getaPkiEzsignannotationID() {
    return aPkiEzsignannotationID;
  }

  public void setaPkiEzsignannotationID(@javax.annotation.Nonnull List<Integer> aPkiEzsignannotationID) {
    this.aPkiEzsignannotationID = aPkiEzsignannotationID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsignannotationCreateObjectV1ResponseMPayload ezsignannotationCreateObjectV1ResponseMPayload = (EzsignannotationCreateObjectV1ResponseMPayload) o;
    return Objects.equals(this.aPkiEzsignannotationID, ezsignannotationCreateObjectV1ResponseMPayload.aPkiEzsignannotationID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aPkiEzsignannotationID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsignannotationCreateObjectV1ResponseMPayload {\n");
    sb.append("    aPkiEzsignannotationID: ").append(toIndentedString(aPkiEzsignannotationID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("a_pkiEzsignannotationID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("a_pkiEzsignannotationID");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EzsignannotationCreateObjectV1ResponseMPayload
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EzsignannotationCreateObjectV1ResponseMPayload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsignannotationCreateObjectV1ResponseMPayload is not found in the empty JSON string", EzsignannotationCreateObjectV1ResponseMPayload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EzsignannotationCreateObjectV1ResponseMPayload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsignannotationCreateObjectV1ResponseMPayload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EzsignannotationCreateObjectV1ResponseMPayload.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("a_pkiEzsignannotationID") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("a_pkiEzsignannotationID").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_pkiEzsignannotationID` to be an array in the JSON string but got `%s`", jsonObj.get("a_pkiEzsignannotationID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsignannotationCreateObjectV1ResponseMPayload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsignannotationCreateObjectV1ResponseMPayload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsignannotationCreateObjectV1ResponseMPayload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsignannotationCreateObjectV1ResponseMPayload.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsignannotationCreateObjectV1ResponseMPayload>() {
           @Override
           public void write(JsonWriter out, EzsignannotationCreateObjectV1ResponseMPayload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsignannotationCreateObjectV1ResponseMPayload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EzsignannotationCreateObjectV1ResponseMPayload given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EzsignannotationCreateObjectV1ResponseMPayload
   * @throws IOException if the JSON string is invalid with respect to EzsignannotationCreateObjectV1ResponseMPayload
   */
  public static EzsignannotationCreateObjectV1ResponseMPayload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsignannotationCreateObjectV1ResponseMPayload.class);
  }

  /**
   * Convert an instance of EzsignannotationCreateObjectV1ResponseMPayload to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

