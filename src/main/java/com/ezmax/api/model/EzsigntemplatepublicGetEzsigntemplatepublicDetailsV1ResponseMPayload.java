/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.CustomBrandingResponse;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * Payload for POST /1/object/ezsigntemplatepublic/getEzsigntemplatepublicDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-17T15:03:32.455495633Z[Etc/UTC]", comments = "Generator version: 7.10.0")
public class EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload {
  public static final String SERIALIZED_NAME_OBJ_BRANDING = "objBranding";
  @SerializedName(SERIALIZED_NAME_OBJ_BRANDING)
  @javax.annotation.Nullable
  private CustomBrandingResponse objBranding;

  public static final String SERIALIZED_NAME_FKI_USERLOGINTYPE_I_D = "fkiUserlogintypeID";
  @SerializedName(SERIALIZED_NAME_FKI_USERLOGINTYPE_I_D)
  @javax.annotation.Nonnull
  private Integer fkiUserlogintypeID;

  public static final String SERIALIZED_NAME_A_S_EZSIGNTEMPLATESIGNER_DESCRIPTION = "a_sEzsigntemplatesignerDescription";
  @SerializedName(SERIALIZED_NAME_A_S_EZSIGNTEMPLATESIGNER_DESCRIPTION)
  @javax.annotation.Nonnull
  private List<String> aSEzsigntemplatesignerDescription = new ArrayList<>();

  public EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload() {
  }

  public EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload objBranding(@javax.annotation.Nullable CustomBrandingResponse objBranding) {
    this.objBranding = objBranding;
    return this;
  }

  /**
   * Get objBranding
   * @return objBranding
   */
  @javax.annotation.Nullable
  public CustomBrandingResponse getObjBranding() {
    return objBranding;
  }

  public void setObjBranding(@javax.annotation.Nullable CustomBrandingResponse objBranding) {
    this.objBranding = objBranding;
  }


  public EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload fkiUserlogintypeID(@javax.annotation.Nonnull Integer fkiUserlogintypeID) {
    this.fkiUserlogintypeID = fkiUserlogintypeID;
    return this;
  }

  /**
   * The unique ID of the Userlogintype  Valid values:  |Value|Description|Detail| |-|-|-| |1|**Email Only**|The Ezsignsigner will receive a secure link by email| |2|**Email and phone or SMS**|The Ezsignsigner will receive a secure link by email and will need to authenticate using SMS or Phone call. **Additional fee applies**| |3|**Email and secret question**|The Ezsignsigner will receive a secure link by email and will need to authenticate using a predefined question and answer| |4|**In person only**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and there won&#39;t be any authentication. No email will be sent for invitation to sign. Make sure you evaluate the risk of signature denial and at minimum, we recommend you use a handwritten signature type| |5|**In person with phone or SMS**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**| |6|**Embedded**|The Ezsignsigner will only be able to sign in the embedded solution. No email will be sent for invitation to sign. **Additional fee applies**|   |7|**Embedded with phone or SMS**|The Ezsignsigner will only be able to sign in the embedded solution and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**|   |8|**No validation**|The Ezsignsigner will not receive an email and won&#39;t have to validate his connection using 2 factor. **Additional fee applies**|      |9|**Sms only**|The Ezsignsigner will not receive an email but will will need to authenticate using SMS. **Additional fee applies**|     
   * minimum: 0
   * @return fkiUserlogintypeID
   */
  @javax.annotation.Nonnull
  public Integer getFkiUserlogintypeID() {
    return fkiUserlogintypeID;
  }

  public void setFkiUserlogintypeID(@javax.annotation.Nonnull Integer fkiUserlogintypeID) {
    this.fkiUserlogintypeID = fkiUserlogintypeID;
  }


  public EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload aSEzsigntemplatesignerDescription(@javax.annotation.Nonnull List<String> aSEzsigntemplatesignerDescription) {
    this.aSEzsigntemplatesignerDescription = aSEzsigntemplatesignerDescription;
    return this;
  }

  public EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload addASEzsigntemplatesignerDescriptionItem(String aSEzsigntemplatesignerDescriptionItem) {
    if (this.aSEzsigntemplatesignerDescription == null) {
      this.aSEzsigntemplatesignerDescription = new ArrayList<>();
    }
    this.aSEzsigntemplatesignerDescription.add(aSEzsigntemplatesignerDescriptionItem);
    return this;
  }

  /**
   * Get aSEzsigntemplatesignerDescription
   * @return aSEzsigntemplatesignerDescription
   */
  @javax.annotation.Nonnull
  public List<String> getaSEzsigntemplatesignerDescription() {
    return aSEzsigntemplatesignerDescription;
  }

  public void setaSEzsigntemplatesignerDescription(@javax.annotation.Nonnull List<String> aSEzsigntemplatesignerDescription) {
    this.aSEzsigntemplatesignerDescription = aSEzsigntemplatesignerDescription;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload = (EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload) o;
    return Objects.equals(this.objBranding, ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload.objBranding) &&
        Objects.equals(this.fkiUserlogintypeID, ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload.fkiUserlogintypeID) &&
        Objects.equals(this.aSEzsigntemplatesignerDescription, ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload.aSEzsigntemplatesignerDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(objBranding, fkiUserlogintypeID, aSEzsigntemplatesignerDescription);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload {\n");
    sb.append("    objBranding: ").append(toIndentedString(objBranding)).append("\n");
    sb.append("    fkiUserlogintypeID: ").append(toIndentedString(fkiUserlogintypeID)).append("\n");
    sb.append("    aSEzsigntemplatesignerDescription: ").append(toIndentedString(aSEzsigntemplatesignerDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("objBranding");
    openapiFields.add("fkiUserlogintypeID");
    openapiFields.add("a_sEzsigntemplatesignerDescription");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fkiUserlogintypeID");
    openapiRequiredFields.add("a_sEzsigntemplatesignerDescription");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload is not found in the empty JSON string", EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `objBranding`
      if (jsonObj.get("objBranding") != null && !jsonObj.get("objBranding").isJsonNull()) {
        CustomBrandingResponse.validateJsonElement(jsonObj.get("objBranding"));
      }
      // ensure the required json array is present
      if (jsonObj.get("a_sEzsigntemplatesignerDescription") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("a_sEzsigntemplatesignerDescription").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_sEzsigntemplatesignerDescription` to be an array in the JSON string but got `%s`", jsonObj.get("a_sEzsigntemplatesignerDescription").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload>() {
           @Override
           public void write(JsonWriter out, EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload
   * @throws IOException if the JSON string is invalid with respect to EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload
   */
  public static EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload.class);
  }

  /**
   * Convert an instance of EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

