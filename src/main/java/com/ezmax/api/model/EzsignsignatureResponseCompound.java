/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.CustomContactNameResponse;
import com.ezmax.api.model.CustomCreditcardtransactionResponse;
import com.ezmax.api.model.EnumTextvalidation;
import com.ezmax.api.model.EzsignelementdependencyResponseCompound;
import com.ezmax.api.model.EzsignsignaturecustomdateResponseCompound;
import com.ezmax.api.model.FieldEEzsignsignatureAttachmentnamesource;
import com.ezmax.api.model.FieldEEzsignsignatureDependencyrequirement;
import com.ezmax.api.model.FieldEEzsignsignatureFont;
import com.ezmax.api.model.FieldEEzsignsignatureTooltipposition;
import com.ezmax.api.model.FieldEEzsignsignatureType;
import com.ezmax.api.model.SignatureResponseCompound;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * An Ezsignsignature Object and children to create a complete structure
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-19T17:55:55.222327902Z[Etc/UTC]")
public class EzsignsignatureResponseCompound {
  public static final String SERIALIZED_NAME_PKI_EZSIGNSIGNATURE_I_D = "pkiEzsignsignatureID";
  @SerializedName(SERIALIZED_NAME_PKI_EZSIGNSIGNATURE_I_D)
  private Integer pkiEzsignsignatureID;

  public static final String SERIALIZED_NAME_FKI_EZSIGNDOCUMENT_I_D = "fkiEzsigndocumentID";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNDOCUMENT_I_D)
  private Integer fkiEzsigndocumentID;

  public static final String SERIALIZED_NAME_FKI_EZSIGNFOLDERSIGNERASSOCIATION_I_D = "fkiEzsignfoldersignerassociationID";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNFOLDERSIGNERASSOCIATION_I_D)
  private Integer fkiEzsignfoldersignerassociationID;

  public static final String SERIALIZED_NAME_FKI_EZSIGNSIGNINGREASON_I_D = "fkiEzsignsigningreasonID";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNSIGNINGREASON_I_D)
  private Integer fkiEzsignsigningreasonID;

  public static final String SERIALIZED_NAME_S_EZSIGNSIGNINGREASON_DESCRIPTION_X = "sEzsignsigningreasonDescriptionX";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNSIGNINGREASON_DESCRIPTION_X)
  private String sEzsignsigningreasonDescriptionX;

  public static final String SERIALIZED_NAME_I_EZSIGNPAGE_PAGENUMBER = "iEzsignpagePagenumber";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNPAGE_PAGENUMBER)
  private Integer iEzsignpagePagenumber;

  public static final String SERIALIZED_NAME_I_EZSIGNSIGNATURE_X = "iEzsignsignatureX";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNSIGNATURE_X)
  private Integer iEzsignsignatureX;

  public static final String SERIALIZED_NAME_I_EZSIGNSIGNATURE_Y = "iEzsignsignatureY";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNSIGNATURE_Y)
  private Integer iEzsignsignatureY;

  public static final String SERIALIZED_NAME_I_EZSIGNSIGNATURE_HEIGHT = "iEzsignsignatureHeight";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNSIGNATURE_HEIGHT)
  private Integer iEzsignsignatureHeight;

  public static final String SERIALIZED_NAME_I_EZSIGNSIGNATURE_WIDTH = "iEzsignsignatureWidth";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNSIGNATURE_WIDTH)
  private Integer iEzsignsignatureWidth;

  public static final String SERIALIZED_NAME_I_EZSIGNSIGNATURE_STEP = "iEzsignsignatureStep";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNSIGNATURE_STEP)
  private Integer iEzsignsignatureStep;

  public static final String SERIALIZED_NAME_I_EZSIGNSIGNATURE_STEPADJUSTED = "iEzsignsignatureStepadjusted";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNSIGNATURE_STEPADJUSTED)
  private Integer iEzsignsignatureStepadjusted;

  public static final String SERIALIZED_NAME_E_EZSIGNSIGNATURE_TYPE = "eEzsignsignatureType";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNSIGNATURE_TYPE)
  private FieldEEzsignsignatureType eEzsignsignatureType;

  public static final String SERIALIZED_NAME_T_EZSIGNSIGNATURE_TOOLTIP = "tEzsignsignatureTooltip";
  @SerializedName(SERIALIZED_NAME_T_EZSIGNSIGNATURE_TOOLTIP)
  private String tEzsignsignatureTooltip;

  public static final String SERIALIZED_NAME_E_EZSIGNSIGNATURE_TOOLTIPPOSITION = "eEzsignsignatureTooltipposition";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNSIGNATURE_TOOLTIPPOSITION)
  private FieldEEzsignsignatureTooltipposition eEzsignsignatureTooltipposition;

  public static final String SERIALIZED_NAME_E_EZSIGNSIGNATURE_FONT = "eEzsignsignatureFont";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNSIGNATURE_FONT)
  private FieldEEzsignsignatureFont eEzsignsignatureFont;

  public static final String SERIALIZED_NAME_I_EZSIGNSIGNATURE_VALIDATIONSTEP = "iEzsignsignatureValidationstep";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNSIGNATURE_VALIDATIONSTEP)
  private Integer iEzsignsignatureValidationstep;

  public static final String SERIALIZED_NAME_S_EZSIGNSIGNATURE_ATTACHMENTDESCRIPTION = "sEzsignsignatureAttachmentdescription";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNSIGNATURE_ATTACHMENTDESCRIPTION)
  private String sEzsignsignatureAttachmentdescription;

  public static final String SERIALIZED_NAME_E_EZSIGNSIGNATURE_ATTACHMENTNAMESOURCE = "eEzsignsignatureAttachmentnamesource";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNSIGNATURE_ATTACHMENTNAMESOURCE)
  private FieldEEzsignsignatureAttachmentnamesource eEzsignsignatureAttachmentnamesource;

  public static final String SERIALIZED_NAME_B_EZSIGNSIGNATURE_REQUIRED = "bEzsignsignatureRequired";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNSIGNATURE_REQUIRED)
  private Boolean bEzsignsignatureRequired;

  public static final String SERIALIZED_NAME_FKI_EZSIGNFOLDERSIGNERASSOCIATION_I_D_VALIDATION = "fkiEzsignfoldersignerassociationIDValidation";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNFOLDERSIGNERASSOCIATION_I_D_VALIDATION)
  private Integer fkiEzsignfoldersignerassociationIDValidation;

  public static final String SERIALIZED_NAME_DT_EZSIGNSIGNATURE_DATE = "dtEzsignsignatureDate";
  @SerializedName(SERIALIZED_NAME_DT_EZSIGNSIGNATURE_DATE)
  private String dtEzsignsignatureDate;

  public static final String SERIALIZED_NAME_I_EZSIGNSIGNATUREATTACHMENT_COUNT = "iEzsignsignatureattachmentCount";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNSIGNATUREATTACHMENT_COUNT)
  private Integer iEzsignsignatureattachmentCount;

  public static final String SERIALIZED_NAME_S_EZSIGNSIGNATURE_DESCRIPTION = "sEzsignsignatureDescription";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNSIGNATURE_DESCRIPTION)
  private String sEzsignsignatureDescription;

  public static final String SERIALIZED_NAME_I_EZSIGNSIGNATURE_MAXLENGTH = "iEzsignsignatureMaxlength";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNSIGNATURE_MAXLENGTH)
  private Integer iEzsignsignatureMaxlength;

  public static final String SERIALIZED_NAME_E_EZSIGNSIGNATURE_TEXTVALIDATION = "eEzsignsignatureTextvalidation";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNSIGNATURE_TEXTVALIDATION)
  private EnumTextvalidation eEzsignsignatureTextvalidation;

  public static final String SERIALIZED_NAME_E_EZSIGNSIGNATURE_DEPENDENCYREQUIREMENT = "eEzsignsignatureDependencyrequirement";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNSIGNATURE_DEPENDENCYREQUIREMENT)
  private FieldEEzsignsignatureDependencyrequirement eEzsignsignatureDependencyrequirement;

  public static final String SERIALIZED_NAME_S_EZSIGNSIGNATURE_REGEXP = "sEzsignsignatureRegexp";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNSIGNATURE_REGEXP)
  private String sEzsignsignatureRegexp;

  public static final String SERIALIZED_NAME_OBJ_CONTACT_NAME = "objContactName";
  @SerializedName(SERIALIZED_NAME_OBJ_CONTACT_NAME)
  private CustomContactNameResponse objContactName;

  public static final String SERIALIZED_NAME_OBJ_CONTACT_NAME_DELEGATION = "objContactNameDelegation";
  @SerializedName(SERIALIZED_NAME_OBJ_CONTACT_NAME_DELEGATION)
  private CustomContactNameResponse objContactNameDelegation;

  public static final String SERIALIZED_NAME_OBJ_SIGNATURE = "objSignature";
  @SerializedName(SERIALIZED_NAME_OBJ_SIGNATURE)
  private SignatureResponseCompound objSignature;

  public static final String SERIALIZED_NAME_B_EZSIGNSIGNATURE_CUSTOMDATE = "bEzsignsignatureCustomdate";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNSIGNATURE_CUSTOMDATE)
  private Boolean bEzsignsignatureCustomdate;

  public static final String SERIALIZED_NAME_A_OBJ_EZSIGNSIGNATURECUSTOMDATE = "a_objEzsignsignaturecustomdate";
  @SerializedName(SERIALIZED_NAME_A_OBJ_EZSIGNSIGNATURECUSTOMDATE)
  private List<EzsignsignaturecustomdateResponseCompound> aObjEzsignsignaturecustomdate;

  public static final String SERIALIZED_NAME_OBJ_CREDITCARDTRANSACTION = "objCreditcardtransaction";
  @SerializedName(SERIALIZED_NAME_OBJ_CREDITCARDTRANSACTION)
  private CustomCreditcardtransactionResponse objCreditcardtransaction;

  public static final String SERIALIZED_NAME_A_OBJ_EZSIGNELEMENTDEPENDENCY = "a_objEzsignelementdependency";
  @SerializedName(SERIALIZED_NAME_A_OBJ_EZSIGNELEMENTDEPENDENCY)
  private List<EzsignelementdependencyResponseCompound> aObjEzsignelementdependency;

  public EzsignsignatureResponseCompound() {
  }

  public EzsignsignatureResponseCompound pkiEzsignsignatureID(Integer pkiEzsignsignatureID) {
    this.pkiEzsignsignatureID = pkiEzsignsignatureID;
    return this;
  }

   /**
   * The unique ID of the Ezsignsignature
   * minimum: 0
   * @return pkiEzsignsignatureID
  **/
  @javax.annotation.Nonnull
  public Integer getPkiEzsignsignatureID() {
    return pkiEzsignsignatureID;
  }

  public void setPkiEzsignsignatureID(Integer pkiEzsignsignatureID) {
    this.pkiEzsignsignatureID = pkiEzsignsignatureID;
  }


  public EzsignsignatureResponseCompound fkiEzsigndocumentID(Integer fkiEzsigndocumentID) {
    this.fkiEzsigndocumentID = fkiEzsigndocumentID;
    return this;
  }

   /**
   * The unique ID of the Ezsigndocument
   * minimum: 0
   * @return fkiEzsigndocumentID
  **/
  @javax.annotation.Nonnull
  public Integer getFkiEzsigndocumentID() {
    return fkiEzsigndocumentID;
  }

  public void setFkiEzsigndocumentID(Integer fkiEzsigndocumentID) {
    this.fkiEzsigndocumentID = fkiEzsigndocumentID;
  }


  public EzsignsignatureResponseCompound fkiEzsignfoldersignerassociationID(Integer fkiEzsignfoldersignerassociationID) {
    this.fkiEzsignfoldersignerassociationID = fkiEzsignfoldersignerassociationID;
    return this;
  }

   /**
   * The unique ID of the Ezsignfoldersignerassociation
   * minimum: 0
   * @return fkiEzsignfoldersignerassociationID
  **/
  @javax.annotation.Nonnull
  public Integer getFkiEzsignfoldersignerassociationID() {
    return fkiEzsignfoldersignerassociationID;
  }

  public void setFkiEzsignfoldersignerassociationID(Integer fkiEzsignfoldersignerassociationID) {
    this.fkiEzsignfoldersignerassociationID = fkiEzsignfoldersignerassociationID;
  }


  public EzsignsignatureResponseCompound fkiEzsignsigningreasonID(Integer fkiEzsignsigningreasonID) {
    this.fkiEzsignsigningreasonID = fkiEzsignsigningreasonID;
    return this;
  }

   /**
   * The unique ID of the Ezsignsigningreason
   * minimum: 0
   * maximum: 255
   * @return fkiEzsignsigningreasonID
  **/
  @javax.annotation.Nullable
  public Integer getFkiEzsignsigningreasonID() {
    return fkiEzsignsigningreasonID;
  }

  public void setFkiEzsignsigningreasonID(Integer fkiEzsignsigningreasonID) {
    this.fkiEzsignsigningreasonID = fkiEzsignsigningreasonID;
  }


  public EzsignsignatureResponseCompound sEzsignsigningreasonDescriptionX(String sEzsignsigningreasonDescriptionX) {
    this.sEzsignsigningreasonDescriptionX = sEzsignsigningreasonDescriptionX;
    return this;
  }

   /**
   * The description of the Ezsignsigningreason in the language of the requester
   * @return sEzsignsigningreasonDescriptionX
  **/
  @javax.annotation.Nullable
  public String getsEzsignsigningreasonDescriptionX() {
    return sEzsignsigningreasonDescriptionX;
  }

  public void setsEzsignsigningreasonDescriptionX(String sEzsignsigningreasonDescriptionX) {
    this.sEzsignsigningreasonDescriptionX = sEzsignsigningreasonDescriptionX;
  }


  public EzsignsignatureResponseCompound iEzsignpagePagenumber(Integer iEzsignpagePagenumber) {
    this.iEzsignpagePagenumber = iEzsignpagePagenumber;
    return this;
  }

   /**
   * The page number in the Ezsigndocument
   * minimum: 1
   * @return iEzsignpagePagenumber
  **/
  @javax.annotation.Nonnull
  public Integer getiEzsignpagePagenumber() {
    return iEzsignpagePagenumber;
  }

  public void setiEzsignpagePagenumber(Integer iEzsignpagePagenumber) {
    this.iEzsignpagePagenumber = iEzsignpagePagenumber;
  }


  public EzsignsignatureResponseCompound iEzsignsignatureX(Integer iEzsignsignatureX) {
    this.iEzsignsignatureX = iEzsignsignatureX;
    return this;
  }

   /**
   * The X coordinate (Horizontal) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate.
   * minimum: 0
   * @return iEzsignsignatureX
  **/
  @javax.annotation.Nonnull
  public Integer getiEzsignsignatureX() {
    return iEzsignsignatureX;
  }

  public void setiEzsignsignatureX(Integer iEzsignsignatureX) {
    this.iEzsignsignatureX = iEzsignsignatureX;
  }


  public EzsignsignatureResponseCompound iEzsignsignatureY(Integer iEzsignsignatureY) {
    this.iEzsignsignatureY = iEzsignsignatureY;
    return this;
  }

   /**
   * The Y coordinate (Vertical) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate.
   * minimum: 0
   * @return iEzsignsignatureY
  **/
  @javax.annotation.Nonnull
  public Integer getiEzsignsignatureY() {
    return iEzsignsignatureY;
  }

  public void setiEzsignsignatureY(Integer iEzsignsignatureY) {
    this.iEzsignsignatureY = iEzsignsignatureY;
  }


  public EzsignsignatureResponseCompound iEzsignsignatureHeight(Integer iEzsignsignatureHeight) {
    this.iEzsignsignatureHeight = iEzsignsignatureHeight;
    return this;
  }

   /**
   * The height of the Ezsignsignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsignsignature to have an height of 2 inches, you would use \&quot;200\&quot; for the iEzsignsignatureHeight.
   * minimum: 0
   * @return iEzsignsignatureHeight
  **/
  @javax.annotation.Nullable
  public Integer getiEzsignsignatureHeight() {
    return iEzsignsignatureHeight;
  }

  public void setiEzsignsignatureHeight(Integer iEzsignsignatureHeight) {
    this.iEzsignsignatureHeight = iEzsignsignatureHeight;
  }


  public EzsignsignatureResponseCompound iEzsignsignatureWidth(Integer iEzsignsignatureWidth) {
    this.iEzsignsignatureWidth = iEzsignsignatureWidth;
    return this;
  }

   /**
   * The width of the Ezsignsignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsignsignature to have a width of 2 inches, you would use \&quot;200\&quot; for the iEzsignsignatureWidth.
   * minimum: 0
   * @return iEzsignsignatureWidth
  **/
  @javax.annotation.Nullable
  public Integer getiEzsignsignatureWidth() {
    return iEzsignsignatureWidth;
  }

  public void setiEzsignsignatureWidth(Integer iEzsignsignatureWidth) {
    this.iEzsignsignatureWidth = iEzsignsignatureWidth;
  }


  public EzsignsignatureResponseCompound iEzsignsignatureStep(Integer iEzsignsignatureStep) {
    this.iEzsignsignatureStep = iEzsignsignatureStep;
    return this;
  }

   /**
   * The step when the Ezsignsigner will be invited to sign
   * @return iEzsignsignatureStep
  **/
  @javax.annotation.Nonnull
  public Integer getiEzsignsignatureStep() {
    return iEzsignsignatureStep;
  }

  public void setiEzsignsignatureStep(Integer iEzsignsignatureStep) {
    this.iEzsignsignatureStep = iEzsignsignatureStep;
  }


  public EzsignsignatureResponseCompound iEzsignsignatureStepadjusted(Integer iEzsignsignatureStepadjusted) {
    this.iEzsignsignatureStepadjusted = iEzsignsignatureStepadjusted;
    return this;
  }

   /**
   * The step when the Ezsignsigner will be invited to sign
   * @return iEzsignsignatureStepadjusted
  **/
  @javax.annotation.Nullable
  public Integer getiEzsignsignatureStepadjusted() {
    return iEzsignsignatureStepadjusted;
  }

  public void setiEzsignsignatureStepadjusted(Integer iEzsignsignatureStepadjusted) {
    this.iEzsignsignatureStepadjusted = iEzsignsignatureStepadjusted;
  }


  public EzsignsignatureResponseCompound eEzsignsignatureType(FieldEEzsignsignatureType eEzsignsignatureType) {
    this.eEzsignsignatureType = eEzsignsignatureType;
    return this;
  }

   /**
   * Get eEzsignsignatureType
   * @return eEzsignsignatureType
  **/
  @javax.annotation.Nonnull
  public FieldEEzsignsignatureType geteEzsignsignatureType() {
    return eEzsignsignatureType;
  }

  public void seteEzsignsignatureType(FieldEEzsignsignatureType eEzsignsignatureType) {
    this.eEzsignsignatureType = eEzsignsignatureType;
  }


  public EzsignsignatureResponseCompound tEzsignsignatureTooltip(String tEzsignsignatureTooltip) {
    this.tEzsignsignatureTooltip = tEzsignsignatureTooltip;
    return this;
  }

   /**
   * A tooltip that will be presented to Ezsignsigner about the Ezsignsignature
   * @return tEzsignsignatureTooltip
  **/
  @javax.annotation.Nullable
  public String gettEzsignsignatureTooltip() {
    return tEzsignsignatureTooltip;
  }

  public void settEzsignsignatureTooltip(String tEzsignsignatureTooltip) {
    this.tEzsignsignatureTooltip = tEzsignsignatureTooltip;
  }


  public EzsignsignatureResponseCompound eEzsignsignatureTooltipposition(FieldEEzsignsignatureTooltipposition eEzsignsignatureTooltipposition) {
    this.eEzsignsignatureTooltipposition = eEzsignsignatureTooltipposition;
    return this;
  }

   /**
   * Get eEzsignsignatureTooltipposition
   * @return eEzsignsignatureTooltipposition
  **/
  @javax.annotation.Nullable
  public FieldEEzsignsignatureTooltipposition geteEzsignsignatureTooltipposition() {
    return eEzsignsignatureTooltipposition;
  }

  public void seteEzsignsignatureTooltipposition(FieldEEzsignsignatureTooltipposition eEzsignsignatureTooltipposition) {
    this.eEzsignsignatureTooltipposition = eEzsignsignatureTooltipposition;
  }


  public EzsignsignatureResponseCompound eEzsignsignatureFont(FieldEEzsignsignatureFont eEzsignsignatureFont) {
    this.eEzsignsignatureFont = eEzsignsignatureFont;
    return this;
  }

   /**
   * Get eEzsignsignatureFont
   * @return eEzsignsignatureFont
  **/
  @javax.annotation.Nullable
  public FieldEEzsignsignatureFont geteEzsignsignatureFont() {
    return eEzsignsignatureFont;
  }

  public void seteEzsignsignatureFont(FieldEEzsignsignatureFont eEzsignsignatureFont) {
    this.eEzsignsignatureFont = eEzsignsignatureFont;
  }


  public EzsignsignatureResponseCompound iEzsignsignatureValidationstep(Integer iEzsignsignatureValidationstep) {
    this.iEzsignsignatureValidationstep = iEzsignsignatureValidationstep;
    return this;
  }

   /**
   * The step when the Ezsignsigner will be invited to validate the Ezsignsignature of eEzsignsignatureType Attachments
   * @return iEzsignsignatureValidationstep
  **/
  @javax.annotation.Nullable
  public Integer getiEzsignsignatureValidationstep() {
    return iEzsignsignatureValidationstep;
  }

  public void setiEzsignsignatureValidationstep(Integer iEzsignsignatureValidationstep) {
    this.iEzsignsignatureValidationstep = iEzsignsignatureValidationstep;
  }


  public EzsignsignatureResponseCompound sEzsignsignatureAttachmentdescription(String sEzsignsignatureAttachmentdescription) {
    this.sEzsignsignatureAttachmentdescription = sEzsignsignatureAttachmentdescription;
    return this;
  }

   /**
   * The description attached to the attachment name added in Ezsignsignature of eEzsignsignatureType Attachments
   * @return sEzsignsignatureAttachmentdescription
  **/
  @javax.annotation.Nullable
  public String getsEzsignsignatureAttachmentdescription() {
    return sEzsignsignatureAttachmentdescription;
  }

  public void setsEzsignsignatureAttachmentdescription(String sEzsignsignatureAttachmentdescription) {
    this.sEzsignsignatureAttachmentdescription = sEzsignsignatureAttachmentdescription;
  }


  public EzsignsignatureResponseCompound eEzsignsignatureAttachmentnamesource(FieldEEzsignsignatureAttachmentnamesource eEzsignsignatureAttachmentnamesource) {
    this.eEzsignsignatureAttachmentnamesource = eEzsignsignatureAttachmentnamesource;
    return this;
  }

   /**
   * Get eEzsignsignatureAttachmentnamesource
   * @return eEzsignsignatureAttachmentnamesource
  **/
  @javax.annotation.Nullable
  public FieldEEzsignsignatureAttachmentnamesource geteEzsignsignatureAttachmentnamesource() {
    return eEzsignsignatureAttachmentnamesource;
  }

  public void seteEzsignsignatureAttachmentnamesource(FieldEEzsignsignatureAttachmentnamesource eEzsignsignatureAttachmentnamesource) {
    this.eEzsignsignatureAttachmentnamesource = eEzsignsignatureAttachmentnamesource;
  }


  public EzsignsignatureResponseCompound bEzsignsignatureRequired(Boolean bEzsignsignatureRequired) {
    this.bEzsignsignatureRequired = bEzsignsignatureRequired;
    return this;
  }

   /**
   * Whether the Ezsignsignature is required or not. This field is relevant only with Ezsignsignature with eEzsignsignatureType &#x3D; Attachments.
   * @return bEzsignsignatureRequired
  **/
  @javax.annotation.Nullable
  public Boolean getbEzsignsignatureRequired() {
    return bEzsignsignatureRequired;
  }

  public void setbEzsignsignatureRequired(Boolean bEzsignsignatureRequired) {
    this.bEzsignsignatureRequired = bEzsignsignatureRequired;
  }


  public EzsignsignatureResponseCompound fkiEzsignfoldersignerassociationIDValidation(Integer fkiEzsignfoldersignerassociationIDValidation) {
    this.fkiEzsignfoldersignerassociationIDValidation = fkiEzsignfoldersignerassociationIDValidation;
    return this;
  }

   /**
   * The unique ID of the Ezsignfoldersignerassociation
   * minimum: 0
   * @return fkiEzsignfoldersignerassociationIDValidation
  **/
  @javax.annotation.Nullable
  public Integer getFkiEzsignfoldersignerassociationIDValidation() {
    return fkiEzsignfoldersignerassociationIDValidation;
  }

  public void setFkiEzsignfoldersignerassociationIDValidation(Integer fkiEzsignfoldersignerassociationIDValidation) {
    this.fkiEzsignfoldersignerassociationIDValidation = fkiEzsignfoldersignerassociationIDValidation;
  }


  public EzsignsignatureResponseCompound dtEzsignsignatureDate(String dtEzsignsignatureDate) {
    this.dtEzsignsignatureDate = dtEzsignsignatureDate;
    return this;
  }

   /**
   * The date the Ezsignsignature was signed
   * @return dtEzsignsignatureDate
  **/
  @javax.annotation.Nullable
  public String getDtEzsignsignatureDate() {
    return dtEzsignsignatureDate;
  }

  public void setDtEzsignsignatureDate(String dtEzsignsignatureDate) {
    this.dtEzsignsignatureDate = dtEzsignsignatureDate;
  }


  public EzsignsignatureResponseCompound iEzsignsignatureattachmentCount(Integer iEzsignsignatureattachmentCount) {
    this.iEzsignsignatureattachmentCount = iEzsignsignatureattachmentCount;
    return this;
  }

   /**
   * The count of Ezsignsignatureattachment
   * @return iEzsignsignatureattachmentCount
  **/
  @javax.annotation.Nullable
  public Integer getiEzsignsignatureattachmentCount() {
    return iEzsignsignatureattachmentCount;
  }

  public void setiEzsignsignatureattachmentCount(Integer iEzsignsignatureattachmentCount) {
    this.iEzsignsignatureattachmentCount = iEzsignsignatureattachmentCount;
  }


  public EzsignsignatureResponseCompound sEzsignsignatureDescription(String sEzsignsignatureDescription) {
    this.sEzsignsignatureDescription = sEzsignsignatureDescription;
    return this;
  }

   /**
   * The value entered while signing Ezsignsignature of eEzsignsignatureType **City**, **FieldText** and **FieldTextarea**
   * @return sEzsignsignatureDescription
  **/
  @javax.annotation.Nullable
  public String getsEzsignsignatureDescription() {
    return sEzsignsignatureDescription;
  }

  public void setsEzsignsignatureDescription(String sEzsignsignatureDescription) {
    this.sEzsignsignatureDescription = sEzsignsignatureDescription;
  }


  public EzsignsignatureResponseCompound iEzsignsignatureMaxlength(Integer iEzsignsignatureMaxlength) {
    this.iEzsignsignatureMaxlength = iEzsignsignatureMaxlength;
    return this;
  }

   /**
   * The maximum length for the value in the Ezsignsignature  This can only be set if eEzsignsignatureType is **FieldText** or **FieldTextarea**
   * minimum: 0
   * maximum: 65535
   * @return iEzsignsignatureMaxlength
  **/
  @javax.annotation.Nullable
  public Integer getiEzsignsignatureMaxlength() {
    return iEzsignsignatureMaxlength;
  }

  public void setiEzsignsignatureMaxlength(Integer iEzsignsignatureMaxlength) {
    this.iEzsignsignatureMaxlength = iEzsignsignatureMaxlength;
  }


  public EzsignsignatureResponseCompound eEzsignsignatureTextvalidation(EnumTextvalidation eEzsignsignatureTextvalidation) {
    this.eEzsignsignatureTextvalidation = eEzsignsignatureTextvalidation;
    return this;
  }

   /**
   * Get eEzsignsignatureTextvalidation
   * @return eEzsignsignatureTextvalidation
  **/
  @javax.annotation.Nullable
  public EnumTextvalidation geteEzsignsignatureTextvalidation() {
    return eEzsignsignatureTextvalidation;
  }

  public void seteEzsignsignatureTextvalidation(EnumTextvalidation eEzsignsignatureTextvalidation) {
    this.eEzsignsignatureTextvalidation = eEzsignsignatureTextvalidation;
  }


  public EzsignsignatureResponseCompound eEzsignsignatureDependencyrequirement(FieldEEzsignsignatureDependencyrequirement eEzsignsignatureDependencyrequirement) {
    this.eEzsignsignatureDependencyrequirement = eEzsignsignatureDependencyrequirement;
    return this;
  }

   /**
   * Get eEzsignsignatureDependencyrequirement
   * @return eEzsignsignatureDependencyrequirement
  **/
  @javax.annotation.Nullable
  public FieldEEzsignsignatureDependencyrequirement geteEzsignsignatureDependencyrequirement() {
    return eEzsignsignatureDependencyrequirement;
  }

  public void seteEzsignsignatureDependencyrequirement(FieldEEzsignsignatureDependencyrequirement eEzsignsignatureDependencyrequirement) {
    this.eEzsignsignatureDependencyrequirement = eEzsignsignatureDependencyrequirement;
  }


  public EzsignsignatureResponseCompound sEzsignsignatureRegexp(String sEzsignsignatureRegexp) {
    this.sEzsignsignatureRegexp = sEzsignsignatureRegexp;
    return this;
  }

   /**
   * A regular expression to indicate what values are acceptable for the Ezsignsignature.  This can only be set if eEzsignsignatureType is **FieldText** or **FieldTextarea** and eEzsignsignatureTextvalidation is **Custom**
   * @return sEzsignsignatureRegexp
  **/
  @javax.annotation.Nullable
  public String getsEzsignsignatureRegexp() {
    return sEzsignsignatureRegexp;
  }

  public void setsEzsignsignatureRegexp(String sEzsignsignatureRegexp) {
    this.sEzsignsignatureRegexp = sEzsignsignatureRegexp;
  }


  public EzsignsignatureResponseCompound objContactName(CustomContactNameResponse objContactName) {
    this.objContactName = objContactName;
    return this;
  }

   /**
   * Get objContactName
   * @return objContactName
  **/
  @javax.annotation.Nonnull
  public CustomContactNameResponse getObjContactName() {
    return objContactName;
  }

  public void setObjContactName(CustomContactNameResponse objContactName) {
    this.objContactName = objContactName;
  }


  public EzsignsignatureResponseCompound objContactNameDelegation(CustomContactNameResponse objContactNameDelegation) {
    this.objContactNameDelegation = objContactNameDelegation;
    return this;
  }

   /**
   * Get objContactNameDelegation
   * @return objContactNameDelegation
  **/
  @javax.annotation.Nullable
  public CustomContactNameResponse getObjContactNameDelegation() {
    return objContactNameDelegation;
  }

  public void setObjContactNameDelegation(CustomContactNameResponse objContactNameDelegation) {
    this.objContactNameDelegation = objContactNameDelegation;
  }


  public EzsignsignatureResponseCompound objSignature(SignatureResponseCompound objSignature) {
    this.objSignature = objSignature;
    return this;
  }

   /**
   * Get objSignature
   * @return objSignature
  **/
  @javax.annotation.Nullable
  public SignatureResponseCompound getObjSignature() {
    return objSignature;
  }

  public void setObjSignature(SignatureResponseCompound objSignature) {
    this.objSignature = objSignature;
  }


  public EzsignsignatureResponseCompound bEzsignsignatureCustomdate(Boolean bEzsignsignatureCustomdate) {
    this.bEzsignsignatureCustomdate = bEzsignsignatureCustomdate;
    return this;
  }

   /**
   * Whether the Ezsignsignature has a custom date format or not. (Only possible when eEzsignsignatureType is **Name** or **Handwritten**)
   * @return bEzsignsignatureCustomdate
  **/
  @javax.annotation.Nullable
  public Boolean getbEzsignsignatureCustomdate() {
    return bEzsignsignatureCustomdate;
  }

  public void setbEzsignsignatureCustomdate(Boolean bEzsignsignatureCustomdate) {
    this.bEzsignsignatureCustomdate = bEzsignsignatureCustomdate;
  }


  public EzsignsignatureResponseCompound aObjEzsignsignaturecustomdate(List<EzsignsignaturecustomdateResponseCompound> aObjEzsignsignaturecustomdate) {
    this.aObjEzsignsignaturecustomdate = aObjEzsignsignaturecustomdate;
    return this;
  }

  public EzsignsignatureResponseCompound addAObjEzsignsignaturecustomdateItem(EzsignsignaturecustomdateResponseCompound aObjEzsignsignaturecustomdateItem) {
    if (this.aObjEzsignsignaturecustomdate == null) {
      this.aObjEzsignsignaturecustomdate = new ArrayList<>();
    }
    this.aObjEzsignsignaturecustomdate.add(aObjEzsignsignaturecustomdateItem);
    return this;
  }

   /**
   * An array of custom date blocks that will be filled at the time of signature.  Can only be used if bEzsignsignatureCustomdate is true.  Use an empty array if you don&#39;t want to have a date at all.
   * @return aObjEzsignsignaturecustomdate
  **/
  @javax.annotation.Nullable
  public List<EzsignsignaturecustomdateResponseCompound> getaObjEzsignsignaturecustomdate() {
    return aObjEzsignsignaturecustomdate;
  }

  public void setaObjEzsignsignaturecustomdate(List<EzsignsignaturecustomdateResponseCompound> aObjEzsignsignaturecustomdate) {
    this.aObjEzsignsignaturecustomdate = aObjEzsignsignaturecustomdate;
  }


  public EzsignsignatureResponseCompound objCreditcardtransaction(CustomCreditcardtransactionResponse objCreditcardtransaction) {
    this.objCreditcardtransaction = objCreditcardtransaction;
    return this;
  }

   /**
   * Get objCreditcardtransaction
   * @return objCreditcardtransaction
  **/
  @javax.annotation.Nullable
  public CustomCreditcardtransactionResponse getObjCreditcardtransaction() {
    return objCreditcardtransaction;
  }

  public void setObjCreditcardtransaction(CustomCreditcardtransactionResponse objCreditcardtransaction) {
    this.objCreditcardtransaction = objCreditcardtransaction;
  }


  public EzsignsignatureResponseCompound aObjEzsignelementdependency(List<EzsignelementdependencyResponseCompound> aObjEzsignelementdependency) {
    this.aObjEzsignelementdependency = aObjEzsignelementdependency;
    return this;
  }

  public EzsignsignatureResponseCompound addAObjEzsignelementdependencyItem(EzsignelementdependencyResponseCompound aObjEzsignelementdependencyItem) {
    if (this.aObjEzsignelementdependency == null) {
      this.aObjEzsignelementdependency = new ArrayList<>();
    }
    this.aObjEzsignelementdependency.add(aObjEzsignelementdependencyItem);
    return this;
  }

   /**
   * Get aObjEzsignelementdependency
   * @return aObjEzsignelementdependency
  **/
  @javax.annotation.Nullable
  public List<EzsignelementdependencyResponseCompound> getaObjEzsignelementdependency() {
    return aObjEzsignelementdependency;
  }

  public void setaObjEzsignelementdependency(List<EzsignelementdependencyResponseCompound> aObjEzsignelementdependency) {
    this.aObjEzsignelementdependency = aObjEzsignelementdependency;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsignsignatureResponseCompound ezsignsignatureResponseCompound = (EzsignsignatureResponseCompound) o;
    return Objects.equals(this.pkiEzsignsignatureID, ezsignsignatureResponseCompound.pkiEzsignsignatureID) &&
        Objects.equals(this.fkiEzsigndocumentID, ezsignsignatureResponseCompound.fkiEzsigndocumentID) &&
        Objects.equals(this.fkiEzsignfoldersignerassociationID, ezsignsignatureResponseCompound.fkiEzsignfoldersignerassociationID) &&
        Objects.equals(this.fkiEzsignsigningreasonID, ezsignsignatureResponseCompound.fkiEzsignsigningreasonID) &&
        Objects.equals(this.sEzsignsigningreasonDescriptionX, ezsignsignatureResponseCompound.sEzsignsigningreasonDescriptionX) &&
        Objects.equals(this.iEzsignpagePagenumber, ezsignsignatureResponseCompound.iEzsignpagePagenumber) &&
        Objects.equals(this.iEzsignsignatureX, ezsignsignatureResponseCompound.iEzsignsignatureX) &&
        Objects.equals(this.iEzsignsignatureY, ezsignsignatureResponseCompound.iEzsignsignatureY) &&
        Objects.equals(this.iEzsignsignatureHeight, ezsignsignatureResponseCompound.iEzsignsignatureHeight) &&
        Objects.equals(this.iEzsignsignatureWidth, ezsignsignatureResponseCompound.iEzsignsignatureWidth) &&
        Objects.equals(this.iEzsignsignatureStep, ezsignsignatureResponseCompound.iEzsignsignatureStep) &&
        Objects.equals(this.iEzsignsignatureStepadjusted, ezsignsignatureResponseCompound.iEzsignsignatureStepadjusted) &&
        Objects.equals(this.eEzsignsignatureType, ezsignsignatureResponseCompound.eEzsignsignatureType) &&
        Objects.equals(this.tEzsignsignatureTooltip, ezsignsignatureResponseCompound.tEzsignsignatureTooltip) &&
        Objects.equals(this.eEzsignsignatureTooltipposition, ezsignsignatureResponseCompound.eEzsignsignatureTooltipposition) &&
        Objects.equals(this.eEzsignsignatureFont, ezsignsignatureResponseCompound.eEzsignsignatureFont) &&
        Objects.equals(this.iEzsignsignatureValidationstep, ezsignsignatureResponseCompound.iEzsignsignatureValidationstep) &&
        Objects.equals(this.sEzsignsignatureAttachmentdescription, ezsignsignatureResponseCompound.sEzsignsignatureAttachmentdescription) &&
        Objects.equals(this.eEzsignsignatureAttachmentnamesource, ezsignsignatureResponseCompound.eEzsignsignatureAttachmentnamesource) &&
        Objects.equals(this.bEzsignsignatureRequired, ezsignsignatureResponseCompound.bEzsignsignatureRequired) &&
        Objects.equals(this.fkiEzsignfoldersignerassociationIDValidation, ezsignsignatureResponseCompound.fkiEzsignfoldersignerassociationIDValidation) &&
        Objects.equals(this.dtEzsignsignatureDate, ezsignsignatureResponseCompound.dtEzsignsignatureDate) &&
        Objects.equals(this.iEzsignsignatureattachmentCount, ezsignsignatureResponseCompound.iEzsignsignatureattachmentCount) &&
        Objects.equals(this.sEzsignsignatureDescription, ezsignsignatureResponseCompound.sEzsignsignatureDescription) &&
        Objects.equals(this.iEzsignsignatureMaxlength, ezsignsignatureResponseCompound.iEzsignsignatureMaxlength) &&
        Objects.equals(this.eEzsignsignatureTextvalidation, ezsignsignatureResponseCompound.eEzsignsignatureTextvalidation) &&
        Objects.equals(this.eEzsignsignatureDependencyrequirement, ezsignsignatureResponseCompound.eEzsignsignatureDependencyrequirement) &&
        Objects.equals(this.sEzsignsignatureRegexp, ezsignsignatureResponseCompound.sEzsignsignatureRegexp) &&
        Objects.equals(this.objContactName, ezsignsignatureResponseCompound.objContactName) &&
        Objects.equals(this.objContactNameDelegation, ezsignsignatureResponseCompound.objContactNameDelegation) &&
        Objects.equals(this.objSignature, ezsignsignatureResponseCompound.objSignature) &&
        Objects.equals(this.bEzsignsignatureCustomdate, ezsignsignatureResponseCompound.bEzsignsignatureCustomdate) &&
        Objects.equals(this.aObjEzsignsignaturecustomdate, ezsignsignatureResponseCompound.aObjEzsignsignaturecustomdate) &&
        Objects.equals(this.objCreditcardtransaction, ezsignsignatureResponseCompound.objCreditcardtransaction) &&
        Objects.equals(this.aObjEzsignelementdependency, ezsignsignatureResponseCompound.aObjEzsignelementdependency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiEzsignsignatureID, fkiEzsigndocumentID, fkiEzsignfoldersignerassociationID, fkiEzsignsigningreasonID, sEzsignsigningreasonDescriptionX, iEzsignpagePagenumber, iEzsignsignatureX, iEzsignsignatureY, iEzsignsignatureHeight, iEzsignsignatureWidth, iEzsignsignatureStep, iEzsignsignatureStepadjusted, eEzsignsignatureType, tEzsignsignatureTooltip, eEzsignsignatureTooltipposition, eEzsignsignatureFont, iEzsignsignatureValidationstep, sEzsignsignatureAttachmentdescription, eEzsignsignatureAttachmentnamesource, bEzsignsignatureRequired, fkiEzsignfoldersignerassociationIDValidation, dtEzsignsignatureDate, iEzsignsignatureattachmentCount, sEzsignsignatureDescription, iEzsignsignatureMaxlength, eEzsignsignatureTextvalidation, eEzsignsignatureDependencyrequirement, sEzsignsignatureRegexp, objContactName, objContactNameDelegation, objSignature, bEzsignsignatureCustomdate, aObjEzsignsignaturecustomdate, objCreditcardtransaction, aObjEzsignelementdependency);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsignsignatureResponseCompound {\n");
    sb.append("    pkiEzsignsignatureID: ").append(toIndentedString(pkiEzsignsignatureID)).append("\n");
    sb.append("    fkiEzsigndocumentID: ").append(toIndentedString(fkiEzsigndocumentID)).append("\n");
    sb.append("    fkiEzsignfoldersignerassociationID: ").append(toIndentedString(fkiEzsignfoldersignerassociationID)).append("\n");
    sb.append("    fkiEzsignsigningreasonID: ").append(toIndentedString(fkiEzsignsigningreasonID)).append("\n");
    sb.append("    sEzsignsigningreasonDescriptionX: ").append(toIndentedString(sEzsignsigningreasonDescriptionX)).append("\n");
    sb.append("    iEzsignpagePagenumber: ").append(toIndentedString(iEzsignpagePagenumber)).append("\n");
    sb.append("    iEzsignsignatureX: ").append(toIndentedString(iEzsignsignatureX)).append("\n");
    sb.append("    iEzsignsignatureY: ").append(toIndentedString(iEzsignsignatureY)).append("\n");
    sb.append("    iEzsignsignatureHeight: ").append(toIndentedString(iEzsignsignatureHeight)).append("\n");
    sb.append("    iEzsignsignatureWidth: ").append(toIndentedString(iEzsignsignatureWidth)).append("\n");
    sb.append("    iEzsignsignatureStep: ").append(toIndentedString(iEzsignsignatureStep)).append("\n");
    sb.append("    iEzsignsignatureStepadjusted: ").append(toIndentedString(iEzsignsignatureStepadjusted)).append("\n");
    sb.append("    eEzsignsignatureType: ").append(toIndentedString(eEzsignsignatureType)).append("\n");
    sb.append("    tEzsignsignatureTooltip: ").append(toIndentedString(tEzsignsignatureTooltip)).append("\n");
    sb.append("    eEzsignsignatureTooltipposition: ").append(toIndentedString(eEzsignsignatureTooltipposition)).append("\n");
    sb.append("    eEzsignsignatureFont: ").append(toIndentedString(eEzsignsignatureFont)).append("\n");
    sb.append("    iEzsignsignatureValidationstep: ").append(toIndentedString(iEzsignsignatureValidationstep)).append("\n");
    sb.append("    sEzsignsignatureAttachmentdescription: ").append(toIndentedString(sEzsignsignatureAttachmentdescription)).append("\n");
    sb.append("    eEzsignsignatureAttachmentnamesource: ").append(toIndentedString(eEzsignsignatureAttachmentnamesource)).append("\n");
    sb.append("    bEzsignsignatureRequired: ").append(toIndentedString(bEzsignsignatureRequired)).append("\n");
    sb.append("    fkiEzsignfoldersignerassociationIDValidation: ").append(toIndentedString(fkiEzsignfoldersignerassociationIDValidation)).append("\n");
    sb.append("    dtEzsignsignatureDate: ").append(toIndentedString(dtEzsignsignatureDate)).append("\n");
    sb.append("    iEzsignsignatureattachmentCount: ").append(toIndentedString(iEzsignsignatureattachmentCount)).append("\n");
    sb.append("    sEzsignsignatureDescription: ").append(toIndentedString(sEzsignsignatureDescription)).append("\n");
    sb.append("    iEzsignsignatureMaxlength: ").append(toIndentedString(iEzsignsignatureMaxlength)).append("\n");
    sb.append("    eEzsignsignatureTextvalidation: ").append(toIndentedString(eEzsignsignatureTextvalidation)).append("\n");
    sb.append("    eEzsignsignatureDependencyrequirement: ").append(toIndentedString(eEzsignsignatureDependencyrequirement)).append("\n");
    sb.append("    sEzsignsignatureRegexp: ").append(toIndentedString(sEzsignsignatureRegexp)).append("\n");
    sb.append("    objContactName: ").append(toIndentedString(objContactName)).append("\n");
    sb.append("    objContactNameDelegation: ").append(toIndentedString(objContactNameDelegation)).append("\n");
    sb.append("    objSignature: ").append(toIndentedString(objSignature)).append("\n");
    sb.append("    bEzsignsignatureCustomdate: ").append(toIndentedString(bEzsignsignatureCustomdate)).append("\n");
    sb.append("    aObjEzsignsignaturecustomdate: ").append(toIndentedString(aObjEzsignsignaturecustomdate)).append("\n");
    sb.append("    objCreditcardtransaction: ").append(toIndentedString(objCreditcardtransaction)).append("\n");
    sb.append("    aObjEzsignelementdependency: ").append(toIndentedString(aObjEzsignelementdependency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiEzsignsignatureID");
    openapiFields.add("fkiEzsigndocumentID");
    openapiFields.add("fkiEzsignfoldersignerassociationID");
    openapiFields.add("fkiEzsignsigningreasonID");
    openapiFields.add("sEzsignsigningreasonDescriptionX");
    openapiFields.add("iEzsignpagePagenumber");
    openapiFields.add("iEzsignsignatureX");
    openapiFields.add("iEzsignsignatureY");
    openapiFields.add("iEzsignsignatureHeight");
    openapiFields.add("iEzsignsignatureWidth");
    openapiFields.add("iEzsignsignatureStep");
    openapiFields.add("iEzsignsignatureStepadjusted");
    openapiFields.add("eEzsignsignatureType");
    openapiFields.add("tEzsignsignatureTooltip");
    openapiFields.add("eEzsignsignatureTooltipposition");
    openapiFields.add("eEzsignsignatureFont");
    openapiFields.add("iEzsignsignatureValidationstep");
    openapiFields.add("sEzsignsignatureAttachmentdescription");
    openapiFields.add("eEzsignsignatureAttachmentnamesource");
    openapiFields.add("bEzsignsignatureRequired");
    openapiFields.add("fkiEzsignfoldersignerassociationIDValidation");
    openapiFields.add("dtEzsignsignatureDate");
    openapiFields.add("iEzsignsignatureattachmentCount");
    openapiFields.add("sEzsignsignatureDescription");
    openapiFields.add("iEzsignsignatureMaxlength");
    openapiFields.add("eEzsignsignatureTextvalidation");
    openapiFields.add("eEzsignsignatureDependencyrequirement");
    openapiFields.add("sEzsignsignatureRegexp");
    openapiFields.add("objContactName");
    openapiFields.add("objContactNameDelegation");
    openapiFields.add("objSignature");
    openapiFields.add("bEzsignsignatureCustomdate");
    openapiFields.add("a_objEzsignsignaturecustomdate");
    openapiFields.add("objCreditcardtransaction");
    openapiFields.add("a_objEzsignelementdependency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiEzsignsignatureID");
    openapiRequiredFields.add("fkiEzsigndocumentID");
    openapiRequiredFields.add("fkiEzsignfoldersignerassociationID");
    openapiRequiredFields.add("iEzsignpagePagenumber");
    openapiRequiredFields.add("iEzsignsignatureX");
    openapiRequiredFields.add("iEzsignsignatureY");
    openapiRequiredFields.add("iEzsignsignatureStep");
    openapiRequiredFields.add("eEzsignsignatureType");
    openapiRequiredFields.add("objContactName");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EzsignsignatureResponseCompound
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EzsignsignatureResponseCompound.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsignsignatureResponseCompound is not found in the empty JSON string", EzsignsignatureResponseCompound.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EzsignsignatureResponseCompound.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsignsignatureResponseCompound` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EzsignsignatureResponseCompound.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("sEzsignsigningreasonDescriptionX") != null && !jsonObj.get("sEzsignsigningreasonDescriptionX").isJsonNull()) && !jsonObj.get("sEzsignsigningreasonDescriptionX").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsignsigningreasonDescriptionX` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsignsigningreasonDescriptionX").toString()));
      }
      // validate the required field `eEzsignsignatureType`
      FieldEEzsignsignatureType.validateJsonElement(jsonObj.get("eEzsignsignatureType"));
      if ((jsonObj.get("tEzsignsignatureTooltip") != null && !jsonObj.get("tEzsignsignatureTooltip").isJsonNull()) && !jsonObj.get("tEzsignsignatureTooltip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tEzsignsignatureTooltip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tEzsignsignatureTooltip").toString()));
      }
      // validate the optional field `eEzsignsignatureTooltipposition`
      if (jsonObj.get("eEzsignsignatureTooltipposition") != null && !jsonObj.get("eEzsignsignatureTooltipposition").isJsonNull()) {
        FieldEEzsignsignatureTooltipposition.validateJsonElement(jsonObj.get("eEzsignsignatureTooltipposition"));
      }
      // validate the optional field `eEzsignsignatureFont`
      if (jsonObj.get("eEzsignsignatureFont") != null && !jsonObj.get("eEzsignsignatureFont").isJsonNull()) {
        FieldEEzsignsignatureFont.validateJsonElement(jsonObj.get("eEzsignsignatureFont"));
      }
      if ((jsonObj.get("sEzsignsignatureAttachmentdescription") != null && !jsonObj.get("sEzsignsignatureAttachmentdescription").isJsonNull()) && !jsonObj.get("sEzsignsignatureAttachmentdescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsignsignatureAttachmentdescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsignsignatureAttachmentdescription").toString()));
      }
      // validate the optional field `eEzsignsignatureAttachmentnamesource`
      if (jsonObj.get("eEzsignsignatureAttachmentnamesource") != null && !jsonObj.get("eEzsignsignatureAttachmentnamesource").isJsonNull()) {
        FieldEEzsignsignatureAttachmentnamesource.validateJsonElement(jsonObj.get("eEzsignsignatureAttachmentnamesource"));
      }
      if ((jsonObj.get("dtEzsignsignatureDate") != null && !jsonObj.get("dtEzsignsignatureDate").isJsonNull()) && !jsonObj.get("dtEzsignsignatureDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dtEzsignsignatureDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dtEzsignsignatureDate").toString()));
      }
      if ((jsonObj.get("sEzsignsignatureDescription") != null && !jsonObj.get("sEzsignsignatureDescription").isJsonNull()) && !jsonObj.get("sEzsignsignatureDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsignsignatureDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsignsignatureDescription").toString()));
      }
      // validate the optional field `eEzsignsignatureTextvalidation`
      if (jsonObj.get("eEzsignsignatureTextvalidation") != null && !jsonObj.get("eEzsignsignatureTextvalidation").isJsonNull()) {
        EnumTextvalidation.validateJsonElement(jsonObj.get("eEzsignsignatureTextvalidation"));
      }
      // validate the optional field `eEzsignsignatureDependencyrequirement`
      if (jsonObj.get("eEzsignsignatureDependencyrequirement") != null && !jsonObj.get("eEzsignsignatureDependencyrequirement").isJsonNull()) {
        FieldEEzsignsignatureDependencyrequirement.validateJsonElement(jsonObj.get("eEzsignsignatureDependencyrequirement"));
      }
      if ((jsonObj.get("sEzsignsignatureRegexp") != null && !jsonObj.get("sEzsignsignatureRegexp").isJsonNull()) && !jsonObj.get("sEzsignsignatureRegexp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsignsignatureRegexp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsignsignatureRegexp").toString()));
      }
      // validate the required field `objContactName`
      CustomContactNameResponse.validateJsonElement(jsonObj.get("objContactName"));
      // validate the optional field `objContactNameDelegation`
      if (jsonObj.get("objContactNameDelegation") != null && !jsonObj.get("objContactNameDelegation").isJsonNull()) {
        CustomContactNameResponse.validateJsonElement(jsonObj.get("objContactNameDelegation"));
      }
      // validate the optional field `objSignature`
      if (jsonObj.get("objSignature") != null && !jsonObj.get("objSignature").isJsonNull()) {
        SignatureResponseCompound.validateJsonElement(jsonObj.get("objSignature"));
      }
      if (jsonObj.get("a_objEzsignsignaturecustomdate") != null && !jsonObj.get("a_objEzsignsignaturecustomdate").isJsonNull()) {
        JsonArray jsonArrayaObjEzsignsignaturecustomdate = jsonObj.getAsJsonArray("a_objEzsignsignaturecustomdate");
        if (jsonArrayaObjEzsignsignaturecustomdate != null) {
          // ensure the json data is an array
          if (!jsonObj.get("a_objEzsignsignaturecustomdate").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `a_objEzsignsignaturecustomdate` to be an array in the JSON string but got `%s`", jsonObj.get("a_objEzsignsignaturecustomdate").toString()));
          }

          // validate the optional field `a_objEzsignsignaturecustomdate` (array)
          for (int i = 0; i < jsonArrayaObjEzsignsignaturecustomdate.size(); i++) {
            EzsignsignaturecustomdateResponseCompound.validateJsonElement(jsonArrayaObjEzsignsignaturecustomdate.get(i));
          };
        }
      }
      // validate the optional field `objCreditcardtransaction`
      if (jsonObj.get("objCreditcardtransaction") != null && !jsonObj.get("objCreditcardtransaction").isJsonNull()) {
        CustomCreditcardtransactionResponse.validateJsonElement(jsonObj.get("objCreditcardtransaction"));
      }
      if (jsonObj.get("a_objEzsignelementdependency") != null && !jsonObj.get("a_objEzsignelementdependency").isJsonNull()) {
        JsonArray jsonArrayaObjEzsignelementdependency = jsonObj.getAsJsonArray("a_objEzsignelementdependency");
        if (jsonArrayaObjEzsignelementdependency != null) {
          // ensure the json data is an array
          if (!jsonObj.get("a_objEzsignelementdependency").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `a_objEzsignelementdependency` to be an array in the JSON string but got `%s`", jsonObj.get("a_objEzsignelementdependency").toString()));
          }

          // validate the optional field `a_objEzsignelementdependency` (array)
          for (int i = 0; i < jsonArrayaObjEzsignelementdependency.size(); i++) {
            EzsignelementdependencyResponseCompound.validateJsonElement(jsonArrayaObjEzsignelementdependency.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsignsignatureResponseCompound.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsignsignatureResponseCompound' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsignsignatureResponseCompound> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsignsignatureResponseCompound.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsignsignatureResponseCompound>() {
           @Override
           public void write(JsonWriter out, EzsignsignatureResponseCompound value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsignsignatureResponseCompound read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EzsignsignatureResponseCompound given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EzsignsignatureResponseCompound
  * @throws IOException if the JSON string is invalid with respect to EzsignsignatureResponseCompound
  */
  public static EzsignsignatureResponseCompound fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsignsignatureResponseCompound.class);
  }

 /**
  * Convert an instance of EzsignsignatureResponseCompound to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

