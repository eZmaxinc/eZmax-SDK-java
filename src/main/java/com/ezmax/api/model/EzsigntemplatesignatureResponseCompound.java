/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.EnumTextvalidation;
import com.ezmax.api.model.EzsigntemplateelementdependencyResponseCompound;
import com.ezmax.api.model.EzsigntemplatesignaturecustomdateResponseCompound;
import com.ezmax.api.model.FieldEEzsigntemplatesignatureAttachmentnamesource;
import com.ezmax.api.model.FieldEEzsigntemplatesignatureDependencyrequirement;
import com.ezmax.api.model.FieldEEzsigntemplatesignatureFont;
import com.ezmax.api.model.FieldEEzsigntemplatesignatureTooltipposition;
import com.ezmax.api.model.FieldEEzsigntemplatesignatureType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Ezsigntemplatesignature Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-05T13:57:46.112747798Z[Etc/UTC]")
public class EzsigntemplatesignatureResponseCompound {
  public static final String SERIALIZED_NAME_PKI_EZSIGNTEMPLATESIGNATURE_I_D = "pkiEzsigntemplatesignatureID";
  @SerializedName(SERIALIZED_NAME_PKI_EZSIGNTEMPLATESIGNATURE_I_D)
  private Integer pkiEzsigntemplatesignatureID;

  public static final String SERIALIZED_NAME_FKI_EZSIGNTEMPLATEDOCUMENT_I_D = "fkiEzsigntemplatedocumentID";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNTEMPLATEDOCUMENT_I_D)
  private Integer fkiEzsigntemplatedocumentID;

  public static final String SERIALIZED_NAME_FKI_EZSIGNTEMPLATESIGNER_I_D = "fkiEzsigntemplatesignerID";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNTEMPLATESIGNER_I_D)
  private Integer fkiEzsigntemplatesignerID;

  public static final String SERIALIZED_NAME_FKI_EZSIGNTEMPLATESIGNER_I_D_VALIDATION = "fkiEzsigntemplatesignerIDValidation";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNTEMPLATESIGNER_I_D_VALIDATION)
  private Integer fkiEzsigntemplatesignerIDValidation;

  public static final String SERIALIZED_NAME_I_EZSIGNTEMPLATEDOCUMENTPAGE_PAGENUMBER = "iEzsigntemplatedocumentpagePagenumber";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNTEMPLATEDOCUMENTPAGE_PAGENUMBER)
  private Integer iEzsigntemplatedocumentpagePagenumber;

  public static final String SERIALIZED_NAME_I_EZSIGNTEMPLATESIGNATURE_X = "iEzsigntemplatesignatureX";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNTEMPLATESIGNATURE_X)
  private Integer iEzsigntemplatesignatureX;

  public static final String SERIALIZED_NAME_I_EZSIGNTEMPLATESIGNATURE_Y = "iEzsigntemplatesignatureY";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNTEMPLATESIGNATURE_Y)
  private Integer iEzsigntemplatesignatureY;

  public static final String SERIALIZED_NAME_I_EZSIGNTEMPLATESIGNATURE_WIDTH = "iEzsigntemplatesignatureWidth";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNTEMPLATESIGNATURE_WIDTH)
  private Integer iEzsigntemplatesignatureWidth;

  public static final String SERIALIZED_NAME_I_EZSIGNTEMPLATESIGNATURE_HEIGHT = "iEzsigntemplatesignatureHeight";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNTEMPLATESIGNATURE_HEIGHT)
  private Integer iEzsigntemplatesignatureHeight;

  public static final String SERIALIZED_NAME_I_EZSIGNTEMPLATESIGNATURE_STEP = "iEzsigntemplatesignatureStep";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNTEMPLATESIGNATURE_STEP)
  private Integer iEzsigntemplatesignatureStep;

  public static final String SERIALIZED_NAME_E_EZSIGNTEMPLATESIGNATURE_TYPE = "eEzsigntemplatesignatureType";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNTEMPLATESIGNATURE_TYPE)
  private FieldEEzsigntemplatesignatureType eEzsigntemplatesignatureType;

  public static final String SERIALIZED_NAME_T_EZSIGNTEMPLATESIGNATURE_TOOLTIP = "tEzsigntemplatesignatureTooltip";
  @SerializedName(SERIALIZED_NAME_T_EZSIGNTEMPLATESIGNATURE_TOOLTIP)
  private String tEzsigntemplatesignatureTooltip;

  public static final String SERIALIZED_NAME_E_EZSIGNTEMPLATESIGNATURE_TOOLTIPPOSITION = "eEzsigntemplatesignatureTooltipposition";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNTEMPLATESIGNATURE_TOOLTIPPOSITION)
  private FieldEEzsigntemplatesignatureTooltipposition eEzsigntemplatesignatureTooltipposition;

  public static final String SERIALIZED_NAME_E_EZSIGNTEMPLATESIGNATURE_FONT = "eEzsigntemplatesignatureFont";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNTEMPLATESIGNATURE_FONT)
  private FieldEEzsigntemplatesignatureFont eEzsigntemplatesignatureFont;

  public static final String SERIALIZED_NAME_I_EZSIGNTEMPLATESIGNATURE_VALIDATIONSTEP = "iEzsigntemplatesignatureValidationstep";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNTEMPLATESIGNATURE_VALIDATIONSTEP)
  private Integer iEzsigntemplatesignatureValidationstep;

  public static final String SERIALIZED_NAME_S_EZSIGNTEMPLATESIGNATURE_ATTACHMENTDESCRIPTION = "sEzsigntemplatesignatureAttachmentdescription";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNTEMPLATESIGNATURE_ATTACHMENTDESCRIPTION)
  private String sEzsigntemplatesignatureAttachmentdescription;

  public static final String SERIALIZED_NAME_E_EZSIGNTEMPLATESIGNATURE_ATTACHMENTNAMESOURCE = "eEzsigntemplatesignatureAttachmentnamesource";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNTEMPLATESIGNATURE_ATTACHMENTNAMESOURCE)
  private FieldEEzsigntemplatesignatureAttachmentnamesource eEzsigntemplatesignatureAttachmentnamesource;

  public static final String SERIALIZED_NAME_B_EZSIGNTEMPLATESIGNATURE_REQUIRED = "bEzsigntemplatesignatureRequired";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNTEMPLATESIGNATURE_REQUIRED)
  private Boolean bEzsigntemplatesignatureRequired;

  public static final String SERIALIZED_NAME_I_EZSIGNTEMPLATESIGNATURE_MAXLENGTH = "iEzsigntemplatesignatureMaxlength";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNTEMPLATESIGNATURE_MAXLENGTH)
  private Integer iEzsigntemplatesignatureMaxlength;

  public static final String SERIALIZED_NAME_S_EZSIGNTEMPLATESIGNATURE_REGEXP = "sEzsigntemplatesignatureRegexp";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNTEMPLATESIGNATURE_REGEXP)
  private String sEzsigntemplatesignatureRegexp;

  public static final String SERIALIZED_NAME_E_EZSIGNTEMPLATESIGNATURE_TEXTVALIDATION = "eEzsigntemplatesignatureTextvalidation";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNTEMPLATESIGNATURE_TEXTVALIDATION)
  private EnumTextvalidation eEzsigntemplatesignatureTextvalidation;

  public static final String SERIALIZED_NAME_E_EZSIGNTEMPLATESIGNATURE_DEPENDENCYREQUIREMENT = "eEzsigntemplatesignatureDependencyrequirement";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNTEMPLATESIGNATURE_DEPENDENCYREQUIREMENT)
  private FieldEEzsigntemplatesignatureDependencyrequirement eEzsigntemplatesignatureDependencyrequirement;

  public static final String SERIALIZED_NAME_B_EZSIGNTEMPLATESIGNATURE_CUSTOMDATE = "bEzsigntemplatesignatureCustomdate";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNTEMPLATESIGNATURE_CUSTOMDATE)
  private Boolean bEzsigntemplatesignatureCustomdate;

  public static final String SERIALIZED_NAME_A_OBJ_EZSIGNTEMPLATESIGNATURECUSTOMDATE = "a_objEzsigntemplatesignaturecustomdate";
  @SerializedName(SERIALIZED_NAME_A_OBJ_EZSIGNTEMPLATESIGNATURECUSTOMDATE)
  private List<EzsigntemplatesignaturecustomdateResponseCompound> aObjEzsigntemplatesignaturecustomdate;

  public static final String SERIALIZED_NAME_A_OBJ_EZSIGNTEMPLATEELEMENTDEPENDENCY = "a_objEzsigntemplateelementdependency";
  @SerializedName(SERIALIZED_NAME_A_OBJ_EZSIGNTEMPLATEELEMENTDEPENDENCY)
  private List<EzsigntemplateelementdependencyResponseCompound> aObjEzsigntemplateelementdependency;

  public EzsigntemplatesignatureResponseCompound() {
  }

  public EzsigntemplatesignatureResponseCompound pkiEzsigntemplatesignatureID(Integer pkiEzsigntemplatesignatureID) {
    
    this.pkiEzsigntemplatesignatureID = pkiEzsigntemplatesignatureID;
    return this;
  }

   /**
   * The unique ID of the Ezsigntemplatesignature
   * minimum: 0
   * @return pkiEzsigntemplatesignatureID
  **/
  @javax.annotation.Nonnull
  public Integer getPkiEzsigntemplatesignatureID() {
    return pkiEzsigntemplatesignatureID;
  }


  public void setPkiEzsigntemplatesignatureID(Integer pkiEzsigntemplatesignatureID) {
    this.pkiEzsigntemplatesignatureID = pkiEzsigntemplatesignatureID;
  }


  public EzsigntemplatesignatureResponseCompound fkiEzsigntemplatedocumentID(Integer fkiEzsigntemplatedocumentID) {
    
    this.fkiEzsigntemplatedocumentID = fkiEzsigntemplatedocumentID;
    return this;
  }

   /**
   * The unique ID of the Ezsigntemplatedocument
   * minimum: 0
   * @return fkiEzsigntemplatedocumentID
  **/
  @javax.annotation.Nonnull
  public Integer getFkiEzsigntemplatedocumentID() {
    return fkiEzsigntemplatedocumentID;
  }


  public void setFkiEzsigntemplatedocumentID(Integer fkiEzsigntemplatedocumentID) {
    this.fkiEzsigntemplatedocumentID = fkiEzsigntemplatedocumentID;
  }


  public EzsigntemplatesignatureResponseCompound fkiEzsigntemplatesignerID(Integer fkiEzsigntemplatesignerID) {
    
    this.fkiEzsigntemplatesignerID = fkiEzsigntemplatesignerID;
    return this;
  }

   /**
   * The unique ID of the Ezsigntemplatesigner
   * minimum: 0
   * @return fkiEzsigntemplatesignerID
  **/
  @javax.annotation.Nonnull
  public Integer getFkiEzsigntemplatesignerID() {
    return fkiEzsigntemplatesignerID;
  }


  public void setFkiEzsigntemplatesignerID(Integer fkiEzsigntemplatesignerID) {
    this.fkiEzsigntemplatesignerID = fkiEzsigntemplatesignerID;
  }


  public EzsigntemplatesignatureResponseCompound fkiEzsigntemplatesignerIDValidation(Integer fkiEzsigntemplatesignerIDValidation) {
    
    this.fkiEzsigntemplatesignerIDValidation = fkiEzsigntemplatesignerIDValidation;
    return this;
  }

   /**
   * The unique ID of the Ezsigntemplatesigner
   * minimum: 0
   * @return fkiEzsigntemplatesignerIDValidation
  **/
  @javax.annotation.Nullable
  public Integer getFkiEzsigntemplatesignerIDValidation() {
    return fkiEzsigntemplatesignerIDValidation;
  }


  public void setFkiEzsigntemplatesignerIDValidation(Integer fkiEzsigntemplatesignerIDValidation) {
    this.fkiEzsigntemplatesignerIDValidation = fkiEzsigntemplatesignerIDValidation;
  }


  public EzsigntemplatesignatureResponseCompound iEzsigntemplatedocumentpagePagenumber(Integer iEzsigntemplatedocumentpagePagenumber) {
    
    this.iEzsigntemplatedocumentpagePagenumber = iEzsigntemplatedocumentpagePagenumber;
    return this;
  }

   /**
   * The page number in the Ezsigntemplatedocument
   * minimum: 1
   * @return iEzsigntemplatedocumentpagePagenumber
  **/
  @javax.annotation.Nonnull
  public Integer getiEzsigntemplatedocumentpagePagenumber() {
    return iEzsigntemplatedocumentpagePagenumber;
  }


  public void setiEzsigntemplatedocumentpagePagenumber(Integer iEzsigntemplatedocumentpagePagenumber) {
    this.iEzsigntemplatedocumentpagePagenumber = iEzsigntemplatedocumentpagePagenumber;
  }


  public EzsigntemplatesignatureResponseCompound iEzsigntemplatesignatureX(Integer iEzsigntemplatesignatureX) {
    
    this.iEzsigntemplatesignatureX = iEzsigntemplatesignatureX;
    return this;
  }

   /**
   * The X coordinate (Horizontal) where to put the Ezsigntemplatesignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignature 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate.
   * minimum: 0
   * @return iEzsigntemplatesignatureX
  **/
  @javax.annotation.Nonnull
  public Integer getiEzsigntemplatesignatureX() {
    return iEzsigntemplatesignatureX;
  }


  public void setiEzsigntemplatesignatureX(Integer iEzsigntemplatesignatureX) {
    this.iEzsigntemplatesignatureX = iEzsigntemplatesignatureX;
  }


  public EzsigntemplatesignatureResponseCompound iEzsigntemplatesignatureY(Integer iEzsigntemplatesignatureY) {
    
    this.iEzsigntemplatesignatureY = iEzsigntemplatesignatureY;
    return this;
  }

   /**
   * The Y coordinate (Vertical) where to put the Ezsigntemplatesignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignature 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate.
   * minimum: 0
   * @return iEzsigntemplatesignatureY
  **/
  @javax.annotation.Nonnull
  public Integer getiEzsigntemplatesignatureY() {
    return iEzsigntemplatesignatureY;
  }


  public void setiEzsigntemplatesignatureY(Integer iEzsigntemplatesignatureY) {
    this.iEzsigntemplatesignatureY = iEzsigntemplatesignatureY;
  }


  public EzsigntemplatesignatureResponseCompound iEzsigntemplatesignatureWidth(Integer iEzsigntemplatesignatureWidth) {
    
    this.iEzsigntemplatesignatureWidth = iEzsigntemplatesignatureWidth;
    return this;
  }

   /**
   * The width of the Ezsigntemplatesignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsigntemplatesignature to have a width of 2 inches, you would use \&quot;200\&quot; for the iEzsigntemplatesignatureWidth.
   * minimum: 0
   * @return iEzsigntemplatesignatureWidth
  **/
  @javax.annotation.Nullable
  public Integer getiEzsigntemplatesignatureWidth() {
    return iEzsigntemplatesignatureWidth;
  }


  public void setiEzsigntemplatesignatureWidth(Integer iEzsigntemplatesignatureWidth) {
    this.iEzsigntemplatesignatureWidth = iEzsigntemplatesignatureWidth;
  }


  public EzsigntemplatesignatureResponseCompound iEzsigntemplatesignatureHeight(Integer iEzsigntemplatesignatureHeight) {
    
    this.iEzsigntemplatesignatureHeight = iEzsigntemplatesignatureHeight;
    return this;
  }

   /**
   * The height of the Ezsigntemplatesignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsigntemplatesignature to have an height of 2 inches, you would use \&quot;200\&quot; for the iEzsigntemplatesignatureHeight.
   * minimum: 0
   * @return iEzsigntemplatesignatureHeight
  **/
  @javax.annotation.Nullable
  public Integer getiEzsigntemplatesignatureHeight() {
    return iEzsigntemplatesignatureHeight;
  }


  public void setiEzsigntemplatesignatureHeight(Integer iEzsigntemplatesignatureHeight) {
    this.iEzsigntemplatesignatureHeight = iEzsigntemplatesignatureHeight;
  }


  public EzsigntemplatesignatureResponseCompound iEzsigntemplatesignatureStep(Integer iEzsigntemplatesignatureStep) {
    
    this.iEzsigntemplatesignatureStep = iEzsigntemplatesignatureStep;
    return this;
  }

   /**
   * The step when the Ezsigntemplatesigner will be invited to sign
   * minimum: 1
   * @return iEzsigntemplatesignatureStep
  **/
  @javax.annotation.Nonnull
  public Integer getiEzsigntemplatesignatureStep() {
    return iEzsigntemplatesignatureStep;
  }


  public void setiEzsigntemplatesignatureStep(Integer iEzsigntemplatesignatureStep) {
    this.iEzsigntemplatesignatureStep = iEzsigntemplatesignatureStep;
  }


  public EzsigntemplatesignatureResponseCompound eEzsigntemplatesignatureType(FieldEEzsigntemplatesignatureType eEzsigntemplatesignatureType) {
    
    this.eEzsigntemplatesignatureType = eEzsigntemplatesignatureType;
    return this;
  }

   /**
   * Get eEzsigntemplatesignatureType
   * @return eEzsigntemplatesignatureType
  **/
  @javax.annotation.Nonnull
  public FieldEEzsigntemplatesignatureType geteEzsigntemplatesignatureType() {
    return eEzsigntemplatesignatureType;
  }


  public void seteEzsigntemplatesignatureType(FieldEEzsigntemplatesignatureType eEzsigntemplatesignatureType) {
    this.eEzsigntemplatesignatureType = eEzsigntemplatesignatureType;
  }


  public EzsigntemplatesignatureResponseCompound tEzsigntemplatesignatureTooltip(String tEzsigntemplatesignatureTooltip) {
    
    this.tEzsigntemplatesignatureTooltip = tEzsigntemplatesignatureTooltip;
    return this;
  }

   /**
   * A tooltip that will be presented to Ezsigntemplatesigner about the Ezsigntemplatesignature
   * @return tEzsigntemplatesignatureTooltip
  **/
  @javax.annotation.Nullable
  public String gettEzsigntemplatesignatureTooltip() {
    return tEzsigntemplatesignatureTooltip;
  }


  public void settEzsigntemplatesignatureTooltip(String tEzsigntemplatesignatureTooltip) {
    this.tEzsigntemplatesignatureTooltip = tEzsigntemplatesignatureTooltip;
  }


  public EzsigntemplatesignatureResponseCompound eEzsigntemplatesignatureTooltipposition(FieldEEzsigntemplatesignatureTooltipposition eEzsigntemplatesignatureTooltipposition) {
    
    this.eEzsigntemplatesignatureTooltipposition = eEzsigntemplatesignatureTooltipposition;
    return this;
  }

   /**
   * Get eEzsigntemplatesignatureTooltipposition
   * @return eEzsigntemplatesignatureTooltipposition
  **/
  @javax.annotation.Nullable
  public FieldEEzsigntemplatesignatureTooltipposition geteEzsigntemplatesignatureTooltipposition() {
    return eEzsigntemplatesignatureTooltipposition;
  }


  public void seteEzsigntemplatesignatureTooltipposition(FieldEEzsigntemplatesignatureTooltipposition eEzsigntemplatesignatureTooltipposition) {
    this.eEzsigntemplatesignatureTooltipposition = eEzsigntemplatesignatureTooltipposition;
  }


  public EzsigntemplatesignatureResponseCompound eEzsigntemplatesignatureFont(FieldEEzsigntemplatesignatureFont eEzsigntemplatesignatureFont) {
    
    this.eEzsigntemplatesignatureFont = eEzsigntemplatesignatureFont;
    return this;
  }

   /**
   * Get eEzsigntemplatesignatureFont
   * @return eEzsigntemplatesignatureFont
  **/
  @javax.annotation.Nullable
  public FieldEEzsigntemplatesignatureFont geteEzsigntemplatesignatureFont() {
    return eEzsigntemplatesignatureFont;
  }


  public void seteEzsigntemplatesignatureFont(FieldEEzsigntemplatesignatureFont eEzsigntemplatesignatureFont) {
    this.eEzsigntemplatesignatureFont = eEzsigntemplatesignatureFont;
  }


  public EzsigntemplatesignatureResponseCompound iEzsigntemplatesignatureValidationstep(Integer iEzsigntemplatesignatureValidationstep) {
    
    this.iEzsigntemplatesignatureValidationstep = iEzsigntemplatesignatureValidationstep;
    return this;
  }

   /**
   * The step when the Ezsigntemplatesigner will be invited to validate the Ezsigntemplatesignature of eEzsigntemplatesignatureType Attachments
   * @return iEzsigntemplatesignatureValidationstep
  **/
  @javax.annotation.Nullable
  public Integer getiEzsigntemplatesignatureValidationstep() {
    return iEzsigntemplatesignatureValidationstep;
  }


  public void setiEzsigntemplatesignatureValidationstep(Integer iEzsigntemplatesignatureValidationstep) {
    this.iEzsigntemplatesignatureValidationstep = iEzsigntemplatesignatureValidationstep;
  }


  public EzsigntemplatesignatureResponseCompound sEzsigntemplatesignatureAttachmentdescription(String sEzsigntemplatesignatureAttachmentdescription) {
    
    this.sEzsigntemplatesignatureAttachmentdescription = sEzsigntemplatesignatureAttachmentdescription;
    return this;
  }

   /**
   * The description attached to the attachment name added in Ezsigntemplatesignature of eEzsigntemplatesignatureType Attachments
   * @return sEzsigntemplatesignatureAttachmentdescription
  **/
  @javax.annotation.Nullable
  public String getsEzsigntemplatesignatureAttachmentdescription() {
    return sEzsigntemplatesignatureAttachmentdescription;
  }


  public void setsEzsigntemplatesignatureAttachmentdescription(String sEzsigntemplatesignatureAttachmentdescription) {
    this.sEzsigntemplatesignatureAttachmentdescription = sEzsigntemplatesignatureAttachmentdescription;
  }


  public EzsigntemplatesignatureResponseCompound eEzsigntemplatesignatureAttachmentnamesource(FieldEEzsigntemplatesignatureAttachmentnamesource eEzsigntemplatesignatureAttachmentnamesource) {
    
    this.eEzsigntemplatesignatureAttachmentnamesource = eEzsigntemplatesignatureAttachmentnamesource;
    return this;
  }

   /**
   * Get eEzsigntemplatesignatureAttachmentnamesource
   * @return eEzsigntemplatesignatureAttachmentnamesource
  **/
  @javax.annotation.Nullable
  public FieldEEzsigntemplatesignatureAttachmentnamesource geteEzsigntemplatesignatureAttachmentnamesource() {
    return eEzsigntemplatesignatureAttachmentnamesource;
  }


  public void seteEzsigntemplatesignatureAttachmentnamesource(FieldEEzsigntemplatesignatureAttachmentnamesource eEzsigntemplatesignatureAttachmentnamesource) {
    this.eEzsigntemplatesignatureAttachmentnamesource = eEzsigntemplatesignatureAttachmentnamesource;
  }


  public EzsigntemplatesignatureResponseCompound bEzsigntemplatesignatureRequired(Boolean bEzsigntemplatesignatureRequired) {
    
    this.bEzsigntemplatesignatureRequired = bEzsigntemplatesignatureRequired;
    return this;
  }

   /**
   * Whether the Ezsigntemplatesignature is required or not. This field is relevant only with Ezsigntemplatesignature with eEzsigntemplatesignatureType &#x3D; Attachments.
   * @return bEzsigntemplatesignatureRequired
  **/
  @javax.annotation.Nullable
  public Boolean getbEzsigntemplatesignatureRequired() {
    return bEzsigntemplatesignatureRequired;
  }


  public void setbEzsigntemplatesignatureRequired(Boolean bEzsigntemplatesignatureRequired) {
    this.bEzsigntemplatesignatureRequired = bEzsigntemplatesignatureRequired;
  }


  public EzsigntemplatesignatureResponseCompound iEzsigntemplatesignatureMaxlength(Integer iEzsigntemplatesignatureMaxlength) {
    
    this.iEzsigntemplatesignatureMaxlength = iEzsigntemplatesignatureMaxlength;
    return this;
  }

   /**
   * The maximum length for the value in the Ezsigntemplatesignature  This can only be set if eEzsigntemplatesignatureType is **FieldText** or **FieldTextarea**
   * minimum: 0
   * maximum: 65535
   * @return iEzsigntemplatesignatureMaxlength
  **/
  @javax.annotation.Nullable
  public Integer getiEzsigntemplatesignatureMaxlength() {
    return iEzsigntemplatesignatureMaxlength;
  }


  public void setiEzsigntemplatesignatureMaxlength(Integer iEzsigntemplatesignatureMaxlength) {
    this.iEzsigntemplatesignatureMaxlength = iEzsigntemplatesignatureMaxlength;
  }


  public EzsigntemplatesignatureResponseCompound sEzsigntemplatesignatureRegexp(String sEzsigntemplatesignatureRegexp) {
    
    this.sEzsigntemplatesignatureRegexp = sEzsigntemplatesignatureRegexp;
    return this;
  }

   /**
   * A regular expression to indicate what values are acceptable for the Ezsigntemplatesignature.  This can only be set if eEzsigntemplatesignatureType is **Text** or **Textarea**
   * @return sEzsigntemplatesignatureRegexp
  **/
  @javax.annotation.Nullable
  public String getsEzsigntemplatesignatureRegexp() {
    return sEzsigntemplatesignatureRegexp;
  }


  public void setsEzsigntemplatesignatureRegexp(String sEzsigntemplatesignatureRegexp) {
    this.sEzsigntemplatesignatureRegexp = sEzsigntemplatesignatureRegexp;
  }


  public EzsigntemplatesignatureResponseCompound eEzsigntemplatesignatureTextvalidation(EnumTextvalidation eEzsigntemplatesignatureTextvalidation) {
    
    this.eEzsigntemplatesignatureTextvalidation = eEzsigntemplatesignatureTextvalidation;
    return this;
  }

   /**
   * Get eEzsigntemplatesignatureTextvalidation
   * @return eEzsigntemplatesignatureTextvalidation
  **/
  @javax.annotation.Nullable
  public EnumTextvalidation geteEzsigntemplatesignatureTextvalidation() {
    return eEzsigntemplatesignatureTextvalidation;
  }


  public void seteEzsigntemplatesignatureTextvalidation(EnumTextvalidation eEzsigntemplatesignatureTextvalidation) {
    this.eEzsigntemplatesignatureTextvalidation = eEzsigntemplatesignatureTextvalidation;
  }


  public EzsigntemplatesignatureResponseCompound eEzsigntemplatesignatureDependencyrequirement(FieldEEzsigntemplatesignatureDependencyrequirement eEzsigntemplatesignatureDependencyrequirement) {
    
    this.eEzsigntemplatesignatureDependencyrequirement = eEzsigntemplatesignatureDependencyrequirement;
    return this;
  }

   /**
   * Get eEzsigntemplatesignatureDependencyrequirement
   * @return eEzsigntemplatesignatureDependencyrequirement
  **/
  @javax.annotation.Nullable
  public FieldEEzsigntemplatesignatureDependencyrequirement geteEzsigntemplatesignatureDependencyrequirement() {
    return eEzsigntemplatesignatureDependencyrequirement;
  }


  public void seteEzsigntemplatesignatureDependencyrequirement(FieldEEzsigntemplatesignatureDependencyrequirement eEzsigntemplatesignatureDependencyrequirement) {
    this.eEzsigntemplatesignatureDependencyrequirement = eEzsigntemplatesignatureDependencyrequirement;
  }


  public EzsigntemplatesignatureResponseCompound bEzsigntemplatesignatureCustomdate(Boolean bEzsigntemplatesignatureCustomdate) {
    
    this.bEzsigntemplatesignatureCustomdate = bEzsigntemplatesignatureCustomdate;
    return this;
  }

   /**
   * Whether the Ezsigntemplatesignature has a custom date format or not. (Only possible when eEzsigntemplatesignatureType is **Name** or **Handwritten**)
   * @return bEzsigntemplatesignatureCustomdate
  **/
  @javax.annotation.Nullable
  public Boolean getbEzsigntemplatesignatureCustomdate() {
    return bEzsigntemplatesignatureCustomdate;
  }


  public void setbEzsigntemplatesignatureCustomdate(Boolean bEzsigntemplatesignatureCustomdate) {
    this.bEzsigntemplatesignatureCustomdate = bEzsigntemplatesignatureCustomdate;
  }


  public EzsigntemplatesignatureResponseCompound aObjEzsigntemplatesignaturecustomdate(List<EzsigntemplatesignaturecustomdateResponseCompound> aObjEzsigntemplatesignaturecustomdate) {
    
    this.aObjEzsigntemplatesignaturecustomdate = aObjEzsigntemplatesignaturecustomdate;
    return this;
  }

  public EzsigntemplatesignatureResponseCompound addAObjEzsigntemplatesignaturecustomdateItem(EzsigntemplatesignaturecustomdateResponseCompound aObjEzsigntemplatesignaturecustomdateItem) {
    if (this.aObjEzsigntemplatesignaturecustomdate == null) {
      this.aObjEzsigntemplatesignaturecustomdate = new ArrayList<>();
    }
    this.aObjEzsigntemplatesignaturecustomdate.add(aObjEzsigntemplatesignaturecustomdateItem);
    return this;
  }

   /**
   * An array of custom date blocks that will be filled at the time of signature.  Can only be used if bEzsigntemplatesignatureCustomdate is true.  Use an empty array if you don&#39;t want to have a date at all.
   * @return aObjEzsigntemplatesignaturecustomdate
  **/
  @javax.annotation.Nullable
  public List<EzsigntemplatesignaturecustomdateResponseCompound> getaObjEzsigntemplatesignaturecustomdate() {
    return aObjEzsigntemplatesignaturecustomdate;
  }


  public void setaObjEzsigntemplatesignaturecustomdate(List<EzsigntemplatesignaturecustomdateResponseCompound> aObjEzsigntemplatesignaturecustomdate) {
    this.aObjEzsigntemplatesignaturecustomdate = aObjEzsigntemplatesignaturecustomdate;
  }


  public EzsigntemplatesignatureResponseCompound aObjEzsigntemplateelementdependency(List<EzsigntemplateelementdependencyResponseCompound> aObjEzsigntemplateelementdependency) {
    
    this.aObjEzsigntemplateelementdependency = aObjEzsigntemplateelementdependency;
    return this;
  }

  public EzsigntemplatesignatureResponseCompound addAObjEzsigntemplateelementdependencyItem(EzsigntemplateelementdependencyResponseCompound aObjEzsigntemplateelementdependencyItem) {
    if (this.aObjEzsigntemplateelementdependency == null) {
      this.aObjEzsigntemplateelementdependency = new ArrayList<>();
    }
    this.aObjEzsigntemplateelementdependency.add(aObjEzsigntemplateelementdependencyItem);
    return this;
  }

   /**
   * Get aObjEzsigntemplateelementdependency
   * @return aObjEzsigntemplateelementdependency
  **/
  @javax.annotation.Nullable
  public List<EzsigntemplateelementdependencyResponseCompound> getaObjEzsigntemplateelementdependency() {
    return aObjEzsigntemplateelementdependency;
  }


  public void setaObjEzsigntemplateelementdependency(List<EzsigntemplateelementdependencyResponseCompound> aObjEzsigntemplateelementdependency) {
    this.aObjEzsigntemplateelementdependency = aObjEzsigntemplateelementdependency;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsigntemplatesignatureResponseCompound ezsigntemplatesignatureResponseCompound = (EzsigntemplatesignatureResponseCompound) o;
    return Objects.equals(this.pkiEzsigntemplatesignatureID, ezsigntemplatesignatureResponseCompound.pkiEzsigntemplatesignatureID) &&
        Objects.equals(this.fkiEzsigntemplatedocumentID, ezsigntemplatesignatureResponseCompound.fkiEzsigntemplatedocumentID) &&
        Objects.equals(this.fkiEzsigntemplatesignerID, ezsigntemplatesignatureResponseCompound.fkiEzsigntemplatesignerID) &&
        Objects.equals(this.fkiEzsigntemplatesignerIDValidation, ezsigntemplatesignatureResponseCompound.fkiEzsigntemplatesignerIDValidation) &&
        Objects.equals(this.iEzsigntemplatedocumentpagePagenumber, ezsigntemplatesignatureResponseCompound.iEzsigntemplatedocumentpagePagenumber) &&
        Objects.equals(this.iEzsigntemplatesignatureX, ezsigntemplatesignatureResponseCompound.iEzsigntemplatesignatureX) &&
        Objects.equals(this.iEzsigntemplatesignatureY, ezsigntemplatesignatureResponseCompound.iEzsigntemplatesignatureY) &&
        Objects.equals(this.iEzsigntemplatesignatureWidth, ezsigntemplatesignatureResponseCompound.iEzsigntemplatesignatureWidth) &&
        Objects.equals(this.iEzsigntemplatesignatureHeight, ezsigntemplatesignatureResponseCompound.iEzsigntemplatesignatureHeight) &&
        Objects.equals(this.iEzsigntemplatesignatureStep, ezsigntemplatesignatureResponseCompound.iEzsigntemplatesignatureStep) &&
        Objects.equals(this.eEzsigntemplatesignatureType, ezsigntemplatesignatureResponseCompound.eEzsigntemplatesignatureType) &&
        Objects.equals(this.tEzsigntemplatesignatureTooltip, ezsigntemplatesignatureResponseCompound.tEzsigntemplatesignatureTooltip) &&
        Objects.equals(this.eEzsigntemplatesignatureTooltipposition, ezsigntemplatesignatureResponseCompound.eEzsigntemplatesignatureTooltipposition) &&
        Objects.equals(this.eEzsigntemplatesignatureFont, ezsigntemplatesignatureResponseCompound.eEzsigntemplatesignatureFont) &&
        Objects.equals(this.iEzsigntemplatesignatureValidationstep, ezsigntemplatesignatureResponseCompound.iEzsigntemplatesignatureValidationstep) &&
        Objects.equals(this.sEzsigntemplatesignatureAttachmentdescription, ezsigntemplatesignatureResponseCompound.sEzsigntemplatesignatureAttachmentdescription) &&
        Objects.equals(this.eEzsigntemplatesignatureAttachmentnamesource, ezsigntemplatesignatureResponseCompound.eEzsigntemplatesignatureAttachmentnamesource) &&
        Objects.equals(this.bEzsigntemplatesignatureRequired, ezsigntemplatesignatureResponseCompound.bEzsigntemplatesignatureRequired) &&
        Objects.equals(this.iEzsigntemplatesignatureMaxlength, ezsigntemplatesignatureResponseCompound.iEzsigntemplatesignatureMaxlength) &&
        Objects.equals(this.sEzsigntemplatesignatureRegexp, ezsigntemplatesignatureResponseCompound.sEzsigntemplatesignatureRegexp) &&
        Objects.equals(this.eEzsigntemplatesignatureTextvalidation, ezsigntemplatesignatureResponseCompound.eEzsigntemplatesignatureTextvalidation) &&
        Objects.equals(this.eEzsigntemplatesignatureDependencyrequirement, ezsigntemplatesignatureResponseCompound.eEzsigntemplatesignatureDependencyrequirement) &&
        Objects.equals(this.bEzsigntemplatesignatureCustomdate, ezsigntemplatesignatureResponseCompound.bEzsigntemplatesignatureCustomdate) &&
        Objects.equals(this.aObjEzsigntemplatesignaturecustomdate, ezsigntemplatesignatureResponseCompound.aObjEzsigntemplatesignaturecustomdate) &&
        Objects.equals(this.aObjEzsigntemplateelementdependency, ezsigntemplatesignatureResponseCompound.aObjEzsigntemplateelementdependency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiEzsigntemplatesignatureID, fkiEzsigntemplatedocumentID, fkiEzsigntemplatesignerID, fkiEzsigntemplatesignerIDValidation, iEzsigntemplatedocumentpagePagenumber, iEzsigntemplatesignatureX, iEzsigntemplatesignatureY, iEzsigntemplatesignatureWidth, iEzsigntemplatesignatureHeight, iEzsigntemplatesignatureStep, eEzsigntemplatesignatureType, tEzsigntemplatesignatureTooltip, eEzsigntemplatesignatureTooltipposition, eEzsigntemplatesignatureFont, iEzsigntemplatesignatureValidationstep, sEzsigntemplatesignatureAttachmentdescription, eEzsigntemplatesignatureAttachmentnamesource, bEzsigntemplatesignatureRequired, iEzsigntemplatesignatureMaxlength, sEzsigntemplatesignatureRegexp, eEzsigntemplatesignatureTextvalidation, eEzsigntemplatesignatureDependencyrequirement, bEzsigntemplatesignatureCustomdate, aObjEzsigntemplatesignaturecustomdate, aObjEzsigntemplateelementdependency);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsigntemplatesignatureResponseCompound {\n");
    sb.append("    pkiEzsigntemplatesignatureID: ").append(toIndentedString(pkiEzsigntemplatesignatureID)).append("\n");
    sb.append("    fkiEzsigntemplatedocumentID: ").append(toIndentedString(fkiEzsigntemplatedocumentID)).append("\n");
    sb.append("    fkiEzsigntemplatesignerID: ").append(toIndentedString(fkiEzsigntemplatesignerID)).append("\n");
    sb.append("    fkiEzsigntemplatesignerIDValidation: ").append(toIndentedString(fkiEzsigntemplatesignerIDValidation)).append("\n");
    sb.append("    iEzsigntemplatedocumentpagePagenumber: ").append(toIndentedString(iEzsigntemplatedocumentpagePagenumber)).append("\n");
    sb.append("    iEzsigntemplatesignatureX: ").append(toIndentedString(iEzsigntemplatesignatureX)).append("\n");
    sb.append("    iEzsigntemplatesignatureY: ").append(toIndentedString(iEzsigntemplatesignatureY)).append("\n");
    sb.append("    iEzsigntemplatesignatureWidth: ").append(toIndentedString(iEzsigntemplatesignatureWidth)).append("\n");
    sb.append("    iEzsigntemplatesignatureHeight: ").append(toIndentedString(iEzsigntemplatesignatureHeight)).append("\n");
    sb.append("    iEzsigntemplatesignatureStep: ").append(toIndentedString(iEzsigntemplatesignatureStep)).append("\n");
    sb.append("    eEzsigntemplatesignatureType: ").append(toIndentedString(eEzsigntemplatesignatureType)).append("\n");
    sb.append("    tEzsigntemplatesignatureTooltip: ").append(toIndentedString(tEzsigntemplatesignatureTooltip)).append("\n");
    sb.append("    eEzsigntemplatesignatureTooltipposition: ").append(toIndentedString(eEzsigntemplatesignatureTooltipposition)).append("\n");
    sb.append("    eEzsigntemplatesignatureFont: ").append(toIndentedString(eEzsigntemplatesignatureFont)).append("\n");
    sb.append("    iEzsigntemplatesignatureValidationstep: ").append(toIndentedString(iEzsigntemplatesignatureValidationstep)).append("\n");
    sb.append("    sEzsigntemplatesignatureAttachmentdescription: ").append(toIndentedString(sEzsigntemplatesignatureAttachmentdescription)).append("\n");
    sb.append("    eEzsigntemplatesignatureAttachmentnamesource: ").append(toIndentedString(eEzsigntemplatesignatureAttachmentnamesource)).append("\n");
    sb.append("    bEzsigntemplatesignatureRequired: ").append(toIndentedString(bEzsigntemplatesignatureRequired)).append("\n");
    sb.append("    iEzsigntemplatesignatureMaxlength: ").append(toIndentedString(iEzsigntemplatesignatureMaxlength)).append("\n");
    sb.append("    sEzsigntemplatesignatureRegexp: ").append(toIndentedString(sEzsigntemplatesignatureRegexp)).append("\n");
    sb.append("    eEzsigntemplatesignatureTextvalidation: ").append(toIndentedString(eEzsigntemplatesignatureTextvalidation)).append("\n");
    sb.append("    eEzsigntemplatesignatureDependencyrequirement: ").append(toIndentedString(eEzsigntemplatesignatureDependencyrequirement)).append("\n");
    sb.append("    bEzsigntemplatesignatureCustomdate: ").append(toIndentedString(bEzsigntemplatesignatureCustomdate)).append("\n");
    sb.append("    aObjEzsigntemplatesignaturecustomdate: ").append(toIndentedString(aObjEzsigntemplatesignaturecustomdate)).append("\n");
    sb.append("    aObjEzsigntemplateelementdependency: ").append(toIndentedString(aObjEzsigntemplateelementdependency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiEzsigntemplatesignatureID");
    openapiFields.add("fkiEzsigntemplatedocumentID");
    openapiFields.add("fkiEzsigntemplatesignerID");
    openapiFields.add("fkiEzsigntemplatesignerIDValidation");
    openapiFields.add("iEzsigntemplatedocumentpagePagenumber");
    openapiFields.add("iEzsigntemplatesignatureX");
    openapiFields.add("iEzsigntemplatesignatureY");
    openapiFields.add("iEzsigntemplatesignatureWidth");
    openapiFields.add("iEzsigntemplatesignatureHeight");
    openapiFields.add("iEzsigntemplatesignatureStep");
    openapiFields.add("eEzsigntemplatesignatureType");
    openapiFields.add("tEzsigntemplatesignatureTooltip");
    openapiFields.add("eEzsigntemplatesignatureTooltipposition");
    openapiFields.add("eEzsigntemplatesignatureFont");
    openapiFields.add("iEzsigntemplatesignatureValidationstep");
    openapiFields.add("sEzsigntemplatesignatureAttachmentdescription");
    openapiFields.add("eEzsigntemplatesignatureAttachmentnamesource");
    openapiFields.add("bEzsigntemplatesignatureRequired");
    openapiFields.add("iEzsigntemplatesignatureMaxlength");
    openapiFields.add("sEzsigntemplatesignatureRegexp");
    openapiFields.add("eEzsigntemplatesignatureTextvalidation");
    openapiFields.add("eEzsigntemplatesignatureDependencyrequirement");
    openapiFields.add("bEzsigntemplatesignatureCustomdate");
    openapiFields.add("a_objEzsigntemplatesignaturecustomdate");
    openapiFields.add("a_objEzsigntemplateelementdependency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiEzsigntemplatesignatureID");
    openapiRequiredFields.add("fkiEzsigntemplatedocumentID");
    openapiRequiredFields.add("fkiEzsigntemplatesignerID");
    openapiRequiredFields.add("iEzsigntemplatedocumentpagePagenumber");
    openapiRequiredFields.add("iEzsigntemplatesignatureX");
    openapiRequiredFields.add("iEzsigntemplatesignatureY");
    openapiRequiredFields.add("iEzsigntemplatesignatureStep");
    openapiRequiredFields.add("eEzsigntemplatesignatureType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EzsigntemplatesignatureResponseCompound
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EzsigntemplatesignatureResponseCompound.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsigntemplatesignatureResponseCompound is not found in the empty JSON string", EzsigntemplatesignatureResponseCompound.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EzsigntemplatesignatureResponseCompound.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsigntemplatesignatureResponseCompound` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EzsigntemplatesignatureResponseCompound.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("tEzsigntemplatesignatureTooltip") != null && !jsonObj.get("tEzsigntemplatesignatureTooltip").isJsonNull()) && !jsonObj.get("tEzsigntemplatesignatureTooltip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tEzsigntemplatesignatureTooltip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tEzsigntemplatesignatureTooltip").toString()));
      }
      if ((jsonObj.get("sEzsigntemplatesignatureAttachmentdescription") != null && !jsonObj.get("sEzsigntemplatesignatureAttachmentdescription").isJsonNull()) && !jsonObj.get("sEzsigntemplatesignatureAttachmentdescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsigntemplatesignatureAttachmentdescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsigntemplatesignatureAttachmentdescription").toString()));
      }
      if ((jsonObj.get("sEzsigntemplatesignatureRegexp") != null && !jsonObj.get("sEzsigntemplatesignatureRegexp").isJsonNull()) && !jsonObj.get("sEzsigntemplatesignatureRegexp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsigntemplatesignatureRegexp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsigntemplatesignatureRegexp").toString()));
      }
      if (jsonObj.get("a_objEzsigntemplatesignaturecustomdate") != null && !jsonObj.get("a_objEzsigntemplatesignaturecustomdate").isJsonNull()) {
        JsonArray jsonArrayaObjEzsigntemplatesignaturecustomdate = jsonObj.getAsJsonArray("a_objEzsigntemplatesignaturecustomdate");
        if (jsonArrayaObjEzsigntemplatesignaturecustomdate != null) {
          // ensure the json data is an array
          if (!jsonObj.get("a_objEzsigntemplatesignaturecustomdate").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `a_objEzsigntemplatesignaturecustomdate` to be an array in the JSON string but got `%s`", jsonObj.get("a_objEzsigntemplatesignaturecustomdate").toString()));
          }

          // validate the optional field `a_objEzsigntemplatesignaturecustomdate` (array)
          for (int i = 0; i < jsonArrayaObjEzsigntemplatesignaturecustomdate.size(); i++) {
            EzsigntemplatesignaturecustomdateResponseCompound.validateJsonElement(jsonArrayaObjEzsigntemplatesignaturecustomdate.get(i));
          };
        }
      }
      if (jsonObj.get("a_objEzsigntemplateelementdependency") != null && !jsonObj.get("a_objEzsigntemplateelementdependency").isJsonNull()) {
        JsonArray jsonArrayaObjEzsigntemplateelementdependency = jsonObj.getAsJsonArray("a_objEzsigntemplateelementdependency");
        if (jsonArrayaObjEzsigntemplateelementdependency != null) {
          // ensure the json data is an array
          if (!jsonObj.get("a_objEzsigntemplateelementdependency").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `a_objEzsigntemplateelementdependency` to be an array in the JSON string but got `%s`", jsonObj.get("a_objEzsigntemplateelementdependency").toString()));
          }

          // validate the optional field `a_objEzsigntemplateelementdependency` (array)
          for (int i = 0; i < jsonArrayaObjEzsigntemplateelementdependency.size(); i++) {
            EzsigntemplateelementdependencyResponseCompound.validateJsonElement(jsonArrayaObjEzsigntemplateelementdependency.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsigntemplatesignatureResponseCompound.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsigntemplatesignatureResponseCompound' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsigntemplatesignatureResponseCompound> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsigntemplatesignatureResponseCompound.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsigntemplatesignatureResponseCompound>() {
           @Override
           public void write(JsonWriter out, EzsigntemplatesignatureResponseCompound value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsigntemplatesignatureResponseCompound read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EzsigntemplatesignatureResponseCompound given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EzsigntemplatesignatureResponseCompound
  * @throws IOException if the JSON string is invalid with respect to EzsigntemplatesignatureResponseCompound
  */
  public static EzsigntemplatesignatureResponseCompound fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsigntemplatesignatureResponseCompound.class);
  }

 /**
  * Convert an instance of EzsigntemplatesignatureResponseCompound to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

