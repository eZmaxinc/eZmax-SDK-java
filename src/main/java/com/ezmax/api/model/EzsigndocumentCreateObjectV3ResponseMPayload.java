/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.EzsigndocumentCreateElementV3Response;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * Payload for POST /3/object/ezsigndocument
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-17T15:03:32.455495633Z[Etc/UTC]", comments = "Generator version: 7.10.0")
public class EzsigndocumentCreateObjectV3ResponseMPayload {
  public static final String SERIALIZED_NAME_A_OBJ_EZSIGNDOCUMENT = "a_objEzsigndocument";
  @SerializedName(SERIALIZED_NAME_A_OBJ_EZSIGNDOCUMENT)
  @javax.annotation.Nonnull
  private List<EzsigndocumentCreateElementV3Response> aObjEzsigndocument = new ArrayList<>();

  public EzsigndocumentCreateObjectV3ResponseMPayload() {
  }

  public EzsigndocumentCreateObjectV3ResponseMPayload aObjEzsigndocument(@javax.annotation.Nonnull List<EzsigndocumentCreateElementV3Response> aObjEzsigndocument) {
    this.aObjEzsigndocument = aObjEzsigndocument;
    return this;
  }

  public EzsigndocumentCreateObjectV3ResponseMPayload addAObjEzsigndocumentItem(EzsigndocumentCreateElementV3Response aObjEzsigndocumentItem) {
    if (this.aObjEzsigndocument == null) {
      this.aObjEzsigndocument = new ArrayList<>();
    }
    this.aObjEzsigndocument.add(aObjEzsigndocumentItem);
    return this;
  }

  /**
   * An array of objets that contain unique IDs representing the object that were requested to be created and possibly matching template IDs.  They are returned in the same order as the array containing the objects to be created that was sent in the request.
   * @return aObjEzsigndocument
   */
  @javax.annotation.Nonnull
  public List<EzsigndocumentCreateElementV3Response> getaObjEzsigndocument() {
    return aObjEzsigndocument;
  }

  public void setaObjEzsigndocument(@javax.annotation.Nonnull List<EzsigndocumentCreateElementV3Response> aObjEzsigndocument) {
    this.aObjEzsigndocument = aObjEzsigndocument;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsigndocumentCreateObjectV3ResponseMPayload ezsigndocumentCreateObjectV3ResponseMPayload = (EzsigndocumentCreateObjectV3ResponseMPayload) o;
    return Objects.equals(this.aObjEzsigndocument, ezsigndocumentCreateObjectV3ResponseMPayload.aObjEzsigndocument);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aObjEzsigndocument);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsigndocumentCreateObjectV3ResponseMPayload {\n");
    sb.append("    aObjEzsigndocument: ").append(toIndentedString(aObjEzsigndocument)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("a_objEzsigndocument");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("a_objEzsigndocument");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EzsigndocumentCreateObjectV3ResponseMPayload
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EzsigndocumentCreateObjectV3ResponseMPayload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsigndocumentCreateObjectV3ResponseMPayload is not found in the empty JSON string", EzsigndocumentCreateObjectV3ResponseMPayload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EzsigndocumentCreateObjectV3ResponseMPayload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsigndocumentCreateObjectV3ResponseMPayload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EzsigndocumentCreateObjectV3ResponseMPayload.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("a_objEzsigndocument").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_objEzsigndocument` to be an array in the JSON string but got `%s`", jsonObj.get("a_objEzsigndocument").toString()));
      }

      JsonArray jsonArrayaObjEzsigndocument = jsonObj.getAsJsonArray("a_objEzsigndocument");
      // validate the required field `a_objEzsigndocument` (array)
      for (int i = 0; i < jsonArrayaObjEzsigndocument.size(); i++) {
        EzsigndocumentCreateElementV3Response.validateJsonElement(jsonArrayaObjEzsigndocument.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsigndocumentCreateObjectV3ResponseMPayload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsigndocumentCreateObjectV3ResponseMPayload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsigndocumentCreateObjectV3ResponseMPayload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsigndocumentCreateObjectV3ResponseMPayload.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsigndocumentCreateObjectV3ResponseMPayload>() {
           @Override
           public void write(JsonWriter out, EzsigndocumentCreateObjectV3ResponseMPayload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsigndocumentCreateObjectV3ResponseMPayload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EzsigndocumentCreateObjectV3ResponseMPayload given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EzsigndocumentCreateObjectV3ResponseMPayload
   * @throws IOException if the JSON string is invalid with respect to EzsigndocumentCreateObjectV3ResponseMPayload
   */
  public static EzsigndocumentCreateObjectV3ResponseMPayload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsigndocumentCreateObjectV3ResponseMPayload.class);
  }

  /**
   * Convert an instance of EzsigndocumentCreateObjectV3ResponseMPayload to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

