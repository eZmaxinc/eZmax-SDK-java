/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.ContactinformationsResponseCompound;
import com.ezmax.api.model.FieldEContactType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Contact Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-05T21:55:04.724341195Z[Etc/UTC]", comments = "Generator version: 7.11.0")
public class ContactResponseCompound {
  public static final String SERIALIZED_NAME_PKI_CONTACT_I_D = "pkiContactID";
  @SerializedName(SERIALIZED_NAME_PKI_CONTACT_I_D)
  @javax.annotation.Nonnull
  private Integer pkiContactID;

  public static final String SERIALIZED_NAME_FKI_LANGUAGE_I_D = "fkiLanguageID";
  @SerializedName(SERIALIZED_NAME_FKI_LANGUAGE_I_D)
  @javax.annotation.Nonnull
  private Integer fkiLanguageID;

  public static final String SERIALIZED_NAME_FKI_CONTACTTITLE_I_D = "fkiContacttitleID";
  @SerializedName(SERIALIZED_NAME_FKI_CONTACTTITLE_I_D)
  @javax.annotation.Nonnull
  private Integer fkiContacttitleID;

  public static final String SERIALIZED_NAME_FKI_CONTACTINFORMATIONS_I_D = "fkiContactinformationsID";
  @SerializedName(SERIALIZED_NAME_FKI_CONTACTINFORMATIONS_I_D)
  @javax.annotation.Nonnull
  private Integer fkiContactinformationsID;

  public static final String SERIALIZED_NAME_DT_CONTACT_BIRTHDATE = "dtContactBirthdate";
  @SerializedName(SERIALIZED_NAME_DT_CONTACT_BIRTHDATE)
  @javax.annotation.Nullable
  private String dtContactBirthdate;

  public static final String SERIALIZED_NAME_E_CONTACT_TYPE = "eContactType";
  @SerializedName(SERIALIZED_NAME_E_CONTACT_TYPE)
  @javax.annotation.Nonnull
  private FieldEContactType eContactType;

  public static final String SERIALIZED_NAME_S_CONTACT_FIRSTNAME = "sContactFirstname";
  @SerializedName(SERIALIZED_NAME_S_CONTACT_FIRSTNAME)
  @javax.annotation.Nonnull
  private String sContactFirstname;

  public static final String SERIALIZED_NAME_S_CONTACT_LASTNAME = "sContactLastname";
  @SerializedName(SERIALIZED_NAME_S_CONTACT_LASTNAME)
  @javax.annotation.Nonnull
  private String sContactLastname;

  public static final String SERIALIZED_NAME_S_CONTACT_COMPANY = "sContactCompany";
  @SerializedName(SERIALIZED_NAME_S_CONTACT_COMPANY)
  @javax.annotation.Nullable
  private String sContactCompany;

  public static final String SERIALIZED_NAME_S_CONTACT_OCCUPATION = "sContactOccupation";
  @SerializedName(SERIALIZED_NAME_S_CONTACT_OCCUPATION)
  @javax.annotation.Nullable
  private String sContactOccupation;

  public static final String SERIALIZED_NAME_T_CONTACT_NOTE = "tContactNote";
  @SerializedName(SERIALIZED_NAME_T_CONTACT_NOTE)
  @javax.annotation.Nullable
  private String tContactNote;

  public static final String SERIALIZED_NAME_B_CONTACT_ISACTIVE = "bContactIsactive";
  @SerializedName(SERIALIZED_NAME_B_CONTACT_ISACTIVE)
  @javax.annotation.Nonnull
  private Boolean bContactIsactive;

  public static final String SERIALIZED_NAME_OBJ_CONTACTINFORMATIONS = "objContactinformations";
  @SerializedName(SERIALIZED_NAME_OBJ_CONTACTINFORMATIONS)
  @javax.annotation.Nonnull
  private ContactinformationsResponseCompound objContactinformations;

  public ContactResponseCompound() {
  }

  public ContactResponseCompound pkiContactID(@javax.annotation.Nonnull Integer pkiContactID) {
    this.pkiContactID = pkiContactID;
    return this;
  }

  /**
   * The unique ID of the Contact
   * minimum: 0
   * @return pkiContactID
   */
  @javax.annotation.Nonnull
  public Integer getPkiContactID() {
    return pkiContactID;
  }

  public void setPkiContactID(@javax.annotation.Nonnull Integer pkiContactID) {
    this.pkiContactID = pkiContactID;
  }


  public ContactResponseCompound fkiLanguageID(@javax.annotation.Nonnull Integer fkiLanguageID) {
    this.fkiLanguageID = fkiLanguageID;
    return this;
  }

  /**
   * The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
   * minimum: 1
   * maximum: 2
   * @return fkiLanguageID
   */
  @javax.annotation.Nonnull
  public Integer getFkiLanguageID() {
    return fkiLanguageID;
  }

  public void setFkiLanguageID(@javax.annotation.Nonnull Integer fkiLanguageID) {
    this.fkiLanguageID = fkiLanguageID;
  }


  public ContactResponseCompound fkiContacttitleID(@javax.annotation.Nonnull Integer fkiContacttitleID) {
    this.fkiContacttitleID = fkiContacttitleID;
    return this;
  }

  /**
   * The unique ID of the Contacttitle.  Valid values:  |Value|Description| |-|-| |1|Ms.| |2|Mr.| |4|(Blank)| |5|Me (For Notaries)|
   * minimum: 0
   * @return fkiContacttitleID
   */
  @javax.annotation.Nonnull
  public Integer getFkiContacttitleID() {
    return fkiContacttitleID;
  }

  public void setFkiContacttitleID(@javax.annotation.Nonnull Integer fkiContacttitleID) {
    this.fkiContacttitleID = fkiContacttitleID;
  }


  public ContactResponseCompound fkiContactinformationsID(@javax.annotation.Nonnull Integer fkiContactinformationsID) {
    this.fkiContactinformationsID = fkiContactinformationsID;
    return this;
  }

  /**
   * The unique ID of the Contactinformations
   * minimum: 0
   * maximum: 16777215
   * @return fkiContactinformationsID
   */
  @javax.annotation.Nonnull
  public Integer getFkiContactinformationsID() {
    return fkiContactinformationsID;
  }

  public void setFkiContactinformationsID(@javax.annotation.Nonnull Integer fkiContactinformationsID) {
    this.fkiContactinformationsID = fkiContactinformationsID;
  }


  public ContactResponseCompound dtContactBirthdate(@javax.annotation.Nullable String dtContactBirthdate) {
    this.dtContactBirthdate = dtContactBirthdate;
    return this;
  }

  /**
   * The Birth Date of the contact
   * @return dtContactBirthdate
   */
  @javax.annotation.Nullable
  public String getDtContactBirthdate() {
    return dtContactBirthdate;
  }

  public void setDtContactBirthdate(@javax.annotation.Nullable String dtContactBirthdate) {
    this.dtContactBirthdate = dtContactBirthdate;
  }


  public ContactResponseCompound eContactType(@javax.annotation.Nonnull FieldEContactType eContactType) {
    this.eContactType = eContactType;
    return this;
  }

  /**
   * Get eContactType
   * @return eContactType
   */
  @javax.annotation.Nonnull
  public FieldEContactType geteContactType() {
    return eContactType;
  }

  public void seteContactType(@javax.annotation.Nonnull FieldEContactType eContactType) {
    this.eContactType = eContactType;
  }


  public ContactResponseCompound sContactFirstname(@javax.annotation.Nonnull String sContactFirstname) {
    this.sContactFirstname = sContactFirstname;
    return this;
  }

  /**
   * The First name of the contact
   * @return sContactFirstname
   */
  @javax.annotation.Nonnull
  public String getsContactFirstname() {
    return sContactFirstname;
  }

  public void setsContactFirstname(@javax.annotation.Nonnull String sContactFirstname) {
    this.sContactFirstname = sContactFirstname;
  }


  public ContactResponseCompound sContactLastname(@javax.annotation.Nonnull String sContactLastname) {
    this.sContactLastname = sContactLastname;
    return this;
  }

  /**
   * The Last name of the contact
   * @return sContactLastname
   */
  @javax.annotation.Nonnull
  public String getsContactLastname() {
    return sContactLastname;
  }

  public void setsContactLastname(@javax.annotation.Nonnull String sContactLastname) {
    this.sContactLastname = sContactLastname;
  }


  public ContactResponseCompound sContactCompany(@javax.annotation.Nullable String sContactCompany) {
    this.sContactCompany = sContactCompany;
    return this;
  }

  /**
   * The Company name of the contact
   * @return sContactCompany
   */
  @javax.annotation.Nullable
  public String getsContactCompany() {
    return sContactCompany;
  }

  public void setsContactCompany(@javax.annotation.Nullable String sContactCompany) {
    this.sContactCompany = sContactCompany;
  }


  public ContactResponseCompound sContactOccupation(@javax.annotation.Nullable String sContactOccupation) {
    this.sContactOccupation = sContactOccupation;
    return this;
  }

  /**
   * The occupation of the Contact
   * @return sContactOccupation
   */
  @javax.annotation.Nullable
  public String getsContactOccupation() {
    return sContactOccupation;
  }

  public void setsContactOccupation(@javax.annotation.Nullable String sContactOccupation) {
    this.sContactOccupation = sContactOccupation;
  }


  public ContactResponseCompound tContactNote(@javax.annotation.Nullable String tContactNote) {
    this.tContactNote = tContactNote;
    return this;
  }

  /**
   * The note of the Contact
   * @return tContactNote
   */
  @javax.annotation.Nullable
  public String gettContactNote() {
    return tContactNote;
  }

  public void settContactNote(@javax.annotation.Nullable String tContactNote) {
    this.tContactNote = tContactNote;
  }


  public ContactResponseCompound bContactIsactive(@javax.annotation.Nonnull Boolean bContactIsactive) {
    this.bContactIsactive = bContactIsactive;
    return this;
  }

  /**
   * Whether the contact is active or not
   * @return bContactIsactive
   */
  @javax.annotation.Nonnull
  public Boolean getbContactIsactive() {
    return bContactIsactive;
  }

  public void setbContactIsactive(@javax.annotation.Nonnull Boolean bContactIsactive) {
    this.bContactIsactive = bContactIsactive;
  }


  public ContactResponseCompound objContactinformations(@javax.annotation.Nonnull ContactinformationsResponseCompound objContactinformations) {
    this.objContactinformations = objContactinformations;
    return this;
  }

  /**
   * Get objContactinformations
   * @return objContactinformations
   */
  @javax.annotation.Nonnull
  public ContactinformationsResponseCompound getObjContactinformations() {
    return objContactinformations;
  }

  public void setObjContactinformations(@javax.annotation.Nonnull ContactinformationsResponseCompound objContactinformations) {
    this.objContactinformations = objContactinformations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContactResponseCompound contactResponseCompound = (ContactResponseCompound) o;
    return Objects.equals(this.pkiContactID, contactResponseCompound.pkiContactID) &&
        Objects.equals(this.fkiLanguageID, contactResponseCompound.fkiLanguageID) &&
        Objects.equals(this.fkiContacttitleID, contactResponseCompound.fkiContacttitleID) &&
        Objects.equals(this.fkiContactinformationsID, contactResponseCompound.fkiContactinformationsID) &&
        Objects.equals(this.dtContactBirthdate, contactResponseCompound.dtContactBirthdate) &&
        Objects.equals(this.eContactType, contactResponseCompound.eContactType) &&
        Objects.equals(this.sContactFirstname, contactResponseCompound.sContactFirstname) &&
        Objects.equals(this.sContactLastname, contactResponseCompound.sContactLastname) &&
        Objects.equals(this.sContactCompany, contactResponseCompound.sContactCompany) &&
        Objects.equals(this.sContactOccupation, contactResponseCompound.sContactOccupation) &&
        Objects.equals(this.tContactNote, contactResponseCompound.tContactNote) &&
        Objects.equals(this.bContactIsactive, contactResponseCompound.bContactIsactive) &&
        Objects.equals(this.objContactinformations, contactResponseCompound.objContactinformations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiContactID, fkiLanguageID, fkiContacttitleID, fkiContactinformationsID, dtContactBirthdate, eContactType, sContactFirstname, sContactLastname, sContactCompany, sContactOccupation, tContactNote, bContactIsactive, objContactinformations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContactResponseCompound {\n");
    sb.append("    pkiContactID: ").append(toIndentedString(pkiContactID)).append("\n");
    sb.append("    fkiLanguageID: ").append(toIndentedString(fkiLanguageID)).append("\n");
    sb.append("    fkiContacttitleID: ").append(toIndentedString(fkiContacttitleID)).append("\n");
    sb.append("    fkiContactinformationsID: ").append(toIndentedString(fkiContactinformationsID)).append("\n");
    sb.append("    dtContactBirthdate: ").append(toIndentedString(dtContactBirthdate)).append("\n");
    sb.append("    eContactType: ").append(toIndentedString(eContactType)).append("\n");
    sb.append("    sContactFirstname: ").append(toIndentedString(sContactFirstname)).append("\n");
    sb.append("    sContactLastname: ").append(toIndentedString(sContactLastname)).append("\n");
    sb.append("    sContactCompany: ").append(toIndentedString(sContactCompany)).append("\n");
    sb.append("    sContactOccupation: ").append(toIndentedString(sContactOccupation)).append("\n");
    sb.append("    tContactNote: ").append(toIndentedString(tContactNote)).append("\n");
    sb.append("    bContactIsactive: ").append(toIndentedString(bContactIsactive)).append("\n");
    sb.append("    objContactinformations: ").append(toIndentedString(objContactinformations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiContactID");
    openapiFields.add("fkiLanguageID");
    openapiFields.add("fkiContacttitleID");
    openapiFields.add("fkiContactinformationsID");
    openapiFields.add("dtContactBirthdate");
    openapiFields.add("eContactType");
    openapiFields.add("sContactFirstname");
    openapiFields.add("sContactLastname");
    openapiFields.add("sContactCompany");
    openapiFields.add("sContactOccupation");
    openapiFields.add("tContactNote");
    openapiFields.add("bContactIsactive");
    openapiFields.add("objContactinformations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiContactID");
    openapiRequiredFields.add("fkiLanguageID");
    openapiRequiredFields.add("fkiContacttitleID");
    openapiRequiredFields.add("fkiContactinformationsID");
    openapiRequiredFields.add("eContactType");
    openapiRequiredFields.add("sContactFirstname");
    openapiRequiredFields.add("sContactLastname");
    openapiRequiredFields.add("bContactIsactive");
    openapiRequiredFields.add("objContactinformations");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContactResponseCompound
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContactResponseCompound.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContactResponseCompound is not found in the empty JSON string", ContactResponseCompound.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContactResponseCompound.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContactResponseCompound` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContactResponseCompound.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dtContactBirthdate") != null && !jsonObj.get("dtContactBirthdate").isJsonNull()) && !jsonObj.get("dtContactBirthdate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dtContactBirthdate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dtContactBirthdate").toString()));
      }
      // validate the required field `eContactType`
      FieldEContactType.validateJsonElement(jsonObj.get("eContactType"));
      if (!jsonObj.get("sContactFirstname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sContactFirstname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sContactFirstname").toString()));
      }
      if (!jsonObj.get("sContactLastname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sContactLastname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sContactLastname").toString()));
      }
      if ((jsonObj.get("sContactCompany") != null && !jsonObj.get("sContactCompany").isJsonNull()) && !jsonObj.get("sContactCompany").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sContactCompany` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sContactCompany").toString()));
      }
      if ((jsonObj.get("sContactOccupation") != null && !jsonObj.get("sContactOccupation").isJsonNull()) && !jsonObj.get("sContactOccupation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sContactOccupation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sContactOccupation").toString()));
      }
      if ((jsonObj.get("tContactNote") != null && !jsonObj.get("tContactNote").isJsonNull()) && !jsonObj.get("tContactNote").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tContactNote` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tContactNote").toString()));
      }
      // validate the required field `objContactinformations`
      ContactinformationsResponseCompound.validateJsonElement(jsonObj.get("objContactinformations"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContactResponseCompound.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContactResponseCompound' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContactResponseCompound> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContactResponseCompound.class));

       return (TypeAdapter<T>) new TypeAdapter<ContactResponseCompound>() {
           @Override
           public void write(JsonWriter out, ContactResponseCompound value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContactResponseCompound read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContactResponseCompound given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContactResponseCompound
   * @throws IOException if the JSON string is invalid with respect to ContactResponseCompound
   */
  public static ContactResponseCompound fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContactResponseCompound.class);
  }

  /**
   * Convert an instance of ContactResponseCompound to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

