/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Modulesection Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-28T21:41:20.249020914Z[Etc/UTC]", comments = "Generator version: 7.11.0")
public class ModulesectionResponse {
  public static final String SERIALIZED_NAME_PKI_MODULESECTION_I_D = "pkiModulesectionID";
  @SerializedName(SERIALIZED_NAME_PKI_MODULESECTION_I_D)
  @javax.annotation.Nonnull
  private Integer pkiModulesectionID;

  public static final String SERIALIZED_NAME_FKI_MODULE_I_D = "fkiModuleID";
  @SerializedName(SERIALIZED_NAME_FKI_MODULE_I_D)
  @javax.annotation.Nonnull
  private Integer fkiModuleID;

  public static final String SERIALIZED_NAME_S_MODULESECTION_INTERNALNAME = "sModulesectionInternalname";
  @SerializedName(SERIALIZED_NAME_S_MODULESECTION_INTERNALNAME)
  @javax.annotation.Nonnull
  private String sModulesectionInternalname;

  public static final String SERIALIZED_NAME_S_MODULESECTION_NAME_X = "sModulesectionNameX";
  @SerializedName(SERIALIZED_NAME_S_MODULESECTION_NAME_X)
  @javax.annotation.Nonnull
  private String sModulesectionNameX;

  public ModulesectionResponse() {
  }

  public ModulesectionResponse pkiModulesectionID(@javax.annotation.Nonnull Integer pkiModulesectionID) {
    this.pkiModulesectionID = pkiModulesectionID;
    return this;
  }

  /**
   * The unique ID of the Modulesection
   * minimum: 0
   * @return pkiModulesectionID
   */
  @javax.annotation.Nonnull
  public Integer getPkiModulesectionID() {
    return pkiModulesectionID;
  }

  public void setPkiModulesectionID(@javax.annotation.Nonnull Integer pkiModulesectionID) {
    this.pkiModulesectionID = pkiModulesectionID;
  }


  public ModulesectionResponse fkiModuleID(@javax.annotation.Nonnull Integer fkiModuleID) {
    this.fkiModuleID = fkiModuleID;
    return this;
  }

  /**
   * The unique ID of the Module
   * minimum: 0
   * @return fkiModuleID
   */
  @javax.annotation.Nonnull
  public Integer getFkiModuleID() {
    return fkiModuleID;
  }

  public void setFkiModuleID(@javax.annotation.Nonnull Integer fkiModuleID) {
    this.fkiModuleID = fkiModuleID;
  }


  public ModulesectionResponse sModulesectionInternalname(@javax.annotation.Nonnull String sModulesectionInternalname) {
    this.sModulesectionInternalname = sModulesectionInternalname;
    return this;
  }

  /**
   * The Internal name of the Module section.
   * @return sModulesectionInternalname
   */
  @javax.annotation.Nonnull
  public String getsModulesectionInternalname() {
    return sModulesectionInternalname;
  }

  public void setsModulesectionInternalname(@javax.annotation.Nonnull String sModulesectionInternalname) {
    this.sModulesectionInternalname = sModulesectionInternalname;
  }


  public ModulesectionResponse sModulesectionNameX(@javax.annotation.Nonnull String sModulesectionNameX) {
    this.sModulesectionNameX = sModulesectionNameX;
    return this;
  }

  /**
   * The Name of the Modulesection in the language of the requester
   * @return sModulesectionNameX
   */
  @javax.annotation.Nonnull
  public String getsModulesectionNameX() {
    return sModulesectionNameX;
  }

  public void setsModulesectionNameX(@javax.annotation.Nonnull String sModulesectionNameX) {
    this.sModulesectionNameX = sModulesectionNameX;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModulesectionResponse modulesectionResponse = (ModulesectionResponse) o;
    return Objects.equals(this.pkiModulesectionID, modulesectionResponse.pkiModulesectionID) &&
        Objects.equals(this.fkiModuleID, modulesectionResponse.fkiModuleID) &&
        Objects.equals(this.sModulesectionInternalname, modulesectionResponse.sModulesectionInternalname) &&
        Objects.equals(this.sModulesectionNameX, modulesectionResponse.sModulesectionNameX);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiModulesectionID, fkiModuleID, sModulesectionInternalname, sModulesectionNameX);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModulesectionResponse {\n");
    sb.append("    pkiModulesectionID: ").append(toIndentedString(pkiModulesectionID)).append("\n");
    sb.append("    fkiModuleID: ").append(toIndentedString(fkiModuleID)).append("\n");
    sb.append("    sModulesectionInternalname: ").append(toIndentedString(sModulesectionInternalname)).append("\n");
    sb.append("    sModulesectionNameX: ").append(toIndentedString(sModulesectionNameX)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiModulesectionID");
    openapiFields.add("fkiModuleID");
    openapiFields.add("sModulesectionInternalname");
    openapiFields.add("sModulesectionNameX");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiModulesectionID");
    openapiRequiredFields.add("fkiModuleID");
    openapiRequiredFields.add("sModulesectionInternalname");
    openapiRequiredFields.add("sModulesectionNameX");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModulesectionResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModulesectionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModulesectionResponse is not found in the empty JSON string", ModulesectionResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModulesectionResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModulesectionResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModulesectionResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("sModulesectionInternalname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sModulesectionInternalname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sModulesectionInternalname").toString()));
      }
      if (!jsonObj.get("sModulesectionNameX").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sModulesectionNameX` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sModulesectionNameX").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModulesectionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModulesectionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModulesectionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModulesectionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ModulesectionResponse>() {
           @Override
           public void write(JsonWriter out, ModulesectionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModulesectionResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModulesectionResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModulesectionResponse
   * @throws IOException if the JSON string is invalid with respect to ModulesectionResponse
   */
  public static ModulesectionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModulesectionResponse.class);
  }

  /**
   * Convert an instance of ModulesectionResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

