/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.FieldEPhoneType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Phone Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-07T19:20:13.445471985Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class PhoneResponse {
  public static final String SERIALIZED_NAME_PKI_PHONE_I_D = "pkiPhoneID";
  @SerializedName(SERIALIZED_NAME_PKI_PHONE_I_D)
  @javax.annotation.Nonnull
  private Integer pkiPhoneID;

  public static final String SERIALIZED_NAME_FKI_PHONETYPE_I_D = "fkiPhonetypeID";
  @SerializedName(SERIALIZED_NAME_FKI_PHONETYPE_I_D)
  @javax.annotation.Nonnull
  private Integer fkiPhonetypeID;

  public static final String SERIALIZED_NAME_E_PHONE_TYPE = "ePhoneType";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_E_PHONE_TYPE)
  @javax.annotation.Nullable
  private FieldEPhoneType ePhoneType;

  public static final String SERIALIZED_NAME_S_PHONE_E164 = "sPhoneE164";
  @SerializedName(SERIALIZED_NAME_S_PHONE_E164)
  @javax.annotation.Nullable
  private String sPhoneE164;

  public static final String SERIALIZED_NAME_S_PHONE_EXTENSION = "sPhoneExtension";
  @SerializedName(SERIALIZED_NAME_S_PHONE_EXTENSION)
  @javax.annotation.Nullable
  private String sPhoneExtension;

  public PhoneResponse() {
  }

  public PhoneResponse pkiPhoneID(@javax.annotation.Nonnull Integer pkiPhoneID) {
    this.pkiPhoneID = pkiPhoneID;
    return this;
  }

  /**
   * The unique ID of the Phone.
   * minimum: 0
   * @return pkiPhoneID
   */
  @javax.annotation.Nonnull
  public Integer getPkiPhoneID() {
    return pkiPhoneID;
  }

  public void setPkiPhoneID(@javax.annotation.Nonnull Integer pkiPhoneID) {
    this.pkiPhoneID = pkiPhoneID;
  }


  public PhoneResponse fkiPhonetypeID(@javax.annotation.Nonnull Integer fkiPhonetypeID) {
    this.fkiPhonetypeID = fkiPhonetypeID;
    return this;
  }

  /**
   * The unique ID of the Phonetype.  Valid values:  |Value|Description| |-|-| |1|Office| |2|Home| |3|Mobile| |4|Fax| |5|Pager| |6|Toll Free|
   * minimum: 0
   * @return fkiPhonetypeID
   */
  @javax.annotation.Nonnull
  public Integer getFkiPhonetypeID() {
    return fkiPhonetypeID;
  }

  public void setFkiPhonetypeID(@javax.annotation.Nonnull Integer fkiPhonetypeID) {
    this.fkiPhonetypeID = fkiPhonetypeID;
  }


  @Deprecated
  public PhoneResponse ePhoneType(@javax.annotation.Nullable FieldEPhoneType ePhoneType) {
    this.ePhoneType = ePhoneType;
    return this;
  }

  /**
   * Get ePhoneType
   * @return ePhoneType
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public FieldEPhoneType getePhoneType() {
    return ePhoneType;
  }

  @Deprecated
  public void setePhoneType(@javax.annotation.Nullable FieldEPhoneType ePhoneType) {
    this.ePhoneType = ePhoneType;
  }


  public PhoneResponse sPhoneE164(@javax.annotation.Nullable String sPhoneE164) {
    this.sPhoneE164 = sPhoneE164;
    return this;
  }

  /**
   * A phone number in E.164 Format
   * @return sPhoneE164
   */
  @javax.annotation.Nullable
  public String getsPhoneE164() {
    return sPhoneE164;
  }

  public void setsPhoneE164(@javax.annotation.Nullable String sPhoneE164) {
    this.sPhoneE164 = sPhoneE164;
  }


  public PhoneResponse sPhoneExtension(@javax.annotation.Nullable String sPhoneExtension) {
    this.sPhoneExtension = sPhoneExtension;
    return this;
  }

  /**
   * The extension of the phone number.  The extension is the \&quot;123\&quot; section in this sample phone number: (514) 990-1516 x123.  It can also be used with international phone numbers
   * @return sPhoneExtension
   */
  @javax.annotation.Nullable
  public String getsPhoneExtension() {
    return sPhoneExtension;
  }

  public void setsPhoneExtension(@javax.annotation.Nullable String sPhoneExtension) {
    this.sPhoneExtension = sPhoneExtension;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PhoneResponse phoneResponse = (PhoneResponse) o;
    return Objects.equals(this.pkiPhoneID, phoneResponse.pkiPhoneID) &&
        Objects.equals(this.fkiPhonetypeID, phoneResponse.fkiPhonetypeID) &&
        Objects.equals(this.ePhoneType, phoneResponse.ePhoneType) &&
        Objects.equals(this.sPhoneE164, phoneResponse.sPhoneE164) &&
        Objects.equals(this.sPhoneExtension, phoneResponse.sPhoneExtension);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiPhoneID, fkiPhonetypeID, ePhoneType, sPhoneE164, sPhoneExtension);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PhoneResponse {\n");
    sb.append("    pkiPhoneID: ").append(toIndentedString(pkiPhoneID)).append("\n");
    sb.append("    fkiPhonetypeID: ").append(toIndentedString(fkiPhonetypeID)).append("\n");
    sb.append("    ePhoneType: ").append(toIndentedString(ePhoneType)).append("\n");
    sb.append("    sPhoneE164: ").append(toIndentedString(sPhoneE164)).append("\n");
    sb.append("    sPhoneExtension: ").append(toIndentedString(sPhoneExtension)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiPhoneID");
    openapiFields.add("fkiPhonetypeID");
    openapiFields.add("ePhoneType");
    openapiFields.add("sPhoneE164");
    openapiFields.add("sPhoneExtension");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiPhoneID");
    openapiRequiredFields.add("fkiPhonetypeID");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PhoneResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PhoneResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PhoneResponse is not found in the empty JSON string", PhoneResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PhoneResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PhoneResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PhoneResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ePhoneType`
      if (jsonObj.get("ePhoneType") != null && !jsonObj.get("ePhoneType").isJsonNull()) {
        FieldEPhoneType.validateJsonElement(jsonObj.get("ePhoneType"));
      }
      if ((jsonObj.get("sPhoneE164") != null && !jsonObj.get("sPhoneE164").isJsonNull()) && !jsonObj.get("sPhoneE164").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sPhoneE164` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sPhoneE164").toString()));
      }
      if ((jsonObj.get("sPhoneExtension") != null && !jsonObj.get("sPhoneExtension").isJsonNull()) && !jsonObj.get("sPhoneExtension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sPhoneExtension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sPhoneExtension").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PhoneResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PhoneResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PhoneResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PhoneResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<PhoneResponse>() {
           @Override
           public void write(JsonWriter out, PhoneResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PhoneResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PhoneResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PhoneResponse
   * @throws IOException if the JSON string is invalid with respect to PhoneResponse
   */
  public static PhoneResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PhoneResponse.class);
  }

  /**
   * Convert an instance of PhoneResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

