/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The type of the Contact
 */
@JsonAdapter(FieldEContactType.Adapter.class)
public enum FieldEContactType {
  
  AGENT("Agent"),
  
  ASSISTANT("Assistant"),
  
  BANK_ACCOUNT("BankAccount"),
  
  BORROWER("Borrower"),
  
  BUYER("Buyer"),
  
  COMPANY("Company"),
  
  CONTRACT_CREATOR("ContractCreator"),
  
  CREDITCARDMERCHANT("Creditcardmerchant"),
  
  CUSTOMER("Customer"),
  
  DEPOSITRECEIPT("Depositreceipt"),
  
  EMPLOYEE("Employee"),
  
  EXTERNAL_BROKER("ExternalBroker"),
  
  EZSIGN_SIGNER("EzsignSigner"),
  
  EZSIGN_USER("EzsignUser"),
  
  EZCOM_AGENT("EzcomAgent"),
  
  EZCOM_APPROVER("EzcomApprover"),
  
  FINANCIAL_INSTITUTION("FinancialInstitution"),
  
  FRANCHISE_BROKER("FranchiseBroker"),
  
  FRANCHISEFRANCHISECONTACT("Franchisefranchisecontact"),
  
  FRANCHISEFRANCHISESIGNATORY("Franchisefranchisesignatory"),
  
  FRANCHISE_OFFICE_BROKER("FranchiseOfficeBroker"),
  
  FRANCHISE_COMPANY("FranchiseCompany"),
  
  FRANCHISE_OWNER("FranchiseOwner"),
  
  LEAD("Lead"),
  
  MARKETING_CAMPAIGN_SAMPLE("MarketingCampaignSample"),
  
  NOTARY("Notary"),
  
  PAYER("Payer"),
  
  PETOWNER("Petowner"),
  
  PRIVATE_TO("PrivateTo"),
  
  REWARD_MEMBER("RewardMember"),
  
  REWARD_REPRESENTATIVE("RewardRepresentative"),
  
  SELLER("Seller"),
  
  SHARED("Shared"),
  
  SUPPLIER("Supplier"),
  
  SURVEY("Survey"),
  
  INSPECTOR("Inspector");

  private String value;

  FieldEContactType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static FieldEContactType fromValue(String value) {
    for (FieldEContactType b : FieldEContactType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<FieldEContactType> {
    @Override
    public void write(final JsonWriter jsonWriter, final FieldEContactType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public FieldEContactType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return FieldEContactType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    FieldEContactType.fromValue(value);
  }
}

