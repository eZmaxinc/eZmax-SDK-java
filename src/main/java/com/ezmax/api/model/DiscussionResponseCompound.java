/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.CustomDiscussionconfigurationResponse;
import com.ezmax.api.model.DiscussionmembershipResponseCompound;
import com.ezmax.api.model.DiscussionmessageResponseCompound;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Discussion Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-28T05:38:24.783072930Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class DiscussionResponseCompound {
  public static final String SERIALIZED_NAME_PKI_DISCUSSION_I_D = "pkiDiscussionID";
  @SerializedName(SERIALIZED_NAME_PKI_DISCUSSION_I_D)
  private Integer pkiDiscussionID;

  public static final String SERIALIZED_NAME_S_DISCUSSION_DESCRIPTION = "sDiscussionDescription";
  @SerializedName(SERIALIZED_NAME_S_DISCUSSION_DESCRIPTION)
  private String sDiscussionDescription;

  public static final String SERIALIZED_NAME_B_DISCUSSION_CLOSED = "bDiscussionClosed";
  @SerializedName(SERIALIZED_NAME_B_DISCUSSION_CLOSED)
  private Boolean bDiscussionClosed;

  public static final String SERIALIZED_NAME_DT_DISCUSSION_LASTREAD = "dtDiscussionLastread";
  @SerializedName(SERIALIZED_NAME_DT_DISCUSSION_LASTREAD)
  private String dtDiscussionLastread;

  public static final String SERIALIZED_NAME_I_DISCUSSIONMESSAGE_COUNT = "iDiscussionmessageCount";
  @SerializedName(SERIALIZED_NAME_I_DISCUSSIONMESSAGE_COUNT)
  private Integer iDiscussionmessageCount;

  public static final String SERIALIZED_NAME_I_DISCUSSIONMESSAGE_COUNTUNREAD = "iDiscussionmessageCountunread";
  @SerializedName(SERIALIZED_NAME_I_DISCUSSIONMESSAGE_COUNTUNREAD)
  private Integer iDiscussionmessageCountunread;

  public static final String SERIALIZED_NAME_OBJ_DISCUSSIONCONFIGURATION = "objDiscussionconfiguration";
  @SerializedName(SERIALIZED_NAME_OBJ_DISCUSSIONCONFIGURATION)
  private CustomDiscussionconfigurationResponse objDiscussionconfiguration;

  public static final String SERIALIZED_NAME_A_OBJ_DISCUSSIONMEMBERSHIP = "a_objDiscussionmembership";
  @SerializedName(SERIALIZED_NAME_A_OBJ_DISCUSSIONMEMBERSHIP)
  private List<DiscussionmembershipResponseCompound> aObjDiscussionmembership = new ArrayList<>();

  public static final String SERIALIZED_NAME_A_OBJ_DISCUSSIONMESSAGE = "a_objDiscussionmessage";
  @SerializedName(SERIALIZED_NAME_A_OBJ_DISCUSSIONMESSAGE)
  private List<DiscussionmessageResponseCompound> aObjDiscussionmessage = new ArrayList<>();

  public DiscussionResponseCompound() {
  }

  public DiscussionResponseCompound pkiDiscussionID(Integer pkiDiscussionID) {
    this.pkiDiscussionID = pkiDiscussionID;
    return this;
  }

   /**
   * The unique ID of the Discussion
   * minimum: 0
   * maximum: 16777215
   * @return pkiDiscussionID
  **/
  @javax.annotation.Nonnull
  public Integer getPkiDiscussionID() {
    return pkiDiscussionID;
  }

  public void setPkiDiscussionID(Integer pkiDiscussionID) {
    this.pkiDiscussionID = pkiDiscussionID;
  }


  public DiscussionResponseCompound sDiscussionDescription(String sDiscussionDescription) {
    this.sDiscussionDescription = sDiscussionDescription;
    return this;
  }

   /**
   * The description of the Discussion
   * @return sDiscussionDescription
  **/
  @javax.annotation.Nonnull
  public String getsDiscussionDescription() {
    return sDiscussionDescription;
  }

  public void setsDiscussionDescription(String sDiscussionDescription) {
    this.sDiscussionDescription = sDiscussionDescription;
  }


  public DiscussionResponseCompound bDiscussionClosed(Boolean bDiscussionClosed) {
    this.bDiscussionClosed = bDiscussionClosed;
    return this;
  }

   /**
   * Whether if it&#39;s an closed
   * @return bDiscussionClosed
  **/
  @javax.annotation.Nonnull
  public Boolean getbDiscussionClosed() {
    return bDiscussionClosed;
  }

  public void setbDiscussionClosed(Boolean bDiscussionClosed) {
    this.bDiscussionClosed = bDiscussionClosed;
  }


  public DiscussionResponseCompound dtDiscussionLastread(String dtDiscussionLastread) {
    this.dtDiscussionLastread = dtDiscussionLastread;
    return this;
  }

   /**
   * The date the Discussion was last read
   * @return dtDiscussionLastread
  **/
  @javax.annotation.Nullable
  public String getDtDiscussionLastread() {
    return dtDiscussionLastread;
  }

  public void setDtDiscussionLastread(String dtDiscussionLastread) {
    this.dtDiscussionLastread = dtDiscussionLastread;
  }


  public DiscussionResponseCompound iDiscussionmessageCount(Integer iDiscussionmessageCount) {
    this.iDiscussionmessageCount = iDiscussionmessageCount;
    return this;
  }

   /**
   * The count of Attachment.
   * @return iDiscussionmessageCount
  **/
  @javax.annotation.Nonnull
  public Integer getiDiscussionmessageCount() {
    return iDiscussionmessageCount;
  }

  public void setiDiscussionmessageCount(Integer iDiscussionmessageCount) {
    this.iDiscussionmessageCount = iDiscussionmessageCount;
  }


  public DiscussionResponseCompound iDiscussionmessageCountunread(Integer iDiscussionmessageCountunread) {
    this.iDiscussionmessageCountunread = iDiscussionmessageCountunread;
    return this;
  }

   /**
   * The count of Attachment.
   * @return iDiscussionmessageCountunread
  **/
  @javax.annotation.Nonnull
  public Integer getiDiscussionmessageCountunread() {
    return iDiscussionmessageCountunread;
  }

  public void setiDiscussionmessageCountunread(Integer iDiscussionmessageCountunread) {
    this.iDiscussionmessageCountunread = iDiscussionmessageCountunread;
  }


  public DiscussionResponseCompound objDiscussionconfiguration(CustomDiscussionconfigurationResponse objDiscussionconfiguration) {
    this.objDiscussionconfiguration = objDiscussionconfiguration;
    return this;
  }

   /**
   * Get objDiscussionconfiguration
   * @return objDiscussionconfiguration
  **/
  @javax.annotation.Nullable
  public CustomDiscussionconfigurationResponse getObjDiscussionconfiguration() {
    return objDiscussionconfiguration;
  }

  public void setObjDiscussionconfiguration(CustomDiscussionconfigurationResponse objDiscussionconfiguration) {
    this.objDiscussionconfiguration = objDiscussionconfiguration;
  }


  public DiscussionResponseCompound aObjDiscussionmembership(List<DiscussionmembershipResponseCompound> aObjDiscussionmembership) {
    this.aObjDiscussionmembership = aObjDiscussionmembership;
    return this;
  }

  public DiscussionResponseCompound addAObjDiscussionmembershipItem(DiscussionmembershipResponseCompound aObjDiscussionmembershipItem) {
    if (this.aObjDiscussionmembership == null) {
      this.aObjDiscussionmembership = new ArrayList<>();
    }
    this.aObjDiscussionmembership.add(aObjDiscussionmembershipItem);
    return this;
  }

   /**
   * Get aObjDiscussionmembership
   * @return aObjDiscussionmembership
  **/
  @javax.annotation.Nonnull
  public List<DiscussionmembershipResponseCompound> getaObjDiscussionmembership() {
    return aObjDiscussionmembership;
  }

  public void setaObjDiscussionmembership(List<DiscussionmembershipResponseCompound> aObjDiscussionmembership) {
    this.aObjDiscussionmembership = aObjDiscussionmembership;
  }


  public DiscussionResponseCompound aObjDiscussionmessage(List<DiscussionmessageResponseCompound> aObjDiscussionmessage) {
    this.aObjDiscussionmessage = aObjDiscussionmessage;
    return this;
  }

  public DiscussionResponseCompound addAObjDiscussionmessageItem(DiscussionmessageResponseCompound aObjDiscussionmessageItem) {
    if (this.aObjDiscussionmessage == null) {
      this.aObjDiscussionmessage = new ArrayList<>();
    }
    this.aObjDiscussionmessage.add(aObjDiscussionmessageItem);
    return this;
  }

   /**
   * Get aObjDiscussionmessage
   * @return aObjDiscussionmessage
  **/
  @javax.annotation.Nonnull
  public List<DiscussionmessageResponseCompound> getaObjDiscussionmessage() {
    return aObjDiscussionmessage;
  }

  public void setaObjDiscussionmessage(List<DiscussionmessageResponseCompound> aObjDiscussionmessage) {
    this.aObjDiscussionmessage = aObjDiscussionmessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiscussionResponseCompound discussionResponseCompound = (DiscussionResponseCompound) o;
    return Objects.equals(this.pkiDiscussionID, discussionResponseCompound.pkiDiscussionID) &&
        Objects.equals(this.sDiscussionDescription, discussionResponseCompound.sDiscussionDescription) &&
        Objects.equals(this.bDiscussionClosed, discussionResponseCompound.bDiscussionClosed) &&
        Objects.equals(this.dtDiscussionLastread, discussionResponseCompound.dtDiscussionLastread) &&
        Objects.equals(this.iDiscussionmessageCount, discussionResponseCompound.iDiscussionmessageCount) &&
        Objects.equals(this.iDiscussionmessageCountunread, discussionResponseCompound.iDiscussionmessageCountunread) &&
        Objects.equals(this.objDiscussionconfiguration, discussionResponseCompound.objDiscussionconfiguration) &&
        Objects.equals(this.aObjDiscussionmembership, discussionResponseCompound.aObjDiscussionmembership) &&
        Objects.equals(this.aObjDiscussionmessage, discussionResponseCompound.aObjDiscussionmessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiDiscussionID, sDiscussionDescription, bDiscussionClosed, dtDiscussionLastread, iDiscussionmessageCount, iDiscussionmessageCountunread, objDiscussionconfiguration, aObjDiscussionmembership, aObjDiscussionmessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiscussionResponseCompound {\n");
    sb.append("    pkiDiscussionID: ").append(toIndentedString(pkiDiscussionID)).append("\n");
    sb.append("    sDiscussionDescription: ").append(toIndentedString(sDiscussionDescription)).append("\n");
    sb.append("    bDiscussionClosed: ").append(toIndentedString(bDiscussionClosed)).append("\n");
    sb.append("    dtDiscussionLastread: ").append(toIndentedString(dtDiscussionLastread)).append("\n");
    sb.append("    iDiscussionmessageCount: ").append(toIndentedString(iDiscussionmessageCount)).append("\n");
    sb.append("    iDiscussionmessageCountunread: ").append(toIndentedString(iDiscussionmessageCountunread)).append("\n");
    sb.append("    objDiscussionconfiguration: ").append(toIndentedString(objDiscussionconfiguration)).append("\n");
    sb.append("    aObjDiscussionmembership: ").append(toIndentedString(aObjDiscussionmembership)).append("\n");
    sb.append("    aObjDiscussionmessage: ").append(toIndentedString(aObjDiscussionmessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiDiscussionID");
    openapiFields.add("sDiscussionDescription");
    openapiFields.add("bDiscussionClosed");
    openapiFields.add("dtDiscussionLastread");
    openapiFields.add("iDiscussionmessageCount");
    openapiFields.add("iDiscussionmessageCountunread");
    openapiFields.add("objDiscussionconfiguration");
    openapiFields.add("a_objDiscussionmembership");
    openapiFields.add("a_objDiscussionmessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiDiscussionID");
    openapiRequiredFields.add("sDiscussionDescription");
    openapiRequiredFields.add("bDiscussionClosed");
    openapiRequiredFields.add("iDiscussionmessageCount");
    openapiRequiredFields.add("iDiscussionmessageCountunread");
    openapiRequiredFields.add("a_objDiscussionmembership");
    openapiRequiredFields.add("a_objDiscussionmessage");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DiscussionResponseCompound
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiscussionResponseCompound.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiscussionResponseCompound is not found in the empty JSON string", DiscussionResponseCompound.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiscussionResponseCompound.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiscussionResponseCompound` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DiscussionResponseCompound.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("sDiscussionDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sDiscussionDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sDiscussionDescription").toString()));
      }
      if ((jsonObj.get("dtDiscussionLastread") != null && !jsonObj.get("dtDiscussionLastread").isJsonNull()) && !jsonObj.get("dtDiscussionLastread").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dtDiscussionLastread` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dtDiscussionLastread").toString()));
      }
      // validate the optional field `objDiscussionconfiguration`
      if (jsonObj.get("objDiscussionconfiguration") != null && !jsonObj.get("objDiscussionconfiguration").isJsonNull()) {
        CustomDiscussionconfigurationResponse.validateJsonElement(jsonObj.get("objDiscussionconfiguration"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("a_objDiscussionmembership").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_objDiscussionmembership` to be an array in the JSON string but got `%s`", jsonObj.get("a_objDiscussionmembership").toString()));
      }

      JsonArray jsonArrayaObjDiscussionmembership = jsonObj.getAsJsonArray("a_objDiscussionmembership");
      // validate the required field `a_objDiscussionmembership` (array)
      for (int i = 0; i < jsonArrayaObjDiscussionmembership.size(); i++) {
        DiscussionmembershipResponseCompound.validateJsonElement(jsonArrayaObjDiscussionmembership.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("a_objDiscussionmessage").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_objDiscussionmessage` to be an array in the JSON string but got `%s`", jsonObj.get("a_objDiscussionmessage").toString()));
      }

      JsonArray jsonArrayaObjDiscussionmessage = jsonObj.getAsJsonArray("a_objDiscussionmessage");
      // validate the required field `a_objDiscussionmessage` (array)
      for (int i = 0; i < jsonArrayaObjDiscussionmessage.size(); i++) {
        DiscussionmessageResponseCompound.validateJsonElement(jsonArrayaObjDiscussionmessage.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiscussionResponseCompound.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiscussionResponseCompound' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiscussionResponseCompound> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiscussionResponseCompound.class));

       return (TypeAdapter<T>) new TypeAdapter<DiscussionResponseCompound>() {
           @Override
           public void write(JsonWriter out, DiscussionResponseCompound value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiscussionResponseCompound read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DiscussionResponseCompound given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DiscussionResponseCompound
  * @throws IOException if the JSON string is invalid with respect to DiscussionResponseCompound
  */
  public static DiscussionResponseCompound fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiscussionResponseCompound.class);
  }

 /**
  * Convert an instance of DiscussionResponseCompound to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

