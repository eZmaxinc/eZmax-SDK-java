/*
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.ezmax.api.model.CommonResponseObjSQLQuery;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * This is a generic debug object that is returned by all API requests
 */
@ApiModel(description = "This is a generic debug object that is returned by all API requests")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-02-17T15:45:54.914027Z[Etc/UTC]")
public class CommonResponseObjDebug {
  public static final String SERIALIZED_NAME_S_MEMORY_USAGE = "sMemoryUsage";
  @SerializedName(SERIALIZED_NAME_S_MEMORY_USAGE)
  private String sMemoryUsage;

  public static final String SERIALIZED_NAME_S_RUN_TIME = "sRunTime";
  @SerializedName(SERIALIZED_NAME_S_RUN_TIME)
  private String sRunTime;

  public static final String SERIALIZED_NAME_I_S_Q_L_SELECTS = "iSQLSelects";
  @SerializedName(SERIALIZED_NAME_I_S_Q_L_SELECTS)
  private Integer iSQLSelects;

  public static final String SERIALIZED_NAME_I_S_Q_L_QUERIES = "iSQLQueries";
  @SerializedName(SERIALIZED_NAME_I_S_Q_L_QUERIES)
  private Integer iSQLQueries;

  public static final String SERIALIZED_NAME_A_OBJ_S_Q_L_QUERY = "a_objSQLQuery";
  @SerializedName(SERIALIZED_NAME_A_OBJ_S_Q_L_QUERY)
  private List<CommonResponseObjSQLQuery> aObjSQLQuery = new ArrayList<>();

  public CommonResponseObjDebug() { 
  }

  public CommonResponseObjDebug sMemoryUsage(String sMemoryUsage) {
    
    this.sMemoryUsage = sMemoryUsage;
    return this;
  }

   /**
   * The peak memory allocated during the API request execution. Formatted as a human readable string
   * @return sMemoryUsage
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The peak memory allocated during the API request execution. Formatted as a human readable string")

  public String getsMemoryUsage() {
    return sMemoryUsage;
  }


  public void setsMemoryUsage(String sMemoryUsage) {
    this.sMemoryUsage = sMemoryUsage;
  }


  public CommonResponseObjDebug sRunTime(String sRunTime) {
    
    this.sRunTime = sRunTime;
    return this;
  }

   /**
   * The total server execution time of the API request execution. Formatted as a human readable string
   * @return sRunTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The total server execution time of the API request execution. Formatted as a human readable string")

  public String getsRunTime() {
    return sRunTime;
  }


  public void setsRunTime(String sRunTime) {
    this.sRunTime = sRunTime;
  }


  public CommonResponseObjDebug iSQLSelects(Integer iSQLSelects) {
    
    this.iSQLSelects = iSQLSelects;
    return this;
  }

   /**
   * The number of SQL SELECT queries that were sent to the database server during the API request execution
   * @return iSQLSelects
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The number of SQL SELECT queries that were sent to the database server during the API request execution")

  public Integer getiSQLSelects() {
    return iSQLSelects;
  }


  public void setiSQLSelects(Integer iSQLSelects) {
    this.iSQLSelects = iSQLSelects;
  }


  public CommonResponseObjDebug iSQLQueries(Integer iSQLQueries) {
    
    this.iSQLQueries = iSQLQueries;
    return this;
  }

   /**
   * The number of SQL INSERT/UPDATE/DELETE queries that were sent to the database server during the API request execution
   * @return iSQLQueries
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The number of SQL INSERT/UPDATE/DELETE queries that were sent to the database server during the API request execution")

  public Integer getiSQLQueries() {
    return iSQLQueries;
  }


  public void setiSQLQueries(Integer iSQLQueries) {
    this.iSQLQueries = iSQLQueries;
  }


  public CommonResponseObjDebug aObjSQLQuery(List<CommonResponseObjSQLQuery> aObjSQLQuery) {
    
    this.aObjSQLQuery = aObjSQLQuery;
    return this;
  }

  public CommonResponseObjDebug addAObjSQLQueryItem(CommonResponseObjSQLQuery aObjSQLQueryItem) {
    this.aObjSQLQuery.add(aObjSQLQueryItem);
    return this;
  }

   /**
   * An array of the SQL Queries that were executed during the API request execution
   * @return aObjSQLQuery
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An array of the SQL Queries that were executed during the API request execution")

  public List<CommonResponseObjSQLQuery> getaObjSQLQuery() {
    return aObjSQLQuery;
  }


  public void setaObjSQLQuery(List<CommonResponseObjSQLQuery> aObjSQLQuery) {
    this.aObjSQLQuery = aObjSQLQuery;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommonResponseObjDebug commonResponseObjDebug = (CommonResponseObjDebug) o;
    return Objects.equals(this.sMemoryUsage, commonResponseObjDebug.sMemoryUsage) &&
        Objects.equals(this.sRunTime, commonResponseObjDebug.sRunTime) &&
        Objects.equals(this.iSQLSelects, commonResponseObjDebug.iSQLSelects) &&
        Objects.equals(this.iSQLQueries, commonResponseObjDebug.iSQLQueries) &&
        Objects.equals(this.aObjSQLQuery, commonResponseObjDebug.aObjSQLQuery);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sMemoryUsage, sRunTime, iSQLSelects, iSQLQueries, aObjSQLQuery);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommonResponseObjDebug {\n");
    sb.append("    sMemoryUsage: ").append(toIndentedString(sMemoryUsage)).append("\n");
    sb.append("    sRunTime: ").append(toIndentedString(sRunTime)).append("\n");
    sb.append("    iSQLSelects: ").append(toIndentedString(iSQLSelects)).append("\n");
    sb.append("    iSQLQueries: ").append(toIndentedString(iSQLQueries)).append("\n");
    sb.append("    aObjSQLQuery: ").append(toIndentedString(aObjSQLQuery)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sMemoryUsage");
    openapiFields.add("sRunTime");
    openapiFields.add("iSQLSelects");
    openapiFields.add("iSQLQueries");
    openapiFields.add("a_objSQLQuery");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sMemoryUsage");
    openapiRequiredFields.add("sRunTime");
    openapiRequiredFields.add("iSQLSelects");
    openapiRequiredFields.add("iSQLQueries");
    openapiRequiredFields.add("a_objSQLQuery");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CommonResponseObjDebug
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CommonResponseObjDebug.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has reuqired fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommonResponseObjDebug is not found in the empty JSON string", CommonResponseObjDebug.openapiRequiredFields.toString()));
        }
      }
      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CommonResponseObjDebug.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommonResponseObjDebug` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CommonResponseObjDebug.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      JsonArray jsonArrayaObjSQLQuery = jsonObj.getAsJsonArray("a_objSQLQuery");
      // validate the optional field `a_objSQLQuery` (array)
      if (jsonArrayaObjSQLQuery != null) {
        for (int i = 0; i < jsonArrayaObjSQLQuery.size(); i++) {
          CommonResponseObjSQLQuery.validateJsonObject(jsonArrayaObjSQLQuery.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommonResponseObjDebug.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommonResponseObjDebug' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommonResponseObjDebug> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommonResponseObjDebug.class));

       return (TypeAdapter<T>) new TypeAdapter<CommonResponseObjDebug>() {
           @Override
           public void write(JsonWriter out, CommonResponseObjDebug value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommonResponseObjDebug read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CommonResponseObjDebug given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CommonResponseObjDebug
  * @throws IOException if the JSON string is invalid with respect to CommonResponseObjDebug
  */
  public static CommonResponseObjDebug fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommonResponseObjDebug.class);
  }

 /**
  * Convert an instance of CommonResponseObjDebug to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

