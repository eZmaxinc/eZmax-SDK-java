/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.FieldESignaturePreference;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Signature Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-05T14:47:58.834564157Z[Etc/UTC]", comments = "Generator version: 7.11.0")
public class SignatureResponseV3 {
  public static final String SERIALIZED_NAME_PKI_SIGNATURE_I_D = "pkiSignatureID";
  @SerializedName(SERIALIZED_NAME_PKI_SIGNATURE_I_D)
  @javax.annotation.Nonnull
  private Integer pkiSignatureID;

  public static final String SERIALIZED_NAME_FKI_FONT_I_D = "fkiFontID";
  @SerializedName(SERIALIZED_NAME_FKI_FONT_I_D)
  @javax.annotation.Nonnull
  private Integer fkiFontID;

  public static final String SERIALIZED_NAME_E_SIGNATURE_PREFERENCE = "eSignaturePreference";
  @SerializedName(SERIALIZED_NAME_E_SIGNATURE_PREFERENCE)
  @javax.annotation.Nonnull
  private FieldESignaturePreference eSignaturePreference;

  public static final String SERIALIZED_NAME_B_SIGNATURE_SVG = "bSignatureSvg";
  @SerializedName(SERIALIZED_NAME_B_SIGNATURE_SVG)
  @javax.annotation.Nonnull
  private Boolean bSignatureSvg;

  public static final String SERIALIZED_NAME_B_SIGNATURE_SVGINITIALS = "bSignatureSvginitials";
  @SerializedName(SERIALIZED_NAME_B_SIGNATURE_SVGINITIALS)
  @javax.annotation.Nonnull
  private Boolean bSignatureSvginitials;

  public SignatureResponseV3() {
  }

  public SignatureResponseV3 pkiSignatureID(@javax.annotation.Nonnull Integer pkiSignatureID) {
    this.pkiSignatureID = pkiSignatureID;
    return this;
  }

  /**
   * The unique ID of the Signature
   * minimum: 0
   * maximum: 16777215
   * @return pkiSignatureID
   */
  @javax.annotation.Nonnull
  public Integer getPkiSignatureID() {
    return pkiSignatureID;
  }

  public void setPkiSignatureID(@javax.annotation.Nonnull Integer pkiSignatureID) {
    this.pkiSignatureID = pkiSignatureID;
  }


  public SignatureResponseV3 fkiFontID(@javax.annotation.Nonnull Integer fkiFontID) {
    this.fkiFontID = fkiFontID;
    return this;
  }

  /**
   * The unique ID of the Font
   * minimum: 0
   * @return fkiFontID
   */
  @javax.annotation.Nonnull
  public Integer getFkiFontID() {
    return fkiFontID;
  }

  public void setFkiFontID(@javax.annotation.Nonnull Integer fkiFontID) {
    this.fkiFontID = fkiFontID;
  }


  public SignatureResponseV3 eSignaturePreference(@javax.annotation.Nonnull FieldESignaturePreference eSignaturePreference) {
    this.eSignaturePreference = eSignaturePreference;
    return this;
  }

  /**
   * Get eSignaturePreference
   * @return eSignaturePreference
   */
  @javax.annotation.Nonnull
  public FieldESignaturePreference geteSignaturePreference() {
    return eSignaturePreference;
  }

  public void seteSignaturePreference(@javax.annotation.Nonnull FieldESignaturePreference eSignaturePreference) {
    this.eSignaturePreference = eSignaturePreference;
  }


  public SignatureResponseV3 bSignatureSvg(@javax.annotation.Nonnull Boolean bSignatureSvg) {
    this.bSignatureSvg = bSignatureSvg;
    return this;
  }

  /**
   * Whether the signature has a SVG or not
   * @return bSignatureSvg
   */
  @javax.annotation.Nonnull
  public Boolean getbSignatureSvg() {
    return bSignatureSvg;
  }

  public void setbSignatureSvg(@javax.annotation.Nonnull Boolean bSignatureSvg) {
    this.bSignatureSvg = bSignatureSvg;
  }


  public SignatureResponseV3 bSignatureSvginitials(@javax.annotation.Nonnull Boolean bSignatureSvginitials) {
    this.bSignatureSvginitials = bSignatureSvginitials;
    return this;
  }

  /**
   * Whether the initials has a SVG or not
   * @return bSignatureSvginitials
   */
  @javax.annotation.Nonnull
  public Boolean getbSignatureSvginitials() {
    return bSignatureSvginitials;
  }

  public void setbSignatureSvginitials(@javax.annotation.Nonnull Boolean bSignatureSvginitials) {
    this.bSignatureSvginitials = bSignatureSvginitials;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignatureResponseV3 signatureResponseV3 = (SignatureResponseV3) o;
    return Objects.equals(this.pkiSignatureID, signatureResponseV3.pkiSignatureID) &&
        Objects.equals(this.fkiFontID, signatureResponseV3.fkiFontID) &&
        Objects.equals(this.eSignaturePreference, signatureResponseV3.eSignaturePreference) &&
        Objects.equals(this.bSignatureSvg, signatureResponseV3.bSignatureSvg) &&
        Objects.equals(this.bSignatureSvginitials, signatureResponseV3.bSignatureSvginitials);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiSignatureID, fkiFontID, eSignaturePreference, bSignatureSvg, bSignatureSvginitials);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignatureResponseV3 {\n");
    sb.append("    pkiSignatureID: ").append(toIndentedString(pkiSignatureID)).append("\n");
    sb.append("    fkiFontID: ").append(toIndentedString(fkiFontID)).append("\n");
    sb.append("    eSignaturePreference: ").append(toIndentedString(eSignaturePreference)).append("\n");
    sb.append("    bSignatureSvg: ").append(toIndentedString(bSignatureSvg)).append("\n");
    sb.append("    bSignatureSvginitials: ").append(toIndentedString(bSignatureSvginitials)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiSignatureID");
    openapiFields.add("fkiFontID");
    openapiFields.add("eSignaturePreference");
    openapiFields.add("bSignatureSvg");
    openapiFields.add("bSignatureSvginitials");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiSignatureID");
    openapiRequiredFields.add("fkiFontID");
    openapiRequiredFields.add("eSignaturePreference");
    openapiRequiredFields.add("bSignatureSvg");
    openapiRequiredFields.add("bSignatureSvginitials");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SignatureResponseV3
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SignatureResponseV3.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SignatureResponseV3 is not found in the empty JSON string", SignatureResponseV3.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SignatureResponseV3.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SignatureResponseV3` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SignatureResponseV3.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `eSignaturePreference`
      FieldESignaturePreference.validateJsonElement(jsonObj.get("eSignaturePreference"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SignatureResponseV3.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SignatureResponseV3' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SignatureResponseV3> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SignatureResponseV3.class));

       return (TypeAdapter<T>) new TypeAdapter<SignatureResponseV3>() {
           @Override
           public void write(JsonWriter out, SignatureResponseV3 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SignatureResponseV3 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SignatureResponseV3 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SignatureResponseV3
   * @throws IOException if the JSON string is invalid with respect to SignatureResponseV3
   */
  public static SignatureResponseV3 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SignatureResponseV3.class);
  }

  /**
   * Convert an instance of SignatureResponseV3 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

