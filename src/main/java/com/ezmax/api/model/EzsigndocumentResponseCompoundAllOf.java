/*
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.ezmax.api.model.CustomEzsignfoldersignerassociationstatusResponse;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * EzsigndocumentResponseCompoundAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-02-08T15:56:57.693377Z[Etc/UTC]")
public class EzsigndocumentResponseCompoundAllOf {
  public static final String SERIALIZED_NAME_I_EZSIGNDOCUMENT_STEPFORMTOTAL = "iEzsigndocumentStepformtotal";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNDOCUMENT_STEPFORMTOTAL)
  private Integer iEzsigndocumentStepformtotal;

  public static final String SERIALIZED_NAME_I_EZSIGNDOCUMENT_STEPFORMCURRENT = "iEzsigndocumentStepformcurrent";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNDOCUMENT_STEPFORMCURRENT)
  private Integer iEzsigndocumentStepformcurrent;

  public static final String SERIALIZED_NAME_I_EZSIGNDOCUMENT_STEPSIGNATURETOTAL = "iEzsigndocumentStepsignaturetotal";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNDOCUMENT_STEPSIGNATURETOTAL)
  private Integer iEzsigndocumentStepsignaturetotal;

  public static final String SERIALIZED_NAME_I_EZSIGNDOCUMENT_STEPSIGNATURE_CURRENT = "iEzsigndocumentStepsignatureCurrent";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNDOCUMENT_STEPSIGNATURE_CURRENT)
  private Integer iEzsigndocumentStepsignatureCurrent;

  public static final String SERIALIZED_NAME_A_OBJ_EZSIGNFOLDERSIGNERASSOCIATIONSTATUS = "a_objEzsignfoldersignerassociationstatus";
  @SerializedName(SERIALIZED_NAME_A_OBJ_EZSIGNFOLDERSIGNERASSOCIATIONSTATUS)
  private List<CustomEzsignfoldersignerassociationstatusResponse> aObjEzsignfoldersignerassociationstatus = new ArrayList<CustomEzsignfoldersignerassociationstatusResponse>();

  public EzsigndocumentResponseCompoundAllOf() { 
  }

  public EzsigndocumentResponseCompoundAllOf iEzsigndocumentStepformtotal(Integer iEzsigndocumentStepformtotal) {
    
    this.iEzsigndocumentStepformtotal = iEzsigndocumentStepformtotal;
    return this;
  }

   /**
   * The total number of steps in the form filling phase
   * @return iEzsigndocumentStepformtotal
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2", required = true, value = "The total number of steps in the form filling phase")

  public Integer getiEzsigndocumentStepformtotal() {
    return iEzsigndocumentStepformtotal;
  }


  public void setiEzsigndocumentStepformtotal(Integer iEzsigndocumentStepformtotal) {
    this.iEzsigndocumentStepformtotal = iEzsigndocumentStepformtotal;
  }


  public EzsigndocumentResponseCompoundAllOf iEzsigndocumentStepformcurrent(Integer iEzsigndocumentStepformcurrent) {
    
    this.iEzsigndocumentStepformcurrent = iEzsigndocumentStepformcurrent;
    return this;
  }

   /**
   * The current step in the form filling phase
   * @return iEzsigndocumentStepformcurrent
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1", required = true, value = "The current step in the form filling phase")

  public Integer getiEzsigndocumentStepformcurrent() {
    return iEzsigndocumentStepformcurrent;
  }


  public void setiEzsigndocumentStepformcurrent(Integer iEzsigndocumentStepformcurrent) {
    this.iEzsigndocumentStepformcurrent = iEzsigndocumentStepformcurrent;
  }


  public EzsigndocumentResponseCompoundAllOf iEzsigndocumentStepsignaturetotal(Integer iEzsigndocumentStepsignaturetotal) {
    
    this.iEzsigndocumentStepsignaturetotal = iEzsigndocumentStepsignaturetotal;
    return this;
  }

   /**
   * The total number of steps in the signature filling phase
   * @return iEzsigndocumentStepsignaturetotal
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2", required = true, value = "The total number of steps in the signature filling phase")

  public Integer getiEzsigndocumentStepsignaturetotal() {
    return iEzsigndocumentStepsignaturetotal;
  }


  public void setiEzsigndocumentStepsignaturetotal(Integer iEzsigndocumentStepsignaturetotal) {
    this.iEzsigndocumentStepsignaturetotal = iEzsigndocumentStepsignaturetotal;
  }


  public EzsigndocumentResponseCompoundAllOf iEzsigndocumentStepsignatureCurrent(Integer iEzsigndocumentStepsignatureCurrent) {
    
    this.iEzsigndocumentStepsignatureCurrent = iEzsigndocumentStepsignatureCurrent;
    return this;
  }

   /**
   * The current step in the signature phase
   * @return iEzsigndocumentStepsignatureCurrent
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0", required = true, value = "The current step in the signature phase")

  public Integer getiEzsigndocumentStepsignatureCurrent() {
    return iEzsigndocumentStepsignatureCurrent;
  }


  public void setiEzsigndocumentStepsignatureCurrent(Integer iEzsigndocumentStepsignatureCurrent) {
    this.iEzsigndocumentStepsignatureCurrent = iEzsigndocumentStepsignatureCurrent;
  }


  public EzsigndocumentResponseCompoundAllOf aObjEzsignfoldersignerassociationstatus(List<CustomEzsignfoldersignerassociationstatusResponse> aObjEzsignfoldersignerassociationstatus) {
    
    this.aObjEzsignfoldersignerassociationstatus = aObjEzsignfoldersignerassociationstatus;
    return this;
  }

  public EzsigndocumentResponseCompoundAllOf addAObjEzsignfoldersignerassociationstatusItem(CustomEzsignfoldersignerassociationstatusResponse aObjEzsignfoldersignerassociationstatusItem) {
    this.aObjEzsignfoldersignerassociationstatus.add(aObjEzsignfoldersignerassociationstatusItem);
    return this;
  }

   /**
   * Get aObjEzsignfoldersignerassociationstatus
   * @return aObjEzsignfoldersignerassociationstatus
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<CustomEzsignfoldersignerassociationstatusResponse> getaObjEzsignfoldersignerassociationstatus() {
    return aObjEzsignfoldersignerassociationstatus;
  }


  public void setaObjEzsignfoldersignerassociationstatus(List<CustomEzsignfoldersignerassociationstatusResponse> aObjEzsignfoldersignerassociationstatus) {
    this.aObjEzsignfoldersignerassociationstatus = aObjEzsignfoldersignerassociationstatus;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsigndocumentResponseCompoundAllOf ezsigndocumentResponseCompoundAllOf = (EzsigndocumentResponseCompoundAllOf) o;
    return Objects.equals(this.iEzsigndocumentStepformtotal, ezsigndocumentResponseCompoundAllOf.iEzsigndocumentStepformtotal) &&
        Objects.equals(this.iEzsigndocumentStepformcurrent, ezsigndocumentResponseCompoundAllOf.iEzsigndocumentStepformcurrent) &&
        Objects.equals(this.iEzsigndocumentStepsignaturetotal, ezsigndocumentResponseCompoundAllOf.iEzsigndocumentStepsignaturetotal) &&
        Objects.equals(this.iEzsigndocumentStepsignatureCurrent, ezsigndocumentResponseCompoundAllOf.iEzsigndocumentStepsignatureCurrent) &&
        Objects.equals(this.aObjEzsignfoldersignerassociationstatus, ezsigndocumentResponseCompoundAllOf.aObjEzsignfoldersignerassociationstatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(iEzsigndocumentStepformtotal, iEzsigndocumentStepformcurrent, iEzsigndocumentStepsignaturetotal, iEzsigndocumentStepsignatureCurrent, aObjEzsignfoldersignerassociationstatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsigndocumentResponseCompoundAllOf {\n");
    sb.append("    iEzsigndocumentStepformtotal: ").append(toIndentedString(iEzsigndocumentStepformtotal)).append("\n");
    sb.append("    iEzsigndocumentStepformcurrent: ").append(toIndentedString(iEzsigndocumentStepformcurrent)).append("\n");
    sb.append("    iEzsigndocumentStepsignaturetotal: ").append(toIndentedString(iEzsigndocumentStepsignaturetotal)).append("\n");
    sb.append("    iEzsigndocumentStepsignatureCurrent: ").append(toIndentedString(iEzsigndocumentStepsignatureCurrent)).append("\n");
    sb.append("    aObjEzsignfoldersignerassociationstatus: ").append(toIndentedString(aObjEzsignfoldersignerassociationstatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("iEzsigndocumentStepformtotal");
    openapiFields.add("iEzsigndocumentStepformcurrent");
    openapiFields.add("iEzsigndocumentStepsignaturetotal");
    openapiFields.add("iEzsigndocumentStepsignatureCurrent");
    openapiFields.add("a_objEzsignfoldersignerassociationstatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("iEzsigndocumentStepformtotal");
    openapiRequiredFields.add("iEzsigndocumentStepformcurrent");
    openapiRequiredFields.add("iEzsigndocumentStepsignaturetotal");
    openapiRequiredFields.add("iEzsigndocumentStepsignatureCurrent");
    openapiRequiredFields.add("a_objEzsignfoldersignerassociationstatus");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EzsigndocumentResponseCompoundAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (EzsigndocumentResponseCompoundAllOf.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has reuqired fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsigndocumentResponseCompoundAllOf is not found in the empty JSON string", EzsigndocumentResponseCompoundAllOf.openapiRequiredFields.toString()));
        }
      }
      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EzsigndocumentResponseCompoundAllOf.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsigndocumentResponseCompoundAllOf` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EzsigndocumentResponseCompoundAllOf.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      JsonArray jsonArrayaObjEzsignfoldersignerassociationstatus = jsonObj.getAsJsonArray("a_objEzsignfoldersignerassociationstatus");
      // validate the optional field `a_objEzsignfoldersignerassociationstatus` (array)
      if (jsonArrayaObjEzsignfoldersignerassociationstatus != null) {
        for (int i = 0; i < jsonArrayaObjEzsignfoldersignerassociationstatus.size(); i++) {
          CustomEzsignfoldersignerassociationstatusResponse.validateJsonObject(jsonArrayaObjEzsignfoldersignerassociationstatus.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsigndocumentResponseCompoundAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsigndocumentResponseCompoundAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsigndocumentResponseCompoundAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsigndocumentResponseCompoundAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsigndocumentResponseCompoundAllOf>() {
           @Override
           public void write(JsonWriter out, EzsigndocumentResponseCompoundAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsigndocumentResponseCompoundAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EzsigndocumentResponseCompoundAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EzsigndocumentResponseCompoundAllOf
  * @throws IOException if the JSON string is invalid with respect to EzsigndocumentResponseCompoundAllOf
  */
  public static EzsigndocumentResponseCompoundAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsigndocumentResponseCompoundAllOf.class);
  }

 /**
  * Convert an instance of EzsigndocumentResponseCompoundAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

