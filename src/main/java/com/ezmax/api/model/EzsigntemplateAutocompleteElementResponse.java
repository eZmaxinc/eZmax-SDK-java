/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.17
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.ezmax.api.model.FieldEEzsignfoldertypePrivacylevel;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Ezsigntemplate AutocompleteElement Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-14T19:36:47.745067393Z[Etc/UTC]")
public class EzsigntemplateAutocompleteElementResponse {
  public static final String SERIALIZED_NAME_E_EZSIGNFOLDERTYPE_PRIVACYLEVEL = "eEzsignfoldertypePrivacylevel";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNFOLDERTYPE_PRIVACYLEVEL)
  private FieldEEzsignfoldertypePrivacylevel eEzsignfoldertypePrivacylevel;

  public static final String SERIALIZED_NAME_S_EZSIGNTEMPLATE_DESCRIPTION = "sEzsigntemplateDescription";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNTEMPLATE_DESCRIPTION)
  private String sEzsigntemplateDescription;

  public static final String SERIALIZED_NAME_PKI_EZSIGNTEMPLATE_I_D = "pkiEzsigntemplateID";
  @SerializedName(SERIALIZED_NAME_PKI_EZSIGNTEMPLATE_I_D)
  private Integer pkiEzsigntemplateID;

  public static final String SERIALIZED_NAME_B_EZSIGNTEMPLATE_ISACTIVE = "bEzsigntemplateIsactive";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNTEMPLATE_ISACTIVE)
  private Boolean bEzsigntemplateIsactive;

  public EzsigntemplateAutocompleteElementResponse() {
  }

  public EzsigntemplateAutocompleteElementResponse eEzsignfoldertypePrivacylevel(FieldEEzsignfoldertypePrivacylevel eEzsignfoldertypePrivacylevel) {
    
    this.eEzsignfoldertypePrivacylevel = eEzsignfoldertypePrivacylevel;
    return this;
  }

   /**
   * Get eEzsignfoldertypePrivacylevel
   * @return eEzsignfoldertypePrivacylevel
  **/
  @javax.annotation.Nonnull

  public FieldEEzsignfoldertypePrivacylevel geteEzsignfoldertypePrivacylevel() {
    return eEzsignfoldertypePrivacylevel;
  }


  public void seteEzsignfoldertypePrivacylevel(FieldEEzsignfoldertypePrivacylevel eEzsignfoldertypePrivacylevel) {
    this.eEzsignfoldertypePrivacylevel = eEzsignfoldertypePrivacylevel;
  }


  public EzsigntemplateAutocompleteElementResponse sEzsigntemplateDescription(String sEzsigntemplateDescription) {
    
    this.sEzsigntemplateDescription = sEzsigntemplateDescription;
    return this;
  }

   /**
   * The description of the Ezsigntemplate
   * @return sEzsigntemplateDescription
  **/
  @javax.annotation.Nonnull

  public String getsEzsigntemplateDescription() {
    return sEzsigntemplateDescription;
  }


  public void setsEzsigntemplateDescription(String sEzsigntemplateDescription) {
    this.sEzsigntemplateDescription = sEzsigntemplateDescription;
  }


  public EzsigntemplateAutocompleteElementResponse pkiEzsigntemplateID(Integer pkiEzsigntemplateID) {
    
    this.pkiEzsigntemplateID = pkiEzsigntemplateID;
    return this;
  }

   /**
   * The unique ID of the Ezsigntemplate
   * minimum: 0
   * @return pkiEzsigntemplateID
  **/
  @javax.annotation.Nonnull

  public Integer getPkiEzsigntemplateID() {
    return pkiEzsigntemplateID;
  }


  public void setPkiEzsigntemplateID(Integer pkiEzsigntemplateID) {
    this.pkiEzsigntemplateID = pkiEzsigntemplateID;
  }


  public EzsigntemplateAutocompleteElementResponse bEzsigntemplateIsactive(Boolean bEzsigntemplateIsactive) {
    
    this.bEzsigntemplateIsactive = bEzsigntemplateIsactive;
    return this;
  }

   /**
   * Whether the Ezsigntemplate is active or not
   * @return bEzsigntemplateIsactive
  **/
  @javax.annotation.Nonnull

  public Boolean getbEzsigntemplateIsactive() {
    return bEzsigntemplateIsactive;
  }


  public void setbEzsigntemplateIsactive(Boolean bEzsigntemplateIsactive) {
    this.bEzsigntemplateIsactive = bEzsigntemplateIsactive;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsigntemplateAutocompleteElementResponse ezsigntemplateAutocompleteElementResponse = (EzsigntemplateAutocompleteElementResponse) o;
    return Objects.equals(this.eEzsignfoldertypePrivacylevel, ezsigntemplateAutocompleteElementResponse.eEzsignfoldertypePrivacylevel) &&
        Objects.equals(this.sEzsigntemplateDescription, ezsigntemplateAutocompleteElementResponse.sEzsigntemplateDescription) &&
        Objects.equals(this.pkiEzsigntemplateID, ezsigntemplateAutocompleteElementResponse.pkiEzsigntemplateID) &&
        Objects.equals(this.bEzsigntemplateIsactive, ezsigntemplateAutocompleteElementResponse.bEzsigntemplateIsactive);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eEzsignfoldertypePrivacylevel, sEzsigntemplateDescription, pkiEzsigntemplateID, bEzsigntemplateIsactive);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsigntemplateAutocompleteElementResponse {\n");
    sb.append("    eEzsignfoldertypePrivacylevel: ").append(toIndentedString(eEzsignfoldertypePrivacylevel)).append("\n");
    sb.append("    sEzsigntemplateDescription: ").append(toIndentedString(sEzsigntemplateDescription)).append("\n");
    sb.append("    pkiEzsigntemplateID: ").append(toIndentedString(pkiEzsigntemplateID)).append("\n");
    sb.append("    bEzsigntemplateIsactive: ").append(toIndentedString(bEzsigntemplateIsactive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eEzsignfoldertypePrivacylevel");
    openapiFields.add("sEzsigntemplateDescription");
    openapiFields.add("pkiEzsigntemplateID");
    openapiFields.add("bEzsigntemplateIsactive");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("eEzsignfoldertypePrivacylevel");
    openapiRequiredFields.add("sEzsigntemplateDescription");
    openapiRequiredFields.add("pkiEzsigntemplateID");
    openapiRequiredFields.add("bEzsigntemplateIsactive");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EzsigntemplateAutocompleteElementResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EzsigntemplateAutocompleteElementResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsigntemplateAutocompleteElementResponse is not found in the empty JSON string", EzsigntemplateAutocompleteElementResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EzsigntemplateAutocompleteElementResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsigntemplateAutocompleteElementResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EzsigntemplateAutocompleteElementResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("sEzsigntemplateDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsigntemplateDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsigntemplateDescription").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsigntemplateAutocompleteElementResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsigntemplateAutocompleteElementResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsigntemplateAutocompleteElementResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsigntemplateAutocompleteElementResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsigntemplateAutocompleteElementResponse>() {
           @Override
           public void write(JsonWriter out, EzsigntemplateAutocompleteElementResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsigntemplateAutocompleteElementResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EzsigntemplateAutocompleteElementResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EzsigntemplateAutocompleteElementResponse
  * @throws IOException if the JSON string is invalid with respect to EzsigntemplateAutocompleteElementResponse
  */
  public static EzsigntemplateAutocompleteElementResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsigntemplateAutocompleteElementResponse.class);
  }

 /**
  * Convert an instance of EzsigntemplateAutocompleteElementResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

