/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.FieldEUserEzsignaccess;
import com.ezmax.api.model.FieldEUserOrigin;
import com.ezmax.api.model.FieldEUserType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A User List Element
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-05T21:55:04.724341195Z[Etc/UTC]", comments = "Generator version: 7.11.0")
public class UserListElement {
  public static final String SERIALIZED_NAME_PKI_USER_I_D = "pkiUserID";
  @SerializedName(SERIALIZED_NAME_PKI_USER_I_D)
  @javax.annotation.Nonnull
  private Integer pkiUserID;

  public static final String SERIALIZED_NAME_S_USER_FIRSTNAME = "sUserFirstname";
  @SerializedName(SERIALIZED_NAME_S_USER_FIRSTNAME)
  @javax.annotation.Nonnull
  private String sUserFirstname;

  public static final String SERIALIZED_NAME_S_USER_LASTNAME = "sUserLastname";
  @SerializedName(SERIALIZED_NAME_S_USER_LASTNAME)
  @javax.annotation.Nonnull
  private String sUserLastname;

  public static final String SERIALIZED_NAME_S_USER_LOGINNAME = "sUserLoginname";
  @SerializedName(SERIALIZED_NAME_S_USER_LOGINNAME)
  @javax.annotation.Nonnull
  private String sUserLoginname;

  public static final String SERIALIZED_NAME_B_USER_ISACTIVE = "bUserIsactive";
  @SerializedName(SERIALIZED_NAME_B_USER_ISACTIVE)
  @javax.annotation.Nonnull
  private Boolean bUserIsactive;

  public static final String SERIALIZED_NAME_E_USER_TYPE = "eUserType";
  @SerializedName(SERIALIZED_NAME_E_USER_TYPE)
  @javax.annotation.Nonnull
  private FieldEUserType eUserType;

  public static final String SERIALIZED_NAME_E_USER_ORIGIN = "eUserOrigin";
  @SerializedName(SERIALIZED_NAME_E_USER_ORIGIN)
  @javax.annotation.Nonnull
  private FieldEUserOrigin eUserOrigin;

  public static final String SERIALIZED_NAME_E_USER_EZSIGNACCESS = "eUserEzsignaccess";
  @SerializedName(SERIALIZED_NAME_E_USER_EZSIGNACCESS)
  @javax.annotation.Nonnull
  private FieldEUserEzsignaccess eUserEzsignaccess;

  public static final String SERIALIZED_NAME_DT_USER_EZSIGNPREPAIDEXPIRATION = "dtUserEzsignprepaidexpiration";
  @SerializedName(SERIALIZED_NAME_DT_USER_EZSIGNPREPAIDEXPIRATION)
  @javax.annotation.Nullable
  private String dtUserEzsignprepaidexpiration;

  public static final String SERIALIZED_NAME_S_EMAIL_ADDRESS = "sEmailAddress";
  @SerializedName(SERIALIZED_NAME_S_EMAIL_ADDRESS)
  @javax.annotation.Nonnull
  private String sEmailAddress;

  public static final String SERIALIZED_NAME_S_USER_JOBTITLE = "sUserJobtitle";
  @SerializedName(SERIALIZED_NAME_S_USER_JOBTITLE)
  @javax.annotation.Nullable
  private String sUserJobtitle;

  public UserListElement() {
  }

  public UserListElement pkiUserID(@javax.annotation.Nonnull Integer pkiUserID) {
    this.pkiUserID = pkiUserID;
    return this;
  }

  /**
   * The unique ID of the User
   * minimum: 0
   * @return pkiUserID
   */
  @javax.annotation.Nonnull
  public Integer getPkiUserID() {
    return pkiUserID;
  }

  public void setPkiUserID(@javax.annotation.Nonnull Integer pkiUserID) {
    this.pkiUserID = pkiUserID;
  }


  public UserListElement sUserFirstname(@javax.annotation.Nonnull String sUserFirstname) {
    this.sUserFirstname = sUserFirstname;
    return this;
  }

  /**
   * The first name of the user
   * @return sUserFirstname
   */
  @javax.annotation.Nonnull
  public String getsUserFirstname() {
    return sUserFirstname;
  }

  public void setsUserFirstname(@javax.annotation.Nonnull String sUserFirstname) {
    this.sUserFirstname = sUserFirstname;
  }


  public UserListElement sUserLastname(@javax.annotation.Nonnull String sUserLastname) {
    this.sUserLastname = sUserLastname;
    return this;
  }

  /**
   * The last name of the user
   * @return sUserLastname
   */
  @javax.annotation.Nonnull
  public String getsUserLastname() {
    return sUserLastname;
  }

  public void setsUserLastname(@javax.annotation.Nonnull String sUserLastname) {
    this.sUserLastname = sUserLastname;
  }


  public UserListElement sUserLoginname(@javax.annotation.Nonnull String sUserLoginname) {
    this.sUserLoginname = sUserLoginname;
    return this;
  }

  /**
   * The login name of the User.
   * @return sUserLoginname
   */
  @javax.annotation.Nonnull
  public String getsUserLoginname() {
    return sUserLoginname;
  }

  public void setsUserLoginname(@javax.annotation.Nonnull String sUserLoginname) {
    this.sUserLoginname = sUserLoginname;
  }


  public UserListElement bUserIsactive(@javax.annotation.Nonnull Boolean bUserIsactive) {
    this.bUserIsactive = bUserIsactive;
    return this;
  }

  /**
   * Whether the User is active or not
   * @return bUserIsactive
   */
  @javax.annotation.Nonnull
  public Boolean getbUserIsactive() {
    return bUserIsactive;
  }

  public void setbUserIsactive(@javax.annotation.Nonnull Boolean bUserIsactive) {
    this.bUserIsactive = bUserIsactive;
  }


  public UserListElement eUserType(@javax.annotation.Nonnull FieldEUserType eUserType) {
    this.eUserType = eUserType;
    return this;
  }

  /**
   * Get eUserType
   * @return eUserType
   */
  @javax.annotation.Nonnull
  public FieldEUserType geteUserType() {
    return eUserType;
  }

  public void seteUserType(@javax.annotation.Nonnull FieldEUserType eUserType) {
    this.eUserType = eUserType;
  }


  public UserListElement eUserOrigin(@javax.annotation.Nonnull FieldEUserOrigin eUserOrigin) {
    this.eUserOrigin = eUserOrigin;
    return this;
  }

  /**
   * Get eUserOrigin
   * @return eUserOrigin
   */
  @javax.annotation.Nonnull
  public FieldEUserOrigin geteUserOrigin() {
    return eUserOrigin;
  }

  public void seteUserOrigin(@javax.annotation.Nonnull FieldEUserOrigin eUserOrigin) {
    this.eUserOrigin = eUserOrigin;
  }


  public UserListElement eUserEzsignaccess(@javax.annotation.Nonnull FieldEUserEzsignaccess eUserEzsignaccess) {
    this.eUserEzsignaccess = eUserEzsignaccess;
    return this;
  }

  /**
   * Get eUserEzsignaccess
   * @return eUserEzsignaccess
   */
  @javax.annotation.Nonnull
  public FieldEUserEzsignaccess geteUserEzsignaccess() {
    return eUserEzsignaccess;
  }

  public void seteUserEzsignaccess(@javax.annotation.Nonnull FieldEUserEzsignaccess eUserEzsignaccess) {
    this.eUserEzsignaccess = eUserEzsignaccess;
  }


  public UserListElement dtUserEzsignprepaidexpiration(@javax.annotation.Nullable String dtUserEzsignprepaidexpiration) {
    this.dtUserEzsignprepaidexpiration = dtUserEzsignprepaidexpiration;
    return this;
  }

  /**
   * The eZsign prepaid expiration date
   * @return dtUserEzsignprepaidexpiration
   */
  @javax.annotation.Nullable
  public String getDtUserEzsignprepaidexpiration() {
    return dtUserEzsignprepaidexpiration;
  }

  public void setDtUserEzsignprepaidexpiration(@javax.annotation.Nullable String dtUserEzsignprepaidexpiration) {
    this.dtUserEzsignprepaidexpiration = dtUserEzsignprepaidexpiration;
  }


  public UserListElement sEmailAddress(@javax.annotation.Nonnull String sEmailAddress) {
    this.sEmailAddress = sEmailAddress;
    return this;
  }

  /**
   * The email address.
   * @return sEmailAddress
   */
  @javax.annotation.Nonnull
  public String getsEmailAddress() {
    return sEmailAddress;
  }

  public void setsEmailAddress(@javax.annotation.Nonnull String sEmailAddress) {
    this.sEmailAddress = sEmailAddress;
  }


  public UserListElement sUserJobtitle(@javax.annotation.Nullable String sUserJobtitle) {
    this.sUserJobtitle = sUserJobtitle;
    return this;
  }

  /**
   * The job title of the user
   * @return sUserJobtitle
   */
  @javax.annotation.Nullable
  public String getsUserJobtitle() {
    return sUserJobtitle;
  }

  public void setsUserJobtitle(@javax.annotation.Nullable String sUserJobtitle) {
    this.sUserJobtitle = sUserJobtitle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserListElement userListElement = (UserListElement) o;
    return Objects.equals(this.pkiUserID, userListElement.pkiUserID) &&
        Objects.equals(this.sUserFirstname, userListElement.sUserFirstname) &&
        Objects.equals(this.sUserLastname, userListElement.sUserLastname) &&
        Objects.equals(this.sUserLoginname, userListElement.sUserLoginname) &&
        Objects.equals(this.bUserIsactive, userListElement.bUserIsactive) &&
        Objects.equals(this.eUserType, userListElement.eUserType) &&
        Objects.equals(this.eUserOrigin, userListElement.eUserOrigin) &&
        Objects.equals(this.eUserEzsignaccess, userListElement.eUserEzsignaccess) &&
        Objects.equals(this.dtUserEzsignprepaidexpiration, userListElement.dtUserEzsignprepaidexpiration) &&
        Objects.equals(this.sEmailAddress, userListElement.sEmailAddress) &&
        Objects.equals(this.sUserJobtitle, userListElement.sUserJobtitle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiUserID, sUserFirstname, sUserLastname, sUserLoginname, bUserIsactive, eUserType, eUserOrigin, eUserEzsignaccess, dtUserEzsignprepaidexpiration, sEmailAddress, sUserJobtitle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserListElement {\n");
    sb.append("    pkiUserID: ").append(toIndentedString(pkiUserID)).append("\n");
    sb.append("    sUserFirstname: ").append(toIndentedString(sUserFirstname)).append("\n");
    sb.append("    sUserLastname: ").append(toIndentedString(sUserLastname)).append("\n");
    sb.append("    sUserLoginname: ").append(toIndentedString(sUserLoginname)).append("\n");
    sb.append("    bUserIsactive: ").append(toIndentedString(bUserIsactive)).append("\n");
    sb.append("    eUserType: ").append(toIndentedString(eUserType)).append("\n");
    sb.append("    eUserOrigin: ").append(toIndentedString(eUserOrigin)).append("\n");
    sb.append("    eUserEzsignaccess: ").append(toIndentedString(eUserEzsignaccess)).append("\n");
    sb.append("    dtUserEzsignprepaidexpiration: ").append(toIndentedString(dtUserEzsignprepaidexpiration)).append("\n");
    sb.append("    sEmailAddress: ").append(toIndentedString(sEmailAddress)).append("\n");
    sb.append("    sUserJobtitle: ").append(toIndentedString(sUserJobtitle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiUserID");
    openapiFields.add("sUserFirstname");
    openapiFields.add("sUserLastname");
    openapiFields.add("sUserLoginname");
    openapiFields.add("bUserIsactive");
    openapiFields.add("eUserType");
    openapiFields.add("eUserOrigin");
    openapiFields.add("eUserEzsignaccess");
    openapiFields.add("dtUserEzsignprepaidexpiration");
    openapiFields.add("sEmailAddress");
    openapiFields.add("sUserJobtitle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiUserID");
    openapiRequiredFields.add("sUserFirstname");
    openapiRequiredFields.add("sUserLastname");
    openapiRequiredFields.add("sUserLoginname");
    openapiRequiredFields.add("bUserIsactive");
    openapiRequiredFields.add("eUserType");
    openapiRequiredFields.add("eUserOrigin");
    openapiRequiredFields.add("eUserEzsignaccess");
    openapiRequiredFields.add("sEmailAddress");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserListElement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserListElement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserListElement is not found in the empty JSON string", UserListElement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserListElement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserListElement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserListElement.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("sUserFirstname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sUserFirstname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sUserFirstname").toString()));
      }
      if (!jsonObj.get("sUserLastname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sUserLastname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sUserLastname").toString()));
      }
      if (!jsonObj.get("sUserLoginname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sUserLoginname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sUserLoginname").toString()));
      }
      // validate the required field `eUserType`
      FieldEUserType.validateJsonElement(jsonObj.get("eUserType"));
      // validate the required field `eUserOrigin`
      FieldEUserOrigin.validateJsonElement(jsonObj.get("eUserOrigin"));
      // validate the required field `eUserEzsignaccess`
      FieldEUserEzsignaccess.validateJsonElement(jsonObj.get("eUserEzsignaccess"));
      if ((jsonObj.get("dtUserEzsignprepaidexpiration") != null && !jsonObj.get("dtUserEzsignprepaidexpiration").isJsonNull()) && !jsonObj.get("dtUserEzsignprepaidexpiration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dtUserEzsignprepaidexpiration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dtUserEzsignprepaidexpiration").toString()));
      }
      if (!jsonObj.get("sEmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEmailAddress").toString()));
      }
      if ((jsonObj.get("sUserJobtitle") != null && !jsonObj.get("sUserJobtitle").isJsonNull()) && !jsonObj.get("sUserJobtitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sUserJobtitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sUserJobtitle").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserListElement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserListElement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserListElement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserListElement.class));

       return (TypeAdapter<T>) new TypeAdapter<UserListElement>() {
           @Override
           public void write(JsonWriter out, UserListElement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserListElement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserListElement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserListElement
   * @throws IOException if the JSON string is invalid with respect to UserListElement
   */
  public static UserListElement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserListElement.class);
  }

  /**
   * Convert an instance of UserListElement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

