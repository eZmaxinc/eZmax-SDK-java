/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * An Ezsigndocument Object and children to create a complete structure
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-30T20:25:06.858397322Z[Etc/UTC]", comments = "Generator version: 7.11.0")
public class EzsigndocumentRequestCompound {
  public static final String SERIALIZED_NAME_PKI_EZSIGNDOCUMENT_I_D = "pkiEzsigndocumentID";
  @SerializedName(SERIALIZED_NAME_PKI_EZSIGNDOCUMENT_I_D)
  @javax.annotation.Nullable
  private Integer pkiEzsigndocumentID;

  public static final String SERIALIZED_NAME_FKI_EZSIGNFOLDER_I_D = "fkiEzsignfolderID";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNFOLDER_I_D)
  @javax.annotation.Nonnull
  private Integer fkiEzsignfolderID;

  public static final String SERIALIZED_NAME_FKI_EZSIGNTEMPLATE_I_D = "fkiEzsigntemplateID";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNTEMPLATE_I_D)
  @javax.annotation.Nullable
  private Integer fkiEzsigntemplateID;

  public static final String SERIALIZED_NAME_FKI_EZSIGNFOLDERSIGNERASSOCIATION_I_D = "fkiEzsignfoldersignerassociationID";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNFOLDERSIGNERASSOCIATION_I_D)
  @javax.annotation.Nullable
  private Integer fkiEzsignfoldersignerassociationID;

  public static final String SERIALIZED_NAME_FKI_LANGUAGE_I_D = "fkiLanguageID";
  @SerializedName(SERIALIZED_NAME_FKI_LANGUAGE_I_D)
  @javax.annotation.Nonnull
  private Integer fkiLanguageID;

  /**
   * Indicates where to look for the document binary content.
   */
  @JsonAdapter(EEzsigndocumentSourceEnum.Adapter.class)
  public enum EEzsigndocumentSourceEnum {
    BASE64("Base64"),
    
    EZSIGNTEMPLATE("Ezsigntemplate"),
    
    URL("Url");

    private String value;

    EEzsigndocumentSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EEzsigndocumentSourceEnum fromValue(String value) {
      for (EEzsigndocumentSourceEnum b : EEzsigndocumentSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EEzsigndocumentSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EEzsigndocumentSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EEzsigndocumentSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EEzsigndocumentSourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EEzsigndocumentSourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_E_EZSIGNDOCUMENT_SOURCE = "eEzsigndocumentSource";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNDOCUMENT_SOURCE)
  @javax.annotation.Nonnull
  private EEzsigndocumentSourceEnum eEzsigndocumentSource;

  /**
   * Indicates the format of the document.
   */
  @JsonAdapter(EEzsigndocumentFormatEnum.Adapter.class)
  public enum EEzsigndocumentFormatEnum {
    PDF("Pdf"),
    
    DOC("Doc"),
    
    DOCX("Docx"),
    
    XLS("Xls"),
    
    XLSX("Xlsx"),
    
    PPT("Ppt"),
    
    PPTX("Pptx");

    private String value;

    EEzsigndocumentFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EEzsigndocumentFormatEnum fromValue(String value) {
      for (EEzsigndocumentFormatEnum b : EEzsigndocumentFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EEzsigndocumentFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EEzsigndocumentFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EEzsigndocumentFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EEzsigndocumentFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EEzsigndocumentFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_E_EZSIGNDOCUMENT_FORMAT = "eEzsigndocumentFormat";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNDOCUMENT_FORMAT)
  @javax.annotation.Nullable
  private EEzsigndocumentFormatEnum eEzsigndocumentFormat;

  public static final String SERIALIZED_NAME_S_EZSIGNDOCUMENT_BASE64 = "sEzsigndocumentBase64";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNDOCUMENT_BASE64)
  @javax.annotation.Nullable
  private byte[] sEzsigndocumentBase64;

  public static final String SERIALIZED_NAME_S_EZSIGNDOCUMENT_URL = "sEzsigndocumentUrl";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNDOCUMENT_URL)
  @javax.annotation.Nullable
  private String sEzsigndocumentUrl;

  public static final String SERIALIZED_NAME_B_EZSIGNDOCUMENT_FORCEREPAIR = "bEzsigndocumentForcerepair";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNDOCUMENT_FORCEREPAIR)
  @javax.annotation.Nullable
  private Boolean bEzsigndocumentForcerepair = true;

  public static final String SERIALIZED_NAME_S_EZSIGNDOCUMENT_PASSWORD = "sEzsigndocumentPassword";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNDOCUMENT_PASSWORD)
  @javax.annotation.Nullable
  private String sEzsigndocumentPassword;

  /**
   * If the document contains an existing PDF form this property must be set.  **Keep** leaves the form as-is in the document.  **Convert** removes the form and convert all the existing fields to Ezsignformfieldgroups and assign them to the specified **fkiEzsignfoldersignerassociationID**  **Discard** removes the form from the document.  **Flatten** prints the form values in the document.
   */
  @JsonAdapter(EEzsigndocumentFormEnum.Adapter.class)
  public enum EEzsigndocumentFormEnum {
    KEEP("Keep"),
    
    CONVERT("Convert"),
    
    DISCARD("Discard"),
    
    FLATTEN("Flatten");

    private String value;

    EEzsigndocumentFormEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EEzsigndocumentFormEnum fromValue(String value) {
      for (EEzsigndocumentFormEnum b : EEzsigndocumentFormEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EEzsigndocumentFormEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EEzsigndocumentFormEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EEzsigndocumentFormEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EEzsigndocumentFormEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EEzsigndocumentFormEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_E_EZSIGNDOCUMENT_FORM = "eEzsigndocumentForm";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNDOCUMENT_FORM)
  @javax.annotation.Nullable
  private EEzsigndocumentFormEnum eEzsigndocumentForm;

  public static final String SERIALIZED_NAME_DT_EZSIGNDOCUMENT_DUEDATE = "dtEzsigndocumentDuedate";
  @SerializedName(SERIALIZED_NAME_DT_EZSIGNDOCUMENT_DUEDATE)
  @javax.annotation.Nonnull
  private String dtEzsigndocumentDuedate;

  public static final String SERIALIZED_NAME_S_EZSIGNDOCUMENT_NAME = "sEzsigndocumentName";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNDOCUMENT_NAME)
  @javax.annotation.Nonnull
  private String sEzsigndocumentName;

  public static final String SERIALIZED_NAME_S_EZSIGNDOCUMENT_EXTERNALID = "sEzsigndocumentExternalid";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNDOCUMENT_EXTERNALID)
  @javax.annotation.Nullable
  private String sEzsigndocumentExternalid;

  public EzsigndocumentRequestCompound() {
  }

  public EzsigndocumentRequestCompound pkiEzsigndocumentID(@javax.annotation.Nullable Integer pkiEzsigndocumentID) {
    this.pkiEzsigndocumentID = pkiEzsigndocumentID;
    return this;
  }

  /**
   * The unique ID of the Ezsigndocument
   * minimum: 0
   * @return pkiEzsigndocumentID
   */
  @javax.annotation.Nullable
  public Integer getPkiEzsigndocumentID() {
    return pkiEzsigndocumentID;
  }

  public void setPkiEzsigndocumentID(@javax.annotation.Nullable Integer pkiEzsigndocumentID) {
    this.pkiEzsigndocumentID = pkiEzsigndocumentID;
  }


  public EzsigndocumentRequestCompound fkiEzsignfolderID(@javax.annotation.Nonnull Integer fkiEzsignfolderID) {
    this.fkiEzsignfolderID = fkiEzsignfolderID;
    return this;
  }

  /**
   * The unique ID of the Ezsignfolder
   * minimum: 0
   * @return fkiEzsignfolderID
   */
  @javax.annotation.Nonnull
  public Integer getFkiEzsignfolderID() {
    return fkiEzsignfolderID;
  }

  public void setFkiEzsignfolderID(@javax.annotation.Nonnull Integer fkiEzsignfolderID) {
    this.fkiEzsignfolderID = fkiEzsignfolderID;
  }


  public EzsigndocumentRequestCompound fkiEzsigntemplateID(@javax.annotation.Nullable Integer fkiEzsigntemplateID) {
    this.fkiEzsigntemplateID = fkiEzsigntemplateID;
    return this;
  }

  /**
   * The unique ID of the Ezsigntemplate
   * minimum: 0
   * @return fkiEzsigntemplateID
   */
  @javax.annotation.Nullable
  public Integer getFkiEzsigntemplateID() {
    return fkiEzsigntemplateID;
  }

  public void setFkiEzsigntemplateID(@javax.annotation.Nullable Integer fkiEzsigntemplateID) {
    this.fkiEzsigntemplateID = fkiEzsigntemplateID;
  }


  public EzsigndocumentRequestCompound fkiEzsignfoldersignerassociationID(@javax.annotation.Nullable Integer fkiEzsignfoldersignerassociationID) {
    this.fkiEzsignfoldersignerassociationID = fkiEzsignfoldersignerassociationID;
    return this;
  }

  /**
   * The unique ID of the Ezsignfoldersignerassociation
   * minimum: 0
   * @return fkiEzsignfoldersignerassociationID
   */
  @javax.annotation.Nullable
  public Integer getFkiEzsignfoldersignerassociationID() {
    return fkiEzsignfoldersignerassociationID;
  }

  public void setFkiEzsignfoldersignerassociationID(@javax.annotation.Nullable Integer fkiEzsignfoldersignerassociationID) {
    this.fkiEzsignfoldersignerassociationID = fkiEzsignfoldersignerassociationID;
  }


  public EzsigndocumentRequestCompound fkiLanguageID(@javax.annotation.Nonnull Integer fkiLanguageID) {
    this.fkiLanguageID = fkiLanguageID;
    return this;
  }

  /**
   * The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
   * minimum: 1
   * maximum: 2
   * @return fkiLanguageID
   */
  @javax.annotation.Nonnull
  public Integer getFkiLanguageID() {
    return fkiLanguageID;
  }

  public void setFkiLanguageID(@javax.annotation.Nonnull Integer fkiLanguageID) {
    this.fkiLanguageID = fkiLanguageID;
  }


  public EzsigndocumentRequestCompound eEzsigndocumentSource(@javax.annotation.Nonnull EEzsigndocumentSourceEnum eEzsigndocumentSource) {
    this.eEzsigndocumentSource = eEzsigndocumentSource;
    return this;
  }

  /**
   * Indicates where to look for the document binary content.
   * @return eEzsigndocumentSource
   */
  @javax.annotation.Nonnull
  public EEzsigndocumentSourceEnum geteEzsigndocumentSource() {
    return eEzsigndocumentSource;
  }

  public void seteEzsigndocumentSource(@javax.annotation.Nonnull EEzsigndocumentSourceEnum eEzsigndocumentSource) {
    this.eEzsigndocumentSource = eEzsigndocumentSource;
  }


  public EzsigndocumentRequestCompound eEzsigndocumentFormat(@javax.annotation.Nullable EEzsigndocumentFormatEnum eEzsigndocumentFormat) {
    this.eEzsigndocumentFormat = eEzsigndocumentFormat;
    return this;
  }

  /**
   * Indicates the format of the document.
   * @return eEzsigndocumentFormat
   */
  @javax.annotation.Nullable
  public EEzsigndocumentFormatEnum geteEzsigndocumentFormat() {
    return eEzsigndocumentFormat;
  }

  public void seteEzsigndocumentFormat(@javax.annotation.Nullable EEzsigndocumentFormatEnum eEzsigndocumentFormat) {
    this.eEzsigndocumentFormat = eEzsigndocumentFormat;
  }


  public EzsigndocumentRequestCompound sEzsigndocumentBase64(@javax.annotation.Nullable byte[] sEzsigndocumentBase64) {
    this.sEzsigndocumentBase64 = sEzsigndocumentBase64;
    return this;
  }

  /**
   * The Base64 encoded binary content of the document.  This field is Required when eEzsigndocumentSource &#x3D; Base64.
   * @return sEzsigndocumentBase64
   */
  @javax.annotation.Nullable
  public byte[] getsEzsigndocumentBase64() {
    return sEzsigndocumentBase64;
  }

  public void setsEzsigndocumentBase64(@javax.annotation.Nullable byte[] sEzsigndocumentBase64) {
    this.sEzsigndocumentBase64 = sEzsigndocumentBase64;
  }


  public EzsigndocumentRequestCompound sEzsigndocumentUrl(@javax.annotation.Nullable String sEzsigndocumentUrl) {
    this.sEzsigndocumentUrl = sEzsigndocumentUrl;
    return this;
  }

  /**
   * The url where the document content resides.  This field is Required when eEzsigndocumentSource &#x3D; Url.
   * @return sEzsigndocumentUrl
   */
  @javax.annotation.Nullable
  public String getsEzsigndocumentUrl() {
    return sEzsigndocumentUrl;
  }

  public void setsEzsigndocumentUrl(@javax.annotation.Nullable String sEzsigndocumentUrl) {
    this.sEzsigndocumentUrl = sEzsigndocumentUrl;
  }


  public EzsigndocumentRequestCompound bEzsigndocumentForcerepair(@javax.annotation.Nullable Boolean bEzsigndocumentForcerepair) {
    this.bEzsigndocumentForcerepair = bEzsigndocumentForcerepair;
    return this;
  }

  /**
   * Try to repair the document or flatten it if it cannot be used for electronic signature. 
   * @return bEzsigndocumentForcerepair
   */
  @javax.annotation.Nullable
  public Boolean getbEzsigndocumentForcerepair() {
    return bEzsigndocumentForcerepair;
  }

  public void setbEzsigndocumentForcerepair(@javax.annotation.Nullable Boolean bEzsigndocumentForcerepair) {
    this.bEzsigndocumentForcerepair = bEzsigndocumentForcerepair;
  }


  public EzsigndocumentRequestCompound sEzsigndocumentPassword(@javax.annotation.Nullable String sEzsigndocumentPassword) {
    this.sEzsigndocumentPassword = sEzsigndocumentPassword;
    return this;
  }

  /**
   * If the source document is password protected, the password to open/modify it.
   * @return sEzsigndocumentPassword
   */
  @javax.annotation.Nullable
  public String getsEzsigndocumentPassword() {
    return sEzsigndocumentPassword;
  }

  public void setsEzsigndocumentPassword(@javax.annotation.Nullable String sEzsigndocumentPassword) {
    this.sEzsigndocumentPassword = sEzsigndocumentPassword;
  }


  public EzsigndocumentRequestCompound eEzsigndocumentForm(@javax.annotation.Nullable EEzsigndocumentFormEnum eEzsigndocumentForm) {
    this.eEzsigndocumentForm = eEzsigndocumentForm;
    return this;
  }

  /**
   * If the document contains an existing PDF form this property must be set.  **Keep** leaves the form as-is in the document.  **Convert** removes the form and convert all the existing fields to Ezsignformfieldgroups and assign them to the specified **fkiEzsignfoldersignerassociationID**  **Discard** removes the form from the document.  **Flatten** prints the form values in the document.
   * @return eEzsigndocumentForm
   */
  @javax.annotation.Nullable
  public EEzsigndocumentFormEnum geteEzsigndocumentForm() {
    return eEzsigndocumentForm;
  }

  public void seteEzsigndocumentForm(@javax.annotation.Nullable EEzsigndocumentFormEnum eEzsigndocumentForm) {
    this.eEzsigndocumentForm = eEzsigndocumentForm;
  }


  public EzsigndocumentRequestCompound dtEzsigndocumentDuedate(@javax.annotation.Nonnull String dtEzsigndocumentDuedate) {
    this.dtEzsigndocumentDuedate = dtEzsigndocumentDuedate;
    return this;
  }

  /**
   * The maximum date and time at which the Ezsigndocument can be signed.
   * @return dtEzsigndocumentDuedate
   */
  @javax.annotation.Nonnull
  public String getDtEzsigndocumentDuedate() {
    return dtEzsigndocumentDuedate;
  }

  public void setDtEzsigndocumentDuedate(@javax.annotation.Nonnull String dtEzsigndocumentDuedate) {
    this.dtEzsigndocumentDuedate = dtEzsigndocumentDuedate;
  }


  public EzsigndocumentRequestCompound sEzsigndocumentName(@javax.annotation.Nonnull String sEzsigndocumentName) {
    this.sEzsigndocumentName = sEzsigndocumentName;
    return this;
  }

  /**
   * The name of the document that will be presented to Ezsignfoldersignerassociations
   * @return sEzsigndocumentName
   */
  @javax.annotation.Nonnull
  public String getsEzsigndocumentName() {
    return sEzsigndocumentName;
  }

  public void setsEzsigndocumentName(@javax.annotation.Nonnull String sEzsigndocumentName) {
    this.sEzsigndocumentName = sEzsigndocumentName;
  }


  public EzsigndocumentRequestCompound sEzsigndocumentExternalid(@javax.annotation.Nullable String sEzsigndocumentExternalid) {
    this.sEzsigndocumentExternalid = sEzsigndocumentExternalid;
    return this;
  }

  /**
   * This field can be used to store an External ID from the client&#39;s system.  Anything can be stored in this field, it will never be evaluated by the eZmax system and will be returned AS-IS.  To store multiple values, consider using a JSON formatted structure, a URL encoded string, a CSV or any other custom format. 
   * @return sEzsigndocumentExternalid
   */
  @javax.annotation.Nullable
  public String getsEzsigndocumentExternalid() {
    return sEzsigndocumentExternalid;
  }

  public void setsEzsigndocumentExternalid(@javax.annotation.Nullable String sEzsigndocumentExternalid) {
    this.sEzsigndocumentExternalid = sEzsigndocumentExternalid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsigndocumentRequestCompound ezsigndocumentRequestCompound = (EzsigndocumentRequestCompound) o;
    return Objects.equals(this.pkiEzsigndocumentID, ezsigndocumentRequestCompound.pkiEzsigndocumentID) &&
        Objects.equals(this.fkiEzsignfolderID, ezsigndocumentRequestCompound.fkiEzsignfolderID) &&
        Objects.equals(this.fkiEzsigntemplateID, ezsigndocumentRequestCompound.fkiEzsigntemplateID) &&
        Objects.equals(this.fkiEzsignfoldersignerassociationID, ezsigndocumentRequestCompound.fkiEzsignfoldersignerassociationID) &&
        Objects.equals(this.fkiLanguageID, ezsigndocumentRequestCompound.fkiLanguageID) &&
        Objects.equals(this.eEzsigndocumentSource, ezsigndocumentRequestCompound.eEzsigndocumentSource) &&
        Objects.equals(this.eEzsigndocumentFormat, ezsigndocumentRequestCompound.eEzsigndocumentFormat) &&
        Arrays.equals(this.sEzsigndocumentBase64, ezsigndocumentRequestCompound.sEzsigndocumentBase64) &&
        Objects.equals(this.sEzsigndocumentUrl, ezsigndocumentRequestCompound.sEzsigndocumentUrl) &&
        Objects.equals(this.bEzsigndocumentForcerepair, ezsigndocumentRequestCompound.bEzsigndocumentForcerepair) &&
        Objects.equals(this.sEzsigndocumentPassword, ezsigndocumentRequestCompound.sEzsigndocumentPassword) &&
        Objects.equals(this.eEzsigndocumentForm, ezsigndocumentRequestCompound.eEzsigndocumentForm) &&
        Objects.equals(this.dtEzsigndocumentDuedate, ezsigndocumentRequestCompound.dtEzsigndocumentDuedate) &&
        Objects.equals(this.sEzsigndocumentName, ezsigndocumentRequestCompound.sEzsigndocumentName) &&
        Objects.equals(this.sEzsigndocumentExternalid, ezsigndocumentRequestCompound.sEzsigndocumentExternalid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiEzsigndocumentID, fkiEzsignfolderID, fkiEzsigntemplateID, fkiEzsignfoldersignerassociationID, fkiLanguageID, eEzsigndocumentSource, eEzsigndocumentFormat, Arrays.hashCode(sEzsigndocumentBase64), sEzsigndocumentUrl, bEzsigndocumentForcerepair, sEzsigndocumentPassword, eEzsigndocumentForm, dtEzsigndocumentDuedate, sEzsigndocumentName, sEzsigndocumentExternalid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsigndocumentRequestCompound {\n");
    sb.append("    pkiEzsigndocumentID: ").append(toIndentedString(pkiEzsigndocumentID)).append("\n");
    sb.append("    fkiEzsignfolderID: ").append(toIndentedString(fkiEzsignfolderID)).append("\n");
    sb.append("    fkiEzsigntemplateID: ").append(toIndentedString(fkiEzsigntemplateID)).append("\n");
    sb.append("    fkiEzsignfoldersignerassociationID: ").append(toIndentedString(fkiEzsignfoldersignerassociationID)).append("\n");
    sb.append("    fkiLanguageID: ").append(toIndentedString(fkiLanguageID)).append("\n");
    sb.append("    eEzsigndocumentSource: ").append(toIndentedString(eEzsigndocumentSource)).append("\n");
    sb.append("    eEzsigndocumentFormat: ").append(toIndentedString(eEzsigndocumentFormat)).append("\n");
    sb.append("    sEzsigndocumentBase64: ").append(toIndentedString(sEzsigndocumentBase64)).append("\n");
    sb.append("    sEzsigndocumentUrl: ").append(toIndentedString(sEzsigndocumentUrl)).append("\n");
    sb.append("    bEzsigndocumentForcerepair: ").append(toIndentedString(bEzsigndocumentForcerepair)).append("\n");
    sb.append("    sEzsigndocumentPassword: ").append(toIndentedString(sEzsigndocumentPassword)).append("\n");
    sb.append("    eEzsigndocumentForm: ").append(toIndentedString(eEzsigndocumentForm)).append("\n");
    sb.append("    dtEzsigndocumentDuedate: ").append(toIndentedString(dtEzsigndocumentDuedate)).append("\n");
    sb.append("    sEzsigndocumentName: ").append(toIndentedString(sEzsigndocumentName)).append("\n");
    sb.append("    sEzsigndocumentExternalid: ").append(toIndentedString(sEzsigndocumentExternalid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiEzsigndocumentID");
    openapiFields.add("fkiEzsignfolderID");
    openapiFields.add("fkiEzsigntemplateID");
    openapiFields.add("fkiEzsignfoldersignerassociationID");
    openapiFields.add("fkiLanguageID");
    openapiFields.add("eEzsigndocumentSource");
    openapiFields.add("eEzsigndocumentFormat");
    openapiFields.add("sEzsigndocumentBase64");
    openapiFields.add("sEzsigndocumentUrl");
    openapiFields.add("bEzsigndocumentForcerepair");
    openapiFields.add("sEzsigndocumentPassword");
    openapiFields.add("eEzsigndocumentForm");
    openapiFields.add("dtEzsigndocumentDuedate");
    openapiFields.add("sEzsigndocumentName");
    openapiFields.add("sEzsigndocumentExternalid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fkiEzsignfolderID");
    openapiRequiredFields.add("fkiLanguageID");
    openapiRequiredFields.add("eEzsigndocumentSource");
    openapiRequiredFields.add("dtEzsigndocumentDuedate");
    openapiRequiredFields.add("sEzsigndocumentName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EzsigndocumentRequestCompound
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EzsigndocumentRequestCompound.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsigndocumentRequestCompound is not found in the empty JSON string", EzsigndocumentRequestCompound.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EzsigndocumentRequestCompound.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsigndocumentRequestCompound` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EzsigndocumentRequestCompound.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("eEzsigndocumentSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eEzsigndocumentSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eEzsigndocumentSource").toString()));
      }
      // validate the required field `eEzsigndocumentSource`
      EEzsigndocumentSourceEnum.validateJsonElement(jsonObj.get("eEzsigndocumentSource"));
      if ((jsonObj.get("eEzsigndocumentFormat") != null && !jsonObj.get("eEzsigndocumentFormat").isJsonNull()) && !jsonObj.get("eEzsigndocumentFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eEzsigndocumentFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eEzsigndocumentFormat").toString()));
      }
      // validate the optional field `eEzsigndocumentFormat`
      if (jsonObj.get("eEzsigndocumentFormat") != null && !jsonObj.get("eEzsigndocumentFormat").isJsonNull()) {
        EEzsigndocumentFormatEnum.validateJsonElement(jsonObj.get("eEzsigndocumentFormat"));
      }
      if ((jsonObj.get("sEzsigndocumentUrl") != null && !jsonObj.get("sEzsigndocumentUrl").isJsonNull()) && !jsonObj.get("sEzsigndocumentUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsigndocumentUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsigndocumentUrl").toString()));
      }
      if ((jsonObj.get("sEzsigndocumentPassword") != null && !jsonObj.get("sEzsigndocumentPassword").isJsonNull()) && !jsonObj.get("sEzsigndocumentPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsigndocumentPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsigndocumentPassword").toString()));
      }
      if ((jsonObj.get("eEzsigndocumentForm") != null && !jsonObj.get("eEzsigndocumentForm").isJsonNull()) && !jsonObj.get("eEzsigndocumentForm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eEzsigndocumentForm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eEzsigndocumentForm").toString()));
      }
      // validate the optional field `eEzsigndocumentForm`
      if (jsonObj.get("eEzsigndocumentForm") != null && !jsonObj.get("eEzsigndocumentForm").isJsonNull()) {
        EEzsigndocumentFormEnum.validateJsonElement(jsonObj.get("eEzsigndocumentForm"));
      }
      if (!jsonObj.get("dtEzsigndocumentDuedate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dtEzsigndocumentDuedate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dtEzsigndocumentDuedate").toString()));
      }
      if (!jsonObj.get("sEzsigndocumentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsigndocumentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsigndocumentName").toString()));
      }
      if ((jsonObj.get("sEzsigndocumentExternalid") != null && !jsonObj.get("sEzsigndocumentExternalid").isJsonNull()) && !jsonObj.get("sEzsigndocumentExternalid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsigndocumentExternalid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsigndocumentExternalid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsigndocumentRequestCompound.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsigndocumentRequestCompound' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsigndocumentRequestCompound> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsigndocumentRequestCompound.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsigndocumentRequestCompound>() {
           @Override
           public void write(JsonWriter out, EzsigndocumentRequestCompound value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsigndocumentRequestCompound read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EzsigndocumentRequestCompound given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EzsigndocumentRequestCompound
   * @throws IOException if the JSON string is invalid with respect to EzsigndocumentRequestCompound
   */
  public static EzsigndocumentRequestCompound fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsigndocumentRequestCompound.class);
  }

  /**
   * Convert an instance of EzsigndocumentRequestCompound to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

