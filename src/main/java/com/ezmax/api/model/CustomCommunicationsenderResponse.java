/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.CustomContactNameResponse;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * Generic Communicationsender Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-08T14:50:15.840482184Z[Etc/UTC]")
public class CustomCommunicationsenderResponse {
  public static final String SERIALIZED_NAME_FKI_AGENT_I_D = "fkiAgentID";
  @SerializedName(SERIALIZED_NAME_FKI_AGENT_I_D)
  private Integer fkiAgentID;

  public static final String SERIALIZED_NAME_FKI_BROKER_I_D = "fkiBrokerID";
  @SerializedName(SERIALIZED_NAME_FKI_BROKER_I_D)
  private Integer fkiBrokerID;

  public static final String SERIALIZED_NAME_FKI_USER_I_D = "fkiUserID";
  @SerializedName(SERIALIZED_NAME_FKI_USER_I_D)
  private Integer fkiUserID;

  public static final String SERIALIZED_NAME_FKI_MAILBOXSHARED_I_D = "fkiMailboxsharedID";
  @SerializedName(SERIALIZED_NAME_FKI_MAILBOXSHARED_I_D)
  private Integer fkiMailboxsharedID;

  /**
   * Gets or Sets eCommunicationsenderObjecttype
   */
  @JsonAdapter(ECommunicationsenderObjecttypeEnum.Adapter.class)
  public enum ECommunicationsenderObjecttypeEnum {
    AGENT("Agent"),
    
    BROKER("Broker"),
    
    USER("User"),
    
    MAILBOXSHARED("Mailboxshared");

    private String value;

    ECommunicationsenderObjecttypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ECommunicationsenderObjecttypeEnum fromValue(String value) {
      for (ECommunicationsenderObjecttypeEnum b : ECommunicationsenderObjecttypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ECommunicationsenderObjecttypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ECommunicationsenderObjecttypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ECommunicationsenderObjecttypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ECommunicationsenderObjecttypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_E_COMMUNICATIONSENDER_OBJECTTYPE = "eCommunicationsenderObjecttype";
  @SerializedName(SERIALIZED_NAME_E_COMMUNICATIONSENDER_OBJECTTYPE)
  private ECommunicationsenderObjecttypeEnum eCommunicationsenderObjecttype;

  public static final String SERIALIZED_NAME_OBJ_CONTACT_NAME = "objContactName";
  @SerializedName(SERIALIZED_NAME_OBJ_CONTACT_NAME)
  private CustomContactNameResponse objContactName;

  public static final String SERIALIZED_NAME_S_EMAIL_ADDRESS = "sEmailAddress";
  @SerializedName(SERIALIZED_NAME_S_EMAIL_ADDRESS)
  private String sEmailAddress;

  public static final String SERIALIZED_NAME_S_PHONE_E164 = "sPhoneE164";
  @SerializedName(SERIALIZED_NAME_S_PHONE_E164)
  private String sPhoneE164;

  public CustomCommunicationsenderResponse() {
  }

  public CustomCommunicationsenderResponse fkiAgentID(Integer fkiAgentID) {
    
    this.fkiAgentID = fkiAgentID;
    return this;
  }

   /**
   * The unique ID of the Agent.
   * minimum: 0
   * @return fkiAgentID
  **/
  @javax.annotation.Nullable
  public Integer getFkiAgentID() {
    return fkiAgentID;
  }


  public void setFkiAgentID(Integer fkiAgentID) {
    this.fkiAgentID = fkiAgentID;
  }


  public CustomCommunicationsenderResponse fkiBrokerID(Integer fkiBrokerID) {
    
    this.fkiBrokerID = fkiBrokerID;
    return this;
  }

   /**
   * The unique ID of the Broker.
   * minimum: 0
   * @return fkiBrokerID
  **/
  @javax.annotation.Nullable
  public Integer getFkiBrokerID() {
    return fkiBrokerID;
  }


  public void setFkiBrokerID(Integer fkiBrokerID) {
    this.fkiBrokerID = fkiBrokerID;
  }


  public CustomCommunicationsenderResponse fkiUserID(Integer fkiUserID) {
    
    this.fkiUserID = fkiUserID;
    return this;
  }

   /**
   * The unique ID of the User
   * minimum: 0
   * @return fkiUserID
  **/
  @javax.annotation.Nullable
  public Integer getFkiUserID() {
    return fkiUserID;
  }


  public void setFkiUserID(Integer fkiUserID) {
    this.fkiUserID = fkiUserID;
  }


  public CustomCommunicationsenderResponse fkiMailboxsharedID(Integer fkiMailboxsharedID) {
    
    this.fkiMailboxsharedID = fkiMailboxsharedID;
    return this;
  }

   /**
   * The unique ID of the Mailboxshared
   * minimum: 0
   * maximum: 255
   * @return fkiMailboxsharedID
  **/
  @javax.annotation.Nullable
  public Integer getFkiMailboxsharedID() {
    return fkiMailboxsharedID;
  }


  public void setFkiMailboxsharedID(Integer fkiMailboxsharedID) {
    this.fkiMailboxsharedID = fkiMailboxsharedID;
  }


  public CustomCommunicationsenderResponse eCommunicationsenderObjecttype(ECommunicationsenderObjecttypeEnum eCommunicationsenderObjecttype) {
    
    this.eCommunicationsenderObjecttype = eCommunicationsenderObjecttype;
    return this;
  }

   /**
   * Get eCommunicationsenderObjecttype
   * @return eCommunicationsenderObjecttype
  **/
  @javax.annotation.Nonnull
  public ECommunicationsenderObjecttypeEnum geteCommunicationsenderObjecttype() {
    return eCommunicationsenderObjecttype;
  }


  public void seteCommunicationsenderObjecttype(ECommunicationsenderObjecttypeEnum eCommunicationsenderObjecttype) {
    this.eCommunicationsenderObjecttype = eCommunicationsenderObjecttype;
  }


  public CustomCommunicationsenderResponse objContactName(CustomContactNameResponse objContactName) {
    
    this.objContactName = objContactName;
    return this;
  }

   /**
   * Get objContactName
   * @return objContactName
  **/
  @javax.annotation.Nonnull
  public CustomContactNameResponse getObjContactName() {
    return objContactName;
  }


  public void setObjContactName(CustomContactNameResponse objContactName) {
    this.objContactName = objContactName;
  }


  public CustomCommunicationsenderResponse sEmailAddress(String sEmailAddress) {
    
    this.sEmailAddress = sEmailAddress;
    return this;
  }

   /**
   * The email address.
   * @return sEmailAddress
  **/
  @javax.annotation.Nullable
  public String getsEmailAddress() {
    return sEmailAddress;
  }


  public void setsEmailAddress(String sEmailAddress) {
    this.sEmailAddress = sEmailAddress;
  }


  public CustomCommunicationsenderResponse sPhoneE164(String sPhoneE164) {
    
    this.sPhoneE164 = sPhoneE164;
    return this;
  }

   /**
   * A phone number in E.164 Format
   * @return sPhoneE164
  **/
  @javax.annotation.Nullable
  public String getsPhoneE164() {
    return sPhoneE164;
  }


  public void setsPhoneE164(String sPhoneE164) {
    this.sPhoneE164 = sPhoneE164;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomCommunicationsenderResponse customCommunicationsenderResponse = (CustomCommunicationsenderResponse) o;
    return Objects.equals(this.fkiAgentID, customCommunicationsenderResponse.fkiAgentID) &&
        Objects.equals(this.fkiBrokerID, customCommunicationsenderResponse.fkiBrokerID) &&
        Objects.equals(this.fkiUserID, customCommunicationsenderResponse.fkiUserID) &&
        Objects.equals(this.fkiMailboxsharedID, customCommunicationsenderResponse.fkiMailboxsharedID) &&
        Objects.equals(this.eCommunicationsenderObjecttype, customCommunicationsenderResponse.eCommunicationsenderObjecttype) &&
        Objects.equals(this.objContactName, customCommunicationsenderResponse.objContactName) &&
        Objects.equals(this.sEmailAddress, customCommunicationsenderResponse.sEmailAddress) &&
        Objects.equals(this.sPhoneE164, customCommunicationsenderResponse.sPhoneE164);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fkiAgentID, fkiBrokerID, fkiUserID, fkiMailboxsharedID, eCommunicationsenderObjecttype, objContactName, sEmailAddress, sPhoneE164);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomCommunicationsenderResponse {\n");
    sb.append("    fkiAgentID: ").append(toIndentedString(fkiAgentID)).append("\n");
    sb.append("    fkiBrokerID: ").append(toIndentedString(fkiBrokerID)).append("\n");
    sb.append("    fkiUserID: ").append(toIndentedString(fkiUserID)).append("\n");
    sb.append("    fkiMailboxsharedID: ").append(toIndentedString(fkiMailboxsharedID)).append("\n");
    sb.append("    eCommunicationsenderObjecttype: ").append(toIndentedString(eCommunicationsenderObjecttype)).append("\n");
    sb.append("    objContactName: ").append(toIndentedString(objContactName)).append("\n");
    sb.append("    sEmailAddress: ").append(toIndentedString(sEmailAddress)).append("\n");
    sb.append("    sPhoneE164: ").append(toIndentedString(sPhoneE164)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fkiAgentID");
    openapiFields.add("fkiBrokerID");
    openapiFields.add("fkiUserID");
    openapiFields.add("fkiMailboxsharedID");
    openapiFields.add("eCommunicationsenderObjecttype");
    openapiFields.add("objContactName");
    openapiFields.add("sEmailAddress");
    openapiFields.add("sPhoneE164");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("eCommunicationsenderObjecttype");
    openapiRequiredFields.add("objContactName");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CustomCommunicationsenderResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomCommunicationsenderResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomCommunicationsenderResponse is not found in the empty JSON string", CustomCommunicationsenderResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomCommunicationsenderResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomCommunicationsenderResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomCommunicationsenderResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("eCommunicationsenderObjecttype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eCommunicationsenderObjecttype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eCommunicationsenderObjecttype").toString()));
      }
      // validate the required field `objContactName`
      CustomContactNameResponse.validateJsonElement(jsonObj.get("objContactName"));
      if ((jsonObj.get("sEmailAddress") != null && !jsonObj.get("sEmailAddress").isJsonNull()) && !jsonObj.get("sEmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEmailAddress").toString()));
      }
      if ((jsonObj.get("sPhoneE164") != null && !jsonObj.get("sPhoneE164").isJsonNull()) && !jsonObj.get("sPhoneE164").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sPhoneE164` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sPhoneE164").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomCommunicationsenderResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomCommunicationsenderResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomCommunicationsenderResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomCommunicationsenderResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomCommunicationsenderResponse>() {
           @Override
           public void write(JsonWriter out, CustomCommunicationsenderResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomCommunicationsenderResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomCommunicationsenderResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomCommunicationsenderResponse
  * @throws IOException if the JSON string is invalid with respect to CustomCommunicationsenderResponse
  */
  public static CustomCommunicationsenderResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomCommunicationsenderResponse.class);
  }

 /**
  * Convert an instance of CustomCommunicationsenderResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

