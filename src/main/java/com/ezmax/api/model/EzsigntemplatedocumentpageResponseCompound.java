/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * An Ezsigntemplatedocumentpage Object and children to create a complete structure
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-28T01:27:41.601414258Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class EzsigntemplatedocumentpageResponseCompound {
  public static final String SERIALIZED_NAME_PKI_EZSIGNTEMPLATEDOCUMENTPAGE_I_D = "pkiEzsigntemplatedocumentpageID";
  @SerializedName(SERIALIZED_NAME_PKI_EZSIGNTEMPLATEDOCUMENTPAGE_I_D)
  private Integer pkiEzsigntemplatedocumentpageID;

  public static final String SERIALIZED_NAME_I_EZSIGNTEMPLATEDOCUMENTPAGE_WIDTHIMAGE = "iEzsigntemplatedocumentpageWidthimage";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNTEMPLATEDOCUMENTPAGE_WIDTHIMAGE)
  private Integer iEzsigntemplatedocumentpageWidthimage;

  public static final String SERIALIZED_NAME_I_EZSIGNTEMPLATEDOCUMENTPAGE_HEIGHTIMAGE = "iEzsigntemplatedocumentpageHeightimage";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNTEMPLATEDOCUMENTPAGE_HEIGHTIMAGE)
  private Integer iEzsigntemplatedocumentpageHeightimage;

  public static final String SERIALIZED_NAME_I_EZSIGNTEMPLATEDOCUMENTPAGE_WIDTHPDF = "iEzsigntemplatedocumentpageWidthpdf";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNTEMPLATEDOCUMENTPAGE_WIDTHPDF)
  private Integer iEzsigntemplatedocumentpageWidthpdf;

  public static final String SERIALIZED_NAME_I_EZSIGNTEMPLATEDOCUMENTPAGE_HEIGHTPDF = "iEzsigntemplatedocumentpageHeightpdf";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNTEMPLATEDOCUMENTPAGE_HEIGHTPDF)
  private Integer iEzsigntemplatedocumentpageHeightpdf;

  public static final String SERIALIZED_NAME_I_EZSIGNTEMPLATEDOCUMENTPAGE_PAGENUMBER = "iEzsigntemplatedocumentpagePagenumber";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNTEMPLATEDOCUMENTPAGE_PAGENUMBER)
  private Integer iEzsigntemplatedocumentpagePagenumber;

  public static final String SERIALIZED_NAME_S_COMPUTED_IMAGEURL = "sComputedImageurl";
  @SerializedName(SERIALIZED_NAME_S_COMPUTED_IMAGEURL)
  private String sComputedImageurl;

  public EzsigntemplatedocumentpageResponseCompound() {
  }

  public EzsigntemplatedocumentpageResponseCompound pkiEzsigntemplatedocumentpageID(Integer pkiEzsigntemplatedocumentpageID) {
    this.pkiEzsigntemplatedocumentpageID = pkiEzsigntemplatedocumentpageID;
    return this;
  }

   /**
   * The unique ID of the Ezsigntemplatedocumentpage
   * minimum: 0
   * @return pkiEzsigntemplatedocumentpageID
  **/
  @javax.annotation.Nonnull
  public Integer getPkiEzsigntemplatedocumentpageID() {
    return pkiEzsigntemplatedocumentpageID;
  }

  public void setPkiEzsigntemplatedocumentpageID(Integer pkiEzsigntemplatedocumentpageID) {
    this.pkiEzsigntemplatedocumentpageID = pkiEzsigntemplatedocumentpageID;
  }


  public EzsigntemplatedocumentpageResponseCompound iEzsigntemplatedocumentpageWidthimage(Integer iEzsigntemplatedocumentpageWidthimage) {
    this.iEzsigntemplatedocumentpageWidthimage = iEzsigntemplatedocumentpageWidthimage;
    return this;
  }

   /**
   * The Width of the page&#39;s image in pixels calculated at 100 DPI
   * minimum: 0
   * @return iEzsigntemplatedocumentpageWidthimage
  **/
  @javax.annotation.Nonnull
  public Integer getiEzsigntemplatedocumentpageWidthimage() {
    return iEzsigntemplatedocumentpageWidthimage;
  }

  public void setiEzsigntemplatedocumentpageWidthimage(Integer iEzsigntemplatedocumentpageWidthimage) {
    this.iEzsigntemplatedocumentpageWidthimage = iEzsigntemplatedocumentpageWidthimage;
  }


  public EzsigntemplatedocumentpageResponseCompound iEzsigntemplatedocumentpageHeightimage(Integer iEzsigntemplatedocumentpageHeightimage) {
    this.iEzsigntemplatedocumentpageHeightimage = iEzsigntemplatedocumentpageHeightimage;
    return this;
  }

   /**
   * The Height of the page&#39;s image in pixels calculated at 100 DPI
   * minimum: 0
   * @return iEzsigntemplatedocumentpageHeightimage
  **/
  @javax.annotation.Nonnull
  public Integer getiEzsigntemplatedocumentpageHeightimage() {
    return iEzsigntemplatedocumentpageHeightimage;
  }

  public void setiEzsigntemplatedocumentpageHeightimage(Integer iEzsigntemplatedocumentpageHeightimage) {
    this.iEzsigntemplatedocumentpageHeightimage = iEzsigntemplatedocumentpageHeightimage;
  }


  public EzsigntemplatedocumentpageResponseCompound iEzsigntemplatedocumentpageWidthpdf(Integer iEzsigntemplatedocumentpageWidthpdf) {
    this.iEzsigntemplatedocumentpageWidthpdf = iEzsigntemplatedocumentpageWidthpdf;
    return this;
  }

   /**
   * The Width of the page in points calculated at 72 DPI
   * minimum: 0
   * @return iEzsigntemplatedocumentpageWidthpdf
  **/
  @javax.annotation.Nonnull
  public Integer getiEzsigntemplatedocumentpageWidthpdf() {
    return iEzsigntemplatedocumentpageWidthpdf;
  }

  public void setiEzsigntemplatedocumentpageWidthpdf(Integer iEzsigntemplatedocumentpageWidthpdf) {
    this.iEzsigntemplatedocumentpageWidthpdf = iEzsigntemplatedocumentpageWidthpdf;
  }


  public EzsigntemplatedocumentpageResponseCompound iEzsigntemplatedocumentpageHeightpdf(Integer iEzsigntemplatedocumentpageHeightpdf) {
    this.iEzsigntemplatedocumentpageHeightpdf = iEzsigntemplatedocumentpageHeightpdf;
    return this;
  }

   /**
   * The Height of the page in points calculated at 72 DPI
   * minimum: 0
   * @return iEzsigntemplatedocumentpageHeightpdf
  **/
  @javax.annotation.Nonnull
  public Integer getiEzsigntemplatedocumentpageHeightpdf() {
    return iEzsigntemplatedocumentpageHeightpdf;
  }

  public void setiEzsigntemplatedocumentpageHeightpdf(Integer iEzsigntemplatedocumentpageHeightpdf) {
    this.iEzsigntemplatedocumentpageHeightpdf = iEzsigntemplatedocumentpageHeightpdf;
  }


  public EzsigntemplatedocumentpageResponseCompound iEzsigntemplatedocumentpagePagenumber(Integer iEzsigntemplatedocumentpagePagenumber) {
    this.iEzsigntemplatedocumentpagePagenumber = iEzsigntemplatedocumentpagePagenumber;
    return this;
  }

   /**
   * The page number in the Ezsigntemplatedocument
   * minimum: 1
   * @return iEzsigntemplatedocumentpagePagenumber
  **/
  @javax.annotation.Nonnull
  public Integer getiEzsigntemplatedocumentpagePagenumber() {
    return iEzsigntemplatedocumentpagePagenumber;
  }

  public void setiEzsigntemplatedocumentpagePagenumber(Integer iEzsigntemplatedocumentpagePagenumber) {
    this.iEzsigntemplatedocumentpagePagenumber = iEzsigntemplatedocumentpagePagenumber;
  }


  public EzsigntemplatedocumentpageResponseCompound sComputedImageurl(String sComputedImageurl) {
    this.sComputedImageurl = sComputedImageurl;
    return this;
  }

   /**
   * The Url to the Ezsigntemplatedocumentpage&#39;s rasterized image.  Url will expire after 5 minutes.
   * @return sComputedImageurl
  **/
  @javax.annotation.Nonnull
  public String getsComputedImageurl() {
    return sComputedImageurl;
  }

  public void setsComputedImageurl(String sComputedImageurl) {
    this.sComputedImageurl = sComputedImageurl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsigntemplatedocumentpageResponseCompound ezsigntemplatedocumentpageResponseCompound = (EzsigntemplatedocumentpageResponseCompound) o;
    return Objects.equals(this.pkiEzsigntemplatedocumentpageID, ezsigntemplatedocumentpageResponseCompound.pkiEzsigntemplatedocumentpageID) &&
        Objects.equals(this.iEzsigntemplatedocumentpageWidthimage, ezsigntemplatedocumentpageResponseCompound.iEzsigntemplatedocumentpageWidthimage) &&
        Objects.equals(this.iEzsigntemplatedocumentpageHeightimage, ezsigntemplatedocumentpageResponseCompound.iEzsigntemplatedocumentpageHeightimage) &&
        Objects.equals(this.iEzsigntemplatedocumentpageWidthpdf, ezsigntemplatedocumentpageResponseCompound.iEzsigntemplatedocumentpageWidthpdf) &&
        Objects.equals(this.iEzsigntemplatedocumentpageHeightpdf, ezsigntemplatedocumentpageResponseCompound.iEzsigntemplatedocumentpageHeightpdf) &&
        Objects.equals(this.iEzsigntemplatedocumentpagePagenumber, ezsigntemplatedocumentpageResponseCompound.iEzsigntemplatedocumentpagePagenumber) &&
        Objects.equals(this.sComputedImageurl, ezsigntemplatedocumentpageResponseCompound.sComputedImageurl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiEzsigntemplatedocumentpageID, iEzsigntemplatedocumentpageWidthimage, iEzsigntemplatedocumentpageHeightimage, iEzsigntemplatedocumentpageWidthpdf, iEzsigntemplatedocumentpageHeightpdf, iEzsigntemplatedocumentpagePagenumber, sComputedImageurl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsigntemplatedocumentpageResponseCompound {\n");
    sb.append("    pkiEzsigntemplatedocumentpageID: ").append(toIndentedString(pkiEzsigntemplatedocumentpageID)).append("\n");
    sb.append("    iEzsigntemplatedocumentpageWidthimage: ").append(toIndentedString(iEzsigntemplatedocumentpageWidthimage)).append("\n");
    sb.append("    iEzsigntemplatedocumentpageHeightimage: ").append(toIndentedString(iEzsigntemplatedocumentpageHeightimage)).append("\n");
    sb.append("    iEzsigntemplatedocumentpageWidthpdf: ").append(toIndentedString(iEzsigntemplatedocumentpageWidthpdf)).append("\n");
    sb.append("    iEzsigntemplatedocumentpageHeightpdf: ").append(toIndentedString(iEzsigntemplatedocumentpageHeightpdf)).append("\n");
    sb.append("    iEzsigntemplatedocumentpagePagenumber: ").append(toIndentedString(iEzsigntemplatedocumentpagePagenumber)).append("\n");
    sb.append("    sComputedImageurl: ").append(toIndentedString(sComputedImageurl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiEzsigntemplatedocumentpageID");
    openapiFields.add("iEzsigntemplatedocumentpageWidthimage");
    openapiFields.add("iEzsigntemplatedocumentpageHeightimage");
    openapiFields.add("iEzsigntemplatedocumentpageWidthpdf");
    openapiFields.add("iEzsigntemplatedocumentpageHeightpdf");
    openapiFields.add("iEzsigntemplatedocumentpagePagenumber");
    openapiFields.add("sComputedImageurl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiEzsigntemplatedocumentpageID");
    openapiRequiredFields.add("iEzsigntemplatedocumentpageWidthimage");
    openapiRequiredFields.add("iEzsigntemplatedocumentpageHeightimage");
    openapiRequiredFields.add("iEzsigntemplatedocumentpageWidthpdf");
    openapiRequiredFields.add("iEzsigntemplatedocumentpageHeightpdf");
    openapiRequiredFields.add("iEzsigntemplatedocumentpagePagenumber");
    openapiRequiredFields.add("sComputedImageurl");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EzsigntemplatedocumentpageResponseCompound
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EzsigntemplatedocumentpageResponseCompound.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsigntemplatedocumentpageResponseCompound is not found in the empty JSON string", EzsigntemplatedocumentpageResponseCompound.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EzsigntemplatedocumentpageResponseCompound.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsigntemplatedocumentpageResponseCompound` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EzsigntemplatedocumentpageResponseCompound.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("sComputedImageurl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sComputedImageurl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sComputedImageurl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsigntemplatedocumentpageResponseCompound.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsigntemplatedocumentpageResponseCompound' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsigntemplatedocumentpageResponseCompound> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsigntemplatedocumentpageResponseCompound.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsigntemplatedocumentpageResponseCompound>() {
           @Override
           public void write(JsonWriter out, EzsigntemplatedocumentpageResponseCompound value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsigntemplatedocumentpageResponseCompound read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EzsigntemplatedocumentpageResponseCompound given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EzsigntemplatedocumentpageResponseCompound
  * @throws IOException if the JSON string is invalid with respect to EzsigntemplatedocumentpageResponseCompound
  */
  public static EzsigntemplatedocumentpageResponseCompound fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsigntemplatedocumentpageResponseCompound.class);
  }

 /**
  * Convert an instance of EzsigntemplatedocumentpageResponseCompound to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

