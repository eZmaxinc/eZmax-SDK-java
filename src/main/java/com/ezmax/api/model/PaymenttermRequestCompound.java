/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.ezmax.api.model.FieldEPaymenttermType;
import com.ezmax.api.model.MultilingualPaymenttermDescription;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Paymentterm Object and children
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-22T13:32:26.779643241Z[Etc/UTC]")
public class PaymenttermRequestCompound {
  public static final String SERIALIZED_NAME_PKI_PAYMENTTERM_I_D = "pkiPaymenttermID";
  @SerializedName(SERIALIZED_NAME_PKI_PAYMENTTERM_I_D)
  private Integer pkiPaymenttermID;

  public static final String SERIALIZED_NAME_S_PAYMENTTERM_CODE = "sPaymenttermCode";
  @SerializedName(SERIALIZED_NAME_S_PAYMENTTERM_CODE)
  private String sPaymenttermCode;

  public static final String SERIALIZED_NAME_E_PAYMENTTERM_TYPE = "ePaymenttermType";
  @SerializedName(SERIALIZED_NAME_E_PAYMENTTERM_TYPE)
  private FieldEPaymenttermType ePaymenttermType;

  public static final String SERIALIZED_NAME_I_PAYMENTTERM_DAY = "iPaymenttermDay";
  @SerializedName(SERIALIZED_NAME_I_PAYMENTTERM_DAY)
  private Integer iPaymenttermDay;

  public static final String SERIALIZED_NAME_OBJ_PAYMENTTERM_DESCRIPTION = "objPaymenttermDescription";
  @SerializedName(SERIALIZED_NAME_OBJ_PAYMENTTERM_DESCRIPTION)
  private MultilingualPaymenttermDescription objPaymenttermDescription;

  public static final String SERIALIZED_NAME_B_PAYMENTTERM_ISACTIVE = "bPaymenttermIsactive";
  @SerializedName(SERIALIZED_NAME_B_PAYMENTTERM_ISACTIVE)
  private Boolean bPaymenttermIsactive;

  public PaymenttermRequestCompound() {
  }

  public PaymenttermRequestCompound pkiPaymenttermID(Integer pkiPaymenttermID) {
    
    this.pkiPaymenttermID = pkiPaymenttermID;
    return this;
  }

   /**
   * The unique ID of the Paymentterm
   * @return pkiPaymenttermID
  **/
  @javax.annotation.Nullable
  public Integer getPkiPaymenttermID() {
    return pkiPaymenttermID;
  }


  public void setPkiPaymenttermID(Integer pkiPaymenttermID) {
    this.pkiPaymenttermID = pkiPaymenttermID;
  }


  public PaymenttermRequestCompound sPaymenttermCode(String sPaymenttermCode) {
    
    this.sPaymenttermCode = sPaymenttermCode;
    return this;
  }

   /**
   * The code of the Paymentterm
   * @return sPaymenttermCode
  **/
  @javax.annotation.Nonnull
  public String getsPaymenttermCode() {
    return sPaymenttermCode;
  }


  public void setsPaymenttermCode(String sPaymenttermCode) {
    this.sPaymenttermCode = sPaymenttermCode;
  }


  public PaymenttermRequestCompound ePaymenttermType(FieldEPaymenttermType ePaymenttermType) {
    
    this.ePaymenttermType = ePaymenttermType;
    return this;
  }

   /**
   * Get ePaymenttermType
   * @return ePaymenttermType
  **/
  @javax.annotation.Nonnull
  public FieldEPaymenttermType getePaymenttermType() {
    return ePaymenttermType;
  }


  public void setePaymenttermType(FieldEPaymenttermType ePaymenttermType) {
    this.ePaymenttermType = ePaymenttermType;
  }


  public PaymenttermRequestCompound iPaymenttermDay(Integer iPaymenttermDay) {
    
    this.iPaymenttermDay = iPaymenttermDay;
    return this;
  }

   /**
   * The day of the Paymentterm
   * minimum: 0
   * maximum: 255
   * @return iPaymenttermDay
  **/
  @javax.annotation.Nonnull
  public Integer getiPaymenttermDay() {
    return iPaymenttermDay;
  }


  public void setiPaymenttermDay(Integer iPaymenttermDay) {
    this.iPaymenttermDay = iPaymenttermDay;
  }


  public PaymenttermRequestCompound objPaymenttermDescription(MultilingualPaymenttermDescription objPaymenttermDescription) {
    
    this.objPaymenttermDescription = objPaymenttermDescription;
    return this;
  }

   /**
   * Get objPaymenttermDescription
   * @return objPaymenttermDescription
  **/
  @javax.annotation.Nonnull
  public MultilingualPaymenttermDescription getObjPaymenttermDescription() {
    return objPaymenttermDescription;
  }


  public void setObjPaymenttermDescription(MultilingualPaymenttermDescription objPaymenttermDescription) {
    this.objPaymenttermDescription = objPaymenttermDescription;
  }


  public PaymenttermRequestCompound bPaymenttermIsactive(Boolean bPaymenttermIsactive) {
    
    this.bPaymenttermIsactive = bPaymenttermIsactive;
    return this;
  }

   /**
   * Whether the Paymentterm is active or not
   * @return bPaymenttermIsactive
  **/
  @javax.annotation.Nonnull
  public Boolean getbPaymenttermIsactive() {
    return bPaymenttermIsactive;
  }


  public void setbPaymenttermIsactive(Boolean bPaymenttermIsactive) {
    this.bPaymenttermIsactive = bPaymenttermIsactive;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymenttermRequestCompound paymenttermRequestCompound = (PaymenttermRequestCompound) o;
    return Objects.equals(this.pkiPaymenttermID, paymenttermRequestCompound.pkiPaymenttermID) &&
        Objects.equals(this.sPaymenttermCode, paymenttermRequestCompound.sPaymenttermCode) &&
        Objects.equals(this.ePaymenttermType, paymenttermRequestCompound.ePaymenttermType) &&
        Objects.equals(this.iPaymenttermDay, paymenttermRequestCompound.iPaymenttermDay) &&
        Objects.equals(this.objPaymenttermDescription, paymenttermRequestCompound.objPaymenttermDescription) &&
        Objects.equals(this.bPaymenttermIsactive, paymenttermRequestCompound.bPaymenttermIsactive);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiPaymenttermID, sPaymenttermCode, ePaymenttermType, iPaymenttermDay, objPaymenttermDescription, bPaymenttermIsactive);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymenttermRequestCompound {\n");
    sb.append("    pkiPaymenttermID: ").append(toIndentedString(pkiPaymenttermID)).append("\n");
    sb.append("    sPaymenttermCode: ").append(toIndentedString(sPaymenttermCode)).append("\n");
    sb.append("    ePaymenttermType: ").append(toIndentedString(ePaymenttermType)).append("\n");
    sb.append("    iPaymenttermDay: ").append(toIndentedString(iPaymenttermDay)).append("\n");
    sb.append("    objPaymenttermDescription: ").append(toIndentedString(objPaymenttermDescription)).append("\n");
    sb.append("    bPaymenttermIsactive: ").append(toIndentedString(bPaymenttermIsactive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiPaymenttermID");
    openapiFields.add("sPaymenttermCode");
    openapiFields.add("ePaymenttermType");
    openapiFields.add("iPaymenttermDay");
    openapiFields.add("objPaymenttermDescription");
    openapiFields.add("bPaymenttermIsactive");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sPaymenttermCode");
    openapiRequiredFields.add("ePaymenttermType");
    openapiRequiredFields.add("iPaymenttermDay");
    openapiRequiredFields.add("objPaymenttermDescription");
    openapiRequiredFields.add("bPaymenttermIsactive");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PaymenttermRequestCompound
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PaymenttermRequestCompound.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymenttermRequestCompound is not found in the empty JSON string", PaymenttermRequestCompound.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PaymenttermRequestCompound.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymenttermRequestCompound` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymenttermRequestCompound.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("sPaymenttermCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sPaymenttermCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sPaymenttermCode").toString()));
      }
      // validate the required field `objPaymenttermDescription`
      MultilingualPaymenttermDescription.validateJsonObject(jsonObj.getAsJsonObject("objPaymenttermDescription"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymenttermRequestCompound.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymenttermRequestCompound' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymenttermRequestCompound> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymenttermRequestCompound.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymenttermRequestCompound>() {
           @Override
           public void write(JsonWriter out, PaymenttermRequestCompound value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymenttermRequestCompound read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaymenttermRequestCompound given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaymenttermRequestCompound
  * @throws IOException if the JSON string is invalid with respect to PaymenttermRequestCompound
  */
  public static PaymenttermRequestCompound fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymenttermRequestCompound.class);
  }

 /**
  * Convert an instance of PaymenttermRequestCompound to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

