/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * Request for POST /1/object/ezsigndocument/{pkiEzsigndocumentID}/extractText
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-28T21:41:20.249020914Z[Etc/UTC]", comments = "Generator version: 7.11.0")
public class EzsigndocumentExtractTextV1Request {
  public static final String SERIALIZED_NAME_I_PAGE = "iPage";
  @SerializedName(SERIALIZED_NAME_I_PAGE)
  @javax.annotation.Nonnull
  private Integer iPage;

  /**
   * The section of the page
   */
  @JsonAdapter(ESectionEnum.Adapter.class)
  public enum ESectionEnum {
    FIRST_LINE("FirstLine"),
    
    LAST_LINE("LastLine"),
    
    REGION("Region");

    private String value;

    ESectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ESectionEnum fromValue(String value) {
      for (ESectionEnum b : ESectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ESectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ESectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ESectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ESectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ESectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_E_SECTION = "eSection";
  @SerializedName(SERIALIZED_NAME_E_SECTION)
  @javax.annotation.Nullable
  private ESectionEnum eSection;

  public static final String SERIALIZED_NAME_I_X = "iX";
  @SerializedName(SERIALIZED_NAME_I_X)
  @javax.annotation.Nullable
  private Integer iX;

  public static final String SERIALIZED_NAME_I_Y = "iY";
  @SerializedName(SERIALIZED_NAME_I_Y)
  @javax.annotation.Nullable
  private Integer iY;

  public static final String SERIALIZED_NAME_I_WIDTH = "iWidth";
  @SerializedName(SERIALIZED_NAME_I_WIDTH)
  @javax.annotation.Nullable
  private Integer iWidth;

  public static final String SERIALIZED_NAME_I_HEIGHT = "iHeight";
  @SerializedName(SERIALIZED_NAME_I_HEIGHT)
  @javax.annotation.Nullable
  private Integer iHeight;

  public EzsigndocumentExtractTextV1Request() {
  }

  public EzsigndocumentExtractTextV1Request iPage(@javax.annotation.Nonnull Integer iPage) {
    this.iPage = iPage;
    return this;
  }

  /**
   * The page where the area is located
   * @return iPage
   */
  @javax.annotation.Nonnull
  public Integer getiPage() {
    return iPage;
  }

  public void setiPage(@javax.annotation.Nonnull Integer iPage) {
    this.iPage = iPage;
  }


  public EzsigndocumentExtractTextV1Request eSection(@javax.annotation.Nullable ESectionEnum eSection) {
    this.eSection = eSection;
    return this;
  }

  /**
   * The section of the page
   * @return eSection
   */
  @javax.annotation.Nullable
  public ESectionEnum geteSection() {
    return eSection;
  }

  public void seteSection(@javax.annotation.Nullable ESectionEnum eSection) {
    this.eSection = eSection;
  }


  public EzsigndocumentExtractTextV1Request iX(@javax.annotation.Nullable Integer iX) {
    this.iX = iX;
    return this;
  }

  /**
   * The X coordinate (Horizontal). Require when eSection &#x3D; &#39;Region&#39; or eSection is not set.
   * @return iX
   */
  @javax.annotation.Nullable
  public Integer getiX() {
    return iX;
  }

  public void setiX(@javax.annotation.Nullable Integer iX) {
    this.iX = iX;
  }


  public EzsigndocumentExtractTextV1Request iY(@javax.annotation.Nullable Integer iY) {
    this.iY = iY;
    return this;
  }

  /**
   * The Y coordinate (Vertical). Require when eSection &#x3D; &#39;Region&#39; or eSection is not set.
   * @return iY
   */
  @javax.annotation.Nullable
  public Integer getiY() {
    return iY;
  }

  public void setiY(@javax.annotation.Nullable Integer iY) {
    this.iY = iY;
  }


  public EzsigndocumentExtractTextV1Request iWidth(@javax.annotation.Nullable Integer iWidth) {
    this.iWidth = iWidth;
    return this;
  }

  /**
   * Area&#39;s width. Require when eSection &#x3D; &#39;Region&#39; or eSection is not set.
   * @return iWidth
   */
  @javax.annotation.Nullable
  public Integer getiWidth() {
    return iWidth;
  }

  public void setiWidth(@javax.annotation.Nullable Integer iWidth) {
    this.iWidth = iWidth;
  }


  public EzsigndocumentExtractTextV1Request iHeight(@javax.annotation.Nullable Integer iHeight) {
    this.iHeight = iHeight;
    return this;
  }

  /**
   * Area&#39;s height. Require when eSection &#x3D; &#39;Region&#39; or eSection is not set.
   * @return iHeight
   */
  @javax.annotation.Nullable
  public Integer getiHeight() {
    return iHeight;
  }

  public void setiHeight(@javax.annotation.Nullable Integer iHeight) {
    this.iHeight = iHeight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsigndocumentExtractTextV1Request ezsigndocumentExtractTextV1Request = (EzsigndocumentExtractTextV1Request) o;
    return Objects.equals(this.iPage, ezsigndocumentExtractTextV1Request.iPage) &&
        Objects.equals(this.eSection, ezsigndocumentExtractTextV1Request.eSection) &&
        Objects.equals(this.iX, ezsigndocumentExtractTextV1Request.iX) &&
        Objects.equals(this.iY, ezsigndocumentExtractTextV1Request.iY) &&
        Objects.equals(this.iWidth, ezsigndocumentExtractTextV1Request.iWidth) &&
        Objects.equals(this.iHeight, ezsigndocumentExtractTextV1Request.iHeight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(iPage, eSection, iX, iY, iWidth, iHeight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsigndocumentExtractTextV1Request {\n");
    sb.append("    iPage: ").append(toIndentedString(iPage)).append("\n");
    sb.append("    eSection: ").append(toIndentedString(eSection)).append("\n");
    sb.append("    iX: ").append(toIndentedString(iX)).append("\n");
    sb.append("    iY: ").append(toIndentedString(iY)).append("\n");
    sb.append("    iWidth: ").append(toIndentedString(iWidth)).append("\n");
    sb.append("    iHeight: ").append(toIndentedString(iHeight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("iPage");
    openapiFields.add("eSection");
    openapiFields.add("iX");
    openapiFields.add("iY");
    openapiFields.add("iWidth");
    openapiFields.add("iHeight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("iPage");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EzsigndocumentExtractTextV1Request
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EzsigndocumentExtractTextV1Request.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsigndocumentExtractTextV1Request is not found in the empty JSON string", EzsigndocumentExtractTextV1Request.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EzsigndocumentExtractTextV1Request.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsigndocumentExtractTextV1Request` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EzsigndocumentExtractTextV1Request.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("eSection") != null && !jsonObj.get("eSection").isJsonNull()) && !jsonObj.get("eSection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eSection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eSection").toString()));
      }
      // validate the optional field `eSection`
      if (jsonObj.get("eSection") != null && !jsonObj.get("eSection").isJsonNull()) {
        ESectionEnum.validateJsonElement(jsonObj.get("eSection"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsigndocumentExtractTextV1Request.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsigndocumentExtractTextV1Request' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsigndocumentExtractTextV1Request> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsigndocumentExtractTextV1Request.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsigndocumentExtractTextV1Request>() {
           @Override
           public void write(JsonWriter out, EzsigndocumentExtractTextV1Request value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsigndocumentExtractTextV1Request read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EzsigndocumentExtractTextV1Request given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EzsigndocumentExtractTextV1Request
   * @throws IOException if the JSON string is invalid with respect to EzsigndocumentExtractTextV1Request
   */
  public static EzsigndocumentExtractTextV1Request fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsigndocumentExtractTextV1Request.class);
  }

  /**
   * Convert an instance of EzsigndocumentExtractTextV1Request to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

