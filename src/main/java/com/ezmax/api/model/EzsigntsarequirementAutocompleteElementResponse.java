/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.17
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Ezsigntsarequirement AutocompleteElement Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-08T21:18:02.097019897Z[Etc/UTC]")
public class EzsigntsarequirementAutocompleteElementResponse {
  public static final String SERIALIZED_NAME_S_EZSIGNTSAREQUIREMENT_DESCRIPTION_X = "sEzsigntsarequirementDescriptionX";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNTSAREQUIREMENT_DESCRIPTION_X)
  private String sEzsigntsarequirementDescriptionX;

  public static final String SERIALIZED_NAME_PKI_EZSIGNTSAREQUIREMENT_I_D = "pkiEzsigntsarequirementID";
  @SerializedName(SERIALIZED_NAME_PKI_EZSIGNTSAREQUIREMENT_I_D)
  private Integer pkiEzsigntsarequirementID;

  public static final String SERIALIZED_NAME_B_EZSIGNTSAREQUIREMENT_ISACTIVE = "bEzsigntsarequirementIsactive";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNTSAREQUIREMENT_ISACTIVE)
  private Boolean bEzsigntsarequirementIsactive;

  public static final String SERIALIZED_NAME_B_DISABLED = "bDisabled";
  @SerializedName(SERIALIZED_NAME_B_DISABLED)
  private Boolean bDisabled;

  public EzsigntsarequirementAutocompleteElementResponse() {
  }

  public EzsigntsarequirementAutocompleteElementResponse sEzsigntsarequirementDescriptionX(String sEzsigntsarequirementDescriptionX) {
    
    this.sEzsigntsarequirementDescriptionX = sEzsigntsarequirementDescriptionX;
    return this;
  }

   /**
   * The description of the Ezsigntsarequirement in the language of the requester
   * @return sEzsigntsarequirementDescriptionX
  **/
  @javax.annotation.Nonnull

  public String getsEzsigntsarequirementDescriptionX() {
    return sEzsigntsarequirementDescriptionX;
  }


  public void setsEzsigntsarequirementDescriptionX(String sEzsigntsarequirementDescriptionX) {
    this.sEzsigntsarequirementDescriptionX = sEzsigntsarequirementDescriptionX;
  }


  public EzsigntsarequirementAutocompleteElementResponse pkiEzsigntsarequirementID(Integer pkiEzsigntsarequirementID) {
    
    this.pkiEzsigntsarequirementID = pkiEzsigntsarequirementID;
    return this;
  }

   /**
   * The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server&#39;s time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server&#39;s time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
   * minimum: 1
   * maximum: 3
   * @return pkiEzsigntsarequirementID
  **/
  @javax.annotation.Nonnull

  public Integer getPkiEzsigntsarequirementID() {
    return pkiEzsigntsarequirementID;
  }


  public void setPkiEzsigntsarequirementID(Integer pkiEzsigntsarequirementID) {
    this.pkiEzsigntsarequirementID = pkiEzsigntsarequirementID;
  }


  public EzsigntsarequirementAutocompleteElementResponse bEzsigntsarequirementIsactive(Boolean bEzsigntsarequirementIsactive) {
    
    this.bEzsigntsarequirementIsactive = bEzsigntsarequirementIsactive;
    return this;
  }

   /**
   * Whether the Ezsigntsarequirement is active or not
   * @return bEzsigntsarequirementIsactive
  **/
  @javax.annotation.Nonnull

  public Boolean getbEzsigntsarequirementIsactive() {
    return bEzsigntsarequirementIsactive;
  }


  public void setbEzsigntsarequirementIsactive(Boolean bEzsigntsarequirementIsactive) {
    this.bEzsigntsarequirementIsactive = bEzsigntsarequirementIsactive;
  }


  public EzsigntsarequirementAutocompleteElementResponse bDisabled(Boolean bDisabled) {
    
    this.bDisabled = bDisabled;
    return this;
  }

   /**
   * Indicates if the element is disabled in the context
   * @return bDisabled
  **/
  @javax.annotation.Nonnull

  public Boolean getbDisabled() {
    return bDisabled;
  }


  public void setbDisabled(Boolean bDisabled) {
    this.bDisabled = bDisabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsigntsarequirementAutocompleteElementResponse ezsigntsarequirementAutocompleteElementResponse = (EzsigntsarequirementAutocompleteElementResponse) o;
    return Objects.equals(this.sEzsigntsarequirementDescriptionX, ezsigntsarequirementAutocompleteElementResponse.sEzsigntsarequirementDescriptionX) &&
        Objects.equals(this.pkiEzsigntsarequirementID, ezsigntsarequirementAutocompleteElementResponse.pkiEzsigntsarequirementID) &&
        Objects.equals(this.bEzsigntsarequirementIsactive, ezsigntsarequirementAutocompleteElementResponse.bEzsigntsarequirementIsactive) &&
        Objects.equals(this.bDisabled, ezsigntsarequirementAutocompleteElementResponse.bDisabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sEzsigntsarequirementDescriptionX, pkiEzsigntsarequirementID, bEzsigntsarequirementIsactive, bDisabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsigntsarequirementAutocompleteElementResponse {\n");
    sb.append("    sEzsigntsarequirementDescriptionX: ").append(toIndentedString(sEzsigntsarequirementDescriptionX)).append("\n");
    sb.append("    pkiEzsigntsarequirementID: ").append(toIndentedString(pkiEzsigntsarequirementID)).append("\n");
    sb.append("    bEzsigntsarequirementIsactive: ").append(toIndentedString(bEzsigntsarequirementIsactive)).append("\n");
    sb.append("    bDisabled: ").append(toIndentedString(bDisabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sEzsigntsarequirementDescriptionX");
    openapiFields.add("pkiEzsigntsarequirementID");
    openapiFields.add("bEzsigntsarequirementIsactive");
    openapiFields.add("bDisabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sEzsigntsarequirementDescriptionX");
    openapiRequiredFields.add("pkiEzsigntsarequirementID");
    openapiRequiredFields.add("bEzsigntsarequirementIsactive");
    openapiRequiredFields.add("bDisabled");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EzsigntsarequirementAutocompleteElementResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EzsigntsarequirementAutocompleteElementResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsigntsarequirementAutocompleteElementResponse is not found in the empty JSON string", EzsigntsarequirementAutocompleteElementResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EzsigntsarequirementAutocompleteElementResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsigntsarequirementAutocompleteElementResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EzsigntsarequirementAutocompleteElementResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("sEzsigntsarequirementDescriptionX").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsigntsarequirementDescriptionX` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsigntsarequirementDescriptionX").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsigntsarequirementAutocompleteElementResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsigntsarequirementAutocompleteElementResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsigntsarequirementAutocompleteElementResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsigntsarequirementAutocompleteElementResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsigntsarequirementAutocompleteElementResponse>() {
           @Override
           public void write(JsonWriter out, EzsigntsarequirementAutocompleteElementResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsigntsarequirementAutocompleteElementResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EzsigntsarequirementAutocompleteElementResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EzsigntsarequirementAutocompleteElementResponse
  * @throws IOException if the JSON string is invalid with respect to EzsigntsarequirementAutocompleteElementResponse
  */
  public static EzsigntsarequirementAutocompleteElementResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsigntsarequirementAutocompleteElementResponse.class);
  }

 /**
  * Convert an instance of EzsigntsarequirementAutocompleteElementResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

