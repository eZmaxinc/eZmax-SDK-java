/*
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * Generic Autocomplete Response
 */
@ApiModel(description = "Generic Autocomplete Response")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-02-20T18:10:31.233662Z[Etc/UTC]")
public class CustomAutocompleteElementResponse {
  public static final String SERIALIZED_NAME_S_CATEGORY = "sCategory";
  @SerializedName(SERIALIZED_NAME_S_CATEGORY)
  private String sCategory;

  public static final String SERIALIZED_NAME_S_LABEL = "sLabel";
  @SerializedName(SERIALIZED_NAME_S_LABEL)
  private String sLabel;

  public static final String SERIALIZED_NAME_M_VALUE = "mValue";
  @SerializedName(SERIALIZED_NAME_M_VALUE)
  private String mValue;

  public CustomAutocompleteElementResponse() { 
  }

  public CustomAutocompleteElementResponse sCategory(String sCategory) {
    
    this.sCategory = sCategory;
    return this;
  }

   /**
   * The Category for the dropdown or an empty string if not categorized
   * @return sCategory
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The Category for the dropdown or an empty string if not categorized")

  public String getsCategory() {
    return sCategory;
  }


  public void setsCategory(String sCategory) {
    this.sCategory = sCategory;
  }


  public CustomAutocompleteElementResponse sLabel(String sLabel) {
    
    this.sLabel = sLabel;
    return this;
  }

   /**
   * The Description of the element
   * @return sLabel
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The Description of the element")

  public String getsLabel() {
    return sLabel;
  }


  public void setsLabel(String sLabel) {
    this.sLabel = sLabel;
  }


  public CustomAutocompleteElementResponse mValue(String mValue) {
    
    this.mValue = mValue;
    return this;
  }

   /**
   * The Unique ID of the element
   * @return mValue
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The Unique ID of the element")

  public String getmValue() {
    return mValue;
  }


  public void setmValue(String mValue) {
    this.mValue = mValue;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomAutocompleteElementResponse customAutocompleteElementResponse = (CustomAutocompleteElementResponse) o;
    return Objects.equals(this.sCategory, customAutocompleteElementResponse.sCategory) &&
        Objects.equals(this.sLabel, customAutocompleteElementResponse.sLabel) &&
        Objects.equals(this.mValue, customAutocompleteElementResponse.mValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sCategory, sLabel, mValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomAutocompleteElementResponse {\n");
    sb.append("    sCategory: ").append(toIndentedString(sCategory)).append("\n");
    sb.append("    sLabel: ").append(toIndentedString(sLabel)).append("\n");
    sb.append("    mValue: ").append(toIndentedString(mValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sCategory");
    openapiFields.add("sLabel");
    openapiFields.add("mValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sCategory");
    openapiRequiredFields.add("sLabel");
    openapiRequiredFields.add("mValue");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomAutocompleteElementResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CustomAutocompleteElementResponse.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has reuqired fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomAutocompleteElementResponse is not found in the empty JSON string", CustomAutocompleteElementResponse.openapiRequiredFields.toString()));
        }
      }
      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CustomAutocompleteElementResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomAutocompleteElementResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomAutocompleteElementResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomAutocompleteElementResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomAutocompleteElementResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomAutocompleteElementResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomAutocompleteElementResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomAutocompleteElementResponse>() {
           @Override
           public void write(JsonWriter out, CustomAutocompleteElementResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomAutocompleteElementResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomAutocompleteElementResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomAutocompleteElementResponse
  * @throws IOException if the JSON string is invalid with respect to CustomAutocompleteElementResponse
  */
  public static CustomAutocompleteElementResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomAutocompleteElementResponse.class);
  }

 /**
  * Convert an instance of CustomAutocompleteElementResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

