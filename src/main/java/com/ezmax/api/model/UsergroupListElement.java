/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Usergroup List Element
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-15T21:36:57.992386529Z[Etc/UTC]", comments = "Generator version: 7.10.0")
public class UsergroupListElement {
  public static final String SERIALIZED_NAME_PKI_USERGROUP_I_D = "pkiUsergroupID";
  @SerializedName(SERIALIZED_NAME_PKI_USERGROUP_I_D)
  @javax.annotation.Nonnull
  private Integer pkiUsergroupID;

  public static final String SERIALIZED_NAME_S_USERGROUP_NAME_X = "sUsergroupNameX";
  @SerializedName(SERIALIZED_NAME_S_USERGROUP_NAME_X)
  @javax.annotation.Nonnull
  private String sUsergroupNameX;

  public static final String SERIALIZED_NAME_I_COUNT_USER = "iCountUser";
  @SerializedName(SERIALIZED_NAME_I_COUNT_USER)
  @javax.annotation.Nonnull
  private Integer iCountUser;

  public UsergroupListElement() {
  }

  public UsergroupListElement pkiUsergroupID(@javax.annotation.Nonnull Integer pkiUsergroupID) {
    this.pkiUsergroupID = pkiUsergroupID;
    return this;
  }

  /**
   * The unique ID of the Usergroup
   * minimum: 0
   * maximum: 255
   * @return pkiUsergroupID
   */
  @javax.annotation.Nonnull
  public Integer getPkiUsergroupID() {
    return pkiUsergroupID;
  }

  public void setPkiUsergroupID(@javax.annotation.Nonnull Integer pkiUsergroupID) {
    this.pkiUsergroupID = pkiUsergroupID;
  }


  public UsergroupListElement sUsergroupNameX(@javax.annotation.Nonnull String sUsergroupNameX) {
    this.sUsergroupNameX = sUsergroupNameX;
    return this;
  }

  /**
   * The Name of the Usergroup in the language of the requester
   * @return sUsergroupNameX
   */
  @javax.annotation.Nonnull
  public String getsUsergroupNameX() {
    return sUsergroupNameX;
  }

  public void setsUsergroupNameX(@javax.annotation.Nonnull String sUsergroupNameX) {
    this.sUsergroupNameX = sUsergroupNameX;
  }


  public UsergroupListElement iCountUser(@javax.annotation.Nonnull Integer iCountUser) {
    this.iCountUser = iCountUser;
    return this;
  }

  /**
   * Number of users in group
   * minimum: 0
   * maximum: 16777215
   * @return iCountUser
   */
  @javax.annotation.Nonnull
  public Integer getiCountUser() {
    return iCountUser;
  }

  public void setiCountUser(@javax.annotation.Nonnull Integer iCountUser) {
    this.iCountUser = iCountUser;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsergroupListElement usergroupListElement = (UsergroupListElement) o;
    return Objects.equals(this.pkiUsergroupID, usergroupListElement.pkiUsergroupID) &&
        Objects.equals(this.sUsergroupNameX, usergroupListElement.sUsergroupNameX) &&
        Objects.equals(this.iCountUser, usergroupListElement.iCountUser);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiUsergroupID, sUsergroupNameX, iCountUser);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsergroupListElement {\n");
    sb.append("    pkiUsergroupID: ").append(toIndentedString(pkiUsergroupID)).append("\n");
    sb.append("    sUsergroupNameX: ").append(toIndentedString(sUsergroupNameX)).append("\n");
    sb.append("    iCountUser: ").append(toIndentedString(iCountUser)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiUsergroupID");
    openapiFields.add("sUsergroupNameX");
    openapiFields.add("iCountUser");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiUsergroupID");
    openapiRequiredFields.add("sUsergroupNameX");
    openapiRequiredFields.add("iCountUser");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UsergroupListElement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UsergroupListElement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsergroupListElement is not found in the empty JSON string", UsergroupListElement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UsergroupListElement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UsergroupListElement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UsergroupListElement.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("sUsergroupNameX").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sUsergroupNameX` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sUsergroupNameX").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsergroupListElement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsergroupListElement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsergroupListElement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsergroupListElement.class));

       return (TypeAdapter<T>) new TypeAdapter<UsergroupListElement>() {
           @Override
           public void write(JsonWriter out, UsergroupListElement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UsergroupListElement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UsergroupListElement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UsergroupListElement
   * @throws IOException if the JSON string is invalid with respect to UsergroupListElement
   */
  public static UsergroupListElement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsergroupListElement.class);
  }

  /**
   * Convert an instance of UsergroupListElement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

