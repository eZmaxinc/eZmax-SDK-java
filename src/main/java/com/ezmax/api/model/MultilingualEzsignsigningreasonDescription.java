/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * The description of the Ezsignsigningreason
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-16T17:00:54.231192679Z[Etc/UTC]", comments = "Generator version: 7.10.0")
public class MultilingualEzsignsigningreasonDescription {
  public static final String SERIALIZED_NAME_S_EZSIGNSIGNINGREASON_DESCRIPTION1 = "sEzsignsigningreasonDescription1";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNSIGNINGREASON_DESCRIPTION1)
  @javax.annotation.Nullable
  private String sEzsignsigningreasonDescription1;

  public static final String SERIALIZED_NAME_S_EZSIGNSIGNINGREASON_DESCRIPTION2 = "sEzsignsigningreasonDescription2";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNSIGNINGREASON_DESCRIPTION2)
  @javax.annotation.Nullable
  private String sEzsignsigningreasonDescription2;

  public MultilingualEzsignsigningreasonDescription() {
  }

  public MultilingualEzsignsigningreasonDescription sEzsignsigningreasonDescription1(@javax.annotation.Nullable String sEzsignsigningreasonDescription1) {
    this.sEzsignsigningreasonDescription1 = sEzsignsigningreasonDescription1;
    return this;
  }

  /**
   * The description of the Ezsignsigningreason in French
   * @return sEzsignsigningreasonDescription1
   */
  @javax.annotation.Nullable
  public String getsEzsignsigningreasonDescription1() {
    return sEzsignsigningreasonDescription1;
  }

  public void setsEzsignsigningreasonDescription1(@javax.annotation.Nullable String sEzsignsigningreasonDescription1) {
    this.sEzsignsigningreasonDescription1 = sEzsignsigningreasonDescription1;
  }


  public MultilingualEzsignsigningreasonDescription sEzsignsigningreasonDescription2(@javax.annotation.Nullable String sEzsignsigningreasonDescription2) {
    this.sEzsignsigningreasonDescription2 = sEzsignsigningreasonDescription2;
    return this;
  }

  /**
   * The description of the Ezsignsigningreason in English
   * @return sEzsignsigningreasonDescription2
   */
  @javax.annotation.Nullable
  public String getsEzsignsigningreasonDescription2() {
    return sEzsignsigningreasonDescription2;
  }

  public void setsEzsignsigningreasonDescription2(@javax.annotation.Nullable String sEzsignsigningreasonDescription2) {
    this.sEzsignsigningreasonDescription2 = sEzsignsigningreasonDescription2;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MultilingualEzsignsigningreasonDescription multilingualEzsignsigningreasonDescription = (MultilingualEzsignsigningreasonDescription) o;
    return Objects.equals(this.sEzsignsigningreasonDescription1, multilingualEzsignsigningreasonDescription.sEzsignsigningreasonDescription1) &&
        Objects.equals(this.sEzsignsigningreasonDescription2, multilingualEzsignsigningreasonDescription.sEzsignsigningreasonDescription2);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sEzsignsigningreasonDescription1, sEzsignsigningreasonDescription2);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MultilingualEzsignsigningreasonDescription {\n");
    sb.append("    sEzsignsigningreasonDescription1: ").append(toIndentedString(sEzsignsigningreasonDescription1)).append("\n");
    sb.append("    sEzsignsigningreasonDescription2: ").append(toIndentedString(sEzsignsigningreasonDescription2)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sEzsignsigningreasonDescription1");
    openapiFields.add("sEzsignsigningreasonDescription2");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MultilingualEzsignsigningreasonDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MultilingualEzsignsigningreasonDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MultilingualEzsignsigningreasonDescription is not found in the empty JSON string", MultilingualEzsignsigningreasonDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MultilingualEzsignsigningreasonDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MultilingualEzsignsigningreasonDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("sEzsignsigningreasonDescription1") != null && !jsonObj.get("sEzsignsigningreasonDescription1").isJsonNull()) && !jsonObj.get("sEzsignsigningreasonDescription1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsignsigningreasonDescription1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsignsigningreasonDescription1").toString()));
      }
      if ((jsonObj.get("sEzsignsigningreasonDescription2") != null && !jsonObj.get("sEzsignsigningreasonDescription2").isJsonNull()) && !jsonObj.get("sEzsignsigningreasonDescription2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsignsigningreasonDescription2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsignsigningreasonDescription2").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MultilingualEzsignsigningreasonDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MultilingualEzsignsigningreasonDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MultilingualEzsignsigningreasonDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MultilingualEzsignsigningreasonDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<MultilingualEzsignsigningreasonDescription>() {
           @Override
           public void write(JsonWriter out, MultilingualEzsignsigningreasonDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MultilingualEzsignsigningreasonDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MultilingualEzsignsigningreasonDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MultilingualEzsignsigningreasonDescription
   * @throws IOException if the JSON string is invalid with respect to MultilingualEzsignsigningreasonDescription
   */
  public static MultilingualEzsignsigningreasonDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MultilingualEzsignsigningreasonDescription.class);
  }

  /**
   * Convert an instance of MultilingualEzsignsigningreasonDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

