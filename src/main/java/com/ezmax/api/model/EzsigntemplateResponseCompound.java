/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.CommonAudit;
import com.ezmax.api.model.EzsigntemplatedocumentResponse;
import com.ezmax.api.model.EzsigntemplatesignerResponseCompound;
import com.ezmax.api.model.FieldEEzsigntemplateType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Ezsigntemplate Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-17T15:40:48.792680082Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class EzsigntemplateResponseCompound {
  public static final String SERIALIZED_NAME_PKI_EZSIGNTEMPLATE_I_D = "pkiEzsigntemplateID";
  @SerializedName(SERIALIZED_NAME_PKI_EZSIGNTEMPLATE_I_D)
  private Integer pkiEzsigntemplateID;

  public static final String SERIALIZED_NAME_FKI_EZSIGNTEMPLATEDOCUMENT_I_D = "fkiEzsigntemplatedocumentID";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNTEMPLATEDOCUMENT_I_D)
  private Integer fkiEzsigntemplatedocumentID;

  public static final String SERIALIZED_NAME_FKI_EZSIGNFOLDERTYPE_I_D = "fkiEzsignfoldertypeID";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNFOLDERTYPE_I_D)
  private Integer fkiEzsignfoldertypeID;

  public static final String SERIALIZED_NAME_FKI_LANGUAGE_I_D = "fkiLanguageID";
  @SerializedName(SERIALIZED_NAME_FKI_LANGUAGE_I_D)
  private Integer fkiLanguageID;

  public static final String SERIALIZED_NAME_FKI_EZDOCTEMPLATEDOCUMENT_I_D = "fkiEzdoctemplatedocumentID";
  @SerializedName(SERIALIZED_NAME_FKI_EZDOCTEMPLATEDOCUMENT_I_D)
  private Integer fkiEzdoctemplatedocumentID;

  public static final String SERIALIZED_NAME_S_LANGUAGE_NAME_X = "sLanguageNameX";
  @SerializedName(SERIALIZED_NAME_S_LANGUAGE_NAME_X)
  private String sLanguageNameX;

  public static final String SERIALIZED_NAME_S_EZSIGNTEMPLATE_DESCRIPTION = "sEzsigntemplateDescription";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNTEMPLATE_DESCRIPTION)
  private String sEzsigntemplateDescription;

  public static final String SERIALIZED_NAME_S_EZSIGNTEMPLATE_EXTERNALDESCRIPTION = "sEzsigntemplateExternaldescription";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNTEMPLATE_EXTERNALDESCRIPTION)
  private String sEzsigntemplateExternaldescription;

  public static final String SERIALIZED_NAME_T_EZSIGNTEMPLATE_COMMENT = "tEzsigntemplateComment";
  @SerializedName(SERIALIZED_NAME_T_EZSIGNTEMPLATE_COMMENT)
  private String tEzsigntemplateComment;

  public static final String SERIALIZED_NAME_S_EZSIGNTEMPLATE_FILENAMEPATTERN = "sEzsigntemplateFilenamepattern";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNTEMPLATE_FILENAMEPATTERN)
  private String sEzsigntemplateFilenamepattern;

  public static final String SERIALIZED_NAME_B_EZSIGNTEMPLATE_ADMINONLY = "bEzsigntemplateAdminonly";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNTEMPLATE_ADMINONLY)
  private Boolean bEzsigntemplateAdminonly;

  public static final String SERIALIZED_NAME_S_EZSIGNFOLDERTYPE_NAME_X = "sEzsignfoldertypeNameX";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNFOLDERTYPE_NAME_X)
  private String sEzsignfoldertypeNameX;

  public static final String SERIALIZED_NAME_OBJ_AUDIT = "objAudit";
  @SerializedName(SERIALIZED_NAME_OBJ_AUDIT)
  private CommonAudit objAudit;

  public static final String SERIALIZED_NAME_B_EZSIGNTEMPLATE_EDITALLOWED = "bEzsigntemplateEditallowed";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNTEMPLATE_EDITALLOWED)
  private Boolean bEzsigntemplateEditallowed;

  public static final String SERIALIZED_NAME_E_EZSIGNTEMPLATE_TYPE = "eEzsigntemplateType";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNTEMPLATE_TYPE)
  private FieldEEzsigntemplateType eEzsigntemplateType;

  public static final String SERIALIZED_NAME_OBJ_EZSIGNTEMPLATEDOCUMENT = "objEzsigntemplatedocument";
  @SerializedName(SERIALIZED_NAME_OBJ_EZSIGNTEMPLATEDOCUMENT)
  private EzsigntemplatedocumentResponse objEzsigntemplatedocument;

  public static final String SERIALIZED_NAME_A_OBJ_EZSIGNTEMPLATESIGNER = "a_objEzsigntemplatesigner";
  @SerializedName(SERIALIZED_NAME_A_OBJ_EZSIGNTEMPLATESIGNER)
  private List<EzsigntemplatesignerResponseCompound> aObjEzsigntemplatesigner = new ArrayList<>();

  public EzsigntemplateResponseCompound() {
  }

  public EzsigntemplateResponseCompound pkiEzsigntemplateID(Integer pkiEzsigntemplateID) {
    this.pkiEzsigntemplateID = pkiEzsigntemplateID;
    return this;
  }

  /**
   * The unique ID of the Ezsigntemplate
   * minimum: 0
   * @return pkiEzsigntemplateID
   */
  @javax.annotation.Nonnull
  public Integer getPkiEzsigntemplateID() {
    return pkiEzsigntemplateID;
  }

  public void setPkiEzsigntemplateID(Integer pkiEzsigntemplateID) {
    this.pkiEzsigntemplateID = pkiEzsigntemplateID;
  }


  public EzsigntemplateResponseCompound fkiEzsigntemplatedocumentID(Integer fkiEzsigntemplatedocumentID) {
    this.fkiEzsigntemplatedocumentID = fkiEzsigntemplatedocumentID;
    return this;
  }

  /**
   * The unique ID of the Ezsigntemplatedocument
   * minimum: 0
   * @return fkiEzsigntemplatedocumentID
   */
  @javax.annotation.Nullable
  public Integer getFkiEzsigntemplatedocumentID() {
    return fkiEzsigntemplatedocumentID;
  }

  public void setFkiEzsigntemplatedocumentID(Integer fkiEzsigntemplatedocumentID) {
    this.fkiEzsigntemplatedocumentID = fkiEzsigntemplatedocumentID;
  }


  public EzsigntemplateResponseCompound fkiEzsignfoldertypeID(Integer fkiEzsignfoldertypeID) {
    this.fkiEzsignfoldertypeID = fkiEzsignfoldertypeID;
    return this;
  }

  /**
   * The unique ID of the Ezsignfoldertype.
   * minimum: 0
   * maximum: 65535
   * @return fkiEzsignfoldertypeID
   */
  @javax.annotation.Nullable
  public Integer getFkiEzsignfoldertypeID() {
    return fkiEzsignfoldertypeID;
  }

  public void setFkiEzsignfoldertypeID(Integer fkiEzsignfoldertypeID) {
    this.fkiEzsignfoldertypeID = fkiEzsignfoldertypeID;
  }


  public EzsigntemplateResponseCompound fkiLanguageID(Integer fkiLanguageID) {
    this.fkiLanguageID = fkiLanguageID;
    return this;
  }

  /**
   * The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
   * minimum: 1
   * maximum: 2
   * @return fkiLanguageID
   */
  @javax.annotation.Nonnull
  public Integer getFkiLanguageID() {
    return fkiLanguageID;
  }

  public void setFkiLanguageID(Integer fkiLanguageID) {
    this.fkiLanguageID = fkiLanguageID;
  }


  public EzsigntemplateResponseCompound fkiEzdoctemplatedocumentID(Integer fkiEzdoctemplatedocumentID) {
    this.fkiEzdoctemplatedocumentID = fkiEzdoctemplatedocumentID;
    return this;
  }

  /**
   * The unique ID of the Ezdoctemplatedocument
   * minimum: 0
   * maximum: 65535
   * @return fkiEzdoctemplatedocumentID
   */
  @javax.annotation.Nullable
  public Integer getFkiEzdoctemplatedocumentID() {
    return fkiEzdoctemplatedocumentID;
  }

  public void setFkiEzdoctemplatedocumentID(Integer fkiEzdoctemplatedocumentID) {
    this.fkiEzdoctemplatedocumentID = fkiEzdoctemplatedocumentID;
  }


  public EzsigntemplateResponseCompound sLanguageNameX(String sLanguageNameX) {
    this.sLanguageNameX = sLanguageNameX;
    return this;
  }

  /**
   * The Name of the Language in the language of the requester
   * @return sLanguageNameX
   */
  @javax.annotation.Nonnull
  public String getsLanguageNameX() {
    return sLanguageNameX;
  }

  public void setsLanguageNameX(String sLanguageNameX) {
    this.sLanguageNameX = sLanguageNameX;
  }


  public EzsigntemplateResponseCompound sEzsigntemplateDescription(String sEzsigntemplateDescription) {
    this.sEzsigntemplateDescription = sEzsigntemplateDescription;
    return this;
  }

  /**
   * The description of the Ezsigntemplate
   * @return sEzsigntemplateDescription
   */
  @javax.annotation.Nonnull
  public String getsEzsigntemplateDescription() {
    return sEzsigntemplateDescription;
  }

  public void setsEzsigntemplateDescription(String sEzsigntemplateDescription) {
    this.sEzsigntemplateDescription = sEzsigntemplateDescription;
  }


  public EzsigntemplateResponseCompound sEzsigntemplateExternaldescription(String sEzsigntemplateExternaldescription) {
    this.sEzsigntemplateExternaldescription = sEzsigntemplateExternaldescription;
    return this;
  }

  /**
   * The external description of the Ezsigntemplate
   * @return sEzsigntemplateExternaldescription
   */
  @javax.annotation.Nullable
  public String getsEzsigntemplateExternaldescription() {
    return sEzsigntemplateExternaldescription;
  }

  public void setsEzsigntemplateExternaldescription(String sEzsigntemplateExternaldescription) {
    this.sEzsigntemplateExternaldescription = sEzsigntemplateExternaldescription;
  }


  public EzsigntemplateResponseCompound tEzsigntemplateComment(String tEzsigntemplateComment) {
    this.tEzsigntemplateComment = tEzsigntemplateComment;
    return this;
  }

  /**
   * The comment of the Ezsigntemplate
   * @return tEzsigntemplateComment
   */
  @javax.annotation.Nullable
  public String gettEzsigntemplateComment() {
    return tEzsigntemplateComment;
  }

  public void settEzsigntemplateComment(String tEzsigntemplateComment) {
    this.tEzsigntemplateComment = tEzsigntemplateComment;
  }


  public EzsigntemplateResponseCompound sEzsigntemplateFilenamepattern(String sEzsigntemplateFilenamepattern) {
    this.sEzsigntemplateFilenamepattern = sEzsigntemplateFilenamepattern;
    return this;
  }

  /**
   * The filename pattern of the Ezsigntemplate
   * @return sEzsigntemplateFilenamepattern
   */
  @javax.annotation.Nullable
  public String getsEzsigntemplateFilenamepattern() {
    return sEzsigntemplateFilenamepattern;
  }

  public void setsEzsigntemplateFilenamepattern(String sEzsigntemplateFilenamepattern) {
    this.sEzsigntemplateFilenamepattern = sEzsigntemplateFilenamepattern;
  }


  public EzsigntemplateResponseCompound bEzsigntemplateAdminonly(Boolean bEzsigntemplateAdminonly) {
    this.bEzsigntemplateAdminonly = bEzsigntemplateAdminonly;
    return this;
  }

  /**
   * Whether the Ezsigntemplate can be accessed by admin users only (eUserType&#x3D;Normal)
   * @return bEzsigntemplateAdminonly
   */
  @javax.annotation.Nonnull
  public Boolean getbEzsigntemplateAdminonly() {
    return bEzsigntemplateAdminonly;
  }

  public void setbEzsigntemplateAdminonly(Boolean bEzsigntemplateAdminonly) {
    this.bEzsigntemplateAdminonly = bEzsigntemplateAdminonly;
  }


  public EzsigntemplateResponseCompound sEzsignfoldertypeNameX(String sEzsignfoldertypeNameX) {
    this.sEzsignfoldertypeNameX = sEzsignfoldertypeNameX;
    return this;
  }

  /**
   * The name of the Ezsignfoldertype in the language of the requester
   * @return sEzsignfoldertypeNameX
   */
  @javax.annotation.Nullable
  public String getsEzsignfoldertypeNameX() {
    return sEzsignfoldertypeNameX;
  }

  public void setsEzsignfoldertypeNameX(String sEzsignfoldertypeNameX) {
    this.sEzsignfoldertypeNameX = sEzsignfoldertypeNameX;
  }


  public EzsigntemplateResponseCompound objAudit(CommonAudit objAudit) {
    this.objAudit = objAudit;
    return this;
  }

  /**
   * Get objAudit
   * @return objAudit
   */
  @javax.annotation.Nonnull
  public CommonAudit getObjAudit() {
    return objAudit;
  }

  public void setObjAudit(CommonAudit objAudit) {
    this.objAudit = objAudit;
  }


  public EzsigntemplateResponseCompound bEzsigntemplateEditallowed(Boolean bEzsigntemplateEditallowed) {
    this.bEzsigntemplateEditallowed = bEzsigntemplateEditallowed;
    return this;
  }

  /**
   * Whether the Ezsigntemplate if allowed to edit or not
   * @return bEzsigntemplateEditallowed
   */
  @javax.annotation.Nonnull
  public Boolean getbEzsigntemplateEditallowed() {
    return bEzsigntemplateEditallowed;
  }

  public void setbEzsigntemplateEditallowed(Boolean bEzsigntemplateEditallowed) {
    this.bEzsigntemplateEditallowed = bEzsigntemplateEditallowed;
  }


  public EzsigntemplateResponseCompound eEzsigntemplateType(FieldEEzsigntemplateType eEzsigntemplateType) {
    this.eEzsigntemplateType = eEzsigntemplateType;
    return this;
  }

  /**
   * Get eEzsigntemplateType
   * @return eEzsigntemplateType
   */
  @javax.annotation.Nullable
  public FieldEEzsigntemplateType geteEzsigntemplateType() {
    return eEzsigntemplateType;
  }

  public void seteEzsigntemplateType(FieldEEzsigntemplateType eEzsigntemplateType) {
    this.eEzsigntemplateType = eEzsigntemplateType;
  }


  public EzsigntemplateResponseCompound objEzsigntemplatedocument(EzsigntemplatedocumentResponse objEzsigntemplatedocument) {
    this.objEzsigntemplatedocument = objEzsigntemplatedocument;
    return this;
  }

  /**
   * Get objEzsigntemplatedocument
   * @return objEzsigntemplatedocument
   */
  @javax.annotation.Nullable
  public EzsigntemplatedocumentResponse getObjEzsigntemplatedocument() {
    return objEzsigntemplatedocument;
  }

  public void setObjEzsigntemplatedocument(EzsigntemplatedocumentResponse objEzsigntemplatedocument) {
    this.objEzsigntemplatedocument = objEzsigntemplatedocument;
  }


  public EzsigntemplateResponseCompound aObjEzsigntemplatesigner(List<EzsigntemplatesignerResponseCompound> aObjEzsigntemplatesigner) {
    this.aObjEzsigntemplatesigner = aObjEzsigntemplatesigner;
    return this;
  }

  public EzsigntemplateResponseCompound addAObjEzsigntemplatesignerItem(EzsigntemplatesignerResponseCompound aObjEzsigntemplatesignerItem) {
    if (this.aObjEzsigntemplatesigner == null) {
      this.aObjEzsigntemplatesigner = new ArrayList<>();
    }
    this.aObjEzsigntemplatesigner.add(aObjEzsigntemplatesignerItem);
    return this;
  }

  /**
   * Get aObjEzsigntemplatesigner
   * @return aObjEzsigntemplatesigner
   */
  @javax.annotation.Nonnull
  public List<EzsigntemplatesignerResponseCompound> getaObjEzsigntemplatesigner() {
    return aObjEzsigntemplatesigner;
  }

  public void setaObjEzsigntemplatesigner(List<EzsigntemplatesignerResponseCompound> aObjEzsigntemplatesigner) {
    this.aObjEzsigntemplatesigner = aObjEzsigntemplatesigner;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsigntemplateResponseCompound ezsigntemplateResponseCompound = (EzsigntemplateResponseCompound) o;
    return Objects.equals(this.pkiEzsigntemplateID, ezsigntemplateResponseCompound.pkiEzsigntemplateID) &&
        Objects.equals(this.fkiEzsigntemplatedocumentID, ezsigntemplateResponseCompound.fkiEzsigntemplatedocumentID) &&
        Objects.equals(this.fkiEzsignfoldertypeID, ezsigntemplateResponseCompound.fkiEzsignfoldertypeID) &&
        Objects.equals(this.fkiLanguageID, ezsigntemplateResponseCompound.fkiLanguageID) &&
        Objects.equals(this.fkiEzdoctemplatedocumentID, ezsigntemplateResponseCompound.fkiEzdoctemplatedocumentID) &&
        Objects.equals(this.sLanguageNameX, ezsigntemplateResponseCompound.sLanguageNameX) &&
        Objects.equals(this.sEzsigntemplateDescription, ezsigntemplateResponseCompound.sEzsigntemplateDescription) &&
        Objects.equals(this.sEzsigntemplateExternaldescription, ezsigntemplateResponseCompound.sEzsigntemplateExternaldescription) &&
        Objects.equals(this.tEzsigntemplateComment, ezsigntemplateResponseCompound.tEzsigntemplateComment) &&
        Objects.equals(this.sEzsigntemplateFilenamepattern, ezsigntemplateResponseCompound.sEzsigntemplateFilenamepattern) &&
        Objects.equals(this.bEzsigntemplateAdminonly, ezsigntemplateResponseCompound.bEzsigntemplateAdminonly) &&
        Objects.equals(this.sEzsignfoldertypeNameX, ezsigntemplateResponseCompound.sEzsignfoldertypeNameX) &&
        Objects.equals(this.objAudit, ezsigntemplateResponseCompound.objAudit) &&
        Objects.equals(this.bEzsigntemplateEditallowed, ezsigntemplateResponseCompound.bEzsigntemplateEditallowed) &&
        Objects.equals(this.eEzsigntemplateType, ezsigntemplateResponseCompound.eEzsigntemplateType) &&
        Objects.equals(this.objEzsigntemplatedocument, ezsigntemplateResponseCompound.objEzsigntemplatedocument) &&
        Objects.equals(this.aObjEzsigntemplatesigner, ezsigntemplateResponseCompound.aObjEzsigntemplatesigner);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiEzsigntemplateID, fkiEzsigntemplatedocumentID, fkiEzsignfoldertypeID, fkiLanguageID, fkiEzdoctemplatedocumentID, sLanguageNameX, sEzsigntemplateDescription, sEzsigntemplateExternaldescription, tEzsigntemplateComment, sEzsigntemplateFilenamepattern, bEzsigntemplateAdminonly, sEzsignfoldertypeNameX, objAudit, bEzsigntemplateEditallowed, eEzsigntemplateType, objEzsigntemplatedocument, aObjEzsigntemplatesigner);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsigntemplateResponseCompound {\n");
    sb.append("    pkiEzsigntemplateID: ").append(toIndentedString(pkiEzsigntemplateID)).append("\n");
    sb.append("    fkiEzsigntemplatedocumentID: ").append(toIndentedString(fkiEzsigntemplatedocumentID)).append("\n");
    sb.append("    fkiEzsignfoldertypeID: ").append(toIndentedString(fkiEzsignfoldertypeID)).append("\n");
    sb.append("    fkiLanguageID: ").append(toIndentedString(fkiLanguageID)).append("\n");
    sb.append("    fkiEzdoctemplatedocumentID: ").append(toIndentedString(fkiEzdoctemplatedocumentID)).append("\n");
    sb.append("    sLanguageNameX: ").append(toIndentedString(sLanguageNameX)).append("\n");
    sb.append("    sEzsigntemplateDescription: ").append(toIndentedString(sEzsigntemplateDescription)).append("\n");
    sb.append("    sEzsigntemplateExternaldescription: ").append(toIndentedString(sEzsigntemplateExternaldescription)).append("\n");
    sb.append("    tEzsigntemplateComment: ").append(toIndentedString(tEzsigntemplateComment)).append("\n");
    sb.append("    sEzsigntemplateFilenamepattern: ").append(toIndentedString(sEzsigntemplateFilenamepattern)).append("\n");
    sb.append("    bEzsigntemplateAdminonly: ").append(toIndentedString(bEzsigntemplateAdminonly)).append("\n");
    sb.append("    sEzsignfoldertypeNameX: ").append(toIndentedString(sEzsignfoldertypeNameX)).append("\n");
    sb.append("    objAudit: ").append(toIndentedString(objAudit)).append("\n");
    sb.append("    bEzsigntemplateEditallowed: ").append(toIndentedString(bEzsigntemplateEditallowed)).append("\n");
    sb.append("    eEzsigntemplateType: ").append(toIndentedString(eEzsigntemplateType)).append("\n");
    sb.append("    objEzsigntemplatedocument: ").append(toIndentedString(objEzsigntemplatedocument)).append("\n");
    sb.append("    aObjEzsigntemplatesigner: ").append(toIndentedString(aObjEzsigntemplatesigner)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiEzsigntemplateID");
    openapiFields.add("fkiEzsigntemplatedocumentID");
    openapiFields.add("fkiEzsignfoldertypeID");
    openapiFields.add("fkiLanguageID");
    openapiFields.add("fkiEzdoctemplatedocumentID");
    openapiFields.add("sLanguageNameX");
    openapiFields.add("sEzsigntemplateDescription");
    openapiFields.add("sEzsigntemplateExternaldescription");
    openapiFields.add("tEzsigntemplateComment");
    openapiFields.add("sEzsigntemplateFilenamepattern");
    openapiFields.add("bEzsigntemplateAdminonly");
    openapiFields.add("sEzsignfoldertypeNameX");
    openapiFields.add("objAudit");
    openapiFields.add("bEzsigntemplateEditallowed");
    openapiFields.add("eEzsigntemplateType");
    openapiFields.add("objEzsigntemplatedocument");
    openapiFields.add("a_objEzsigntemplatesigner");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiEzsigntemplateID");
    openapiRequiredFields.add("fkiLanguageID");
    openapiRequiredFields.add("sLanguageNameX");
    openapiRequiredFields.add("sEzsigntemplateDescription");
    openapiRequiredFields.add("bEzsigntemplateAdminonly");
    openapiRequiredFields.add("objAudit");
    openapiRequiredFields.add("bEzsigntemplateEditallowed");
    openapiRequiredFields.add("a_objEzsigntemplatesigner");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EzsigntemplateResponseCompound
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EzsigntemplateResponseCompound.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsigntemplateResponseCompound is not found in the empty JSON string", EzsigntemplateResponseCompound.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EzsigntemplateResponseCompound.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsigntemplateResponseCompound` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EzsigntemplateResponseCompound.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("sLanguageNameX").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sLanguageNameX` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sLanguageNameX").toString()));
      }
      if (!jsonObj.get("sEzsigntemplateDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsigntemplateDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsigntemplateDescription").toString()));
      }
      if ((jsonObj.get("sEzsigntemplateExternaldescription") != null && !jsonObj.get("sEzsigntemplateExternaldescription").isJsonNull()) && !jsonObj.get("sEzsigntemplateExternaldescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsigntemplateExternaldescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsigntemplateExternaldescription").toString()));
      }
      if ((jsonObj.get("tEzsigntemplateComment") != null && !jsonObj.get("tEzsigntemplateComment").isJsonNull()) && !jsonObj.get("tEzsigntemplateComment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tEzsigntemplateComment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tEzsigntemplateComment").toString()));
      }
      if ((jsonObj.get("sEzsigntemplateFilenamepattern") != null && !jsonObj.get("sEzsigntemplateFilenamepattern").isJsonNull()) && !jsonObj.get("sEzsigntemplateFilenamepattern").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsigntemplateFilenamepattern` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsigntemplateFilenamepattern").toString()));
      }
      if ((jsonObj.get("sEzsignfoldertypeNameX") != null && !jsonObj.get("sEzsignfoldertypeNameX").isJsonNull()) && !jsonObj.get("sEzsignfoldertypeNameX").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsignfoldertypeNameX` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsignfoldertypeNameX").toString()));
      }
      // validate the required field `objAudit`
      CommonAudit.validateJsonElement(jsonObj.get("objAudit"));
      // validate the optional field `eEzsigntemplateType`
      if (jsonObj.get("eEzsigntemplateType") != null && !jsonObj.get("eEzsigntemplateType").isJsonNull()) {
        FieldEEzsigntemplateType.validateJsonElement(jsonObj.get("eEzsigntemplateType"));
      }
      // validate the optional field `objEzsigntemplatedocument`
      if (jsonObj.get("objEzsigntemplatedocument") != null && !jsonObj.get("objEzsigntemplatedocument").isJsonNull()) {
        EzsigntemplatedocumentResponse.validateJsonElement(jsonObj.get("objEzsigntemplatedocument"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("a_objEzsigntemplatesigner").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_objEzsigntemplatesigner` to be an array in the JSON string but got `%s`", jsonObj.get("a_objEzsigntemplatesigner").toString()));
      }

      JsonArray jsonArrayaObjEzsigntemplatesigner = jsonObj.getAsJsonArray("a_objEzsigntemplatesigner");
      // validate the required field `a_objEzsigntemplatesigner` (array)
      for (int i = 0; i < jsonArrayaObjEzsigntemplatesigner.size(); i++) {
        EzsigntemplatesignerResponseCompound.validateJsonElement(jsonArrayaObjEzsigntemplatesigner.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsigntemplateResponseCompound.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsigntemplateResponseCompound' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsigntemplateResponseCompound> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsigntemplateResponseCompound.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsigntemplateResponseCompound>() {
           @Override
           public void write(JsonWriter out, EzsigntemplateResponseCompound value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsigntemplateResponseCompound read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EzsigntemplateResponseCompound given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EzsigntemplateResponseCompound
   * @throws IOException if the JSON string is invalid with respect to EzsigntemplateResponseCompound
   */
  public static EzsigntemplateResponseCompound fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsigntemplateResponseCompound.class);
  }

  /**
   * Convert an instance of EzsigntemplateResponseCompound to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

