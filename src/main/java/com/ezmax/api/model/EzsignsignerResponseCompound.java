/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.EzsignsignerResponseCompoundContact;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * An Ezsignsigner Object and children to create a complete structure
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-05T14:47:58.834564157Z[Etc/UTC]", comments = "Generator version: 7.11.0")
public class EzsignsignerResponseCompound {
  public static final String SERIALIZED_NAME_PKI_EZSIGNSIGNER_I_D = "pkiEzsignsignerID";
  @SerializedName(SERIALIZED_NAME_PKI_EZSIGNSIGNER_I_D)
  @javax.annotation.Nonnull
  private Integer pkiEzsignsignerID;

  public static final String SERIALIZED_NAME_FKI_TAXASSIGNMENT_I_D = "fkiTaxassignmentID";
  @SerializedName(SERIALIZED_NAME_FKI_TAXASSIGNMENT_I_D)
  @javax.annotation.Nonnull
  private Integer fkiTaxassignmentID;

  public static final String SERIALIZED_NAME_FKI_SECRETQUESTION_I_D = "fkiSecretquestionID";
  @SerializedName(SERIALIZED_NAME_FKI_SECRETQUESTION_I_D)
  @javax.annotation.Nullable
  private Integer fkiSecretquestionID;

  public static final String SERIALIZED_NAME_FKI_USERLOGINTYPE_I_D = "fkiUserlogintypeID";
  @SerializedName(SERIALIZED_NAME_FKI_USERLOGINTYPE_I_D)
  @javax.annotation.Nonnull
  private Integer fkiUserlogintypeID;

  public static final String SERIALIZED_NAME_S_USERLOGINTYPE_DESCRIPTION_X = "sUserlogintypeDescriptionX";
  @SerializedName(SERIALIZED_NAME_S_USERLOGINTYPE_DESCRIPTION_X)
  @javax.annotation.Nonnull
  private String sUserlogintypeDescriptionX;

  public static final String SERIALIZED_NAME_OBJ_CONTACT = "objContact";
  @SerializedName(SERIALIZED_NAME_OBJ_CONTACT)
  @javax.annotation.Nonnull
  private EzsignsignerResponseCompoundContact objContact;

  public EzsignsignerResponseCompound() {
  }

  public EzsignsignerResponseCompound pkiEzsignsignerID(@javax.annotation.Nonnull Integer pkiEzsignsignerID) {
    this.pkiEzsignsignerID = pkiEzsignsignerID;
    return this;
  }

  /**
   * The unique ID of the Ezsignsigner
   * minimum: 0
   * @return pkiEzsignsignerID
   */
  @javax.annotation.Nonnull
  public Integer getPkiEzsignsignerID() {
    return pkiEzsignsignerID;
  }

  public void setPkiEzsignsignerID(@javax.annotation.Nonnull Integer pkiEzsignsignerID) {
    this.pkiEzsignsignerID = pkiEzsignsignerID;
  }


  public EzsignsignerResponseCompound fkiTaxassignmentID(@javax.annotation.Nonnull Integer fkiTaxassignmentID) {
    this.fkiTaxassignmentID = fkiTaxassignmentID;
    return this;
  }

  /**
   * The unique ID of the Taxassignment.  Valid values:  |Value|Description| |-|-| |1|No tax| |2|GST| |3|HST (ON)| |4|HST (NB)| |5|HST (NS)| |6|HST (NL)| |7|HST (PE)| |8|GST + QST (QC)| |9|GST + QST (QC) Non-Recoverable| |10|GST + PST (BC)| |11|GST + PST (SK)| |12|GST + RST (MB)| |13|GST + PST (BC) Non-Recoverable| |14|GST + PST (SK) Non-Recoverable| |15|GST + RST (MB) Non-Recoverable|
   * minimum: 0
   * maximum: 15
   * @return fkiTaxassignmentID
   */
  @javax.annotation.Nonnull
  public Integer getFkiTaxassignmentID() {
    return fkiTaxassignmentID;
  }

  public void setFkiTaxassignmentID(@javax.annotation.Nonnull Integer fkiTaxassignmentID) {
    this.fkiTaxassignmentID = fkiTaxassignmentID;
  }


  public EzsignsignerResponseCompound fkiSecretquestionID(@javax.annotation.Nullable Integer fkiSecretquestionID) {
    this.fkiSecretquestionID = fkiSecretquestionID;
    return this;
  }

  /**
   * The unique ID of the Secretquestion.  Valid values:  |Value|Description| |-|-| |1|The name of the hospital in which you were born| |2|The name of your grade school| |3|The last name of your favorite teacher| |4|Your favorite sports team| |5|Your favorite TV show| |6|Your favorite movie| |7|The name of the street on which you grew up| |8|The name of your first employer| |9|Your first car| |10|Your favorite food| |11|The name of your first pet| |12|Favorite musician/band| |13|What instrument you play| |14|Your father&#39;s middle name| |15|Your mother&#39;s maiden name| |16|Name of your eldest child| |17|Your spouse&#39;s middle name| |18|Favorite restaurant| |19|Childhood nickname| |20|Favorite vacation destination| |21|Your boat&#39;s name| |22|Date of Birth (YYYY-MM-DD)| |22|Secret Code| |22|Your reference code|
   * minimum: 0
   * @return fkiSecretquestionID
   */
  @javax.annotation.Nullable
  public Integer getFkiSecretquestionID() {
    return fkiSecretquestionID;
  }

  public void setFkiSecretquestionID(@javax.annotation.Nullable Integer fkiSecretquestionID) {
    this.fkiSecretquestionID = fkiSecretquestionID;
  }


  public EzsignsignerResponseCompound fkiUserlogintypeID(@javax.annotation.Nonnull Integer fkiUserlogintypeID) {
    this.fkiUserlogintypeID = fkiUserlogintypeID;
    return this;
  }

  /**
   * The unique ID of the Userlogintype  Valid values:  |Value|Description|Detail| |-|-|-| |1|**Email Only**|The Ezsignsigner will receive a secure link by email| |2|**Email and phone or SMS**|The Ezsignsigner will receive a secure link by email and will need to authenticate using SMS or Phone call. **Additional fee applies**| |3|**Email and secret question**|The Ezsignsigner will receive a secure link by email and will need to authenticate using a predefined question and answer| |4|**In person only**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and there won&#39;t be any authentication. No email will be sent for invitation to sign. Make sure you evaluate the risk of signature denial and at minimum, we recommend you use a handwritten signature type| |5|**In person with phone or SMS**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**| |6|**Embedded**|The Ezsignsigner will only be able to sign in the embedded solution. No email will be sent for invitation to sign. **Additional fee applies**|   |7|**Embedded with phone or SMS**|The Ezsignsigner will only be able to sign in the embedded solution and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**|   |8|**No validation**|The Ezsignsigner will not receive an email and won&#39;t have to validate his connection using 2 factor. **Additional fee applies**|      |9|**Sms only**|The Ezsignsigner will not receive an email but will will need to authenticate using SMS. **Additional fee applies**|     
   * minimum: 0
   * @return fkiUserlogintypeID
   */
  @javax.annotation.Nonnull
  public Integer getFkiUserlogintypeID() {
    return fkiUserlogintypeID;
  }

  public void setFkiUserlogintypeID(@javax.annotation.Nonnull Integer fkiUserlogintypeID) {
    this.fkiUserlogintypeID = fkiUserlogintypeID;
  }


  public EzsignsignerResponseCompound sUserlogintypeDescriptionX(@javax.annotation.Nonnull String sUserlogintypeDescriptionX) {
    this.sUserlogintypeDescriptionX = sUserlogintypeDescriptionX;
    return this;
  }

  /**
   * The description of the Userlogintype in the language of the requester
   * @return sUserlogintypeDescriptionX
   */
  @javax.annotation.Nonnull
  public String getsUserlogintypeDescriptionX() {
    return sUserlogintypeDescriptionX;
  }

  public void setsUserlogintypeDescriptionX(@javax.annotation.Nonnull String sUserlogintypeDescriptionX) {
    this.sUserlogintypeDescriptionX = sUserlogintypeDescriptionX;
  }


  public EzsignsignerResponseCompound objContact(@javax.annotation.Nonnull EzsignsignerResponseCompoundContact objContact) {
    this.objContact = objContact;
    return this;
  }

  /**
   * Get objContact
   * @return objContact
   */
  @javax.annotation.Nonnull
  public EzsignsignerResponseCompoundContact getObjContact() {
    return objContact;
  }

  public void setObjContact(@javax.annotation.Nonnull EzsignsignerResponseCompoundContact objContact) {
    this.objContact = objContact;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsignsignerResponseCompound ezsignsignerResponseCompound = (EzsignsignerResponseCompound) o;
    return Objects.equals(this.pkiEzsignsignerID, ezsignsignerResponseCompound.pkiEzsignsignerID) &&
        Objects.equals(this.fkiTaxassignmentID, ezsignsignerResponseCompound.fkiTaxassignmentID) &&
        Objects.equals(this.fkiSecretquestionID, ezsignsignerResponseCompound.fkiSecretquestionID) &&
        Objects.equals(this.fkiUserlogintypeID, ezsignsignerResponseCompound.fkiUserlogintypeID) &&
        Objects.equals(this.sUserlogintypeDescriptionX, ezsignsignerResponseCompound.sUserlogintypeDescriptionX) &&
        Objects.equals(this.objContact, ezsignsignerResponseCompound.objContact);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiEzsignsignerID, fkiTaxassignmentID, fkiSecretquestionID, fkiUserlogintypeID, sUserlogintypeDescriptionX, objContact);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsignsignerResponseCompound {\n");
    sb.append("    pkiEzsignsignerID: ").append(toIndentedString(pkiEzsignsignerID)).append("\n");
    sb.append("    fkiTaxassignmentID: ").append(toIndentedString(fkiTaxassignmentID)).append("\n");
    sb.append("    fkiSecretquestionID: ").append(toIndentedString(fkiSecretquestionID)).append("\n");
    sb.append("    fkiUserlogintypeID: ").append(toIndentedString(fkiUserlogintypeID)).append("\n");
    sb.append("    sUserlogintypeDescriptionX: ").append(toIndentedString(sUserlogintypeDescriptionX)).append("\n");
    sb.append("    objContact: ").append(toIndentedString(objContact)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiEzsignsignerID");
    openapiFields.add("fkiTaxassignmentID");
    openapiFields.add("fkiSecretquestionID");
    openapiFields.add("fkiUserlogintypeID");
    openapiFields.add("sUserlogintypeDescriptionX");
    openapiFields.add("objContact");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiEzsignsignerID");
    openapiRequiredFields.add("fkiTaxassignmentID");
    openapiRequiredFields.add("fkiUserlogintypeID");
    openapiRequiredFields.add("sUserlogintypeDescriptionX");
    openapiRequiredFields.add("objContact");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EzsignsignerResponseCompound
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EzsignsignerResponseCompound.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsignsignerResponseCompound is not found in the empty JSON string", EzsignsignerResponseCompound.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EzsignsignerResponseCompound.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsignsignerResponseCompound` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EzsignsignerResponseCompound.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("sUserlogintypeDescriptionX").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sUserlogintypeDescriptionX` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sUserlogintypeDescriptionX").toString()));
      }
      // validate the required field `objContact`
      EzsignsignerResponseCompoundContact.validateJsonElement(jsonObj.get("objContact"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsignsignerResponseCompound.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsignsignerResponseCompound' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsignsignerResponseCompound> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsignsignerResponseCompound.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsignsignerResponseCompound>() {
           @Override
           public void write(JsonWriter out, EzsignsignerResponseCompound value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsignsignerResponseCompound read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EzsignsignerResponseCompound given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EzsignsignerResponseCompound
   * @throws IOException if the JSON string is invalid with respect to EzsignsignerResponseCompound
   */
  public static EzsignsignerResponseCompound fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsignsignerResponseCompound.class);
  }

  /**
   * Convert an instance of EzsignsignerResponseCompound to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

