/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.17
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.ezmax.api.model.CommonAudit;
import com.ezmax.api.model.FieldEUserType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A User Object and children to create a complete structure
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-08T21:18:02.097019897Z[Etc/UTC]")
public class UserResponseCompound {
  public static final String SERIALIZED_NAME_PKI_USER_I_D = "pkiUserID";
  @SerializedName(SERIALIZED_NAME_PKI_USER_I_D)
  private Integer pkiUserID;

  public static final String SERIALIZED_NAME_FKI_LANGUAGE_I_D = "fkiLanguageID";
  @SerializedName(SERIALIZED_NAME_FKI_LANGUAGE_I_D)
  private Integer fkiLanguageID;

  public static final String SERIALIZED_NAME_E_USER_TYPE = "eUserType";
  @SerializedName(SERIALIZED_NAME_E_USER_TYPE)
  private FieldEUserType eUserType;

  public static final String SERIALIZED_NAME_S_USER_FIRSTNAME = "sUserFirstname";
  @SerializedName(SERIALIZED_NAME_S_USER_FIRSTNAME)
  private String sUserFirstname;

  public static final String SERIALIZED_NAME_S_USER_LASTNAME = "sUserLastname";
  @SerializedName(SERIALIZED_NAME_S_USER_LASTNAME)
  private String sUserLastname;

  public static final String SERIALIZED_NAME_S_USER_LOGINNAME = "sUserLoginname";
  @SerializedName(SERIALIZED_NAME_S_USER_LOGINNAME)
  private String sUserLoginname;

  public static final String SERIALIZED_NAME_OBJ_AUDIT = "objAudit";
  @SerializedName(SERIALIZED_NAME_OBJ_AUDIT)
  private CommonAudit objAudit;

  public UserResponseCompound() {
  }

  public UserResponseCompound pkiUserID(Integer pkiUserID) {
    
    this.pkiUserID = pkiUserID;
    return this;
  }

   /**
   * The unique ID of the User
   * minimum: 0
   * @return pkiUserID
  **/
  @javax.annotation.Nonnull

  public Integer getPkiUserID() {
    return pkiUserID;
  }


  public void setPkiUserID(Integer pkiUserID) {
    this.pkiUserID = pkiUserID;
  }


  public UserResponseCompound fkiLanguageID(Integer fkiLanguageID) {
    
    this.fkiLanguageID = fkiLanguageID;
    return this;
  }

   /**
   * The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
   * minimum: 1
   * maximum: 2
   * @return fkiLanguageID
  **/
  @javax.annotation.Nonnull

  public Integer getFkiLanguageID() {
    return fkiLanguageID;
  }


  public void setFkiLanguageID(Integer fkiLanguageID) {
    this.fkiLanguageID = fkiLanguageID;
  }


  public UserResponseCompound eUserType(FieldEUserType eUserType) {
    
    this.eUserType = eUserType;
    return this;
  }

   /**
   * Get eUserType
   * @return eUserType
  **/
  @javax.annotation.Nonnull

  public FieldEUserType geteUserType() {
    return eUserType;
  }


  public void seteUserType(FieldEUserType eUserType) {
    this.eUserType = eUserType;
  }


  public UserResponseCompound sUserFirstname(String sUserFirstname) {
    
    this.sUserFirstname = sUserFirstname;
    return this;
  }

   /**
   * The First name of the user
   * @return sUserFirstname
  **/
  @javax.annotation.Nonnull

  public String getsUserFirstname() {
    return sUserFirstname;
  }


  public void setsUserFirstname(String sUserFirstname) {
    this.sUserFirstname = sUserFirstname;
  }


  public UserResponseCompound sUserLastname(String sUserLastname) {
    
    this.sUserLastname = sUserLastname;
    return this;
  }

   /**
   * The Last name of the user
   * @return sUserLastname
  **/
  @javax.annotation.Nonnull

  public String getsUserLastname() {
    return sUserLastname;
  }


  public void setsUserLastname(String sUserLastname) {
    this.sUserLastname = sUserLastname;
  }


  public UserResponseCompound sUserLoginname(String sUserLoginname) {
    
    this.sUserLoginname = sUserLoginname;
    return this;
  }

   /**
   * The Login name of the User.
   * @return sUserLoginname
  **/
  @javax.annotation.Nonnull

  public String getsUserLoginname() {
    return sUserLoginname;
  }


  public void setsUserLoginname(String sUserLoginname) {
    this.sUserLoginname = sUserLoginname;
  }


  public UserResponseCompound objAudit(CommonAudit objAudit) {
    
    this.objAudit = objAudit;
    return this;
  }

   /**
   * Get objAudit
   * @return objAudit
  **/
  @javax.annotation.Nonnull

  public CommonAudit getObjAudit() {
    return objAudit;
  }


  public void setObjAudit(CommonAudit objAudit) {
    this.objAudit = objAudit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserResponseCompound userResponseCompound = (UserResponseCompound) o;
    return Objects.equals(this.pkiUserID, userResponseCompound.pkiUserID) &&
        Objects.equals(this.fkiLanguageID, userResponseCompound.fkiLanguageID) &&
        Objects.equals(this.eUserType, userResponseCompound.eUserType) &&
        Objects.equals(this.sUserFirstname, userResponseCompound.sUserFirstname) &&
        Objects.equals(this.sUserLastname, userResponseCompound.sUserLastname) &&
        Objects.equals(this.sUserLoginname, userResponseCompound.sUserLoginname) &&
        Objects.equals(this.objAudit, userResponseCompound.objAudit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiUserID, fkiLanguageID, eUserType, sUserFirstname, sUserLastname, sUserLoginname, objAudit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserResponseCompound {\n");
    sb.append("    pkiUserID: ").append(toIndentedString(pkiUserID)).append("\n");
    sb.append("    fkiLanguageID: ").append(toIndentedString(fkiLanguageID)).append("\n");
    sb.append("    eUserType: ").append(toIndentedString(eUserType)).append("\n");
    sb.append("    sUserFirstname: ").append(toIndentedString(sUserFirstname)).append("\n");
    sb.append("    sUserLastname: ").append(toIndentedString(sUserLastname)).append("\n");
    sb.append("    sUserLoginname: ").append(toIndentedString(sUserLoginname)).append("\n");
    sb.append("    objAudit: ").append(toIndentedString(objAudit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiUserID");
    openapiFields.add("fkiLanguageID");
    openapiFields.add("eUserType");
    openapiFields.add("sUserFirstname");
    openapiFields.add("sUserLastname");
    openapiFields.add("sUserLoginname");
    openapiFields.add("objAudit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiUserID");
    openapiRequiredFields.add("fkiLanguageID");
    openapiRequiredFields.add("eUserType");
    openapiRequiredFields.add("sUserFirstname");
    openapiRequiredFields.add("sUserLastname");
    openapiRequiredFields.add("sUserLoginname");
    openapiRequiredFields.add("objAudit");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UserResponseCompound
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UserResponseCompound.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserResponseCompound is not found in the empty JSON string", UserResponseCompound.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!UserResponseCompound.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserResponseCompound` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserResponseCompound.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("sUserFirstname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sUserFirstname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sUserFirstname").toString()));
      }
      if (!jsonObj.get("sUserLastname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sUserLastname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sUserLastname").toString()));
      }
      if (!jsonObj.get("sUserLoginname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sUserLoginname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sUserLoginname").toString()));
      }
      // validate the required field `objAudit`
      CommonAudit.validateJsonObject(jsonObj.getAsJsonObject("objAudit"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserResponseCompound.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserResponseCompound' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserResponseCompound> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserResponseCompound.class));

       return (TypeAdapter<T>) new TypeAdapter<UserResponseCompound>() {
           @Override
           public void write(JsonWriter out, UserResponseCompound value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserResponseCompound read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UserResponseCompound given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UserResponseCompound
  * @throws IOException if the JSON string is invalid with respect to UserResponseCompound
  */
  public static UserResponseCompound fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserResponseCompound.class);
  }

 /**
  * Convert an instance of UserResponseCompound to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

