/*
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * An Attempt object
 */
@ApiModel(description = "An Attempt object")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-02-08T15:56:57.693377Z[Etc/UTC]")
public class AttemptResponse {
  public static final String SERIALIZED_NAME_DT_ATTEMPT_START = "dtAttemptStart";
  @SerializedName(SERIALIZED_NAME_DT_ATTEMPT_START)
  private String dtAttemptStart;

  public static final String SERIALIZED_NAME_S_ATTEMPT_RESULT = "sAttemptResult";
  @SerializedName(SERIALIZED_NAME_S_ATTEMPT_RESULT)
  private String sAttemptResult;

  public static final String SERIALIZED_NAME_I_ATTEMPT_DURATION = "iAttemptDuration";
  @SerializedName(SERIALIZED_NAME_I_ATTEMPT_DURATION)
  private Integer iAttemptDuration;

  public AttemptResponse() { 
  }

  public AttemptResponse dtAttemptStart(String dtAttemptStart) {
    
    this.dtAttemptStart = dtAttemptStart;
    return this;
  }

   /**
   * Represent a Date Time. The timezone is the one configured in the User&#39;s profile.
   * @return dtAttemptStart
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2020-12-31 23:59:59", required = true, value = "Represent a Date Time. The timezone is the one configured in the User's profile.")

  public String getDtAttemptStart() {
    return dtAttemptStart;
  }


  public void setDtAttemptStart(String dtAttemptStart) {
    this.dtAttemptStart = dtAttemptStart;
  }


  public AttemptResponse sAttemptResult(String sAttemptResult) {
    
    this.sAttemptResult = sAttemptResult;
    return this;
  }

   /**
   * The Success or Failure message of the attempt when we tried to call the URL to deliver the webhook event.
   * @return sAttemptResult
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The Success or Failure message of the attempt when we tried to call the URL to deliver the webhook event.")

  public String getsAttemptResult() {
    return sAttemptResult;
  }


  public void setsAttemptResult(String sAttemptResult) {
    this.sAttemptResult = sAttemptResult;
  }


  public AttemptResponse iAttemptDuration(Integer iAttemptDuration) {
    
    this.iAttemptDuration = iAttemptDuration;
    return this;
  }

   /**
   * The number of second it took to process the webhook or get an error
   * @return iAttemptDuration
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The number of second it took to process the webhook or get an error")

  public Integer getiAttemptDuration() {
    return iAttemptDuration;
  }


  public void setiAttemptDuration(Integer iAttemptDuration) {
    this.iAttemptDuration = iAttemptDuration;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttemptResponse attemptResponse = (AttemptResponse) o;
    return Objects.equals(this.dtAttemptStart, attemptResponse.dtAttemptStart) &&
        Objects.equals(this.sAttemptResult, attemptResponse.sAttemptResult) &&
        Objects.equals(this.iAttemptDuration, attemptResponse.iAttemptDuration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dtAttemptStart, sAttemptResult, iAttemptDuration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttemptResponse {\n");
    sb.append("    dtAttemptStart: ").append(toIndentedString(dtAttemptStart)).append("\n");
    sb.append("    sAttemptResult: ").append(toIndentedString(sAttemptResult)).append("\n");
    sb.append("    iAttemptDuration: ").append(toIndentedString(iAttemptDuration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dtAttemptStart");
    openapiFields.add("sAttemptResult");
    openapiFields.add("iAttemptDuration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dtAttemptStart");
    openapiRequiredFields.add("sAttemptResult");
    openapiRequiredFields.add("iAttemptDuration");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AttemptResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (AttemptResponse.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has reuqired fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in AttemptResponse is not found in the empty JSON string", AttemptResponse.openapiRequiredFields.toString()));
        }
      }
      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AttemptResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AttemptResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AttemptResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AttemptResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AttemptResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AttemptResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AttemptResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AttemptResponse>() {
           @Override
           public void write(JsonWriter out, AttemptResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AttemptResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AttemptResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AttemptResponse
  * @throws IOException if the JSON string is invalid with respect to AttemptResponse
  */
  public static AttemptResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AttemptResponse.class);
  }

 /**
  * Convert an instance of AttemptResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

