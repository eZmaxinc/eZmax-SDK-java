/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.FieldEEzsignfoldertypeCompletion;
import com.ezmax.api.model.FieldEEzsignfoldertypeDisposal;
import com.ezmax.api.model.FieldEEzsignfoldertypeDocumentdependency;
import com.ezmax.api.model.FieldEEzsignfoldertypePdfanoncompliantaction;
import com.ezmax.api.model.FieldEEzsignfoldertypePdfarequirement;
import com.ezmax.api.model.FieldEEzsignfoldertypePrivacylevel;
import com.ezmax.api.model.FieldEEzsignfoldertypeSigneraccess;
import com.ezmax.api.model.MultilingualEzsignfoldertypeName;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Ezsignfoldertype Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-20T19:31:15.190691479Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class EzsignfoldertypeRequestV3 {
  public static final String SERIALIZED_NAME_PKI_EZSIGNFOLDERTYPE_I_D = "pkiEzsignfoldertypeID";
  @SerializedName(SERIALIZED_NAME_PKI_EZSIGNFOLDERTYPE_I_D)
  private Integer pkiEzsignfoldertypeID;

  public static final String SERIALIZED_NAME_OBJ_EZSIGNFOLDERTYPE_NAME = "objEzsignfoldertypeName";
  @SerializedName(SERIALIZED_NAME_OBJ_EZSIGNFOLDERTYPE_NAME)
  private MultilingualEzsignfoldertypeName objEzsignfoldertypeName;

  public static final String SERIALIZED_NAME_FKI_BRANDING_I_D = "fkiBrandingID";
  @SerializedName(SERIALIZED_NAME_FKI_BRANDING_I_D)
  private Integer fkiBrandingID;

  public static final String SERIALIZED_NAME_FKI_BILLINGENTITYINTERNAL_I_D = "fkiBillingentityinternalID";
  @SerializedName(SERIALIZED_NAME_FKI_BILLINGENTITYINTERNAL_I_D)
  private Integer fkiBillingentityinternalID;

  public static final String SERIALIZED_NAME_FKI_EZSIGNTSAREQUIREMENT_I_D = "fkiEzsigntsarequirementID";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNTSAREQUIREMENT_I_D)
  private Integer fkiEzsigntsarequirementID;

  public static final String SERIALIZED_NAME_FKI_FONT_I_D_ANNOTATION = "fkiFontIDAnnotation";
  @SerializedName(SERIALIZED_NAME_FKI_FONT_I_D_ANNOTATION)
  private Integer fkiFontIDAnnotation;

  public static final String SERIALIZED_NAME_FKI_FONT_I_D_FORMFIELD = "fkiFontIDFormfield";
  @SerializedName(SERIALIZED_NAME_FKI_FONT_I_D_FORMFIELD)
  private Integer fkiFontIDFormfield;

  public static final String SERIALIZED_NAME_FKI_FONT_I_D_SIGNATURE = "fkiFontIDSignature";
  @SerializedName(SERIALIZED_NAME_FKI_FONT_I_D_SIGNATURE)
  private Integer fkiFontIDSignature;

  public static final String SERIALIZED_NAME_FKI_PDFALEVEL_I_D_CONVERT = "fkiPdfalevelIDConvert";
  @SerializedName(SERIALIZED_NAME_FKI_PDFALEVEL_I_D_CONVERT)
  private Integer fkiPdfalevelIDConvert;

  public static final String SERIALIZED_NAME_A_FKI_PDFALEVEL_I_D = "a_fkiPdfalevelID";
  @SerializedName(SERIALIZED_NAME_A_FKI_PDFALEVEL_I_D)
  private List<Integer> aFkiPdfalevelID = new ArrayList<>();

  public static final String SERIALIZED_NAME_A_FKI_USERLOGINTYPE_I_D = "a_fkiUserlogintypeID";
  @SerializedName(SERIALIZED_NAME_A_FKI_USERLOGINTYPE_I_D)
  private List<Integer> aFkiUserlogintypeID = new ArrayList<>();

  public static final String SERIALIZED_NAME_A_FKI_USERGROUP_I_D_ALL = "a_fkiUsergroupIDAll";
  @SerializedName(SERIALIZED_NAME_A_FKI_USERGROUP_I_D_ALL)
  private List<Integer> aFkiUsergroupIDAll = new ArrayList<>();

  public static final String SERIALIZED_NAME_A_FKI_USERGROUP_I_D_RESTRICTED = "a_fkiUsergroupIDRestricted";
  @SerializedName(SERIALIZED_NAME_A_FKI_USERGROUP_I_D_RESTRICTED)
  private List<Integer> aFkiUsergroupIDRestricted = new ArrayList<>();

  public static final String SERIALIZED_NAME_A_FKI_USERGROUP_I_D_TEMPLATE = "a_fkiUsergroupIDTemplate";
  @SerializedName(SERIALIZED_NAME_A_FKI_USERGROUP_I_D_TEMPLATE)
  private List<Integer> aFkiUsergroupIDTemplate = new ArrayList<>();

  public static final String SERIALIZED_NAME_E_EZSIGNFOLDERTYPE_DOCUMENTDEPENDENCY = "eEzsignfoldertypeDocumentdependency";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNFOLDERTYPE_DOCUMENTDEPENDENCY)
  private FieldEEzsignfoldertypeDocumentdependency eEzsignfoldertypeDocumentdependency;

  public static final String SERIALIZED_NAME_S_EMAIL_ADDRESS_SIGNED = "sEmailAddressSigned";
  @SerializedName(SERIALIZED_NAME_S_EMAIL_ADDRESS_SIGNED)
  private String sEmailAddressSigned;

  public static final String SERIALIZED_NAME_S_EMAIL_ADDRESS_SUMMARY = "sEmailAddressSummary";
  @SerializedName(SERIALIZED_NAME_S_EMAIL_ADDRESS_SUMMARY)
  private String sEmailAddressSummary;

  public static final String SERIALIZED_NAME_E_EZSIGNFOLDERTYPE_PDFAREQUIREMENT = "eEzsignfoldertypePdfarequirement";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNFOLDERTYPE_PDFAREQUIREMENT)
  private FieldEEzsignfoldertypePdfarequirement eEzsignfoldertypePdfarequirement;

  public static final String SERIALIZED_NAME_E_EZSIGNFOLDERTYPE_PDFANONCOMPLIANTACTION = "eEzsignfoldertypePdfanoncompliantaction";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNFOLDERTYPE_PDFANONCOMPLIANTACTION)
  private FieldEEzsignfoldertypePdfanoncompliantaction eEzsignfoldertypePdfanoncompliantaction;

  public static final String SERIALIZED_NAME_E_EZSIGNFOLDERTYPE_PRIVACYLEVEL = "eEzsignfoldertypePrivacylevel";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNFOLDERTYPE_PRIVACYLEVEL)
  private FieldEEzsignfoldertypePrivacylevel eEzsignfoldertypePrivacylevel;

  public static final String SERIALIZED_NAME_I_EZSIGNFOLDERTYPE_FONTSIZEANNOTATION = "iEzsignfoldertypeFontsizeannotation";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNFOLDERTYPE_FONTSIZEANNOTATION)
  private Integer iEzsignfoldertypeFontsizeannotation;

  public static final String SERIALIZED_NAME_I_EZSIGNFOLDERTYPE_FONTSIZEFORMFIELD = "iEzsignfoldertypeFontsizeformfield";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNFOLDERTYPE_FONTSIZEFORMFIELD)
  private Integer iEzsignfoldertypeFontsizeformfield;

  public static final String SERIALIZED_NAME_I_EZSIGNFOLDERTYPE_SENDREMINDERFIRSTDAYS = "iEzsignfoldertypeSendreminderfirstdays";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNFOLDERTYPE_SENDREMINDERFIRSTDAYS)
  private Integer iEzsignfoldertypeSendreminderfirstdays;

  public static final String SERIALIZED_NAME_I_EZSIGNFOLDERTYPE_SENDREMINDEROTHERDAYS = "iEzsignfoldertypeSendreminderotherdays";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNFOLDERTYPE_SENDREMINDEROTHERDAYS)
  private Integer iEzsignfoldertypeSendreminderotherdays;

  public static final String SERIALIZED_NAME_I_EZSIGNFOLDERTYPE_ARCHIVALDAYS = "iEzsignfoldertypeArchivaldays";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNFOLDERTYPE_ARCHIVALDAYS)
  private Integer iEzsignfoldertypeArchivaldays;

  public static final String SERIALIZED_NAME_E_EZSIGNFOLDERTYPE_DISPOSAL = "eEzsignfoldertypeDisposal";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNFOLDERTYPE_DISPOSAL)
  private FieldEEzsignfoldertypeDisposal eEzsignfoldertypeDisposal;

  public static final String SERIALIZED_NAME_E_EZSIGNFOLDERTYPE_COMPLETION = "eEzsignfoldertypeCompletion";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNFOLDERTYPE_COMPLETION)
  private FieldEEzsignfoldertypeCompletion eEzsignfoldertypeCompletion;

  public static final String SERIALIZED_NAME_I_EZSIGNFOLDERTYPE_DISPOSALDAYS = "iEzsignfoldertypeDisposaldays";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNFOLDERTYPE_DISPOSALDAYS)
  private Integer iEzsignfoldertypeDisposaldays;

  public static final String SERIALIZED_NAME_I_EZSIGNFOLDERTYPE_DEADLINEDAYS = "iEzsignfoldertypeDeadlinedays";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNFOLDERTYPE_DEADLINEDAYS)
  private Integer iEzsignfoldertypeDeadlinedays;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_PREMATURELYENDAUTOMATICALLY = "bEzsignfoldertypePrematurelyendautomatically";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_PREMATURELYENDAUTOMATICALLY)
  private Boolean bEzsignfoldertypePrematurelyendautomatically;

  public static final String SERIALIZED_NAME_I_EZSIGNFOLDERTYPE_PREMATURELYENDAUTOMATICALLYDAYS = "iEzsignfoldertypePrematurelyendautomaticallydays";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNFOLDERTYPE_PREMATURELYENDAUTOMATICALLYDAYS)
  private Integer iEzsignfoldertypePrematurelyendautomaticallydays;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_AUTOMATICSIGNATURE = "bEzsignfoldertypeAutomaticsignature";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_AUTOMATICSIGNATURE)
  private Boolean bEzsignfoldertypeAutomaticsignature;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_DELEGATE = "bEzsignfoldertypeDelegate";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_DELEGATE)
  private Boolean bEzsignfoldertypeDelegate;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_DISCUSSION = "bEzsignfoldertypeDiscussion";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_DISCUSSION)
  private Boolean bEzsignfoldertypeDiscussion;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_LOGRECIPIENTINPROOF = "bEzsignfoldertypeLogrecipientinproof";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_LOGRECIPIENTINPROOF)
  private Boolean bEzsignfoldertypeLogrecipientinproof;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_REASSIGNEZSIGNSIGNER = "bEzsignfoldertypeReassignezsignsigner";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_REASSIGNEZSIGNSIGNER)
  private Boolean bEzsignfoldertypeReassignezsignsigner;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_REASSIGNUSER = "bEzsignfoldertypeReassignuser";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_REASSIGNUSER)
  private Boolean bEzsignfoldertypeReassignuser;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_REASSIGNGROUP = "bEzsignfoldertypeReassigngroup";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_REASSIGNGROUP)
  private Boolean bEzsignfoldertypeReassigngroup;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSIGNEDTOEZSIGNSIGNER = "bEzsignfoldertypeSendsignedtoezsignsigner";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSIGNEDTOEZSIGNSIGNER)
  private Boolean bEzsignfoldertypeSendsignedtoezsignsigner;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSIGNEDTOUSER = "bEzsignfoldertypeSendsignedtouser";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSIGNEDTOUSER)
  private Boolean bEzsignfoldertypeSendsignedtouser;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDATTACHMENTEZSIGNSIGNER = "bEzsignfoldertypeSendattachmentezsignsigner";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDATTACHMENTEZSIGNSIGNER)
  private Boolean bEzsignfoldertypeSendattachmentezsignsigner;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDPROOFEZSIGNSIGNER = "bEzsignfoldertypeSendproofezsignsigner";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDPROOFEZSIGNSIGNER)
  private Boolean bEzsignfoldertypeSendproofezsignsigner;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDATTACHMENTUSER = "bEzsignfoldertypeSendattachmentuser";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDATTACHMENTUSER)
  private Boolean bEzsignfoldertypeSendattachmentuser;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDPROOFUSER = "bEzsignfoldertypeSendproofuser";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDPROOFUSER)
  private Boolean bEzsignfoldertypeSendproofuser;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDPROOFEMAIL = "bEzsignfoldertypeSendproofemail";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDPROOFEMAIL)
  private Boolean bEzsignfoldertypeSendproofemail;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_ALLOWDOWNLOADATTACHMENTEZSIGNSIGNER = "bEzsignfoldertypeAllowdownloadattachmentezsignsigner";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_ALLOWDOWNLOADATTACHMENTEZSIGNSIGNER)
  private Boolean bEzsignfoldertypeAllowdownloadattachmentezsignsigner;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_ALLOWDOWNLOADPROOFEZSIGNSIGNER = "bEzsignfoldertypeAllowdownloadproofezsignsigner";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_ALLOWDOWNLOADPROOFEZSIGNSIGNER)
  private Boolean bEzsignfoldertypeAllowdownloadproofezsignsigner;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDPROOFRECEIVEALLDOCUMENT = "bEzsignfoldertypeSendproofreceivealldocument";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDPROOFRECEIVEALLDOCUMENT)
  private Boolean bEzsignfoldertypeSendproofreceivealldocument;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSIGNEDTODOCUMENTOWNER = "bEzsignfoldertypeSendsignedtodocumentowner";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSIGNEDTODOCUMENTOWNER)
  private Boolean bEzsignfoldertypeSendsignedtodocumentowner;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSIGNEDTOFOLDEROWNER = "bEzsignfoldertypeSendsignedtofolderowner";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSIGNEDTOFOLDEROWNER)
  private Boolean bEzsignfoldertypeSendsignedtofolderowner;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSIGNEDTOFULLGROUP = "bEzsignfoldertypeSendsignedtofullgroup";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSIGNEDTOFULLGROUP)
  private Boolean bEzsignfoldertypeSendsignedtofullgroup;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSIGNEDTOLIMITEDGROUP = "bEzsignfoldertypeSendsignedtolimitedgroup";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSIGNEDTOLIMITEDGROUP)
  private Boolean bEzsignfoldertypeSendsignedtolimitedgroup;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSIGNEDTOCOLLEAGUE = "bEzsignfoldertypeSendsignedtocolleague";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSIGNEDTOCOLLEAGUE)
  private Boolean bEzsignfoldertypeSendsignedtocolleague;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSUMMARYTODOCUMENTOWNER = "bEzsignfoldertypeSendsummarytodocumentowner";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSUMMARYTODOCUMENTOWNER)
  private Boolean bEzsignfoldertypeSendsummarytodocumentowner;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSUMMARYTOFOLDEROWNER = "bEzsignfoldertypeSendsummarytofolderowner";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSUMMARYTOFOLDEROWNER)
  private Boolean bEzsignfoldertypeSendsummarytofolderowner;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSUMMARYTOFULLGROUP = "bEzsignfoldertypeSendsummarytofullgroup";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSUMMARYTOFULLGROUP)
  private Boolean bEzsignfoldertypeSendsummarytofullgroup;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSUMMARYTOLIMITEDGROUP = "bEzsignfoldertypeSendsummarytolimitedgroup";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSUMMARYTOLIMITEDGROUP)
  private Boolean bEzsignfoldertypeSendsummarytolimitedgroup;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSUMMARYTOCOLLEAGUE = "bEzsignfoldertypeSendsummarytocolleague";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSUMMARYTOCOLLEAGUE)
  private Boolean bEzsignfoldertypeSendsummarytocolleague;

  public static final String SERIALIZED_NAME_E_EZSIGNFOLDERTYPE_SIGNERACCESS = "eEzsignfoldertypeSigneraccess";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNFOLDERTYPE_SIGNERACCESS)
  private FieldEEzsignfoldertypeSigneraccess eEzsignfoldertypeSigneraccess;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_ISACTIVE = "bEzsignfoldertypeIsactive";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_ISACTIVE)
  private Boolean bEzsignfoldertypeIsactive;

  public EzsignfoldertypeRequestV3() {
  }

  public EzsignfoldertypeRequestV3 pkiEzsignfoldertypeID(Integer pkiEzsignfoldertypeID) {
    this.pkiEzsignfoldertypeID = pkiEzsignfoldertypeID;
    return this;
  }

  /**
   * The unique ID of the Ezsignfoldertype.
   * minimum: 0
   * maximum: 65535
   * @return pkiEzsignfoldertypeID
   */
  @javax.annotation.Nullable
  public Integer getPkiEzsignfoldertypeID() {
    return pkiEzsignfoldertypeID;
  }

  public void setPkiEzsignfoldertypeID(Integer pkiEzsignfoldertypeID) {
    this.pkiEzsignfoldertypeID = pkiEzsignfoldertypeID;
  }


  public EzsignfoldertypeRequestV3 objEzsignfoldertypeName(MultilingualEzsignfoldertypeName objEzsignfoldertypeName) {
    this.objEzsignfoldertypeName = objEzsignfoldertypeName;
    return this;
  }

  /**
   * Get objEzsignfoldertypeName
   * @return objEzsignfoldertypeName
   */
  @javax.annotation.Nonnull
  public MultilingualEzsignfoldertypeName getObjEzsignfoldertypeName() {
    return objEzsignfoldertypeName;
  }

  public void setObjEzsignfoldertypeName(MultilingualEzsignfoldertypeName objEzsignfoldertypeName) {
    this.objEzsignfoldertypeName = objEzsignfoldertypeName;
  }


  public EzsignfoldertypeRequestV3 fkiBrandingID(Integer fkiBrandingID) {
    this.fkiBrandingID = fkiBrandingID;
    return this;
  }

  /**
   * The unique ID of the Branding
   * minimum: 0
   * @return fkiBrandingID
   */
  @javax.annotation.Nonnull
  public Integer getFkiBrandingID() {
    return fkiBrandingID;
  }

  public void setFkiBrandingID(Integer fkiBrandingID) {
    this.fkiBrandingID = fkiBrandingID;
  }


  public EzsignfoldertypeRequestV3 fkiBillingentityinternalID(Integer fkiBillingentityinternalID) {
    this.fkiBillingentityinternalID = fkiBillingentityinternalID;
    return this;
  }

  /**
   * The unique ID of the Billingentityinternal.
   * minimum: 0
   * @return fkiBillingentityinternalID
   */
  @javax.annotation.Nullable
  public Integer getFkiBillingentityinternalID() {
    return fkiBillingentityinternalID;
  }

  public void setFkiBillingentityinternalID(Integer fkiBillingentityinternalID) {
    this.fkiBillingentityinternalID = fkiBillingentityinternalID;
  }


  public EzsignfoldertypeRequestV3 fkiEzsigntsarequirementID(Integer fkiEzsigntsarequirementID) {
    this.fkiEzsigntsarequirementID = fkiEzsigntsarequirementID;
    return this;
  }

  /**
   * The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server&#39;s time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server&#39;s time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
   * minimum: 1
   * maximum: 3
   * @return fkiEzsigntsarequirementID
   */
  @javax.annotation.Nullable
  public Integer getFkiEzsigntsarequirementID() {
    return fkiEzsigntsarequirementID;
  }

  public void setFkiEzsigntsarequirementID(Integer fkiEzsigntsarequirementID) {
    this.fkiEzsigntsarequirementID = fkiEzsigntsarequirementID;
  }


  public EzsignfoldertypeRequestV3 fkiFontIDAnnotation(Integer fkiFontIDAnnotation) {
    this.fkiFontIDAnnotation = fkiFontIDAnnotation;
    return this;
  }

  /**
   * The unique ID of the Font
   * minimum: 0
   * @return fkiFontIDAnnotation
   */
  @javax.annotation.Nullable
  public Integer getFkiFontIDAnnotation() {
    return fkiFontIDAnnotation;
  }

  public void setFkiFontIDAnnotation(Integer fkiFontIDAnnotation) {
    this.fkiFontIDAnnotation = fkiFontIDAnnotation;
  }


  public EzsignfoldertypeRequestV3 fkiFontIDFormfield(Integer fkiFontIDFormfield) {
    this.fkiFontIDFormfield = fkiFontIDFormfield;
    return this;
  }

  /**
   * The unique ID of the Font
   * minimum: 0
   * @return fkiFontIDFormfield
   */
  @javax.annotation.Nullable
  public Integer getFkiFontIDFormfield() {
    return fkiFontIDFormfield;
  }

  public void setFkiFontIDFormfield(Integer fkiFontIDFormfield) {
    this.fkiFontIDFormfield = fkiFontIDFormfield;
  }


  public EzsignfoldertypeRequestV3 fkiFontIDSignature(Integer fkiFontIDSignature) {
    this.fkiFontIDSignature = fkiFontIDSignature;
    return this;
  }

  /**
   * The unique ID of the Font
   * minimum: 0
   * @return fkiFontIDSignature
   */
  @javax.annotation.Nullable
  public Integer getFkiFontIDSignature() {
    return fkiFontIDSignature;
  }

  public void setFkiFontIDSignature(Integer fkiFontIDSignature) {
    this.fkiFontIDSignature = fkiFontIDSignature;
  }


  public EzsignfoldertypeRequestV3 fkiPdfalevelIDConvert(Integer fkiPdfalevelIDConvert) {
    this.fkiPdfalevelIDConvert = fkiPdfalevelIDConvert;
    return this;
  }

  /**
   * The unique ID of the Pdfalevel
   * minimum: 0
   * maximum: 255
   * @return fkiPdfalevelIDConvert
   */
  @javax.annotation.Nullable
  public Integer getFkiPdfalevelIDConvert() {
    return fkiPdfalevelIDConvert;
  }

  public void setFkiPdfalevelIDConvert(Integer fkiPdfalevelIDConvert) {
    this.fkiPdfalevelIDConvert = fkiPdfalevelIDConvert;
  }


  public EzsignfoldertypeRequestV3 aFkiPdfalevelID(List<Integer> aFkiPdfalevelID) {
    this.aFkiPdfalevelID = aFkiPdfalevelID;
    return this;
  }

  public EzsignfoldertypeRequestV3 addAFkiPdfalevelIDItem(Integer aFkiPdfalevelIDItem) {
    if (this.aFkiPdfalevelID == null) {
      this.aFkiPdfalevelID = new ArrayList<>();
    }
    this.aFkiPdfalevelID.add(aFkiPdfalevelIDItem);
    return this;
  }

  /**
   * Get aFkiPdfalevelID
   * @return aFkiPdfalevelID
   */
  @javax.annotation.Nullable
  public List<Integer> getaFkiPdfalevelID() {
    return aFkiPdfalevelID;
  }

  public void setaFkiPdfalevelID(List<Integer> aFkiPdfalevelID) {
    this.aFkiPdfalevelID = aFkiPdfalevelID;
  }


  public EzsignfoldertypeRequestV3 aFkiUserlogintypeID(List<Integer> aFkiUserlogintypeID) {
    this.aFkiUserlogintypeID = aFkiUserlogintypeID;
    return this;
  }

  public EzsignfoldertypeRequestV3 addAFkiUserlogintypeIDItem(Integer aFkiUserlogintypeIDItem) {
    if (this.aFkiUserlogintypeID == null) {
      this.aFkiUserlogintypeID = new ArrayList<>();
    }
    this.aFkiUserlogintypeID.add(aFkiUserlogintypeIDItem);
    return this;
  }

  /**
   * Get aFkiUserlogintypeID
   * @return aFkiUserlogintypeID
   */
  @javax.annotation.Nonnull
  public List<Integer> getaFkiUserlogintypeID() {
    return aFkiUserlogintypeID;
  }

  public void setaFkiUserlogintypeID(List<Integer> aFkiUserlogintypeID) {
    this.aFkiUserlogintypeID = aFkiUserlogintypeID;
  }


  public EzsignfoldertypeRequestV3 aFkiUsergroupIDAll(List<Integer> aFkiUsergroupIDAll) {
    this.aFkiUsergroupIDAll = aFkiUsergroupIDAll;
    return this;
  }

  public EzsignfoldertypeRequestV3 addAFkiUsergroupIDAllItem(Integer aFkiUsergroupIDAllItem) {
    if (this.aFkiUsergroupIDAll == null) {
      this.aFkiUsergroupIDAll = new ArrayList<>();
    }
    this.aFkiUsergroupIDAll.add(aFkiUsergroupIDAllItem);
    return this;
  }

  /**
   * Get aFkiUsergroupIDAll
   * @return aFkiUsergroupIDAll
   */
  @javax.annotation.Nullable
  public List<Integer> getaFkiUsergroupIDAll() {
    return aFkiUsergroupIDAll;
  }

  public void setaFkiUsergroupIDAll(List<Integer> aFkiUsergroupIDAll) {
    this.aFkiUsergroupIDAll = aFkiUsergroupIDAll;
  }


  public EzsignfoldertypeRequestV3 aFkiUsergroupIDRestricted(List<Integer> aFkiUsergroupIDRestricted) {
    this.aFkiUsergroupIDRestricted = aFkiUsergroupIDRestricted;
    return this;
  }

  public EzsignfoldertypeRequestV3 addAFkiUsergroupIDRestrictedItem(Integer aFkiUsergroupIDRestrictedItem) {
    if (this.aFkiUsergroupIDRestricted == null) {
      this.aFkiUsergroupIDRestricted = new ArrayList<>();
    }
    this.aFkiUsergroupIDRestricted.add(aFkiUsergroupIDRestrictedItem);
    return this;
  }

  /**
   * Get aFkiUsergroupIDRestricted
   * @return aFkiUsergroupIDRestricted
   */
  @javax.annotation.Nullable
  public List<Integer> getaFkiUsergroupIDRestricted() {
    return aFkiUsergroupIDRestricted;
  }

  public void setaFkiUsergroupIDRestricted(List<Integer> aFkiUsergroupIDRestricted) {
    this.aFkiUsergroupIDRestricted = aFkiUsergroupIDRestricted;
  }


  public EzsignfoldertypeRequestV3 aFkiUsergroupIDTemplate(List<Integer> aFkiUsergroupIDTemplate) {
    this.aFkiUsergroupIDTemplate = aFkiUsergroupIDTemplate;
    return this;
  }

  public EzsignfoldertypeRequestV3 addAFkiUsergroupIDTemplateItem(Integer aFkiUsergroupIDTemplateItem) {
    if (this.aFkiUsergroupIDTemplate == null) {
      this.aFkiUsergroupIDTemplate = new ArrayList<>();
    }
    this.aFkiUsergroupIDTemplate.add(aFkiUsergroupIDTemplateItem);
    return this;
  }

  /**
   * Get aFkiUsergroupIDTemplate
   * @return aFkiUsergroupIDTemplate
   */
  @javax.annotation.Nullable
  public List<Integer> getaFkiUsergroupIDTemplate() {
    return aFkiUsergroupIDTemplate;
  }

  public void setaFkiUsergroupIDTemplate(List<Integer> aFkiUsergroupIDTemplate) {
    this.aFkiUsergroupIDTemplate = aFkiUsergroupIDTemplate;
  }


  public EzsignfoldertypeRequestV3 eEzsignfoldertypeDocumentdependency(FieldEEzsignfoldertypeDocumentdependency eEzsignfoldertypeDocumentdependency) {
    this.eEzsignfoldertypeDocumentdependency = eEzsignfoldertypeDocumentdependency;
    return this;
  }

  /**
   * Get eEzsignfoldertypeDocumentdependency
   * @return eEzsignfoldertypeDocumentdependency
   */
  @javax.annotation.Nullable
  public FieldEEzsignfoldertypeDocumentdependency geteEzsignfoldertypeDocumentdependency() {
    return eEzsignfoldertypeDocumentdependency;
  }

  public void seteEzsignfoldertypeDocumentdependency(FieldEEzsignfoldertypeDocumentdependency eEzsignfoldertypeDocumentdependency) {
    this.eEzsignfoldertypeDocumentdependency = eEzsignfoldertypeDocumentdependency;
  }


  public EzsignfoldertypeRequestV3 sEmailAddressSigned(String sEmailAddressSigned) {
    this.sEmailAddressSigned = sEmailAddressSigned;
    return this;
  }

  /**
   * The email address.
   * @return sEmailAddressSigned
   */
  @javax.annotation.Nullable
  public String getsEmailAddressSigned() {
    return sEmailAddressSigned;
  }

  public void setsEmailAddressSigned(String sEmailAddressSigned) {
    this.sEmailAddressSigned = sEmailAddressSigned;
  }


  public EzsignfoldertypeRequestV3 sEmailAddressSummary(String sEmailAddressSummary) {
    this.sEmailAddressSummary = sEmailAddressSummary;
    return this;
  }

  /**
   * The email address.
   * @return sEmailAddressSummary
   */
  @javax.annotation.Nullable
  public String getsEmailAddressSummary() {
    return sEmailAddressSummary;
  }

  public void setsEmailAddressSummary(String sEmailAddressSummary) {
    this.sEmailAddressSummary = sEmailAddressSummary;
  }


  public EzsignfoldertypeRequestV3 eEzsignfoldertypePdfarequirement(FieldEEzsignfoldertypePdfarequirement eEzsignfoldertypePdfarequirement) {
    this.eEzsignfoldertypePdfarequirement = eEzsignfoldertypePdfarequirement;
    return this;
  }

  /**
   * Get eEzsignfoldertypePdfarequirement
   * @return eEzsignfoldertypePdfarequirement
   */
  @javax.annotation.Nullable
  public FieldEEzsignfoldertypePdfarequirement geteEzsignfoldertypePdfarequirement() {
    return eEzsignfoldertypePdfarequirement;
  }

  public void seteEzsignfoldertypePdfarequirement(FieldEEzsignfoldertypePdfarequirement eEzsignfoldertypePdfarequirement) {
    this.eEzsignfoldertypePdfarequirement = eEzsignfoldertypePdfarequirement;
  }


  public EzsignfoldertypeRequestV3 eEzsignfoldertypePdfanoncompliantaction(FieldEEzsignfoldertypePdfanoncompliantaction eEzsignfoldertypePdfanoncompliantaction) {
    this.eEzsignfoldertypePdfanoncompliantaction = eEzsignfoldertypePdfanoncompliantaction;
    return this;
  }

  /**
   * Get eEzsignfoldertypePdfanoncompliantaction
   * @return eEzsignfoldertypePdfanoncompliantaction
   */
  @javax.annotation.Nullable
  public FieldEEzsignfoldertypePdfanoncompliantaction geteEzsignfoldertypePdfanoncompliantaction() {
    return eEzsignfoldertypePdfanoncompliantaction;
  }

  public void seteEzsignfoldertypePdfanoncompliantaction(FieldEEzsignfoldertypePdfanoncompliantaction eEzsignfoldertypePdfanoncompliantaction) {
    this.eEzsignfoldertypePdfanoncompliantaction = eEzsignfoldertypePdfanoncompliantaction;
  }


  public EzsignfoldertypeRequestV3 eEzsignfoldertypePrivacylevel(FieldEEzsignfoldertypePrivacylevel eEzsignfoldertypePrivacylevel) {
    this.eEzsignfoldertypePrivacylevel = eEzsignfoldertypePrivacylevel;
    return this;
  }

  /**
   * Get eEzsignfoldertypePrivacylevel
   * @return eEzsignfoldertypePrivacylevel
   */
  @javax.annotation.Nonnull
  public FieldEEzsignfoldertypePrivacylevel geteEzsignfoldertypePrivacylevel() {
    return eEzsignfoldertypePrivacylevel;
  }

  public void seteEzsignfoldertypePrivacylevel(FieldEEzsignfoldertypePrivacylevel eEzsignfoldertypePrivacylevel) {
    this.eEzsignfoldertypePrivacylevel = eEzsignfoldertypePrivacylevel;
  }


  public EzsignfoldertypeRequestV3 iEzsignfoldertypeFontsizeannotation(Integer iEzsignfoldertypeFontsizeannotation) {
    this.iEzsignfoldertypeFontsizeannotation = iEzsignfoldertypeFontsizeannotation;
    return this;
  }

  /**
   * Font size for annotations
   * minimum: 1
   * maximum: 255
   * @return iEzsignfoldertypeFontsizeannotation
   */
  @javax.annotation.Nullable
  public Integer getiEzsignfoldertypeFontsizeannotation() {
    return iEzsignfoldertypeFontsizeannotation;
  }

  public void setiEzsignfoldertypeFontsizeannotation(Integer iEzsignfoldertypeFontsizeannotation) {
    this.iEzsignfoldertypeFontsizeannotation = iEzsignfoldertypeFontsizeannotation;
  }


  public EzsignfoldertypeRequestV3 iEzsignfoldertypeFontsizeformfield(Integer iEzsignfoldertypeFontsizeformfield) {
    this.iEzsignfoldertypeFontsizeformfield = iEzsignfoldertypeFontsizeformfield;
    return this;
  }

  /**
   * Font size for form fields
   * minimum: 1
   * maximum: 255
   * @return iEzsignfoldertypeFontsizeformfield
   */
  @javax.annotation.Nullable
  public Integer getiEzsignfoldertypeFontsizeformfield() {
    return iEzsignfoldertypeFontsizeformfield;
  }

  public void setiEzsignfoldertypeFontsizeformfield(Integer iEzsignfoldertypeFontsizeformfield) {
    this.iEzsignfoldertypeFontsizeformfield = iEzsignfoldertypeFontsizeformfield;
  }


  public EzsignfoldertypeRequestV3 iEzsignfoldertypeSendreminderfirstdays(Integer iEzsignfoldertypeSendreminderfirstdays) {
    this.iEzsignfoldertypeSendreminderfirstdays = iEzsignfoldertypeSendreminderfirstdays;
    return this;
  }

  /**
   * The number of days before the the first reminder sending
   * minimum: 0
   * maximum: 255
   * @return iEzsignfoldertypeSendreminderfirstdays
   */
  @javax.annotation.Nullable
  public Integer getiEzsignfoldertypeSendreminderfirstdays() {
    return iEzsignfoldertypeSendreminderfirstdays;
  }

  public void setiEzsignfoldertypeSendreminderfirstdays(Integer iEzsignfoldertypeSendreminderfirstdays) {
    this.iEzsignfoldertypeSendreminderfirstdays = iEzsignfoldertypeSendreminderfirstdays;
  }


  public EzsignfoldertypeRequestV3 iEzsignfoldertypeSendreminderotherdays(Integer iEzsignfoldertypeSendreminderotherdays) {
    this.iEzsignfoldertypeSendreminderotherdays = iEzsignfoldertypeSendreminderotherdays;
    return this;
  }

  /**
   * The number of days after the first reminder sending
   * minimum: 0
   * maximum: 255
   * @return iEzsignfoldertypeSendreminderotherdays
   */
  @javax.annotation.Nullable
  public Integer getiEzsignfoldertypeSendreminderotherdays() {
    return iEzsignfoldertypeSendreminderotherdays;
  }

  public void setiEzsignfoldertypeSendreminderotherdays(Integer iEzsignfoldertypeSendreminderotherdays) {
    this.iEzsignfoldertypeSendreminderotherdays = iEzsignfoldertypeSendreminderotherdays;
  }


  public EzsignfoldertypeRequestV3 iEzsignfoldertypeArchivaldays(Integer iEzsignfoldertypeArchivaldays) {
    this.iEzsignfoldertypeArchivaldays = iEzsignfoldertypeArchivaldays;
    return this;
  }

  /**
   * The number of days before the archival of Ezsignfolders created using this Ezsignfoldertype
   * minimum: 0
   * maximum: 180
   * @return iEzsignfoldertypeArchivaldays
   */
  @javax.annotation.Nonnull
  public Integer getiEzsignfoldertypeArchivaldays() {
    return iEzsignfoldertypeArchivaldays;
  }

  public void setiEzsignfoldertypeArchivaldays(Integer iEzsignfoldertypeArchivaldays) {
    this.iEzsignfoldertypeArchivaldays = iEzsignfoldertypeArchivaldays;
  }


  public EzsignfoldertypeRequestV3 eEzsignfoldertypeDisposal(FieldEEzsignfoldertypeDisposal eEzsignfoldertypeDisposal) {
    this.eEzsignfoldertypeDisposal = eEzsignfoldertypeDisposal;
    return this;
  }

  /**
   * Get eEzsignfoldertypeDisposal
   * @return eEzsignfoldertypeDisposal
   */
  @javax.annotation.Nonnull
  public FieldEEzsignfoldertypeDisposal geteEzsignfoldertypeDisposal() {
    return eEzsignfoldertypeDisposal;
  }

  public void seteEzsignfoldertypeDisposal(FieldEEzsignfoldertypeDisposal eEzsignfoldertypeDisposal) {
    this.eEzsignfoldertypeDisposal = eEzsignfoldertypeDisposal;
  }


  public EzsignfoldertypeRequestV3 eEzsignfoldertypeCompletion(FieldEEzsignfoldertypeCompletion eEzsignfoldertypeCompletion) {
    this.eEzsignfoldertypeCompletion = eEzsignfoldertypeCompletion;
    return this;
  }

  /**
   * Get eEzsignfoldertypeCompletion
   * @return eEzsignfoldertypeCompletion
   */
  @javax.annotation.Nonnull
  public FieldEEzsignfoldertypeCompletion geteEzsignfoldertypeCompletion() {
    return eEzsignfoldertypeCompletion;
  }

  public void seteEzsignfoldertypeCompletion(FieldEEzsignfoldertypeCompletion eEzsignfoldertypeCompletion) {
    this.eEzsignfoldertypeCompletion = eEzsignfoldertypeCompletion;
  }


  public EzsignfoldertypeRequestV3 iEzsignfoldertypeDisposaldays(Integer iEzsignfoldertypeDisposaldays) {
    this.iEzsignfoldertypeDisposaldays = iEzsignfoldertypeDisposaldays;
    return this;
  }

  /**
   * The number of days after the archival before the disposal of the Ezsignfolder
   * minimum: 0
   * maximum: 9999
   * @return iEzsignfoldertypeDisposaldays
   */
  @javax.annotation.Nullable
  public Integer getiEzsignfoldertypeDisposaldays() {
    return iEzsignfoldertypeDisposaldays;
  }

  public void setiEzsignfoldertypeDisposaldays(Integer iEzsignfoldertypeDisposaldays) {
    this.iEzsignfoldertypeDisposaldays = iEzsignfoldertypeDisposaldays;
  }


  public EzsignfoldertypeRequestV3 iEzsignfoldertypeDeadlinedays(Integer iEzsignfoldertypeDeadlinedays) {
    this.iEzsignfoldertypeDeadlinedays = iEzsignfoldertypeDeadlinedays;
    return this;
  }

  /**
   * The number of days to get all Ezsignsignatures
   * minimum: 1
   * maximum: 60
   * @return iEzsignfoldertypeDeadlinedays
   */
  @javax.annotation.Nonnull
  public Integer getiEzsignfoldertypeDeadlinedays() {
    return iEzsignfoldertypeDeadlinedays;
  }

  public void setiEzsignfoldertypeDeadlinedays(Integer iEzsignfoldertypeDeadlinedays) {
    this.iEzsignfoldertypeDeadlinedays = iEzsignfoldertypeDeadlinedays;
  }


  public EzsignfoldertypeRequestV3 bEzsignfoldertypePrematurelyendautomatically(Boolean bEzsignfoldertypePrematurelyendautomatically) {
    this.bEzsignfoldertypePrematurelyendautomatically = bEzsignfoldertypePrematurelyendautomatically;
    return this;
  }

  /**
   * Wheter if document will be ended prematurely after Ezsignfolder expires.
   * @return bEzsignfoldertypePrematurelyendautomatically
   */
  @javax.annotation.Nullable
  public Boolean getbEzsignfoldertypePrematurelyendautomatically() {
    return bEzsignfoldertypePrematurelyendautomatically;
  }

  public void setbEzsignfoldertypePrematurelyendautomatically(Boolean bEzsignfoldertypePrematurelyendautomatically) {
    this.bEzsignfoldertypePrematurelyendautomatically = bEzsignfoldertypePrematurelyendautomatically;
  }


  public EzsignfoldertypeRequestV3 iEzsignfoldertypePrematurelyendautomaticallydays(Integer iEzsignfoldertypePrematurelyendautomaticallydays) {
    this.iEzsignfoldertypePrematurelyendautomaticallydays = iEzsignfoldertypePrematurelyendautomaticallydays;
    return this;
  }

  /**
   * Number of days between Ezsignfolder expiration and automatic prematurely end of Ezsigndocuments.
   * minimum: 0
   * maximum: 255
   * @return iEzsignfoldertypePrematurelyendautomaticallydays
   */
  @javax.annotation.Nullable
  public Integer getiEzsignfoldertypePrematurelyendautomaticallydays() {
    return iEzsignfoldertypePrematurelyendautomaticallydays;
  }

  public void setiEzsignfoldertypePrematurelyendautomaticallydays(Integer iEzsignfoldertypePrematurelyendautomaticallydays) {
    this.iEzsignfoldertypePrematurelyendautomaticallydays = iEzsignfoldertypePrematurelyendautomaticallydays;
  }


  public EzsignfoldertypeRequestV3 bEzsignfoldertypeAutomaticsignature(Boolean bEzsignfoldertypeAutomaticsignature) {
    this.bEzsignfoldertypeAutomaticsignature = bEzsignfoldertypeAutomaticsignature;
    return this;
  }

  /**
   * Whether we allow the automatic signature by an User
   * @return bEzsignfoldertypeAutomaticsignature
   */
  @javax.annotation.Nullable
  public Boolean getbEzsignfoldertypeAutomaticsignature() {
    return bEzsignfoldertypeAutomaticsignature;
  }

  public void setbEzsignfoldertypeAutomaticsignature(Boolean bEzsignfoldertypeAutomaticsignature) {
    this.bEzsignfoldertypeAutomaticsignature = bEzsignfoldertypeAutomaticsignature;
  }


  public EzsignfoldertypeRequestV3 bEzsignfoldertypeDelegate(Boolean bEzsignfoldertypeDelegate) {
    this.bEzsignfoldertypeDelegate = bEzsignfoldertypeDelegate;
    return this;
  }

  /**
   * Wheter if delegation of signature is allowed to another user or not
   * @return bEzsignfoldertypeDelegate
   */
  @javax.annotation.Nullable
  public Boolean getbEzsignfoldertypeDelegate() {
    return bEzsignfoldertypeDelegate;
  }

  public void setbEzsignfoldertypeDelegate(Boolean bEzsignfoldertypeDelegate) {
    this.bEzsignfoldertypeDelegate = bEzsignfoldertypeDelegate;
  }


  public EzsignfoldertypeRequestV3 bEzsignfoldertypeDiscussion(Boolean bEzsignfoldertypeDiscussion) {
    this.bEzsignfoldertypeDiscussion = bEzsignfoldertypeDiscussion;
    return this;
  }

  /**
   * Wheter if creating a new Discussion is allowed or not
   * @return bEzsignfoldertypeDiscussion
   */
  @javax.annotation.Nullable
  public Boolean getbEzsignfoldertypeDiscussion() {
    return bEzsignfoldertypeDiscussion;
  }

  public void setbEzsignfoldertypeDiscussion(Boolean bEzsignfoldertypeDiscussion) {
    this.bEzsignfoldertypeDiscussion = bEzsignfoldertypeDiscussion;
  }


  public EzsignfoldertypeRequestV3 bEzsignfoldertypeLogrecipientinproof(Boolean bEzsignfoldertypeLogrecipientinproof) {
    this.bEzsignfoldertypeLogrecipientinproof = bEzsignfoldertypeLogrecipientinproof;
    return this;
  }

  /**
   * Whether we log recipient of signed document in proof
   * @return bEzsignfoldertypeLogrecipientinproof
   */
  @javax.annotation.Nullable
  public Boolean getbEzsignfoldertypeLogrecipientinproof() {
    return bEzsignfoldertypeLogrecipientinproof;
  }

  public void setbEzsignfoldertypeLogrecipientinproof(Boolean bEzsignfoldertypeLogrecipientinproof) {
    this.bEzsignfoldertypeLogrecipientinproof = bEzsignfoldertypeLogrecipientinproof;
  }


  public EzsignfoldertypeRequestV3 bEzsignfoldertypeReassignezsignsigner(Boolean bEzsignfoldertypeReassignezsignsigner) {
    this.bEzsignfoldertypeReassignezsignsigner = bEzsignfoldertypeReassignezsignsigner;
    return this;
  }

  /**
   * Wheter if Reassignment of signature is allowed by a signatory to another signatory or not
   * @return bEzsignfoldertypeReassignezsignsigner
   */
  @javax.annotation.Nullable
  public Boolean getbEzsignfoldertypeReassignezsignsigner() {
    return bEzsignfoldertypeReassignezsignsigner;
  }

  public void setbEzsignfoldertypeReassignezsignsigner(Boolean bEzsignfoldertypeReassignezsignsigner) {
    this.bEzsignfoldertypeReassignezsignsigner = bEzsignfoldertypeReassignezsignsigner;
  }


  public EzsignfoldertypeRequestV3 bEzsignfoldertypeReassignuser(Boolean bEzsignfoldertypeReassignuser) {
    this.bEzsignfoldertypeReassignuser = bEzsignfoldertypeReassignuser;
    return this;
  }

  /**
   * Wheter if Reassignment of signature is allowed by a user to a signatory or another user or not
   * @return bEzsignfoldertypeReassignuser
   */
  @javax.annotation.Nullable
  public Boolean getbEzsignfoldertypeReassignuser() {
    return bEzsignfoldertypeReassignuser;
  }

  public void setbEzsignfoldertypeReassignuser(Boolean bEzsignfoldertypeReassignuser) {
    this.bEzsignfoldertypeReassignuser = bEzsignfoldertypeReassignuser;
  }


  public EzsignfoldertypeRequestV3 bEzsignfoldertypeReassigngroup(Boolean bEzsignfoldertypeReassigngroup) {
    this.bEzsignfoldertypeReassigngroup = bEzsignfoldertypeReassigngroup;
    return this;
  }

  /**
   * Wheter if Reassignment of signatures of the groups to which the user belongs is authorized by a user to himself
   * @return bEzsignfoldertypeReassigngroup
   */
  @javax.annotation.Nullable
  public Boolean getbEzsignfoldertypeReassigngroup() {
    return bEzsignfoldertypeReassigngroup;
  }

  public void setbEzsignfoldertypeReassigngroup(Boolean bEzsignfoldertypeReassigngroup) {
    this.bEzsignfoldertypeReassigngroup = bEzsignfoldertypeReassigngroup;
  }


  public EzsignfoldertypeRequestV3 bEzsignfoldertypeSendsignedtoezsignsigner(Boolean bEzsignfoldertypeSendsignedtoezsignsigner) {
    this.bEzsignfoldertypeSendsignedtoezsignsigner = bEzsignfoldertypeSendsignedtoezsignsigner;
    return this;
  }

  /**
   * Whether we send an email to Ezsignsigner  when document is completed
   * @return bEzsignfoldertypeSendsignedtoezsignsigner
   */
  @javax.annotation.Nullable
  public Boolean getbEzsignfoldertypeSendsignedtoezsignsigner() {
    return bEzsignfoldertypeSendsignedtoezsignsigner;
  }

  public void setbEzsignfoldertypeSendsignedtoezsignsigner(Boolean bEzsignfoldertypeSendsignedtoezsignsigner) {
    this.bEzsignfoldertypeSendsignedtoezsignsigner = bEzsignfoldertypeSendsignedtoezsignsigner;
  }


  public EzsignfoldertypeRequestV3 bEzsignfoldertypeSendsignedtouser(Boolean bEzsignfoldertypeSendsignedtouser) {
    this.bEzsignfoldertypeSendsignedtouser = bEzsignfoldertypeSendsignedtouser;
    return this;
  }

  /**
   * Whether we send an email to User who signed when document is completed
   * @return bEzsignfoldertypeSendsignedtouser
   */
  @javax.annotation.Nullable
  public Boolean getbEzsignfoldertypeSendsignedtouser() {
    return bEzsignfoldertypeSendsignedtouser;
  }

  public void setbEzsignfoldertypeSendsignedtouser(Boolean bEzsignfoldertypeSendsignedtouser) {
    this.bEzsignfoldertypeSendsignedtouser = bEzsignfoldertypeSendsignedtouser;
  }


  public EzsignfoldertypeRequestV3 bEzsignfoldertypeSendattachmentezsignsigner(Boolean bEzsignfoldertypeSendattachmentezsignsigner) {
    this.bEzsignfoldertypeSendattachmentezsignsigner = bEzsignfoldertypeSendattachmentezsignsigner;
    return this;
  }

  /**
   * Whether we send the Ezsigndocument in the email to Ezsignsigner
   * @return bEzsignfoldertypeSendattachmentezsignsigner
   */
  @javax.annotation.Nullable
  public Boolean getbEzsignfoldertypeSendattachmentezsignsigner() {
    return bEzsignfoldertypeSendattachmentezsignsigner;
  }

  public void setbEzsignfoldertypeSendattachmentezsignsigner(Boolean bEzsignfoldertypeSendattachmentezsignsigner) {
    this.bEzsignfoldertypeSendattachmentezsignsigner = bEzsignfoldertypeSendattachmentezsignsigner;
  }


  public EzsignfoldertypeRequestV3 bEzsignfoldertypeSendproofezsignsigner(Boolean bEzsignfoldertypeSendproofezsignsigner) {
    this.bEzsignfoldertypeSendproofezsignsigner = bEzsignfoldertypeSendproofezsignsigner;
    return this;
  }

  /**
   * Whether we send the proof in the email to Ezsignsigner
   * @return bEzsignfoldertypeSendproofezsignsigner
   */
  @javax.annotation.Nullable
  public Boolean getbEzsignfoldertypeSendproofezsignsigner() {
    return bEzsignfoldertypeSendproofezsignsigner;
  }

  public void setbEzsignfoldertypeSendproofezsignsigner(Boolean bEzsignfoldertypeSendproofezsignsigner) {
    this.bEzsignfoldertypeSendproofezsignsigner = bEzsignfoldertypeSendproofezsignsigner;
  }


  public EzsignfoldertypeRequestV3 bEzsignfoldertypeSendattachmentuser(Boolean bEzsignfoldertypeSendattachmentuser) {
    this.bEzsignfoldertypeSendattachmentuser = bEzsignfoldertypeSendattachmentuser;
    return this;
  }

  /**
   * Whether we send the Ezsigndocument in the email to User
   * @return bEzsignfoldertypeSendattachmentuser
   */
  @javax.annotation.Nullable
  public Boolean getbEzsignfoldertypeSendattachmentuser() {
    return bEzsignfoldertypeSendattachmentuser;
  }

  public void setbEzsignfoldertypeSendattachmentuser(Boolean bEzsignfoldertypeSendattachmentuser) {
    this.bEzsignfoldertypeSendattachmentuser = bEzsignfoldertypeSendattachmentuser;
  }


  public EzsignfoldertypeRequestV3 bEzsignfoldertypeSendproofuser(Boolean bEzsignfoldertypeSendproofuser) {
    this.bEzsignfoldertypeSendproofuser = bEzsignfoldertypeSendproofuser;
    return this;
  }

  /**
   * Whether we send the proof in the email to User
   * @return bEzsignfoldertypeSendproofuser
   */
  @javax.annotation.Nullable
  public Boolean getbEzsignfoldertypeSendproofuser() {
    return bEzsignfoldertypeSendproofuser;
  }

  public void setbEzsignfoldertypeSendproofuser(Boolean bEzsignfoldertypeSendproofuser) {
    this.bEzsignfoldertypeSendproofuser = bEzsignfoldertypeSendproofuser;
  }


  public EzsignfoldertypeRequestV3 bEzsignfoldertypeSendproofemail(Boolean bEzsignfoldertypeSendproofemail) {
    this.bEzsignfoldertypeSendproofemail = bEzsignfoldertypeSendproofemail;
    return this;
  }

  /**
   * Whether we send the proof in the email to external recipient
   * @return bEzsignfoldertypeSendproofemail
   */
  @javax.annotation.Nullable
  public Boolean getbEzsignfoldertypeSendproofemail() {
    return bEzsignfoldertypeSendproofemail;
  }

  public void setbEzsignfoldertypeSendproofemail(Boolean bEzsignfoldertypeSendproofemail) {
    this.bEzsignfoldertypeSendproofemail = bEzsignfoldertypeSendproofemail;
  }


  public EzsignfoldertypeRequestV3 bEzsignfoldertypeAllowdownloadattachmentezsignsigner(Boolean bEzsignfoldertypeAllowdownloadattachmentezsignsigner) {
    this.bEzsignfoldertypeAllowdownloadattachmentezsignsigner = bEzsignfoldertypeAllowdownloadattachmentezsignsigner;
    return this;
  }

  /**
   * Whether we allow the Ezsigndocument to be downloaded by an Ezsignsigner
   * @return bEzsignfoldertypeAllowdownloadattachmentezsignsigner
   */
  @javax.annotation.Nullable
  public Boolean getbEzsignfoldertypeAllowdownloadattachmentezsignsigner() {
    return bEzsignfoldertypeAllowdownloadattachmentezsignsigner;
  }

  public void setbEzsignfoldertypeAllowdownloadattachmentezsignsigner(Boolean bEzsignfoldertypeAllowdownloadattachmentezsignsigner) {
    this.bEzsignfoldertypeAllowdownloadattachmentezsignsigner = bEzsignfoldertypeAllowdownloadattachmentezsignsigner;
  }


  public EzsignfoldertypeRequestV3 bEzsignfoldertypeAllowdownloadproofezsignsigner(Boolean bEzsignfoldertypeAllowdownloadproofezsignsigner) {
    this.bEzsignfoldertypeAllowdownloadproofezsignsigner = bEzsignfoldertypeAllowdownloadproofezsignsigner;
    return this;
  }

  /**
   * Whether we allow the proof to be downloaded by an Ezsignsigner
   * @return bEzsignfoldertypeAllowdownloadproofezsignsigner
   */
  @javax.annotation.Nullable
  public Boolean getbEzsignfoldertypeAllowdownloadproofezsignsigner() {
    return bEzsignfoldertypeAllowdownloadproofezsignsigner;
  }

  public void setbEzsignfoldertypeAllowdownloadproofezsignsigner(Boolean bEzsignfoldertypeAllowdownloadproofezsignsigner) {
    this.bEzsignfoldertypeAllowdownloadproofezsignsigner = bEzsignfoldertypeAllowdownloadproofezsignsigner;
  }


  public EzsignfoldertypeRequestV3 bEzsignfoldertypeSendproofreceivealldocument(Boolean bEzsignfoldertypeSendproofreceivealldocument) {
    this.bEzsignfoldertypeSendproofreceivealldocument = bEzsignfoldertypeSendproofreceivealldocument;
    return this;
  }

  /**
   * Whether we send the proof to user and Ezsignsigner who receive all documents.
   * @return bEzsignfoldertypeSendproofreceivealldocument
   */
  @javax.annotation.Nullable
  public Boolean getbEzsignfoldertypeSendproofreceivealldocument() {
    return bEzsignfoldertypeSendproofreceivealldocument;
  }

  public void setbEzsignfoldertypeSendproofreceivealldocument(Boolean bEzsignfoldertypeSendproofreceivealldocument) {
    this.bEzsignfoldertypeSendproofreceivealldocument = bEzsignfoldertypeSendproofreceivealldocument;
  }


  public EzsignfoldertypeRequestV3 bEzsignfoldertypeSendsignedtodocumentowner(Boolean bEzsignfoldertypeSendsignedtodocumentowner) {
    this.bEzsignfoldertypeSendsignedtodocumentowner = bEzsignfoldertypeSendsignedtodocumentowner;
    return this;
  }

  /**
   * Whether we send the signed Ezsigndocument to the Ezsigndocument&#39;s owner
   * @return bEzsignfoldertypeSendsignedtodocumentowner
   */
  @javax.annotation.Nonnull
  public Boolean getbEzsignfoldertypeSendsignedtodocumentowner() {
    return bEzsignfoldertypeSendsignedtodocumentowner;
  }

  public void setbEzsignfoldertypeSendsignedtodocumentowner(Boolean bEzsignfoldertypeSendsignedtodocumentowner) {
    this.bEzsignfoldertypeSendsignedtodocumentowner = bEzsignfoldertypeSendsignedtodocumentowner;
  }


  public EzsignfoldertypeRequestV3 bEzsignfoldertypeSendsignedtofolderowner(Boolean bEzsignfoldertypeSendsignedtofolderowner) {
    this.bEzsignfoldertypeSendsignedtofolderowner = bEzsignfoldertypeSendsignedtofolderowner;
    return this;
  }

  /**
   * Whether we send the signed Ezsigndocument to the Ezsignfolder&#39;s owner
   * @return bEzsignfoldertypeSendsignedtofolderowner
   */
  @javax.annotation.Nonnull
  public Boolean getbEzsignfoldertypeSendsignedtofolderowner() {
    return bEzsignfoldertypeSendsignedtofolderowner;
  }

  public void setbEzsignfoldertypeSendsignedtofolderowner(Boolean bEzsignfoldertypeSendsignedtofolderowner) {
    this.bEzsignfoldertypeSendsignedtofolderowner = bEzsignfoldertypeSendsignedtofolderowner;
  }


  public EzsignfoldertypeRequestV3 bEzsignfoldertypeSendsignedtofullgroup(Boolean bEzsignfoldertypeSendsignedtofullgroup) {
    this.bEzsignfoldertypeSendsignedtofullgroup = bEzsignfoldertypeSendsignedtofullgroup;
    return this;
  }

  /**
   * Whether we send the signed Ezsigndocument to the Usergroup that has acces to all Ezsignfolders
   * @return bEzsignfoldertypeSendsignedtofullgroup
   */
  @javax.annotation.Nullable
  public Boolean getbEzsignfoldertypeSendsignedtofullgroup() {
    return bEzsignfoldertypeSendsignedtofullgroup;
  }

  public void setbEzsignfoldertypeSendsignedtofullgroup(Boolean bEzsignfoldertypeSendsignedtofullgroup) {
    this.bEzsignfoldertypeSendsignedtofullgroup = bEzsignfoldertypeSendsignedtofullgroup;
  }


  public EzsignfoldertypeRequestV3 bEzsignfoldertypeSendsignedtolimitedgroup(Boolean bEzsignfoldertypeSendsignedtolimitedgroup) {
    this.bEzsignfoldertypeSendsignedtolimitedgroup = bEzsignfoldertypeSendsignedtolimitedgroup;
    return this;
  }

  /**
   * THIS FIELD WILL BE DELETED. Whether we send the signed Ezsigndocument to the Usergroup that has acces to only their own Ezsignfolders
   * @return bEzsignfoldertypeSendsignedtolimitedgroup
   */
  @javax.annotation.Nullable
  public Boolean getbEzsignfoldertypeSendsignedtolimitedgroup() {
    return bEzsignfoldertypeSendsignedtolimitedgroup;
  }

  public void setbEzsignfoldertypeSendsignedtolimitedgroup(Boolean bEzsignfoldertypeSendsignedtolimitedgroup) {
    this.bEzsignfoldertypeSendsignedtolimitedgroup = bEzsignfoldertypeSendsignedtolimitedgroup;
  }


  public EzsignfoldertypeRequestV3 bEzsignfoldertypeSendsignedtocolleague(Boolean bEzsignfoldertypeSendsignedtocolleague) {
    this.bEzsignfoldertypeSendsignedtocolleague = bEzsignfoldertypeSendsignedtocolleague;
    return this;
  }

  /**
   * Whether we send the signed Ezsigndocument to the colleagues
   * @return bEzsignfoldertypeSendsignedtocolleague
   */
  @javax.annotation.Nonnull
  public Boolean getbEzsignfoldertypeSendsignedtocolleague() {
    return bEzsignfoldertypeSendsignedtocolleague;
  }

  public void setbEzsignfoldertypeSendsignedtocolleague(Boolean bEzsignfoldertypeSendsignedtocolleague) {
    this.bEzsignfoldertypeSendsignedtocolleague = bEzsignfoldertypeSendsignedtocolleague;
  }


  public EzsignfoldertypeRequestV3 bEzsignfoldertypeSendsummarytodocumentowner(Boolean bEzsignfoldertypeSendsummarytodocumentowner) {
    this.bEzsignfoldertypeSendsummarytodocumentowner = bEzsignfoldertypeSendsummarytodocumentowner;
    return this;
  }

  /**
   * Whether we send the summary to the Ezsigndocument&#39;s owner
   * @return bEzsignfoldertypeSendsummarytodocumentowner
   */
  @javax.annotation.Nonnull
  public Boolean getbEzsignfoldertypeSendsummarytodocumentowner() {
    return bEzsignfoldertypeSendsummarytodocumentowner;
  }

  public void setbEzsignfoldertypeSendsummarytodocumentowner(Boolean bEzsignfoldertypeSendsummarytodocumentowner) {
    this.bEzsignfoldertypeSendsummarytodocumentowner = bEzsignfoldertypeSendsummarytodocumentowner;
  }


  public EzsignfoldertypeRequestV3 bEzsignfoldertypeSendsummarytofolderowner(Boolean bEzsignfoldertypeSendsummarytofolderowner) {
    this.bEzsignfoldertypeSendsummarytofolderowner = bEzsignfoldertypeSendsummarytofolderowner;
    return this;
  }

  /**
   * Whether we send the summary to the Ezsignfolder&#39;s owner
   * @return bEzsignfoldertypeSendsummarytofolderowner
   */
  @javax.annotation.Nonnull
  public Boolean getbEzsignfoldertypeSendsummarytofolderowner() {
    return bEzsignfoldertypeSendsummarytofolderowner;
  }

  public void setbEzsignfoldertypeSendsummarytofolderowner(Boolean bEzsignfoldertypeSendsummarytofolderowner) {
    this.bEzsignfoldertypeSendsummarytofolderowner = bEzsignfoldertypeSendsummarytofolderowner;
  }


  public EzsignfoldertypeRequestV3 bEzsignfoldertypeSendsummarytofullgroup(Boolean bEzsignfoldertypeSendsummarytofullgroup) {
    this.bEzsignfoldertypeSendsummarytofullgroup = bEzsignfoldertypeSendsummarytofullgroup;
    return this;
  }

  /**
   * Whether we send the summary to the Usergroup that has acces to all Ezsignfolders
   * @return bEzsignfoldertypeSendsummarytofullgroup
   */
  @javax.annotation.Nullable
  public Boolean getbEzsignfoldertypeSendsummarytofullgroup() {
    return bEzsignfoldertypeSendsummarytofullgroup;
  }

  public void setbEzsignfoldertypeSendsummarytofullgroup(Boolean bEzsignfoldertypeSendsummarytofullgroup) {
    this.bEzsignfoldertypeSendsummarytofullgroup = bEzsignfoldertypeSendsummarytofullgroup;
  }


  public EzsignfoldertypeRequestV3 bEzsignfoldertypeSendsummarytolimitedgroup(Boolean bEzsignfoldertypeSendsummarytolimitedgroup) {
    this.bEzsignfoldertypeSendsummarytolimitedgroup = bEzsignfoldertypeSendsummarytolimitedgroup;
    return this;
  }

  /**
   * Whether we send the summary to the Usergroup that has acces to only their own Ezsignfolders
   * @return bEzsignfoldertypeSendsummarytolimitedgroup
   */
  @javax.annotation.Nullable
  public Boolean getbEzsignfoldertypeSendsummarytolimitedgroup() {
    return bEzsignfoldertypeSendsummarytolimitedgroup;
  }

  public void setbEzsignfoldertypeSendsummarytolimitedgroup(Boolean bEzsignfoldertypeSendsummarytolimitedgroup) {
    this.bEzsignfoldertypeSendsummarytolimitedgroup = bEzsignfoldertypeSendsummarytolimitedgroup;
  }


  public EzsignfoldertypeRequestV3 bEzsignfoldertypeSendsummarytocolleague(Boolean bEzsignfoldertypeSendsummarytocolleague) {
    this.bEzsignfoldertypeSendsummarytocolleague = bEzsignfoldertypeSendsummarytocolleague;
    return this;
  }

  /**
   * Whether we send the summary to the colleagues
   * @return bEzsignfoldertypeSendsummarytocolleague
   */
  @javax.annotation.Nonnull
  public Boolean getbEzsignfoldertypeSendsummarytocolleague() {
    return bEzsignfoldertypeSendsummarytocolleague;
  }

  public void setbEzsignfoldertypeSendsummarytocolleague(Boolean bEzsignfoldertypeSendsummarytocolleague) {
    this.bEzsignfoldertypeSendsummarytocolleague = bEzsignfoldertypeSendsummarytocolleague;
  }


  public EzsignfoldertypeRequestV3 eEzsignfoldertypeSigneraccess(FieldEEzsignfoldertypeSigneraccess eEzsignfoldertypeSigneraccess) {
    this.eEzsignfoldertypeSigneraccess = eEzsignfoldertypeSigneraccess;
    return this;
  }

  /**
   * Get eEzsignfoldertypeSigneraccess
   * @return eEzsignfoldertypeSigneraccess
   */
  @javax.annotation.Nullable
  public FieldEEzsignfoldertypeSigneraccess geteEzsignfoldertypeSigneraccess() {
    return eEzsignfoldertypeSigneraccess;
  }

  public void seteEzsignfoldertypeSigneraccess(FieldEEzsignfoldertypeSigneraccess eEzsignfoldertypeSigneraccess) {
    this.eEzsignfoldertypeSigneraccess = eEzsignfoldertypeSigneraccess;
  }


  public EzsignfoldertypeRequestV3 bEzsignfoldertypeIsactive(Boolean bEzsignfoldertypeIsactive) {
    this.bEzsignfoldertypeIsactive = bEzsignfoldertypeIsactive;
    return this;
  }

  /**
   * Whether the Ezsignfoldertype is active or not
   * @return bEzsignfoldertypeIsactive
   */
  @javax.annotation.Nonnull
  public Boolean getbEzsignfoldertypeIsactive() {
    return bEzsignfoldertypeIsactive;
  }

  public void setbEzsignfoldertypeIsactive(Boolean bEzsignfoldertypeIsactive) {
    this.bEzsignfoldertypeIsactive = bEzsignfoldertypeIsactive;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsignfoldertypeRequestV3 ezsignfoldertypeRequestV3 = (EzsignfoldertypeRequestV3) o;
    return Objects.equals(this.pkiEzsignfoldertypeID, ezsignfoldertypeRequestV3.pkiEzsignfoldertypeID) &&
        Objects.equals(this.objEzsignfoldertypeName, ezsignfoldertypeRequestV3.objEzsignfoldertypeName) &&
        Objects.equals(this.fkiBrandingID, ezsignfoldertypeRequestV3.fkiBrandingID) &&
        Objects.equals(this.fkiBillingentityinternalID, ezsignfoldertypeRequestV3.fkiBillingentityinternalID) &&
        Objects.equals(this.fkiEzsigntsarequirementID, ezsignfoldertypeRequestV3.fkiEzsigntsarequirementID) &&
        Objects.equals(this.fkiFontIDAnnotation, ezsignfoldertypeRequestV3.fkiFontIDAnnotation) &&
        Objects.equals(this.fkiFontIDFormfield, ezsignfoldertypeRequestV3.fkiFontIDFormfield) &&
        Objects.equals(this.fkiFontIDSignature, ezsignfoldertypeRequestV3.fkiFontIDSignature) &&
        Objects.equals(this.fkiPdfalevelIDConvert, ezsignfoldertypeRequestV3.fkiPdfalevelIDConvert) &&
        Objects.equals(this.aFkiPdfalevelID, ezsignfoldertypeRequestV3.aFkiPdfalevelID) &&
        Objects.equals(this.aFkiUserlogintypeID, ezsignfoldertypeRequestV3.aFkiUserlogintypeID) &&
        Objects.equals(this.aFkiUsergroupIDAll, ezsignfoldertypeRequestV3.aFkiUsergroupIDAll) &&
        Objects.equals(this.aFkiUsergroupIDRestricted, ezsignfoldertypeRequestV3.aFkiUsergroupIDRestricted) &&
        Objects.equals(this.aFkiUsergroupIDTemplate, ezsignfoldertypeRequestV3.aFkiUsergroupIDTemplate) &&
        Objects.equals(this.eEzsignfoldertypeDocumentdependency, ezsignfoldertypeRequestV3.eEzsignfoldertypeDocumentdependency) &&
        Objects.equals(this.sEmailAddressSigned, ezsignfoldertypeRequestV3.sEmailAddressSigned) &&
        Objects.equals(this.sEmailAddressSummary, ezsignfoldertypeRequestV3.sEmailAddressSummary) &&
        Objects.equals(this.eEzsignfoldertypePdfarequirement, ezsignfoldertypeRequestV3.eEzsignfoldertypePdfarequirement) &&
        Objects.equals(this.eEzsignfoldertypePdfanoncompliantaction, ezsignfoldertypeRequestV3.eEzsignfoldertypePdfanoncompliantaction) &&
        Objects.equals(this.eEzsignfoldertypePrivacylevel, ezsignfoldertypeRequestV3.eEzsignfoldertypePrivacylevel) &&
        Objects.equals(this.iEzsignfoldertypeFontsizeannotation, ezsignfoldertypeRequestV3.iEzsignfoldertypeFontsizeannotation) &&
        Objects.equals(this.iEzsignfoldertypeFontsizeformfield, ezsignfoldertypeRequestV3.iEzsignfoldertypeFontsizeformfield) &&
        Objects.equals(this.iEzsignfoldertypeSendreminderfirstdays, ezsignfoldertypeRequestV3.iEzsignfoldertypeSendreminderfirstdays) &&
        Objects.equals(this.iEzsignfoldertypeSendreminderotherdays, ezsignfoldertypeRequestV3.iEzsignfoldertypeSendreminderotherdays) &&
        Objects.equals(this.iEzsignfoldertypeArchivaldays, ezsignfoldertypeRequestV3.iEzsignfoldertypeArchivaldays) &&
        Objects.equals(this.eEzsignfoldertypeDisposal, ezsignfoldertypeRequestV3.eEzsignfoldertypeDisposal) &&
        Objects.equals(this.eEzsignfoldertypeCompletion, ezsignfoldertypeRequestV3.eEzsignfoldertypeCompletion) &&
        Objects.equals(this.iEzsignfoldertypeDisposaldays, ezsignfoldertypeRequestV3.iEzsignfoldertypeDisposaldays) &&
        Objects.equals(this.iEzsignfoldertypeDeadlinedays, ezsignfoldertypeRequestV3.iEzsignfoldertypeDeadlinedays) &&
        Objects.equals(this.bEzsignfoldertypePrematurelyendautomatically, ezsignfoldertypeRequestV3.bEzsignfoldertypePrematurelyendautomatically) &&
        Objects.equals(this.iEzsignfoldertypePrematurelyendautomaticallydays, ezsignfoldertypeRequestV3.iEzsignfoldertypePrematurelyendautomaticallydays) &&
        Objects.equals(this.bEzsignfoldertypeAutomaticsignature, ezsignfoldertypeRequestV3.bEzsignfoldertypeAutomaticsignature) &&
        Objects.equals(this.bEzsignfoldertypeDelegate, ezsignfoldertypeRequestV3.bEzsignfoldertypeDelegate) &&
        Objects.equals(this.bEzsignfoldertypeDiscussion, ezsignfoldertypeRequestV3.bEzsignfoldertypeDiscussion) &&
        Objects.equals(this.bEzsignfoldertypeLogrecipientinproof, ezsignfoldertypeRequestV3.bEzsignfoldertypeLogrecipientinproof) &&
        Objects.equals(this.bEzsignfoldertypeReassignezsignsigner, ezsignfoldertypeRequestV3.bEzsignfoldertypeReassignezsignsigner) &&
        Objects.equals(this.bEzsignfoldertypeReassignuser, ezsignfoldertypeRequestV3.bEzsignfoldertypeReassignuser) &&
        Objects.equals(this.bEzsignfoldertypeReassigngroup, ezsignfoldertypeRequestV3.bEzsignfoldertypeReassigngroup) &&
        Objects.equals(this.bEzsignfoldertypeSendsignedtoezsignsigner, ezsignfoldertypeRequestV3.bEzsignfoldertypeSendsignedtoezsignsigner) &&
        Objects.equals(this.bEzsignfoldertypeSendsignedtouser, ezsignfoldertypeRequestV3.bEzsignfoldertypeSendsignedtouser) &&
        Objects.equals(this.bEzsignfoldertypeSendattachmentezsignsigner, ezsignfoldertypeRequestV3.bEzsignfoldertypeSendattachmentezsignsigner) &&
        Objects.equals(this.bEzsignfoldertypeSendproofezsignsigner, ezsignfoldertypeRequestV3.bEzsignfoldertypeSendproofezsignsigner) &&
        Objects.equals(this.bEzsignfoldertypeSendattachmentuser, ezsignfoldertypeRequestV3.bEzsignfoldertypeSendattachmentuser) &&
        Objects.equals(this.bEzsignfoldertypeSendproofuser, ezsignfoldertypeRequestV3.bEzsignfoldertypeSendproofuser) &&
        Objects.equals(this.bEzsignfoldertypeSendproofemail, ezsignfoldertypeRequestV3.bEzsignfoldertypeSendproofemail) &&
        Objects.equals(this.bEzsignfoldertypeAllowdownloadattachmentezsignsigner, ezsignfoldertypeRequestV3.bEzsignfoldertypeAllowdownloadattachmentezsignsigner) &&
        Objects.equals(this.bEzsignfoldertypeAllowdownloadproofezsignsigner, ezsignfoldertypeRequestV3.bEzsignfoldertypeAllowdownloadproofezsignsigner) &&
        Objects.equals(this.bEzsignfoldertypeSendproofreceivealldocument, ezsignfoldertypeRequestV3.bEzsignfoldertypeSendproofreceivealldocument) &&
        Objects.equals(this.bEzsignfoldertypeSendsignedtodocumentowner, ezsignfoldertypeRequestV3.bEzsignfoldertypeSendsignedtodocumentowner) &&
        Objects.equals(this.bEzsignfoldertypeSendsignedtofolderowner, ezsignfoldertypeRequestV3.bEzsignfoldertypeSendsignedtofolderowner) &&
        Objects.equals(this.bEzsignfoldertypeSendsignedtofullgroup, ezsignfoldertypeRequestV3.bEzsignfoldertypeSendsignedtofullgroup) &&
        Objects.equals(this.bEzsignfoldertypeSendsignedtolimitedgroup, ezsignfoldertypeRequestV3.bEzsignfoldertypeSendsignedtolimitedgroup) &&
        Objects.equals(this.bEzsignfoldertypeSendsignedtocolleague, ezsignfoldertypeRequestV3.bEzsignfoldertypeSendsignedtocolleague) &&
        Objects.equals(this.bEzsignfoldertypeSendsummarytodocumentowner, ezsignfoldertypeRequestV3.bEzsignfoldertypeSendsummarytodocumentowner) &&
        Objects.equals(this.bEzsignfoldertypeSendsummarytofolderowner, ezsignfoldertypeRequestV3.bEzsignfoldertypeSendsummarytofolderowner) &&
        Objects.equals(this.bEzsignfoldertypeSendsummarytofullgroup, ezsignfoldertypeRequestV3.bEzsignfoldertypeSendsummarytofullgroup) &&
        Objects.equals(this.bEzsignfoldertypeSendsummarytolimitedgroup, ezsignfoldertypeRequestV3.bEzsignfoldertypeSendsummarytolimitedgroup) &&
        Objects.equals(this.bEzsignfoldertypeSendsummarytocolleague, ezsignfoldertypeRequestV3.bEzsignfoldertypeSendsummarytocolleague) &&
        Objects.equals(this.eEzsignfoldertypeSigneraccess, ezsignfoldertypeRequestV3.eEzsignfoldertypeSigneraccess) &&
        Objects.equals(this.bEzsignfoldertypeIsactive, ezsignfoldertypeRequestV3.bEzsignfoldertypeIsactive);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiEzsignfoldertypeID, objEzsignfoldertypeName, fkiBrandingID, fkiBillingentityinternalID, fkiEzsigntsarequirementID, fkiFontIDAnnotation, fkiFontIDFormfield, fkiFontIDSignature, fkiPdfalevelIDConvert, aFkiPdfalevelID, aFkiUserlogintypeID, aFkiUsergroupIDAll, aFkiUsergroupIDRestricted, aFkiUsergroupIDTemplate, eEzsignfoldertypeDocumentdependency, sEmailAddressSigned, sEmailAddressSummary, eEzsignfoldertypePdfarequirement, eEzsignfoldertypePdfanoncompliantaction, eEzsignfoldertypePrivacylevel, iEzsignfoldertypeFontsizeannotation, iEzsignfoldertypeFontsizeformfield, iEzsignfoldertypeSendreminderfirstdays, iEzsignfoldertypeSendreminderotherdays, iEzsignfoldertypeArchivaldays, eEzsignfoldertypeDisposal, eEzsignfoldertypeCompletion, iEzsignfoldertypeDisposaldays, iEzsignfoldertypeDeadlinedays, bEzsignfoldertypePrematurelyendautomatically, iEzsignfoldertypePrematurelyendautomaticallydays, bEzsignfoldertypeAutomaticsignature, bEzsignfoldertypeDelegate, bEzsignfoldertypeDiscussion, bEzsignfoldertypeLogrecipientinproof, bEzsignfoldertypeReassignezsignsigner, bEzsignfoldertypeReassignuser, bEzsignfoldertypeReassigngroup, bEzsignfoldertypeSendsignedtoezsignsigner, bEzsignfoldertypeSendsignedtouser, bEzsignfoldertypeSendattachmentezsignsigner, bEzsignfoldertypeSendproofezsignsigner, bEzsignfoldertypeSendattachmentuser, bEzsignfoldertypeSendproofuser, bEzsignfoldertypeSendproofemail, bEzsignfoldertypeAllowdownloadattachmentezsignsigner, bEzsignfoldertypeAllowdownloadproofezsignsigner, bEzsignfoldertypeSendproofreceivealldocument, bEzsignfoldertypeSendsignedtodocumentowner, bEzsignfoldertypeSendsignedtofolderowner, bEzsignfoldertypeSendsignedtofullgroup, bEzsignfoldertypeSendsignedtolimitedgroup, bEzsignfoldertypeSendsignedtocolleague, bEzsignfoldertypeSendsummarytodocumentowner, bEzsignfoldertypeSendsummarytofolderowner, bEzsignfoldertypeSendsummarytofullgroup, bEzsignfoldertypeSendsummarytolimitedgroup, bEzsignfoldertypeSendsummarytocolleague, eEzsignfoldertypeSigneraccess, bEzsignfoldertypeIsactive);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsignfoldertypeRequestV3 {\n");
    sb.append("    pkiEzsignfoldertypeID: ").append(toIndentedString(pkiEzsignfoldertypeID)).append("\n");
    sb.append("    objEzsignfoldertypeName: ").append(toIndentedString(objEzsignfoldertypeName)).append("\n");
    sb.append("    fkiBrandingID: ").append(toIndentedString(fkiBrandingID)).append("\n");
    sb.append("    fkiBillingentityinternalID: ").append(toIndentedString(fkiBillingentityinternalID)).append("\n");
    sb.append("    fkiEzsigntsarequirementID: ").append(toIndentedString(fkiEzsigntsarequirementID)).append("\n");
    sb.append("    fkiFontIDAnnotation: ").append(toIndentedString(fkiFontIDAnnotation)).append("\n");
    sb.append("    fkiFontIDFormfield: ").append(toIndentedString(fkiFontIDFormfield)).append("\n");
    sb.append("    fkiFontIDSignature: ").append(toIndentedString(fkiFontIDSignature)).append("\n");
    sb.append("    fkiPdfalevelIDConvert: ").append(toIndentedString(fkiPdfalevelIDConvert)).append("\n");
    sb.append("    aFkiPdfalevelID: ").append(toIndentedString(aFkiPdfalevelID)).append("\n");
    sb.append("    aFkiUserlogintypeID: ").append(toIndentedString(aFkiUserlogintypeID)).append("\n");
    sb.append("    aFkiUsergroupIDAll: ").append(toIndentedString(aFkiUsergroupIDAll)).append("\n");
    sb.append("    aFkiUsergroupIDRestricted: ").append(toIndentedString(aFkiUsergroupIDRestricted)).append("\n");
    sb.append("    aFkiUsergroupIDTemplate: ").append(toIndentedString(aFkiUsergroupIDTemplate)).append("\n");
    sb.append("    eEzsignfoldertypeDocumentdependency: ").append(toIndentedString(eEzsignfoldertypeDocumentdependency)).append("\n");
    sb.append("    sEmailAddressSigned: ").append(toIndentedString(sEmailAddressSigned)).append("\n");
    sb.append("    sEmailAddressSummary: ").append(toIndentedString(sEmailAddressSummary)).append("\n");
    sb.append("    eEzsignfoldertypePdfarequirement: ").append(toIndentedString(eEzsignfoldertypePdfarequirement)).append("\n");
    sb.append("    eEzsignfoldertypePdfanoncompliantaction: ").append(toIndentedString(eEzsignfoldertypePdfanoncompliantaction)).append("\n");
    sb.append("    eEzsignfoldertypePrivacylevel: ").append(toIndentedString(eEzsignfoldertypePrivacylevel)).append("\n");
    sb.append("    iEzsignfoldertypeFontsizeannotation: ").append(toIndentedString(iEzsignfoldertypeFontsizeannotation)).append("\n");
    sb.append("    iEzsignfoldertypeFontsizeformfield: ").append(toIndentedString(iEzsignfoldertypeFontsizeformfield)).append("\n");
    sb.append("    iEzsignfoldertypeSendreminderfirstdays: ").append(toIndentedString(iEzsignfoldertypeSendreminderfirstdays)).append("\n");
    sb.append("    iEzsignfoldertypeSendreminderotherdays: ").append(toIndentedString(iEzsignfoldertypeSendreminderotherdays)).append("\n");
    sb.append("    iEzsignfoldertypeArchivaldays: ").append(toIndentedString(iEzsignfoldertypeArchivaldays)).append("\n");
    sb.append("    eEzsignfoldertypeDisposal: ").append(toIndentedString(eEzsignfoldertypeDisposal)).append("\n");
    sb.append("    eEzsignfoldertypeCompletion: ").append(toIndentedString(eEzsignfoldertypeCompletion)).append("\n");
    sb.append("    iEzsignfoldertypeDisposaldays: ").append(toIndentedString(iEzsignfoldertypeDisposaldays)).append("\n");
    sb.append("    iEzsignfoldertypeDeadlinedays: ").append(toIndentedString(iEzsignfoldertypeDeadlinedays)).append("\n");
    sb.append("    bEzsignfoldertypePrematurelyendautomatically: ").append(toIndentedString(bEzsignfoldertypePrematurelyendautomatically)).append("\n");
    sb.append("    iEzsignfoldertypePrematurelyendautomaticallydays: ").append(toIndentedString(iEzsignfoldertypePrematurelyendautomaticallydays)).append("\n");
    sb.append("    bEzsignfoldertypeAutomaticsignature: ").append(toIndentedString(bEzsignfoldertypeAutomaticsignature)).append("\n");
    sb.append("    bEzsignfoldertypeDelegate: ").append(toIndentedString(bEzsignfoldertypeDelegate)).append("\n");
    sb.append("    bEzsignfoldertypeDiscussion: ").append(toIndentedString(bEzsignfoldertypeDiscussion)).append("\n");
    sb.append("    bEzsignfoldertypeLogrecipientinproof: ").append(toIndentedString(bEzsignfoldertypeLogrecipientinproof)).append("\n");
    sb.append("    bEzsignfoldertypeReassignezsignsigner: ").append(toIndentedString(bEzsignfoldertypeReassignezsignsigner)).append("\n");
    sb.append("    bEzsignfoldertypeReassignuser: ").append(toIndentedString(bEzsignfoldertypeReassignuser)).append("\n");
    sb.append("    bEzsignfoldertypeReassigngroup: ").append(toIndentedString(bEzsignfoldertypeReassigngroup)).append("\n");
    sb.append("    bEzsignfoldertypeSendsignedtoezsignsigner: ").append(toIndentedString(bEzsignfoldertypeSendsignedtoezsignsigner)).append("\n");
    sb.append("    bEzsignfoldertypeSendsignedtouser: ").append(toIndentedString(bEzsignfoldertypeSendsignedtouser)).append("\n");
    sb.append("    bEzsignfoldertypeSendattachmentezsignsigner: ").append(toIndentedString(bEzsignfoldertypeSendattachmentezsignsigner)).append("\n");
    sb.append("    bEzsignfoldertypeSendproofezsignsigner: ").append(toIndentedString(bEzsignfoldertypeSendproofezsignsigner)).append("\n");
    sb.append("    bEzsignfoldertypeSendattachmentuser: ").append(toIndentedString(bEzsignfoldertypeSendattachmentuser)).append("\n");
    sb.append("    bEzsignfoldertypeSendproofuser: ").append(toIndentedString(bEzsignfoldertypeSendproofuser)).append("\n");
    sb.append("    bEzsignfoldertypeSendproofemail: ").append(toIndentedString(bEzsignfoldertypeSendproofemail)).append("\n");
    sb.append("    bEzsignfoldertypeAllowdownloadattachmentezsignsigner: ").append(toIndentedString(bEzsignfoldertypeAllowdownloadattachmentezsignsigner)).append("\n");
    sb.append("    bEzsignfoldertypeAllowdownloadproofezsignsigner: ").append(toIndentedString(bEzsignfoldertypeAllowdownloadproofezsignsigner)).append("\n");
    sb.append("    bEzsignfoldertypeSendproofreceivealldocument: ").append(toIndentedString(bEzsignfoldertypeSendproofreceivealldocument)).append("\n");
    sb.append("    bEzsignfoldertypeSendsignedtodocumentowner: ").append(toIndentedString(bEzsignfoldertypeSendsignedtodocumentowner)).append("\n");
    sb.append("    bEzsignfoldertypeSendsignedtofolderowner: ").append(toIndentedString(bEzsignfoldertypeSendsignedtofolderowner)).append("\n");
    sb.append("    bEzsignfoldertypeSendsignedtofullgroup: ").append(toIndentedString(bEzsignfoldertypeSendsignedtofullgroup)).append("\n");
    sb.append("    bEzsignfoldertypeSendsignedtolimitedgroup: ").append(toIndentedString(bEzsignfoldertypeSendsignedtolimitedgroup)).append("\n");
    sb.append("    bEzsignfoldertypeSendsignedtocolleague: ").append(toIndentedString(bEzsignfoldertypeSendsignedtocolleague)).append("\n");
    sb.append("    bEzsignfoldertypeSendsummarytodocumentowner: ").append(toIndentedString(bEzsignfoldertypeSendsummarytodocumentowner)).append("\n");
    sb.append("    bEzsignfoldertypeSendsummarytofolderowner: ").append(toIndentedString(bEzsignfoldertypeSendsummarytofolderowner)).append("\n");
    sb.append("    bEzsignfoldertypeSendsummarytofullgroup: ").append(toIndentedString(bEzsignfoldertypeSendsummarytofullgroup)).append("\n");
    sb.append("    bEzsignfoldertypeSendsummarytolimitedgroup: ").append(toIndentedString(bEzsignfoldertypeSendsummarytolimitedgroup)).append("\n");
    sb.append("    bEzsignfoldertypeSendsummarytocolleague: ").append(toIndentedString(bEzsignfoldertypeSendsummarytocolleague)).append("\n");
    sb.append("    eEzsignfoldertypeSigneraccess: ").append(toIndentedString(eEzsignfoldertypeSigneraccess)).append("\n");
    sb.append("    bEzsignfoldertypeIsactive: ").append(toIndentedString(bEzsignfoldertypeIsactive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiEzsignfoldertypeID");
    openapiFields.add("objEzsignfoldertypeName");
    openapiFields.add("fkiBrandingID");
    openapiFields.add("fkiBillingentityinternalID");
    openapiFields.add("fkiEzsigntsarequirementID");
    openapiFields.add("fkiFontIDAnnotation");
    openapiFields.add("fkiFontIDFormfield");
    openapiFields.add("fkiFontIDSignature");
    openapiFields.add("fkiPdfalevelIDConvert");
    openapiFields.add("a_fkiPdfalevelID");
    openapiFields.add("a_fkiUserlogintypeID");
    openapiFields.add("a_fkiUsergroupIDAll");
    openapiFields.add("a_fkiUsergroupIDRestricted");
    openapiFields.add("a_fkiUsergroupIDTemplate");
    openapiFields.add("eEzsignfoldertypeDocumentdependency");
    openapiFields.add("sEmailAddressSigned");
    openapiFields.add("sEmailAddressSummary");
    openapiFields.add("eEzsignfoldertypePdfarequirement");
    openapiFields.add("eEzsignfoldertypePdfanoncompliantaction");
    openapiFields.add("eEzsignfoldertypePrivacylevel");
    openapiFields.add("iEzsignfoldertypeFontsizeannotation");
    openapiFields.add("iEzsignfoldertypeFontsizeformfield");
    openapiFields.add("iEzsignfoldertypeSendreminderfirstdays");
    openapiFields.add("iEzsignfoldertypeSendreminderotherdays");
    openapiFields.add("iEzsignfoldertypeArchivaldays");
    openapiFields.add("eEzsignfoldertypeDisposal");
    openapiFields.add("eEzsignfoldertypeCompletion");
    openapiFields.add("iEzsignfoldertypeDisposaldays");
    openapiFields.add("iEzsignfoldertypeDeadlinedays");
    openapiFields.add("bEzsignfoldertypePrematurelyendautomatically");
    openapiFields.add("iEzsignfoldertypePrematurelyendautomaticallydays");
    openapiFields.add("bEzsignfoldertypeAutomaticsignature");
    openapiFields.add("bEzsignfoldertypeDelegate");
    openapiFields.add("bEzsignfoldertypeDiscussion");
    openapiFields.add("bEzsignfoldertypeLogrecipientinproof");
    openapiFields.add("bEzsignfoldertypeReassignezsignsigner");
    openapiFields.add("bEzsignfoldertypeReassignuser");
    openapiFields.add("bEzsignfoldertypeReassigngroup");
    openapiFields.add("bEzsignfoldertypeSendsignedtoezsignsigner");
    openapiFields.add("bEzsignfoldertypeSendsignedtouser");
    openapiFields.add("bEzsignfoldertypeSendattachmentezsignsigner");
    openapiFields.add("bEzsignfoldertypeSendproofezsignsigner");
    openapiFields.add("bEzsignfoldertypeSendattachmentuser");
    openapiFields.add("bEzsignfoldertypeSendproofuser");
    openapiFields.add("bEzsignfoldertypeSendproofemail");
    openapiFields.add("bEzsignfoldertypeAllowdownloadattachmentezsignsigner");
    openapiFields.add("bEzsignfoldertypeAllowdownloadproofezsignsigner");
    openapiFields.add("bEzsignfoldertypeSendproofreceivealldocument");
    openapiFields.add("bEzsignfoldertypeSendsignedtodocumentowner");
    openapiFields.add("bEzsignfoldertypeSendsignedtofolderowner");
    openapiFields.add("bEzsignfoldertypeSendsignedtofullgroup");
    openapiFields.add("bEzsignfoldertypeSendsignedtolimitedgroup");
    openapiFields.add("bEzsignfoldertypeSendsignedtocolleague");
    openapiFields.add("bEzsignfoldertypeSendsummarytodocumentowner");
    openapiFields.add("bEzsignfoldertypeSendsummarytofolderowner");
    openapiFields.add("bEzsignfoldertypeSendsummarytofullgroup");
    openapiFields.add("bEzsignfoldertypeSendsummarytolimitedgroup");
    openapiFields.add("bEzsignfoldertypeSendsummarytocolleague");
    openapiFields.add("eEzsignfoldertypeSigneraccess");
    openapiFields.add("bEzsignfoldertypeIsactive");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("objEzsignfoldertypeName");
    openapiRequiredFields.add("fkiBrandingID");
    openapiRequiredFields.add("a_fkiUserlogintypeID");
    openapiRequiredFields.add("eEzsignfoldertypePrivacylevel");
    openapiRequiredFields.add("iEzsignfoldertypeArchivaldays");
    openapiRequiredFields.add("eEzsignfoldertypeDisposal");
    openapiRequiredFields.add("eEzsignfoldertypeCompletion");
    openapiRequiredFields.add("iEzsignfoldertypeDeadlinedays");
    openapiRequiredFields.add("bEzsignfoldertypeSendsignedtodocumentowner");
    openapiRequiredFields.add("bEzsignfoldertypeSendsignedtofolderowner");
    openapiRequiredFields.add("bEzsignfoldertypeSendsignedtocolleague");
    openapiRequiredFields.add("bEzsignfoldertypeSendsummarytodocumentowner");
    openapiRequiredFields.add("bEzsignfoldertypeSendsummarytofolderowner");
    openapiRequiredFields.add("bEzsignfoldertypeSendsummarytocolleague");
    openapiRequiredFields.add("bEzsignfoldertypeIsactive");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EzsignfoldertypeRequestV3
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EzsignfoldertypeRequestV3.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsignfoldertypeRequestV3 is not found in the empty JSON string", EzsignfoldertypeRequestV3.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EzsignfoldertypeRequestV3.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsignfoldertypeRequestV3` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EzsignfoldertypeRequestV3.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `objEzsignfoldertypeName`
      MultilingualEzsignfoldertypeName.validateJsonElement(jsonObj.get("objEzsignfoldertypeName"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("a_fkiPdfalevelID") != null && !jsonObj.get("a_fkiPdfalevelID").isJsonNull() && !jsonObj.get("a_fkiPdfalevelID").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_fkiPdfalevelID` to be an array in the JSON string but got `%s`", jsonObj.get("a_fkiPdfalevelID").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("a_fkiUserlogintypeID") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("a_fkiUserlogintypeID").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_fkiUserlogintypeID` to be an array in the JSON string but got `%s`", jsonObj.get("a_fkiUserlogintypeID").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("a_fkiUsergroupIDAll") != null && !jsonObj.get("a_fkiUsergroupIDAll").isJsonNull() && !jsonObj.get("a_fkiUsergroupIDAll").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_fkiUsergroupIDAll` to be an array in the JSON string but got `%s`", jsonObj.get("a_fkiUsergroupIDAll").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("a_fkiUsergroupIDRestricted") != null && !jsonObj.get("a_fkiUsergroupIDRestricted").isJsonNull() && !jsonObj.get("a_fkiUsergroupIDRestricted").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_fkiUsergroupIDRestricted` to be an array in the JSON string but got `%s`", jsonObj.get("a_fkiUsergroupIDRestricted").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("a_fkiUsergroupIDTemplate") != null && !jsonObj.get("a_fkiUsergroupIDTemplate").isJsonNull() && !jsonObj.get("a_fkiUsergroupIDTemplate").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_fkiUsergroupIDTemplate` to be an array in the JSON string but got `%s`", jsonObj.get("a_fkiUsergroupIDTemplate").toString()));
      }
      // validate the optional field `eEzsignfoldertypeDocumentdependency`
      if (jsonObj.get("eEzsignfoldertypeDocumentdependency") != null && !jsonObj.get("eEzsignfoldertypeDocumentdependency").isJsonNull()) {
        FieldEEzsignfoldertypeDocumentdependency.validateJsonElement(jsonObj.get("eEzsignfoldertypeDocumentdependency"));
      }
      if ((jsonObj.get("sEmailAddressSigned") != null && !jsonObj.get("sEmailAddressSigned").isJsonNull()) && !jsonObj.get("sEmailAddressSigned").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEmailAddressSigned` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEmailAddressSigned").toString()));
      }
      if ((jsonObj.get("sEmailAddressSummary") != null && !jsonObj.get("sEmailAddressSummary").isJsonNull()) && !jsonObj.get("sEmailAddressSummary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEmailAddressSummary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEmailAddressSummary").toString()));
      }
      // validate the optional field `eEzsignfoldertypePdfarequirement`
      if (jsonObj.get("eEzsignfoldertypePdfarequirement") != null && !jsonObj.get("eEzsignfoldertypePdfarequirement").isJsonNull()) {
        FieldEEzsignfoldertypePdfarequirement.validateJsonElement(jsonObj.get("eEzsignfoldertypePdfarequirement"));
      }
      // validate the optional field `eEzsignfoldertypePdfanoncompliantaction`
      if (jsonObj.get("eEzsignfoldertypePdfanoncompliantaction") != null && !jsonObj.get("eEzsignfoldertypePdfanoncompliantaction").isJsonNull()) {
        FieldEEzsignfoldertypePdfanoncompliantaction.validateJsonElement(jsonObj.get("eEzsignfoldertypePdfanoncompliantaction"));
      }
      // validate the required field `eEzsignfoldertypePrivacylevel`
      FieldEEzsignfoldertypePrivacylevel.validateJsonElement(jsonObj.get("eEzsignfoldertypePrivacylevel"));
      // validate the required field `eEzsignfoldertypeDisposal`
      FieldEEzsignfoldertypeDisposal.validateJsonElement(jsonObj.get("eEzsignfoldertypeDisposal"));
      // validate the required field `eEzsignfoldertypeCompletion`
      FieldEEzsignfoldertypeCompletion.validateJsonElement(jsonObj.get("eEzsignfoldertypeCompletion"));
      // validate the optional field `eEzsignfoldertypeSigneraccess`
      if (jsonObj.get("eEzsignfoldertypeSigneraccess") != null && !jsonObj.get("eEzsignfoldertypeSigneraccess").isJsonNull()) {
        FieldEEzsignfoldertypeSigneraccess.validateJsonElement(jsonObj.get("eEzsignfoldertypeSigneraccess"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsignfoldertypeRequestV3.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsignfoldertypeRequestV3' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsignfoldertypeRequestV3> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsignfoldertypeRequestV3.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsignfoldertypeRequestV3>() {
           @Override
           public void write(JsonWriter out, EzsignfoldertypeRequestV3 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsignfoldertypeRequestV3 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EzsignfoldertypeRequestV3 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EzsignfoldertypeRequestV3
   * @throws IOException if the JSON string is invalid with respect to EzsignfoldertypeRequestV3
   */
  public static EzsignfoldertypeRequestV3 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsignfoldertypeRequestV3.class);
  }

  /**
   * Convert an instance of EzsignfoldertypeRequestV3 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

