/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Branding List Element
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-28T05:38:24.783072930Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class BrandingListElement {
  public static final String SERIALIZED_NAME_PKI_BRANDING_I_D = "pkiBrandingID";
  @SerializedName(SERIALIZED_NAME_PKI_BRANDING_I_D)
  private Integer pkiBrandingID;

  public static final String SERIALIZED_NAME_S_BRANDING_DESCRIPTION_X = "sBrandingDescriptionX";
  @SerializedName(SERIALIZED_NAME_S_BRANDING_DESCRIPTION_X)
  private String sBrandingDescriptionX;

  public static final String SERIALIZED_NAME_I_BRANDING_COLORTEXT = "iBrandingColortext";
  @SerializedName(SERIALIZED_NAME_I_BRANDING_COLORTEXT)
  private Integer iBrandingColortext;

  public static final String SERIALIZED_NAME_I_BRANDING_COLORTEXTLINKBOX = "iBrandingColortextlinkbox";
  @SerializedName(SERIALIZED_NAME_I_BRANDING_COLORTEXTLINKBOX)
  private Integer iBrandingColortextlinkbox;

  public static final String SERIALIZED_NAME_I_BRANDING_COLORTEXTBUTTON = "iBrandingColortextbutton";
  @SerializedName(SERIALIZED_NAME_I_BRANDING_COLORTEXTBUTTON)
  private Integer iBrandingColortextbutton;

  public static final String SERIALIZED_NAME_I_BRANDING_COLORBACKGROUND = "iBrandingColorbackground";
  @SerializedName(SERIALIZED_NAME_I_BRANDING_COLORBACKGROUND)
  private Integer iBrandingColorbackground;

  public static final String SERIALIZED_NAME_I_BRANDING_COLORBACKGROUNDBUTTON = "iBrandingColorbackgroundbutton";
  @SerializedName(SERIALIZED_NAME_I_BRANDING_COLORBACKGROUNDBUTTON)
  private Integer iBrandingColorbackgroundbutton;

  public static final String SERIALIZED_NAME_I_BRANDING_COLORBACKGROUNDSMALLBOX = "iBrandingColorbackgroundsmallbox";
  @SerializedName(SERIALIZED_NAME_I_BRANDING_COLORBACKGROUNDSMALLBOX)
  private Integer iBrandingColorbackgroundsmallbox;

  public static final String SERIALIZED_NAME_B_BRANDING_ISACTIVE = "bBrandingIsactive";
  @SerializedName(SERIALIZED_NAME_B_BRANDING_ISACTIVE)
  private Boolean bBrandingIsactive;

  public BrandingListElement() {
  }

  public BrandingListElement pkiBrandingID(Integer pkiBrandingID) {
    this.pkiBrandingID = pkiBrandingID;
    return this;
  }

   /**
   * The unique ID of the Branding
   * minimum: 0
   * @return pkiBrandingID
  **/
  @javax.annotation.Nonnull
  public Integer getPkiBrandingID() {
    return pkiBrandingID;
  }

  public void setPkiBrandingID(Integer pkiBrandingID) {
    this.pkiBrandingID = pkiBrandingID;
  }


  public BrandingListElement sBrandingDescriptionX(String sBrandingDescriptionX) {
    this.sBrandingDescriptionX = sBrandingDescriptionX;
    return this;
  }

   /**
   * The Description of the Branding in the language of the requester
   * @return sBrandingDescriptionX
  **/
  @javax.annotation.Nonnull
  public String getsBrandingDescriptionX() {
    return sBrandingDescriptionX;
  }

  public void setsBrandingDescriptionX(String sBrandingDescriptionX) {
    this.sBrandingDescriptionX = sBrandingDescriptionX;
  }


  public BrandingListElement iBrandingColortext(Integer iBrandingColortext) {
    this.iBrandingColortext = iBrandingColortext;
    return this;
  }

   /**
   * The color of the text. This is a RGB color converted into integer
   * minimum: 0
   * maximum: 16777215
   * @return iBrandingColortext
  **/
  @javax.annotation.Nonnull
  public Integer getiBrandingColortext() {
    return iBrandingColortext;
  }

  public void setiBrandingColortext(Integer iBrandingColortext) {
    this.iBrandingColortext = iBrandingColortext;
  }


  public BrandingListElement iBrandingColortextlinkbox(Integer iBrandingColortextlinkbox) {
    this.iBrandingColortextlinkbox = iBrandingColortextlinkbox;
    return this;
  }

   /**
   * The color of the text in the link box. This is a RGB color converted into integer
   * minimum: 0
   * maximum: 16777215
   * @return iBrandingColortextlinkbox
  **/
  @javax.annotation.Nonnull
  public Integer getiBrandingColortextlinkbox() {
    return iBrandingColortextlinkbox;
  }

  public void setiBrandingColortextlinkbox(Integer iBrandingColortextlinkbox) {
    this.iBrandingColortextlinkbox = iBrandingColortextlinkbox;
  }


  public BrandingListElement iBrandingColortextbutton(Integer iBrandingColortextbutton) {
    this.iBrandingColortextbutton = iBrandingColortextbutton;
    return this;
  }

   /**
   * The color of the text in the button. This is a RGB color converted into integer
   * minimum: 0
   * maximum: 16777215
   * @return iBrandingColortextbutton
  **/
  @javax.annotation.Nonnull
  public Integer getiBrandingColortextbutton() {
    return iBrandingColortextbutton;
  }

  public void setiBrandingColortextbutton(Integer iBrandingColortextbutton) {
    this.iBrandingColortextbutton = iBrandingColortextbutton;
  }


  public BrandingListElement iBrandingColorbackground(Integer iBrandingColorbackground) {
    this.iBrandingColorbackground = iBrandingColorbackground;
    return this;
  }

   /**
   * The color of the background. This is a RGB color converted into integer
   * minimum: 0
   * maximum: 16777215
   * @return iBrandingColorbackground
  **/
  @javax.annotation.Nonnull
  public Integer getiBrandingColorbackground() {
    return iBrandingColorbackground;
  }

  public void setiBrandingColorbackground(Integer iBrandingColorbackground) {
    this.iBrandingColorbackground = iBrandingColorbackground;
  }


  public BrandingListElement iBrandingColorbackgroundbutton(Integer iBrandingColorbackgroundbutton) {
    this.iBrandingColorbackgroundbutton = iBrandingColorbackgroundbutton;
    return this;
  }

   /**
   * The color of the background of the button. This is a RGB color converted into integer
   * minimum: 0
   * maximum: 16777215
   * @return iBrandingColorbackgroundbutton
  **/
  @javax.annotation.Nonnull
  public Integer getiBrandingColorbackgroundbutton() {
    return iBrandingColorbackgroundbutton;
  }

  public void setiBrandingColorbackgroundbutton(Integer iBrandingColorbackgroundbutton) {
    this.iBrandingColorbackgroundbutton = iBrandingColorbackgroundbutton;
  }


  public BrandingListElement iBrandingColorbackgroundsmallbox(Integer iBrandingColorbackgroundsmallbox) {
    this.iBrandingColorbackgroundsmallbox = iBrandingColorbackgroundsmallbox;
    return this;
  }

   /**
   * The color of the background of the small box. This is a RGB color converted into integer
   * minimum: 0
   * maximum: 16777215
   * @return iBrandingColorbackgroundsmallbox
  **/
  @javax.annotation.Nonnull
  public Integer getiBrandingColorbackgroundsmallbox() {
    return iBrandingColorbackgroundsmallbox;
  }

  public void setiBrandingColorbackgroundsmallbox(Integer iBrandingColorbackgroundsmallbox) {
    this.iBrandingColorbackgroundsmallbox = iBrandingColorbackgroundsmallbox;
  }


  public BrandingListElement bBrandingIsactive(Boolean bBrandingIsactive) {
    this.bBrandingIsactive = bBrandingIsactive;
    return this;
  }

   /**
   * Whether the Branding is active or not
   * @return bBrandingIsactive
  **/
  @javax.annotation.Nonnull
  public Boolean getbBrandingIsactive() {
    return bBrandingIsactive;
  }

  public void setbBrandingIsactive(Boolean bBrandingIsactive) {
    this.bBrandingIsactive = bBrandingIsactive;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BrandingListElement brandingListElement = (BrandingListElement) o;
    return Objects.equals(this.pkiBrandingID, brandingListElement.pkiBrandingID) &&
        Objects.equals(this.sBrandingDescriptionX, brandingListElement.sBrandingDescriptionX) &&
        Objects.equals(this.iBrandingColortext, brandingListElement.iBrandingColortext) &&
        Objects.equals(this.iBrandingColortextlinkbox, brandingListElement.iBrandingColortextlinkbox) &&
        Objects.equals(this.iBrandingColortextbutton, brandingListElement.iBrandingColortextbutton) &&
        Objects.equals(this.iBrandingColorbackground, brandingListElement.iBrandingColorbackground) &&
        Objects.equals(this.iBrandingColorbackgroundbutton, brandingListElement.iBrandingColorbackgroundbutton) &&
        Objects.equals(this.iBrandingColorbackgroundsmallbox, brandingListElement.iBrandingColorbackgroundsmallbox) &&
        Objects.equals(this.bBrandingIsactive, brandingListElement.bBrandingIsactive);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiBrandingID, sBrandingDescriptionX, iBrandingColortext, iBrandingColortextlinkbox, iBrandingColortextbutton, iBrandingColorbackground, iBrandingColorbackgroundbutton, iBrandingColorbackgroundsmallbox, bBrandingIsactive);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BrandingListElement {\n");
    sb.append("    pkiBrandingID: ").append(toIndentedString(pkiBrandingID)).append("\n");
    sb.append("    sBrandingDescriptionX: ").append(toIndentedString(sBrandingDescriptionX)).append("\n");
    sb.append("    iBrandingColortext: ").append(toIndentedString(iBrandingColortext)).append("\n");
    sb.append("    iBrandingColortextlinkbox: ").append(toIndentedString(iBrandingColortextlinkbox)).append("\n");
    sb.append("    iBrandingColortextbutton: ").append(toIndentedString(iBrandingColortextbutton)).append("\n");
    sb.append("    iBrandingColorbackground: ").append(toIndentedString(iBrandingColorbackground)).append("\n");
    sb.append("    iBrandingColorbackgroundbutton: ").append(toIndentedString(iBrandingColorbackgroundbutton)).append("\n");
    sb.append("    iBrandingColorbackgroundsmallbox: ").append(toIndentedString(iBrandingColorbackgroundsmallbox)).append("\n");
    sb.append("    bBrandingIsactive: ").append(toIndentedString(bBrandingIsactive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiBrandingID");
    openapiFields.add("sBrandingDescriptionX");
    openapiFields.add("iBrandingColortext");
    openapiFields.add("iBrandingColortextlinkbox");
    openapiFields.add("iBrandingColortextbutton");
    openapiFields.add("iBrandingColorbackground");
    openapiFields.add("iBrandingColorbackgroundbutton");
    openapiFields.add("iBrandingColorbackgroundsmallbox");
    openapiFields.add("bBrandingIsactive");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiBrandingID");
    openapiRequiredFields.add("sBrandingDescriptionX");
    openapiRequiredFields.add("iBrandingColortext");
    openapiRequiredFields.add("iBrandingColortextlinkbox");
    openapiRequiredFields.add("iBrandingColortextbutton");
    openapiRequiredFields.add("iBrandingColorbackground");
    openapiRequiredFields.add("iBrandingColorbackgroundbutton");
    openapiRequiredFields.add("iBrandingColorbackgroundsmallbox");
    openapiRequiredFields.add("bBrandingIsactive");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BrandingListElement
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BrandingListElement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BrandingListElement is not found in the empty JSON string", BrandingListElement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BrandingListElement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BrandingListElement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BrandingListElement.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("sBrandingDescriptionX").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sBrandingDescriptionX` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sBrandingDescriptionX").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BrandingListElement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BrandingListElement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BrandingListElement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BrandingListElement.class));

       return (TypeAdapter<T>) new TypeAdapter<BrandingListElement>() {
           @Override
           public void write(JsonWriter out, BrandingListElement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BrandingListElement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BrandingListElement given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BrandingListElement
  * @throws IOException if the JSON string is invalid with respect to BrandingListElement
  */
  public static BrandingListElement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BrandingListElement.class);
  }

 /**
  * Convert an instance of BrandingListElement to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

