/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.CustomEzsignformfieldRequest;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Custom Ezsignformfieldgroup Object to fill an Ezsignform using submitForm
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-29T20:03:52.410924679Z[Etc/UTC]")
public class CustomEzsignformfieldgroupRequest {
  public static final String SERIALIZED_NAME_PKI_EZSIGNFORMFIELDGROUP_I_D = "pkiEzsignformfieldgroupID";
  @SerializedName(SERIALIZED_NAME_PKI_EZSIGNFORMFIELDGROUP_I_D)
  private Integer pkiEzsignformfieldgroupID;

  public static final String SERIALIZED_NAME_S_EZSIGNFORMFIELDGROUP_LABEL = "sEzsignformfieldgroupLabel";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNFORMFIELDGROUP_LABEL)
  private String sEzsignformfieldgroupLabel;

  public static final String SERIALIZED_NAME_A_OBJ_EZSIGNFORMFIELD = "a_objEzsignformfield";
  @SerializedName(SERIALIZED_NAME_A_OBJ_EZSIGNFORMFIELD)
  private List<CustomEzsignformfieldRequest> aObjEzsignformfield = new ArrayList<>();

  public CustomEzsignformfieldgroupRequest() {
  }

  public CustomEzsignformfieldgroupRequest pkiEzsignformfieldgroupID(Integer pkiEzsignformfieldgroupID) {
    
    this.pkiEzsignformfieldgroupID = pkiEzsignformfieldgroupID;
    return this;
  }

   /**
   * The unique ID of the Ezsignformfieldgroup
   * minimum: 0
   * @return pkiEzsignformfieldgroupID
  **/
  @javax.annotation.Nullable
  public Integer getPkiEzsignformfieldgroupID() {
    return pkiEzsignformfieldgroupID;
  }


  public void setPkiEzsignformfieldgroupID(Integer pkiEzsignformfieldgroupID) {
    this.pkiEzsignformfieldgroupID = pkiEzsignformfieldgroupID;
  }


  public CustomEzsignformfieldgroupRequest sEzsignformfieldgroupLabel(String sEzsignformfieldgroupLabel) {
    
    this.sEzsignformfieldgroupLabel = sEzsignformfieldgroupLabel;
    return this;
  }

   /**
   * The Label for the Ezsignformfieldgroup
   * @return sEzsignformfieldgroupLabel
  **/
  @javax.annotation.Nullable
  public String getsEzsignformfieldgroupLabel() {
    return sEzsignformfieldgroupLabel;
  }


  public void setsEzsignformfieldgroupLabel(String sEzsignformfieldgroupLabel) {
    this.sEzsignformfieldgroupLabel = sEzsignformfieldgroupLabel;
  }


  public CustomEzsignformfieldgroupRequest aObjEzsignformfield(List<CustomEzsignformfieldRequest> aObjEzsignformfield) {
    
    this.aObjEzsignformfield = aObjEzsignformfield;
    return this;
  }

  public CustomEzsignformfieldgroupRequest addAObjEzsignformfieldItem(CustomEzsignformfieldRequest aObjEzsignformfieldItem) {
    if (this.aObjEzsignformfield == null) {
      this.aObjEzsignformfield = new ArrayList<>();
    }
    this.aObjEzsignformfield.add(aObjEzsignformfieldItem);
    return this;
  }

   /**
   * An array containing all the values to fill the Ezsignform.
   * @return aObjEzsignformfield
  **/
  @javax.annotation.Nonnull
  public List<CustomEzsignformfieldRequest> getaObjEzsignformfield() {
    return aObjEzsignformfield;
  }


  public void setaObjEzsignformfield(List<CustomEzsignformfieldRequest> aObjEzsignformfield) {
    this.aObjEzsignformfield = aObjEzsignformfield;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomEzsignformfieldgroupRequest customEzsignformfieldgroupRequest = (CustomEzsignformfieldgroupRequest) o;
    return Objects.equals(this.pkiEzsignformfieldgroupID, customEzsignformfieldgroupRequest.pkiEzsignformfieldgroupID) &&
        Objects.equals(this.sEzsignformfieldgroupLabel, customEzsignformfieldgroupRequest.sEzsignformfieldgroupLabel) &&
        Objects.equals(this.aObjEzsignformfield, customEzsignformfieldgroupRequest.aObjEzsignformfield);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiEzsignformfieldgroupID, sEzsignformfieldgroupLabel, aObjEzsignformfield);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomEzsignformfieldgroupRequest {\n");
    sb.append("    pkiEzsignformfieldgroupID: ").append(toIndentedString(pkiEzsignformfieldgroupID)).append("\n");
    sb.append("    sEzsignformfieldgroupLabel: ").append(toIndentedString(sEzsignformfieldgroupLabel)).append("\n");
    sb.append("    aObjEzsignformfield: ").append(toIndentedString(aObjEzsignformfield)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiEzsignformfieldgroupID");
    openapiFields.add("sEzsignformfieldgroupLabel");
    openapiFields.add("a_objEzsignformfield");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("a_objEzsignformfield");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CustomEzsignformfieldgroupRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomEzsignformfieldgroupRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomEzsignformfieldgroupRequest is not found in the empty JSON string", CustomEzsignformfieldgroupRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomEzsignformfieldgroupRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomEzsignformfieldgroupRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomEzsignformfieldgroupRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("sEzsignformfieldgroupLabel") != null && !jsonObj.get("sEzsignformfieldgroupLabel").isJsonNull()) && !jsonObj.get("sEzsignformfieldgroupLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsignformfieldgroupLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsignformfieldgroupLabel").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("a_objEzsignformfield").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_objEzsignformfield` to be an array in the JSON string but got `%s`", jsonObj.get("a_objEzsignformfield").toString()));
      }

      JsonArray jsonArrayaObjEzsignformfield = jsonObj.getAsJsonArray("a_objEzsignformfield");
      // validate the required field `a_objEzsignformfield` (array)
      for (int i = 0; i < jsonArrayaObjEzsignformfield.size(); i++) {
        CustomEzsignformfieldRequest.validateJsonElement(jsonArrayaObjEzsignformfield.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomEzsignformfieldgroupRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomEzsignformfieldgroupRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomEzsignformfieldgroupRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomEzsignformfieldgroupRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomEzsignformfieldgroupRequest>() {
           @Override
           public void write(JsonWriter out, CustomEzsignformfieldgroupRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomEzsignformfieldgroupRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomEzsignformfieldgroupRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomEzsignformfieldgroupRequest
  * @throws IOException if the JSON string is invalid with respect to CustomEzsignformfieldgroupRequest
  */
  public static CustomEzsignformfieldgroupRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomEzsignformfieldgroupRequest.class);
  }

 /**
  * Convert an instance of CustomEzsignformfieldgroupRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

