/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.ezmax.api.model.CustomEzsignformfielderrortestResponse;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * CustomEzsignformfielderrorResponseAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-22T13:32:26.779643241Z[Etc/UTC]")
public class CustomEzsignformfielderrorResponseAllOf {
  public static final String SERIALIZED_NAME_S_EZSIGNFORMFIELD_LABEL = "sEzsignformfieldLabel";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNFORMFIELD_LABEL)
  private String sEzsignformfieldLabel;

  public static final String SERIALIZED_NAME_A_OBJ_EZSIGNFORMFIELDERRORTEST = "a_objEzsignformfielderrortest";
  @SerializedName(SERIALIZED_NAME_A_OBJ_EZSIGNFORMFIELDERRORTEST)
  private List<CustomEzsignformfielderrortestResponse> aObjEzsignformfielderrortest = new ArrayList<>();

  public CustomEzsignformfielderrorResponseAllOf() {
  }

  public CustomEzsignformfielderrorResponseAllOf sEzsignformfieldLabel(String sEzsignformfieldLabel) {
    
    this.sEzsignformfieldLabel = sEzsignformfieldLabel;
    return this;
  }

   /**
   * The Label for the Ezsignformfield
   * @return sEzsignformfieldLabel
  **/
  @javax.annotation.Nonnull
  public String getsEzsignformfieldLabel() {
    return sEzsignformfieldLabel;
  }


  public void setsEzsignformfieldLabel(String sEzsignformfieldLabel) {
    this.sEzsignformfieldLabel = sEzsignformfieldLabel;
  }


  public CustomEzsignformfielderrorResponseAllOf aObjEzsignformfielderrortest(List<CustomEzsignformfielderrortestResponse> aObjEzsignformfielderrortest) {
    
    this.aObjEzsignformfielderrortest = aObjEzsignformfielderrortest;
    return this;
  }

  public CustomEzsignformfielderrorResponseAllOf addAObjEzsignformfielderrortestItem(CustomEzsignformfielderrortestResponse aObjEzsignformfielderrortestItem) {
    if (this.aObjEzsignformfielderrortest == null) {
      this.aObjEzsignformfielderrortest = new ArrayList<>();
    }
    this.aObjEzsignformfielderrortest.add(aObjEzsignformfielderrortestItem);
    return this;
  }

   /**
   * 
   * @return aObjEzsignformfielderrortest
  **/
  @javax.annotation.Nonnull
  public List<CustomEzsignformfielderrortestResponse> getaObjEzsignformfielderrortest() {
    return aObjEzsignformfielderrortest;
  }


  public void setaObjEzsignformfielderrortest(List<CustomEzsignformfielderrortestResponse> aObjEzsignformfielderrortest) {
    this.aObjEzsignformfielderrortest = aObjEzsignformfielderrortest;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomEzsignformfielderrorResponseAllOf customEzsignformfielderrorResponseAllOf = (CustomEzsignformfielderrorResponseAllOf) o;
    return Objects.equals(this.sEzsignformfieldLabel, customEzsignformfielderrorResponseAllOf.sEzsignformfieldLabel) &&
        Objects.equals(this.aObjEzsignformfielderrortest, customEzsignformfielderrorResponseAllOf.aObjEzsignformfielderrortest);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sEzsignformfieldLabel, aObjEzsignformfielderrortest);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomEzsignformfielderrorResponseAllOf {\n");
    sb.append("    sEzsignformfieldLabel: ").append(toIndentedString(sEzsignformfieldLabel)).append("\n");
    sb.append("    aObjEzsignformfielderrortest: ").append(toIndentedString(aObjEzsignformfielderrortest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sEzsignformfieldLabel");
    openapiFields.add("a_objEzsignformfielderrortest");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sEzsignformfieldLabel");
    openapiRequiredFields.add("a_objEzsignformfielderrortest");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomEzsignformfielderrorResponseAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CustomEzsignformfielderrorResponseAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomEzsignformfielderrorResponseAllOf is not found in the empty JSON string", CustomEzsignformfielderrorResponseAllOf.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CustomEzsignformfielderrorResponseAllOf.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomEzsignformfielderrorResponseAllOf` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomEzsignformfielderrorResponseAllOf.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("sEzsignformfieldLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsignformfieldLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsignformfieldLabel").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("a_objEzsignformfielderrortest").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_objEzsignformfielderrortest` to be an array in the JSON string but got `%s`", jsonObj.get("a_objEzsignformfielderrortest").toString()));
      }

      JsonArray jsonArrayaObjEzsignformfielderrortest = jsonObj.getAsJsonArray("a_objEzsignformfielderrortest");
      // validate the required field `a_objEzsignformfielderrortest` (array)
      for (int i = 0; i < jsonArrayaObjEzsignformfielderrortest.size(); i++) {
        CustomEzsignformfielderrortestResponse.validateJsonObject(jsonArrayaObjEzsignformfielderrortest.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomEzsignformfielderrorResponseAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomEzsignformfielderrorResponseAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomEzsignformfielderrorResponseAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomEzsignformfielderrorResponseAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomEzsignformfielderrorResponseAllOf>() {
           @Override
           public void write(JsonWriter out, CustomEzsignformfielderrorResponseAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomEzsignformfielderrorResponseAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomEzsignformfielderrorResponseAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomEzsignformfielderrorResponseAllOf
  * @throws IOException if the JSON string is invalid with respect to CustomEzsignformfielderrorResponseAllOf
  */
  public static CustomEzsignformfielderrorResponseAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomEzsignformfielderrorResponseAllOf.class);
  }

 /**
  * Convert an instance of CustomEzsignformfielderrorResponseAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

