/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Userstaged List Element
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-20T19:31:15.190691479Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class UserstagedListElement {
  public static final String SERIALIZED_NAME_PKI_USERSTAGED_I_D = "pkiUserstagedID";
  @SerializedName(SERIALIZED_NAME_PKI_USERSTAGED_I_D)
  private Integer pkiUserstagedID;

  public static final String SERIALIZED_NAME_S_EMAIL_ADDRESS = "sEmailAddress";
  @SerializedName(SERIALIZED_NAME_S_EMAIL_ADDRESS)
  private String sEmailAddress;

  public static final String SERIALIZED_NAME_S_USERSTAGED_FIRSTNAME = "sUserstagedFirstname";
  @SerializedName(SERIALIZED_NAME_S_USERSTAGED_FIRSTNAME)
  private String sUserstagedFirstname;

  public static final String SERIALIZED_NAME_S_USERSTAGED_LASTNAME = "sUserstagedLastname";
  @SerializedName(SERIALIZED_NAME_S_USERSTAGED_LASTNAME)
  private String sUserstagedLastname;

  public static final String SERIALIZED_NAME_S_USERSTAGED_EXTERNALID = "sUserstagedExternalid";
  @SerializedName(SERIALIZED_NAME_S_USERSTAGED_EXTERNALID)
  private String sUserstagedExternalid;

  public UserstagedListElement() {
  }

  public UserstagedListElement pkiUserstagedID(Integer pkiUserstagedID) {
    this.pkiUserstagedID = pkiUserstagedID;
    return this;
  }

  /**
   * The unique ID of the Userstaged
   * minimum: 1
   * maximum: 65535
   * @return pkiUserstagedID
   */
  @javax.annotation.Nonnull
  public Integer getPkiUserstagedID() {
    return pkiUserstagedID;
  }

  public void setPkiUserstagedID(Integer pkiUserstagedID) {
    this.pkiUserstagedID = pkiUserstagedID;
  }


  public UserstagedListElement sEmailAddress(String sEmailAddress) {
    this.sEmailAddress = sEmailAddress;
    return this;
  }

  /**
   * The email address.
   * @return sEmailAddress
   */
  @javax.annotation.Nonnull
  public String getsEmailAddress() {
    return sEmailAddress;
  }

  public void setsEmailAddress(String sEmailAddress) {
    this.sEmailAddress = sEmailAddress;
  }


  public UserstagedListElement sUserstagedFirstname(String sUserstagedFirstname) {
    this.sUserstagedFirstname = sUserstagedFirstname;
    return this;
  }

  /**
   * The firstname of the Userstaged
   * @return sUserstagedFirstname
   */
  @javax.annotation.Nonnull
  public String getsUserstagedFirstname() {
    return sUserstagedFirstname;
  }

  public void setsUserstagedFirstname(String sUserstagedFirstname) {
    this.sUserstagedFirstname = sUserstagedFirstname;
  }


  public UserstagedListElement sUserstagedLastname(String sUserstagedLastname) {
    this.sUserstagedLastname = sUserstagedLastname;
    return this;
  }

  /**
   * The lastname of the Userstaged
   * @return sUserstagedLastname
   */
  @javax.annotation.Nonnull
  public String getsUserstagedLastname() {
    return sUserstagedLastname;
  }

  public void setsUserstagedLastname(String sUserstagedLastname) {
    this.sUserstagedLastname = sUserstagedLastname;
  }


  public UserstagedListElement sUserstagedExternalid(String sUserstagedExternalid) {
    this.sUserstagedExternalid = sUserstagedExternalid;
    return this;
  }

  /**
   * The externalid of the Userstaged
   * @return sUserstagedExternalid
   */
  @javax.annotation.Nonnull
  public String getsUserstagedExternalid() {
    return sUserstagedExternalid;
  }

  public void setsUserstagedExternalid(String sUserstagedExternalid) {
    this.sUserstagedExternalid = sUserstagedExternalid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserstagedListElement userstagedListElement = (UserstagedListElement) o;
    return Objects.equals(this.pkiUserstagedID, userstagedListElement.pkiUserstagedID) &&
        Objects.equals(this.sEmailAddress, userstagedListElement.sEmailAddress) &&
        Objects.equals(this.sUserstagedFirstname, userstagedListElement.sUserstagedFirstname) &&
        Objects.equals(this.sUserstagedLastname, userstagedListElement.sUserstagedLastname) &&
        Objects.equals(this.sUserstagedExternalid, userstagedListElement.sUserstagedExternalid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiUserstagedID, sEmailAddress, sUserstagedFirstname, sUserstagedLastname, sUserstagedExternalid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserstagedListElement {\n");
    sb.append("    pkiUserstagedID: ").append(toIndentedString(pkiUserstagedID)).append("\n");
    sb.append("    sEmailAddress: ").append(toIndentedString(sEmailAddress)).append("\n");
    sb.append("    sUserstagedFirstname: ").append(toIndentedString(sUserstagedFirstname)).append("\n");
    sb.append("    sUserstagedLastname: ").append(toIndentedString(sUserstagedLastname)).append("\n");
    sb.append("    sUserstagedExternalid: ").append(toIndentedString(sUserstagedExternalid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiUserstagedID");
    openapiFields.add("sEmailAddress");
    openapiFields.add("sUserstagedFirstname");
    openapiFields.add("sUserstagedLastname");
    openapiFields.add("sUserstagedExternalid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiUserstagedID");
    openapiRequiredFields.add("sEmailAddress");
    openapiRequiredFields.add("sUserstagedFirstname");
    openapiRequiredFields.add("sUserstagedLastname");
    openapiRequiredFields.add("sUserstagedExternalid");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserstagedListElement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserstagedListElement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserstagedListElement is not found in the empty JSON string", UserstagedListElement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserstagedListElement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserstagedListElement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserstagedListElement.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("sEmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEmailAddress").toString()));
      }
      if (!jsonObj.get("sUserstagedFirstname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sUserstagedFirstname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sUserstagedFirstname").toString()));
      }
      if (!jsonObj.get("sUserstagedLastname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sUserstagedLastname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sUserstagedLastname").toString()));
      }
      if (!jsonObj.get("sUserstagedExternalid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sUserstagedExternalid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sUserstagedExternalid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserstagedListElement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserstagedListElement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserstagedListElement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserstagedListElement.class));

       return (TypeAdapter<T>) new TypeAdapter<UserstagedListElement>() {
           @Override
           public void write(JsonWriter out, UserstagedListElement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserstagedListElement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserstagedListElement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserstagedListElement
   * @throws IOException if the JSON string is invalid with respect to UserstagedListElement
   */
  public static UserstagedListElement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserstagedListElement.class);
  }

  /**
   * Convert an instance of UserstagedListElement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

