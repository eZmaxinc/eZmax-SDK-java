/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * Object representing a file used in a request or response context 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-29T20:03:52.410924679Z[Etc/UTC]")
public class CommonFile {
  public static final String SERIALIZED_NAME_S_FILE_NAME = "sFileName";
  @SerializedName(SERIALIZED_NAME_S_FILE_NAME)
  private String sFileName;

  public static final String SERIALIZED_NAME_S_FILE_URL = "sFileUrl";
  @SerializedName(SERIALIZED_NAME_S_FILE_URL)
  private String sFileUrl;

  public static final String SERIALIZED_NAME_S_FILE_BASE64 = "sFileBase64";
  @SerializedName(SERIALIZED_NAME_S_FILE_BASE64)
  private byte[] sFileBase64;

  /**
   * The source of the File
   */
  @JsonAdapter(EFileSourceEnum.Adapter.class)
  public enum EFileSourceEnum {
    BASE64("Base64"),
    
    URL("Url");

    private String value;

    EFileSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EFileSourceEnum fromValue(String value) {
      for (EFileSourceEnum b : EFileSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EFileSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EFileSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EFileSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EFileSourceEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_E_FILE_SOURCE = "eFileSource";
  @SerializedName(SERIALIZED_NAME_E_FILE_SOURCE)
  private EFileSourceEnum eFileSource;

  public CommonFile() {
  }

  public CommonFile sFileName(String sFileName) {
    
    this.sFileName = sFileName;
    return this;
  }

   /**
   * The name of the file
   * @return sFileName
  **/
  @javax.annotation.Nonnull
  public String getsFileName() {
    return sFileName;
  }


  public void setsFileName(String sFileName) {
    this.sFileName = sFileName;
  }


  public CommonFile sFileUrl(String sFileUrl) {
    
    this.sFileUrl = sFileUrl;
    return this;
  }

   /**
   * The URL used to reach the File
   * @return sFileUrl
  **/
  @javax.annotation.Nullable
  public String getsFileUrl() {
    return sFileUrl;
  }


  public void setsFileUrl(String sFileUrl) {
    this.sFileUrl = sFileUrl;
  }


  public CommonFile sFileBase64(byte[] sFileBase64) {
    
    this.sFileBase64 = sFileBase64;
    return this;
  }

   /**
   * The Base64 encoded binary content of the File
   * @return sFileBase64
  **/
  @javax.annotation.Nullable
  public byte[] getsFileBase64() {
    return sFileBase64;
  }


  public void setsFileBase64(byte[] sFileBase64) {
    this.sFileBase64 = sFileBase64;
  }


  public CommonFile eFileSource(EFileSourceEnum eFileSource) {
    
    this.eFileSource = eFileSource;
    return this;
  }

   /**
   * The source of the File
   * @return eFileSource
  **/
  @javax.annotation.Nonnull
  public EFileSourceEnum geteFileSource() {
    return eFileSource;
  }


  public void seteFileSource(EFileSourceEnum eFileSource) {
    this.eFileSource = eFileSource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommonFile commonFile = (CommonFile) o;
    return Objects.equals(this.sFileName, commonFile.sFileName) &&
        Objects.equals(this.sFileUrl, commonFile.sFileUrl) &&
        Arrays.equals(this.sFileBase64, commonFile.sFileBase64) &&
        Objects.equals(this.eFileSource, commonFile.eFileSource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sFileName, sFileUrl, Arrays.hashCode(sFileBase64), eFileSource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommonFile {\n");
    sb.append("    sFileName: ").append(toIndentedString(sFileName)).append("\n");
    sb.append("    sFileUrl: ").append(toIndentedString(sFileUrl)).append("\n");
    sb.append("    sFileBase64: ").append(toIndentedString(sFileBase64)).append("\n");
    sb.append("    eFileSource: ").append(toIndentedString(eFileSource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sFileName");
    openapiFields.add("sFileUrl");
    openapiFields.add("sFileBase64");
    openapiFields.add("eFileSource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sFileName");
    openapiRequiredFields.add("eFileSource");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CommonFile
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CommonFile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommonFile is not found in the empty JSON string", CommonFile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CommonFile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommonFile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CommonFile.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("sFileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sFileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sFileName").toString()));
      }
      if ((jsonObj.get("sFileUrl") != null && !jsonObj.get("sFileUrl").isJsonNull()) && !jsonObj.get("sFileUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sFileUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sFileUrl").toString()));
      }
      if (!jsonObj.get("eFileSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eFileSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eFileSource").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommonFile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommonFile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommonFile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommonFile.class));

       return (TypeAdapter<T>) new TypeAdapter<CommonFile>() {
           @Override
           public void write(JsonWriter out, CommonFile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommonFile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CommonFile given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CommonFile
  * @throws IOException if the JSON string is invalid with respect to CommonFile
  */
  public static CommonFile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommonFile.class);
  }

 /**
  * Convert an instance of CommonFile to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

