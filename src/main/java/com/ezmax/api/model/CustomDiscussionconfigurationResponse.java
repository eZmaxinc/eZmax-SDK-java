/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Custom Discussionconfiguration Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-15T19:58:52.873320463Z[Etc/UTC]", comments = "Generator version: 7.10.0")
public class CustomDiscussionconfigurationResponse {
  public static final String SERIALIZED_NAME_B_DISCUSSIONCONFIGURATION_COMPLETEHISTORYWHENADDED = "bDiscussionconfigurationCompletehistorywhenadded";
  @SerializedName(SERIALIZED_NAME_B_DISCUSSIONCONFIGURATION_COMPLETEHISTORYWHENADDED)
  @javax.annotation.Nonnull
  private Boolean bDiscussionconfigurationCompletehistorywhenadded;

  public static final String SERIALIZED_NAME_B_DISCUSSIONCONFIGURATION_CREATEALLOWED = "bDiscussionconfigurationCreateallowed";
  @SerializedName(SERIALIZED_NAME_B_DISCUSSIONCONFIGURATION_CREATEALLOWED)
  @javax.annotation.Nonnull
  private Boolean bDiscussionconfigurationCreateallowed;

  public static final String SERIALIZED_NAME_B_DISCUSSIONCONFIGURATION_DELETEALLOWED = "bDiscussionconfigurationDeleteallowed";
  @SerializedName(SERIALIZED_NAME_B_DISCUSSIONCONFIGURATION_DELETEALLOWED)
  @javax.annotation.Nonnull
  private Boolean bDiscussionconfigurationDeleteallowed;

  public static final String SERIALIZED_NAME_B_DISCUSSIONCONFIGURATION_DELETEDISCUSSIONMESSAGEALLOWED = "bDiscussionconfigurationDeletediscussionmessageallowed";
  @SerializedName(SERIALIZED_NAME_B_DISCUSSIONCONFIGURATION_DELETEDISCUSSIONMESSAGEALLOWED)
  @javax.annotation.Nonnull
  private Boolean bDiscussionconfigurationDeletediscussionmessageallowed;

  public static final String SERIALIZED_NAME_B_DISCUSSIONCONFIGURATION_EDITDISCUSSIONMESSAGEALLOWED = "bDiscussionconfigurationEditdiscussionmessageallowed";
  @SerializedName(SERIALIZED_NAME_B_DISCUSSIONCONFIGURATION_EDITDISCUSSIONMESSAGEALLOWED)
  @javax.annotation.Nonnull
  private Boolean bDiscussionconfigurationEditdiscussionmessageallowed;

  public CustomDiscussionconfigurationResponse() {
  }

  public CustomDiscussionconfigurationResponse bDiscussionconfigurationCompletehistorywhenadded(@javax.annotation.Nonnull Boolean bDiscussionconfigurationCompletehistorywhenadded) {
    this.bDiscussionconfigurationCompletehistorywhenadded = bDiscussionconfigurationCompletehistorywhenadded;
    return this;
  }

  /**
   * If the added Discussionmembership will have access to the entire history or not
   * @return bDiscussionconfigurationCompletehistorywhenadded
   */
  @javax.annotation.Nonnull
  public Boolean getbDiscussionconfigurationCompletehistorywhenadded() {
    return bDiscussionconfigurationCompletehistorywhenadded;
  }

  public void setbDiscussionconfigurationCompletehistorywhenadded(@javax.annotation.Nonnull Boolean bDiscussionconfigurationCompletehistorywhenadded) {
    this.bDiscussionconfigurationCompletehistorywhenadded = bDiscussionconfigurationCompletehistorywhenadded;
  }


  public CustomDiscussionconfigurationResponse bDiscussionconfigurationCreateallowed(@javax.annotation.Nonnull Boolean bDiscussionconfigurationCreateallowed) {
    this.bDiscussionconfigurationCreateallowed = bDiscussionconfigurationCreateallowed;
    return this;
  }

  /**
   * If the the creation of the Discussion is allowed or not
   * @return bDiscussionconfigurationCreateallowed
   */
  @javax.annotation.Nonnull
  public Boolean getbDiscussionconfigurationCreateallowed() {
    return bDiscussionconfigurationCreateallowed;
  }

  public void setbDiscussionconfigurationCreateallowed(@javax.annotation.Nonnull Boolean bDiscussionconfigurationCreateallowed) {
    this.bDiscussionconfigurationCreateallowed = bDiscussionconfigurationCreateallowed;
  }


  public CustomDiscussionconfigurationResponse bDiscussionconfigurationDeleteallowed(@javax.annotation.Nonnull Boolean bDiscussionconfigurationDeleteallowed) {
    this.bDiscussionconfigurationDeleteallowed = bDiscussionconfigurationDeleteallowed;
    return this;
  }

  /**
   * If the the destruction of the Discussion is allowed or not
   * @return bDiscussionconfigurationDeleteallowed
   */
  @javax.annotation.Nonnull
  public Boolean getbDiscussionconfigurationDeleteallowed() {
    return bDiscussionconfigurationDeleteallowed;
  }

  public void setbDiscussionconfigurationDeleteallowed(@javax.annotation.Nonnull Boolean bDiscussionconfigurationDeleteallowed) {
    this.bDiscussionconfigurationDeleteallowed = bDiscussionconfigurationDeleteallowed;
  }


  public CustomDiscussionconfigurationResponse bDiscussionconfigurationDeletediscussionmessageallowed(@javax.annotation.Nonnull Boolean bDiscussionconfigurationDeletediscussionmessageallowed) {
    this.bDiscussionconfigurationDeletediscussionmessageallowed = bDiscussionconfigurationDeletediscussionmessageallowed;
    return this;
  }

  /**
   * If the the destruction of the Discussionmessage is allowed or not
   * @return bDiscussionconfigurationDeletediscussionmessageallowed
   */
  @javax.annotation.Nonnull
  public Boolean getbDiscussionconfigurationDeletediscussionmessageallowed() {
    return bDiscussionconfigurationDeletediscussionmessageallowed;
  }

  public void setbDiscussionconfigurationDeletediscussionmessageallowed(@javax.annotation.Nonnull Boolean bDiscussionconfigurationDeletediscussionmessageallowed) {
    this.bDiscussionconfigurationDeletediscussionmessageallowed = bDiscussionconfigurationDeletediscussionmessageallowed;
  }


  public CustomDiscussionconfigurationResponse bDiscussionconfigurationEditdiscussionmessageallowed(@javax.annotation.Nonnull Boolean bDiscussionconfigurationEditdiscussionmessageallowed) {
    this.bDiscussionconfigurationEditdiscussionmessageallowed = bDiscussionconfigurationEditdiscussionmessageallowed;
    return this;
  }

  /**
   * If the the creation of the Discussionmessage is allowed or not
   * @return bDiscussionconfigurationEditdiscussionmessageallowed
   */
  @javax.annotation.Nonnull
  public Boolean getbDiscussionconfigurationEditdiscussionmessageallowed() {
    return bDiscussionconfigurationEditdiscussionmessageallowed;
  }

  public void setbDiscussionconfigurationEditdiscussionmessageallowed(@javax.annotation.Nonnull Boolean bDiscussionconfigurationEditdiscussionmessageallowed) {
    this.bDiscussionconfigurationEditdiscussionmessageallowed = bDiscussionconfigurationEditdiscussionmessageallowed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomDiscussionconfigurationResponse customDiscussionconfigurationResponse = (CustomDiscussionconfigurationResponse) o;
    return Objects.equals(this.bDiscussionconfigurationCompletehistorywhenadded, customDiscussionconfigurationResponse.bDiscussionconfigurationCompletehistorywhenadded) &&
        Objects.equals(this.bDiscussionconfigurationCreateallowed, customDiscussionconfigurationResponse.bDiscussionconfigurationCreateallowed) &&
        Objects.equals(this.bDiscussionconfigurationDeleteallowed, customDiscussionconfigurationResponse.bDiscussionconfigurationDeleteallowed) &&
        Objects.equals(this.bDiscussionconfigurationDeletediscussionmessageallowed, customDiscussionconfigurationResponse.bDiscussionconfigurationDeletediscussionmessageallowed) &&
        Objects.equals(this.bDiscussionconfigurationEditdiscussionmessageallowed, customDiscussionconfigurationResponse.bDiscussionconfigurationEditdiscussionmessageallowed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bDiscussionconfigurationCompletehistorywhenadded, bDiscussionconfigurationCreateallowed, bDiscussionconfigurationDeleteallowed, bDiscussionconfigurationDeletediscussionmessageallowed, bDiscussionconfigurationEditdiscussionmessageallowed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomDiscussionconfigurationResponse {\n");
    sb.append("    bDiscussionconfigurationCompletehistorywhenadded: ").append(toIndentedString(bDiscussionconfigurationCompletehistorywhenadded)).append("\n");
    sb.append("    bDiscussionconfigurationCreateallowed: ").append(toIndentedString(bDiscussionconfigurationCreateallowed)).append("\n");
    sb.append("    bDiscussionconfigurationDeleteallowed: ").append(toIndentedString(bDiscussionconfigurationDeleteallowed)).append("\n");
    sb.append("    bDiscussionconfigurationDeletediscussionmessageallowed: ").append(toIndentedString(bDiscussionconfigurationDeletediscussionmessageallowed)).append("\n");
    sb.append("    bDiscussionconfigurationEditdiscussionmessageallowed: ").append(toIndentedString(bDiscussionconfigurationEditdiscussionmessageallowed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bDiscussionconfigurationCompletehistorywhenadded");
    openapiFields.add("bDiscussionconfigurationCreateallowed");
    openapiFields.add("bDiscussionconfigurationDeleteallowed");
    openapiFields.add("bDiscussionconfigurationDeletediscussionmessageallowed");
    openapiFields.add("bDiscussionconfigurationEditdiscussionmessageallowed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("bDiscussionconfigurationCompletehistorywhenadded");
    openapiRequiredFields.add("bDiscussionconfigurationCreateallowed");
    openapiRequiredFields.add("bDiscussionconfigurationDeleteallowed");
    openapiRequiredFields.add("bDiscussionconfigurationDeletediscussionmessageallowed");
    openapiRequiredFields.add("bDiscussionconfigurationEditdiscussionmessageallowed");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomDiscussionconfigurationResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomDiscussionconfigurationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomDiscussionconfigurationResponse is not found in the empty JSON string", CustomDiscussionconfigurationResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomDiscussionconfigurationResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomDiscussionconfigurationResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomDiscussionconfigurationResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomDiscussionconfigurationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomDiscussionconfigurationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomDiscussionconfigurationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomDiscussionconfigurationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomDiscussionconfigurationResponse>() {
           @Override
           public void write(JsonWriter out, CustomDiscussionconfigurationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomDiscussionconfigurationResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomDiscussionconfigurationResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomDiscussionconfigurationResponse
   * @throws IOException if the JSON string is invalid with respect to CustomDiscussionconfigurationResponse
   */
  public static CustomDiscussionconfigurationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomDiscussionconfigurationResponse.class);
  }

  /**
   * Convert an instance of CustomDiscussionconfigurationResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

