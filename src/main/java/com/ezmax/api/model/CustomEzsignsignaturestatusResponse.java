/*
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Ezsignsignaturestatus Object and children to create a complete structure
 */
@ApiModel(description = "A Ezsignsignaturestatus Object and children to create a complete structure")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-02-25T03:49:17.012787Z[Etc/UTC]")
public class CustomEzsignsignaturestatusResponse {
  /**
   * Type of step
   */
  @JsonAdapter(EEzsignsignaturestatusSteptypeEnum.Adapter.class)
  public enum EEzsignsignaturestatusSteptypeEnum {
    FORM("Form"),
    
    SIGNATURE("Signature");

    private String value;

    EEzsignsignaturestatusSteptypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EEzsignsignaturestatusSteptypeEnum fromValue(String value) {
      for (EEzsignsignaturestatusSteptypeEnum b : EEzsignsignaturestatusSteptypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EEzsignsignaturestatusSteptypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EEzsignsignaturestatusSteptypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EEzsignsignaturestatusSteptypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EEzsignsignaturestatusSteptypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_E_EZSIGNSIGNATURESTATUS_STEPTYPE = "eEzsignsignaturestatusSteptype";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNSIGNATURESTATUS_STEPTYPE)
  private EEzsignsignaturestatusSteptypeEnum eEzsignsignaturestatusSteptype;

  public static final String SERIALIZED_NAME_I_EZSIGNSIGNATURESTATUS_STEP = "iEzsignsignaturestatusStep";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNSIGNATURESTATUS_STEP)
  private Integer iEzsignsignaturestatusStep;

  public static final String SERIALIZED_NAME_I_EZSIGNSIGNATURESTATUS_TOTAL = "iEzsignsignaturestatusTotal";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNSIGNATURESTATUS_TOTAL)
  private Integer iEzsignsignaturestatusTotal;

  public static final String SERIALIZED_NAME_I_EZSIGNSIGNATURESTATUS_SIGNED = "iEzsignsignaturestatusSigned";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNSIGNATURESTATUS_SIGNED)
  private Integer iEzsignsignaturestatusSigned;

  public CustomEzsignsignaturestatusResponse() { 
  }

  public CustomEzsignsignaturestatusResponse eEzsignsignaturestatusSteptype(EEzsignsignaturestatusSteptypeEnum eEzsignsignaturestatusSteptype) {
    
    this.eEzsignsignaturestatusSteptype = eEzsignsignaturestatusSteptype;
    return this;
  }

   /**
   * Type of step
   * @return eEzsignsignaturestatusSteptype
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Type of step")

  public EEzsignsignaturestatusSteptypeEnum geteEzsignsignaturestatusSteptype() {
    return eEzsignsignaturestatusSteptype;
  }


  public void seteEzsignsignaturestatusSteptype(EEzsignsignaturestatusSteptypeEnum eEzsignsignaturestatusSteptype) {
    this.eEzsignsignaturestatusSteptype = eEzsignsignaturestatusSteptype;
  }


  public CustomEzsignsignaturestatusResponse iEzsignsignaturestatusStep(Integer iEzsignsignaturestatusStep) {
    
    this.iEzsignsignaturestatusStep = iEzsignsignaturestatusStep;
    return this;
  }

   /**
   * The step at which the Ezsignsigner will be invited to sign or fill the form fields
   * @return iEzsignsignaturestatusStep
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1", required = true, value = "The step at which the Ezsignsigner will be invited to sign or fill the form fields")

  public Integer getiEzsignsignaturestatusStep() {
    return iEzsignsignaturestatusStep;
  }


  public void setiEzsignsignaturestatusStep(Integer iEzsignsignaturestatusStep) {
    this.iEzsignsignaturestatusStep = iEzsignsignaturestatusStep;
  }


  public CustomEzsignsignaturestatusResponse iEzsignsignaturestatusTotal(Integer iEzsignsignaturestatusTotal) {
    
    this.iEzsignsignaturestatusTotal = iEzsignsignaturestatusTotal;
    return this;
  }

   /**
   * The total number of signature or form fields the Ezsignsigner must process at the current step
   * @return iEzsignsignaturestatusTotal
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2", required = true, value = "The total number of signature or form fields the Ezsignsigner must process at the current step")

  public Integer getiEzsignsignaturestatusTotal() {
    return iEzsignsignaturestatusTotal;
  }


  public void setiEzsignsignaturestatusTotal(Integer iEzsignsignaturestatusTotal) {
    this.iEzsignsignaturestatusTotal = iEzsignsignaturestatusTotal;
  }


  public CustomEzsignsignaturestatusResponse iEzsignsignaturestatusSigned(Integer iEzsignsignaturestatusSigned) {
    
    this.iEzsignsignaturestatusSigned = iEzsignsignaturestatusSigned;
    return this;
  }

   /**
   * The number of signature or form fields the Ezsignsigner has already processed at the current step
   * @return iEzsignsignaturestatusSigned
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1", required = true, value = "The number of signature or form fields the Ezsignsigner has already processed at the current step")

  public Integer getiEzsignsignaturestatusSigned() {
    return iEzsignsignaturestatusSigned;
  }


  public void setiEzsignsignaturestatusSigned(Integer iEzsignsignaturestatusSigned) {
    this.iEzsignsignaturestatusSigned = iEzsignsignaturestatusSigned;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomEzsignsignaturestatusResponse customEzsignsignaturestatusResponse = (CustomEzsignsignaturestatusResponse) o;
    return Objects.equals(this.eEzsignsignaturestatusSteptype, customEzsignsignaturestatusResponse.eEzsignsignaturestatusSteptype) &&
        Objects.equals(this.iEzsignsignaturestatusStep, customEzsignsignaturestatusResponse.iEzsignsignaturestatusStep) &&
        Objects.equals(this.iEzsignsignaturestatusTotal, customEzsignsignaturestatusResponse.iEzsignsignaturestatusTotal) &&
        Objects.equals(this.iEzsignsignaturestatusSigned, customEzsignsignaturestatusResponse.iEzsignsignaturestatusSigned);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eEzsignsignaturestatusSteptype, iEzsignsignaturestatusStep, iEzsignsignaturestatusTotal, iEzsignsignaturestatusSigned);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomEzsignsignaturestatusResponse {\n");
    sb.append("    eEzsignsignaturestatusSteptype: ").append(toIndentedString(eEzsignsignaturestatusSteptype)).append("\n");
    sb.append("    iEzsignsignaturestatusStep: ").append(toIndentedString(iEzsignsignaturestatusStep)).append("\n");
    sb.append("    iEzsignsignaturestatusTotal: ").append(toIndentedString(iEzsignsignaturestatusTotal)).append("\n");
    sb.append("    iEzsignsignaturestatusSigned: ").append(toIndentedString(iEzsignsignaturestatusSigned)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eEzsignsignaturestatusSteptype");
    openapiFields.add("iEzsignsignaturestatusStep");
    openapiFields.add("iEzsignsignaturestatusTotal");
    openapiFields.add("iEzsignsignaturestatusSigned");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("eEzsignsignaturestatusSteptype");
    openapiRequiredFields.add("iEzsignsignaturestatusStep");
    openapiRequiredFields.add("iEzsignsignaturestatusTotal");
    openapiRequiredFields.add("iEzsignsignaturestatusSigned");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomEzsignsignaturestatusResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CustomEzsignsignaturestatusResponse.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has reuqired fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomEzsignsignaturestatusResponse is not found in the empty JSON string", CustomEzsignsignaturestatusResponse.openapiRequiredFields.toString()));
        }
      }
      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CustomEzsignsignaturestatusResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomEzsignsignaturestatusResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomEzsignsignaturestatusResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomEzsignsignaturestatusResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomEzsignsignaturestatusResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomEzsignsignaturestatusResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomEzsignsignaturestatusResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomEzsignsignaturestatusResponse>() {
           @Override
           public void write(JsonWriter out, CustomEzsignsignaturestatusResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomEzsignsignaturestatusResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomEzsignsignaturestatusResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomEzsignsignaturestatusResponse
  * @throws IOException if the JSON string is invalid with respect to CustomEzsignsignaturestatusResponse
  */
  public static CustomEzsignsignaturestatusResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomEzsignsignaturestatusResponse.class);
  }

 /**
  * Convert an instance of CustomEzsignsignaturestatusResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

