/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * Request for POST /1/object/ezsignfolder/{pkiEzsignfolderID}/batchDownload
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-05T17:23:45.233900745Z[Etc/UTC]")
public class EzsignfolderBatchDownloadV1Request {
  public static final String SERIALIZED_NAME_A_PKI_EZSIGNDOCUMENT_I_D = "a_pkiEzsigndocumentID";
  @SerializedName(SERIALIZED_NAME_A_PKI_EZSIGNDOCUMENT_I_D)
  private List<Integer> aPkiEzsigndocumentID = new ArrayList<>();

  /**
   * Gets or Sets aEDocumentType
   */
  @JsonAdapter(AEDocumentTypeEnum.Adapter.class)
  public enum AEDocumentTypeEnum {
    SIGNED("Signed"),
    
    PROOF("Proof"),
    
    PROOFDOCUMENT("Proofdocument");

    private String value;

    AEDocumentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AEDocumentTypeEnum fromValue(String value) {
      for (AEDocumentTypeEnum b : AEDocumentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AEDocumentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AEDocumentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AEDocumentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AEDocumentTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_A_E_DOCUMENT_TYPE = "a_eDocumentType";
  @SerializedName(SERIALIZED_NAME_A_E_DOCUMENT_TYPE)
  private List<AEDocumentTypeEnum> aEDocumentType = new ArrayList<>();

  public EzsignfolderBatchDownloadV1Request() {
  }

  public EzsignfolderBatchDownloadV1Request aPkiEzsigndocumentID(List<Integer> aPkiEzsigndocumentID) {
    
    this.aPkiEzsigndocumentID = aPkiEzsigndocumentID;
    return this;
  }

  public EzsignfolderBatchDownloadV1Request addAPkiEzsigndocumentIDItem(Integer aPkiEzsigndocumentIDItem) {
    if (this.aPkiEzsigndocumentID == null) {
      this.aPkiEzsigndocumentID = new ArrayList<>();
    }
    this.aPkiEzsigndocumentID.add(aPkiEzsigndocumentIDItem);
    return this;
  }

   /**
   * Get aPkiEzsigndocumentID
   * @return aPkiEzsigndocumentID
  **/
  @javax.annotation.Nonnull
  public List<Integer> getaPkiEzsigndocumentID() {
    return aPkiEzsigndocumentID;
  }


  public void setaPkiEzsigndocumentID(List<Integer> aPkiEzsigndocumentID) {
    this.aPkiEzsigndocumentID = aPkiEzsigndocumentID;
  }


  public EzsignfolderBatchDownloadV1Request aEDocumentType(List<AEDocumentTypeEnum> aEDocumentType) {
    
    this.aEDocumentType = aEDocumentType;
    return this;
  }

  public EzsignfolderBatchDownloadV1Request addAEDocumentTypeItem(AEDocumentTypeEnum aEDocumentTypeItem) {
    if (this.aEDocumentType == null) {
      this.aEDocumentType = new ArrayList<>();
    }
    this.aEDocumentType.add(aEDocumentTypeItem);
    return this;
  }

   /**
   * The type of document to retrieve.  1. **Signed** Is the final document once all signatures were applied. 2. **Proofdocument** Is the evidence report. 3. **Proof** Is the complete evidence archive including all of the above and more.
   * @return aEDocumentType
  **/
  @javax.annotation.Nonnull
  public List<AEDocumentTypeEnum> getaEDocumentType() {
    return aEDocumentType;
  }


  public void setaEDocumentType(List<AEDocumentTypeEnum> aEDocumentType) {
    this.aEDocumentType = aEDocumentType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsignfolderBatchDownloadV1Request ezsignfolderBatchDownloadV1Request = (EzsignfolderBatchDownloadV1Request) o;
    return Objects.equals(this.aPkiEzsigndocumentID, ezsignfolderBatchDownloadV1Request.aPkiEzsigndocumentID) &&
        Objects.equals(this.aEDocumentType, ezsignfolderBatchDownloadV1Request.aEDocumentType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aPkiEzsigndocumentID, aEDocumentType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsignfolderBatchDownloadV1Request {\n");
    sb.append("    aPkiEzsigndocumentID: ").append(toIndentedString(aPkiEzsigndocumentID)).append("\n");
    sb.append("    aEDocumentType: ").append(toIndentedString(aEDocumentType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("a_pkiEzsigndocumentID");
    openapiFields.add("a_eDocumentType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("a_pkiEzsigndocumentID");
    openapiRequiredFields.add("a_eDocumentType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EzsignfolderBatchDownloadV1Request
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EzsignfolderBatchDownloadV1Request.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsignfolderBatchDownloadV1Request is not found in the empty JSON string", EzsignfolderBatchDownloadV1Request.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EzsignfolderBatchDownloadV1Request.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsignfolderBatchDownloadV1Request` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EzsignfolderBatchDownloadV1Request.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("a_pkiEzsigndocumentID") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("a_pkiEzsigndocumentID").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_pkiEzsigndocumentID` to be an array in the JSON string but got `%s`", jsonObj.get("a_pkiEzsigndocumentID").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("a_eDocumentType") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("a_eDocumentType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_eDocumentType` to be an array in the JSON string but got `%s`", jsonObj.get("a_eDocumentType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsignfolderBatchDownloadV1Request.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsignfolderBatchDownloadV1Request' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsignfolderBatchDownloadV1Request> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsignfolderBatchDownloadV1Request.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsignfolderBatchDownloadV1Request>() {
           @Override
           public void write(JsonWriter out, EzsignfolderBatchDownloadV1Request value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsignfolderBatchDownloadV1Request read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EzsignfolderBatchDownloadV1Request given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EzsignfolderBatchDownloadV1Request
  * @throws IOException if the JSON string is invalid with respect to EzsignfolderBatchDownloadV1Request
  */
  public static EzsignfolderBatchDownloadV1Request fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsignfolderBatchDownloadV1Request.class);
  }

 /**
  * Convert an instance of EzsignfolderBatchDownloadV1Request to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

