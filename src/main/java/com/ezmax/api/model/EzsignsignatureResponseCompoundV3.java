/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.CustomContactNameResponse;
import com.ezmax.api.model.CustomCreditcardtransactionResponse;
import com.ezmax.api.model.EnumTextvalidation;
import com.ezmax.api.model.EzsignelementdependencyResponse;
import com.ezmax.api.model.EzsignsignatureResponse;
import com.ezmax.api.model.EzsignsignaturecustomdateResponseV2;
import com.ezmax.api.model.FieldEEzsignsignatureAttachmentnamesource;
import com.ezmax.api.model.FieldEEzsignsignatureConsultationtrigger;
import com.ezmax.api.model.FieldEEzsignsignatureDependencyrequirement;
import com.ezmax.api.model.FieldEEzsignsignatureFont;
import com.ezmax.api.model.FieldEEzsignsignatureTooltipposition;
import com.ezmax.api.model.FieldEEzsignsignatureType;
import com.ezmax.api.model.SignatureResponseCompound;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * An Ezsignsignature Object and children to create a complete structure
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-17T15:03:32.455495633Z[Etc/UTC]", comments = "Generator version: 7.10.0")
public class EzsignsignatureResponseCompoundV3 extends EzsignsignatureResponse {
  public static final String SERIALIZED_NAME_B_EZSIGNSIGNATURE_CUSTOMDATE = "bEzsignsignatureCustomdate";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNSIGNATURE_CUSTOMDATE)
  @javax.annotation.Nullable
  private Boolean bEzsignsignatureCustomdate;

  public static final String SERIALIZED_NAME_A_OBJ_EZSIGNSIGNATURECUSTOMDATE = "a_objEzsignsignaturecustomdate";
  @SerializedName(SERIALIZED_NAME_A_OBJ_EZSIGNSIGNATURECUSTOMDATE)
  @javax.annotation.Nullable
  private List<EzsignsignaturecustomdateResponseCompoundV2> aObjEzsignsignaturecustomdate = new ArrayList<>();

  public static final String SERIALIZED_NAME_OBJ_CREDITCARDTRANSACTION = "objCreditcardtransaction";
  @SerializedName(SERIALIZED_NAME_OBJ_CREDITCARDTRANSACTION)
  @javax.annotation.Nullable
  private CustomCreditcardtransactionResponse objCreditcardtransaction;

  public static final String SERIALIZED_NAME_A_OBJ_EZSIGNELEMENTDEPENDENCY = "a_objEzsignelementdependency";
  @SerializedName(SERIALIZED_NAME_A_OBJ_EZSIGNELEMENTDEPENDENCY)
  @javax.annotation.Nullable
  private List<EzsignelementdependencyResponseCompound> aObjEzsignelementdependency = new ArrayList<>();

  public EzsignsignatureResponseCompoundV3() {
  }

  public EzsignsignatureResponseCompoundV3 bEzsignsignatureCustomdate(@javax.annotation.Nullable Boolean bEzsignsignatureCustomdate) {
    this.bEzsignsignatureCustomdate = bEzsignsignatureCustomdate;
    return this;
  }

  /**
   * Whether the Ezsignsignature has a custom date format or not. (Only possible when eEzsignsignatureType is **Name** or **Handwritten**)
   * @return bEzsignsignatureCustomdate
   */
  @javax.annotation.Nullable
  public Boolean getbEzsignsignatureCustomdate() {
    return bEzsignsignatureCustomdate;
  }

  public void setbEzsignsignatureCustomdate(@javax.annotation.Nullable Boolean bEzsignsignatureCustomdate) {
    this.bEzsignsignatureCustomdate = bEzsignsignatureCustomdate;
  }


  public EzsignsignatureResponseCompoundV3 aObjEzsignsignaturecustomdate(@javax.annotation.Nullable List<EzsignsignaturecustomdateResponseCompoundV2> aObjEzsignsignaturecustomdate) {
    this.aObjEzsignsignaturecustomdate = aObjEzsignsignaturecustomdate;
    return this;
  }

  public EzsignsignatureResponseCompoundV3 addAObjEzsignsignaturecustomdateItem(EzsignsignaturecustomdateResponseV2 aObjEzsignsignaturecustomdateItem) {
    if (this.aObjEzsignsignaturecustomdate == null) {
      this.aObjEzsignsignaturecustomdate = new ArrayList<>();
    }
    this.aObjEzsignsignaturecustomdate.add(aObjEzsignsignaturecustomdateItem);
    return this;
  }

  /**
   * An array of custom date blocks that will be filled at the time of signature.  Can only be used if bEzsignsignatureCustomdate is true.  Use an empty array if you don&#39;t want to have a date at all.
   * @return aObjEzsignsignaturecustomdate
   */
  @javax.annotation.Nullable
  public List<EzsignsignaturecustomdateResponseCompoundV2> getaObjEzsignsignaturecustomdate() {
    return aObjEzsignsignaturecustomdate;
  }

  public void setaObjEzsignsignaturecustomdate(@javax.annotation.Nullable List<EzsignsignaturecustomdateResponseCompoundV2> aObjEzsignsignaturecustomdate) {
    this.aObjEzsignsignaturecustomdate = aObjEzsignsignaturecustomdate;
  }


  public EzsignsignatureResponseCompoundV3 objCreditcardtransaction(@javax.annotation.Nullable CustomCreditcardtransactionResponse objCreditcardtransaction) {
    this.objCreditcardtransaction = objCreditcardtransaction;
    return this;
  }

  /**
   * Get objCreditcardtransaction
   * @return objCreditcardtransaction
   */
  @javax.annotation.Nullable
  public CustomCreditcardtransactionResponse getObjCreditcardtransaction() {
    return objCreditcardtransaction;
  }

  public void setObjCreditcardtransaction(@javax.annotation.Nullable CustomCreditcardtransactionResponse objCreditcardtransaction) {
    this.objCreditcardtransaction = objCreditcardtransaction;
  }


  public EzsignsignatureResponseCompoundV3 aObjEzsignelementdependency(@javax.annotation.Nullable List<EzsignelementdependencyResponseCompound> aObjEzsignelementdependency) {
    this.aObjEzsignelementdependency = aObjEzsignelementdependency;
    return this;
  }

  public EzsignsignatureResponseCompoundV3 addAObjEzsignelementdependencyItem(EzsignelementdependencyResponse aObjEzsignelementdependencyItem) {
    if (this.aObjEzsignelementdependency == null) {
      this.aObjEzsignelementdependency = new ArrayList<>();
    }
    this.aObjEzsignelementdependency.add(aObjEzsignelementdependencyItem);
    return this;
  }

  /**
   * Get aObjEzsignelementdependency
   * @return aObjEzsignelementdependency
   */
  @javax.annotation.Nullable
  public List<EzsignelementdependencyResponseCompound> getaObjEzsignelementdependency() {
    return aObjEzsignelementdependency;
  }

  public void setaObjEzsignelementdependency(@javax.annotation.Nullable List<EzsignelementdependencyResponseCompound> aObjEzsignelementdependency) {
    this.aObjEzsignelementdependency = aObjEzsignelementdependency;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsignsignatureResponseCompoundV3 ezsignsignatureResponseCompoundV3 = (EzsignsignatureResponseCompoundV3) o;
    return Objects.equals(this.bEzsignsignatureCustomdate, ezsignsignatureResponseCompoundV3.bEzsignsignatureCustomdate) &&
        Objects.equals(this.aObjEzsignsignaturecustomdate, ezsignsignatureResponseCompoundV3.aObjEzsignsignaturecustomdate) &&
        Objects.equals(this.objCreditcardtransaction, ezsignsignatureResponseCompoundV3.objCreditcardtransaction) &&
        Objects.equals(this.aObjEzsignelementdependency, ezsignsignatureResponseCompoundV3.aObjEzsignelementdependency) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bEzsignsignatureCustomdate, aObjEzsignsignaturecustomdate, objCreditcardtransaction, aObjEzsignelementdependency, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsignsignatureResponseCompoundV3 {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    bEzsignsignatureCustomdate: ").append(toIndentedString(bEzsignsignatureCustomdate)).append("\n");
    sb.append("    aObjEzsignsignaturecustomdate: ").append(toIndentedString(aObjEzsignsignaturecustomdate)).append("\n");
    sb.append("    objCreditcardtransaction: ").append(toIndentedString(objCreditcardtransaction)).append("\n");
    sb.append("    aObjEzsignelementdependency: ").append(toIndentedString(aObjEzsignelementdependency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiEzsignsignatureID");
    openapiFields.add("fkiEzsigndocumentID");
    openapiFields.add("fkiEzsignfoldersignerassociationID");
    openapiFields.add("fkiEzsignsigningreasonID");
    openapiFields.add("fkiFontID");
    openapiFields.add("sEzsignsigningreasonDescriptionX");
    openapiFields.add("iEzsignpagePagenumber");
    openapiFields.add("iEzsignsignatureX");
    openapiFields.add("iEzsignsignatureY");
    openapiFields.add("iEzsignsignatureHeight");
    openapiFields.add("iEzsignsignatureWidth");
    openapiFields.add("iEzsignsignatureStep");
    openapiFields.add("iEzsignsignatureStepadjusted");
    openapiFields.add("eEzsignsignatureType");
    openapiFields.add("tEzsignsignatureTooltip");
    openapiFields.add("eEzsignsignatureTooltipposition");
    openapiFields.add("eEzsignsignatureFont");
    openapiFields.add("iEzsignsignatureValidationstep");
    openapiFields.add("sEzsignsignatureAttachmentdescription");
    openapiFields.add("eEzsignsignatureAttachmentnamesource");
    openapiFields.add("eEzsignsignatureConsultationtrigger");
    openapiFields.add("bEzsignsignatureHandwritten");
    openapiFields.add("bEzsignsignatureReason");
    openapiFields.add("bEzsignsignatureRequired");
    openapiFields.add("fkiEzsignfoldersignerassociationIDValidation");
    openapiFields.add("dtEzsignsignatureDate");
    openapiFields.add("iEzsignsignatureattachmentCount");
    openapiFields.add("sEzsignsignatureDescription");
    openapiFields.add("iEzsignsignatureMaxlength");
    openapiFields.add("eEzsignsignatureTextvalidation");
    openapiFields.add("sEzsignsignatureTextvalidationcustommessage");
    openapiFields.add("eEzsignsignatureDependencyrequirement");
    openapiFields.add("sEzsignsignatureDefaultvalue");
    openapiFields.add("sEzsignsignatureRegexp");
    openapiFields.add("objContactName");
    openapiFields.add("objContactNameDelegation");
    openapiFields.add("objSignature");
    openapiFields.add("bEzsignsignatureCustomdate");
    openapiFields.add("a_objEzsignsignaturecustomdate");
    openapiFields.add("objCreditcardtransaction");
    openapiFields.add("a_objEzsignelementdependency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiEzsignsignatureID");
    openapiRequiredFields.add("fkiEzsigndocumentID");
    openapiRequiredFields.add("fkiEzsignfoldersignerassociationID");
    openapiRequiredFields.add("iEzsignpagePagenumber");
    openapiRequiredFields.add("iEzsignsignatureX");
    openapiRequiredFields.add("iEzsignsignatureY");
    openapiRequiredFields.add("iEzsignsignatureStep");
    openapiRequiredFields.add("eEzsignsignatureType");
    openapiRequiredFields.add("objContactName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EzsignsignatureResponseCompoundV3
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EzsignsignatureResponseCompoundV3.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsignsignatureResponseCompoundV3 is not found in the empty JSON string", EzsignsignatureResponseCompoundV3.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EzsignsignatureResponseCompoundV3.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsignsignatureResponseCompoundV3` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EzsignsignatureResponseCompoundV3.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("a_objEzsignsignaturecustomdate") != null && !jsonObj.get("a_objEzsignsignaturecustomdate").isJsonNull()) {
        JsonArray jsonArrayaObjEzsignsignaturecustomdate = jsonObj.getAsJsonArray("a_objEzsignsignaturecustomdate");
        if (jsonArrayaObjEzsignsignaturecustomdate != null) {
          // ensure the json data is an array
          if (!jsonObj.get("a_objEzsignsignaturecustomdate").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `a_objEzsignsignaturecustomdate` to be an array in the JSON string but got `%s`", jsonObj.get("a_objEzsignsignaturecustomdate").toString()));
          }

          // validate the optional field `a_objEzsignsignaturecustomdate` (array)
          for (int i = 0; i < jsonArrayaObjEzsignsignaturecustomdate.size(); i++) {
            EzsignsignaturecustomdateResponseV2.validateJsonElement(jsonArrayaObjEzsignsignaturecustomdate.get(i));
          };
        }
      }
      // validate the optional field `objCreditcardtransaction`
      if (jsonObj.get("objCreditcardtransaction") != null && !jsonObj.get("objCreditcardtransaction").isJsonNull()) {
        CustomCreditcardtransactionResponse.validateJsonElement(jsonObj.get("objCreditcardtransaction"));
      }
      if (jsonObj.get("a_objEzsignelementdependency") != null && !jsonObj.get("a_objEzsignelementdependency").isJsonNull()) {
        JsonArray jsonArrayaObjEzsignelementdependency = jsonObj.getAsJsonArray("a_objEzsignelementdependency");
        if (jsonArrayaObjEzsignelementdependency != null) {
          // ensure the json data is an array
          if (!jsonObj.get("a_objEzsignelementdependency").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `a_objEzsignelementdependency` to be an array in the JSON string but got `%s`", jsonObj.get("a_objEzsignelementdependency").toString()));
          }

          // validate the optional field `a_objEzsignelementdependency` (array)
          for (int i = 0; i < jsonArrayaObjEzsignelementdependency.size(); i++) {
            EzsignelementdependencyResponse.validateJsonElement(jsonArrayaObjEzsignelementdependency.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsignsignatureResponseCompoundV3.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsignsignatureResponseCompoundV3' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsignsignatureResponseCompoundV3> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsignsignatureResponseCompoundV3.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsignsignatureResponseCompoundV3>() {
           @Override
           public void write(JsonWriter out, EzsignsignatureResponseCompoundV3 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsignsignatureResponseCompoundV3 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EzsignsignatureResponseCompoundV3 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EzsignsignatureResponseCompoundV3
   * @throws IOException if the JSON string is invalid with respect to EzsignsignatureResponseCompoundV3
   */
  public static EzsignsignatureResponseCompoundV3 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsignsignatureResponseCompoundV3.class);
  }

  /**
   * Convert an instance of EzsignsignatureResponseCompoundV3 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

