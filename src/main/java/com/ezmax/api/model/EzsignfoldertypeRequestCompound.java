/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.FieldEEzsignfoldertypeDisposal;
import com.ezmax.api.model.FieldEEzsignfoldertypePrivacylevel;
import com.ezmax.api.model.FieldEEzsignfoldertypeSendreminderfrequency;
import com.ezmax.api.model.MultilingualEzsignfoldertypeName;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Ezsignfoldertype Object and children
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-25T02:49:00.205387936Z[Etc/UTC]")
public class EzsignfoldertypeRequestCompound {
  public static final String SERIALIZED_NAME_PKI_EZSIGNFOLDERTYPE_I_D = "pkiEzsignfoldertypeID";
  @SerializedName(SERIALIZED_NAME_PKI_EZSIGNFOLDERTYPE_I_D)
  private Integer pkiEzsignfoldertypeID;

  public static final String SERIALIZED_NAME_OBJ_EZSIGNFOLDERTYPE_NAME = "objEzsignfoldertypeName";
  @SerializedName(SERIALIZED_NAME_OBJ_EZSIGNFOLDERTYPE_NAME)
  private MultilingualEzsignfoldertypeName objEzsignfoldertypeName;

  public static final String SERIALIZED_NAME_FKI_BRANDING_I_D = "fkiBrandingID";
  @SerializedName(SERIALIZED_NAME_FKI_BRANDING_I_D)
  private Integer fkiBrandingID;

  public static final String SERIALIZED_NAME_FKI_BILLINGENTITYINTERNAL_I_D = "fkiBillingentityinternalID";
  @SerializedName(SERIALIZED_NAME_FKI_BILLINGENTITYINTERNAL_I_D)
  private Integer fkiBillingentityinternalID;

  public static final String SERIALIZED_NAME_FKI_USERGROUP_I_D = "fkiUsergroupID";
  @SerializedName(SERIALIZED_NAME_FKI_USERGROUP_I_D)
  private Integer fkiUsergroupID;

  public static final String SERIALIZED_NAME_FKI_USERGROUP_I_D_RESTRICTED = "fkiUsergroupIDRestricted";
  @SerializedName(SERIALIZED_NAME_FKI_USERGROUP_I_D_RESTRICTED)
  private Integer fkiUsergroupIDRestricted;

  public static final String SERIALIZED_NAME_FKI_EZSIGNTSAREQUIREMENT_I_D = "fkiEzsigntsarequirementID";
  @SerializedName(SERIALIZED_NAME_FKI_EZSIGNTSAREQUIREMENT_I_D)
  private Integer fkiEzsigntsarequirementID;

  public static final String SERIALIZED_NAME_S_EMAIL_ADDRESS_SIGNED = "sEmailAddressSigned";
  @SerializedName(SERIALIZED_NAME_S_EMAIL_ADDRESS_SIGNED)
  private String sEmailAddressSigned;

  public static final String SERIALIZED_NAME_S_EMAIL_ADDRESS_SUMMARY = "sEmailAddressSummary";
  @SerializedName(SERIALIZED_NAME_S_EMAIL_ADDRESS_SUMMARY)
  private String sEmailAddressSummary;

  public static final String SERIALIZED_NAME_E_EZSIGNFOLDERTYPE_PRIVACYLEVEL = "eEzsignfoldertypePrivacylevel";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNFOLDERTYPE_PRIVACYLEVEL)
  private FieldEEzsignfoldertypePrivacylevel eEzsignfoldertypePrivacylevel;

  public static final String SERIALIZED_NAME_E_EZSIGNFOLDERTYPE_SENDREMINDERFREQUENCY = "eEzsignfoldertypeSendreminderfrequency";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNFOLDERTYPE_SENDREMINDERFREQUENCY)
  private FieldEEzsignfoldertypeSendreminderfrequency eEzsignfoldertypeSendreminderfrequency;

  public static final String SERIALIZED_NAME_I_EZSIGNFOLDERTYPE_ARCHIVALDAYS = "iEzsignfoldertypeArchivaldays";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNFOLDERTYPE_ARCHIVALDAYS)
  private Integer iEzsignfoldertypeArchivaldays;

  public static final String SERIALIZED_NAME_E_EZSIGNFOLDERTYPE_DISPOSAL = "eEzsignfoldertypeDisposal";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNFOLDERTYPE_DISPOSAL)
  private FieldEEzsignfoldertypeDisposal eEzsignfoldertypeDisposal;

  public static final String SERIALIZED_NAME_I_EZSIGNFOLDERTYPE_DISPOSALDAYS = "iEzsignfoldertypeDisposaldays";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNFOLDERTYPE_DISPOSALDAYS)
  private Integer iEzsignfoldertypeDisposaldays;

  public static final String SERIALIZED_NAME_I_EZSIGNFOLDERTYPE_DEADLINEDAYS = "iEzsignfoldertypeDeadlinedays";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNFOLDERTYPE_DEADLINEDAYS)
  private Integer iEzsignfoldertypeDeadlinedays;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_DELEGATE = "bEzsignfoldertypeDelegate";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_DELEGATE)
  private Boolean bEzsignfoldertypeDelegate;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_REASSIGN = "bEzsignfoldertypeReassign";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_REASSIGN)
  private Boolean bEzsignfoldertypeReassign;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDATTATCHMENTSIGNER = "bEzsignfoldertypeSendattatchmentsigner";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDATTATCHMENTSIGNER)
  private Boolean bEzsignfoldertypeSendattatchmentsigner;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSIGNEDTODOCUMENTOWNER = "bEzsignfoldertypeSendsignedtodocumentowner";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSIGNEDTODOCUMENTOWNER)
  private Boolean bEzsignfoldertypeSendsignedtodocumentowner;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSIGNEDTOFOLDEROWNER = "bEzsignfoldertypeSendsignedtofolderowner";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSIGNEDTOFOLDEROWNER)
  private Boolean bEzsignfoldertypeSendsignedtofolderowner;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSIGNEDTOFULLGROUP = "bEzsignfoldertypeSendsignedtofullgroup";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSIGNEDTOFULLGROUP)
  private Boolean bEzsignfoldertypeSendsignedtofullgroup;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSIGNEDTOLIMITEDGROUP = "bEzsignfoldertypeSendsignedtolimitedgroup";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSIGNEDTOLIMITEDGROUP)
  private Boolean bEzsignfoldertypeSendsignedtolimitedgroup;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSIGNEDTOCOLLEAGUE = "bEzsignfoldertypeSendsignedtocolleague";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSIGNEDTOCOLLEAGUE)
  private Boolean bEzsignfoldertypeSendsignedtocolleague;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSUMMARYTODOCUMENTOWNER = "bEzsignfoldertypeSendsummarytodocumentowner";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSUMMARYTODOCUMENTOWNER)
  private Boolean bEzsignfoldertypeSendsummarytodocumentowner;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSUMMARYTOFOLDEROWNER = "bEzsignfoldertypeSendsummarytofolderowner";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSUMMARYTOFOLDEROWNER)
  private Boolean bEzsignfoldertypeSendsummarytofolderowner;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSUMMARYTOFULLGROUP = "bEzsignfoldertypeSendsummarytofullgroup";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSUMMARYTOFULLGROUP)
  private Boolean bEzsignfoldertypeSendsummarytofullgroup;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSUMMARYTOLIMITEDGROUP = "bEzsignfoldertypeSendsummarytolimitedgroup";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSUMMARYTOLIMITEDGROUP)
  private Boolean bEzsignfoldertypeSendsummarytolimitedgroup;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSUMMARYTOCOLLEAGUE = "bEzsignfoldertypeSendsummarytocolleague";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_SENDSUMMARYTOCOLLEAGUE)
  private Boolean bEzsignfoldertypeSendsummarytocolleague;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_INCLUDEPROOFSIGNER = "bEzsignfoldertypeIncludeproofsigner";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_INCLUDEPROOFSIGNER)
  private Boolean bEzsignfoldertypeIncludeproofsigner;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_INCLUDEPROOFUSER = "bEzsignfoldertypeIncludeproofuser";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_INCLUDEPROOFUSER)
  private Boolean bEzsignfoldertypeIncludeproofuser;

  public static final String SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_ISACTIVE = "bEzsignfoldertypeIsactive";
  @SerializedName(SERIALIZED_NAME_B_EZSIGNFOLDERTYPE_ISACTIVE)
  private Boolean bEzsignfoldertypeIsactive;

  public static final String SERIALIZED_NAME_A_FKI_USER_I_D_SIGNED = "a_fkiUserIDSigned";
  @SerializedName(SERIALIZED_NAME_A_FKI_USER_I_D_SIGNED)
  private List<Integer> aFkiUserIDSigned;

  public static final String SERIALIZED_NAME_A_FKI_USER_I_D_SUMMARY = "a_fkiUserIDSummary";
  @SerializedName(SERIALIZED_NAME_A_FKI_USER_I_D_SUMMARY)
  private List<Integer> aFkiUserIDSummary;

  public EzsignfoldertypeRequestCompound() {
  }

  public EzsignfoldertypeRequestCompound pkiEzsignfoldertypeID(Integer pkiEzsignfoldertypeID) {
    
    this.pkiEzsignfoldertypeID = pkiEzsignfoldertypeID;
    return this;
  }

   /**
   * The unique ID of the Ezsignfoldertype.
   * minimum: 0
   * @return pkiEzsignfoldertypeID
  **/
  @javax.annotation.Nullable
  public Integer getPkiEzsignfoldertypeID() {
    return pkiEzsignfoldertypeID;
  }


  public void setPkiEzsignfoldertypeID(Integer pkiEzsignfoldertypeID) {
    this.pkiEzsignfoldertypeID = pkiEzsignfoldertypeID;
  }


  public EzsignfoldertypeRequestCompound objEzsignfoldertypeName(MultilingualEzsignfoldertypeName objEzsignfoldertypeName) {
    
    this.objEzsignfoldertypeName = objEzsignfoldertypeName;
    return this;
  }

   /**
   * Get objEzsignfoldertypeName
   * @return objEzsignfoldertypeName
  **/
  @javax.annotation.Nonnull
  public MultilingualEzsignfoldertypeName getObjEzsignfoldertypeName() {
    return objEzsignfoldertypeName;
  }


  public void setObjEzsignfoldertypeName(MultilingualEzsignfoldertypeName objEzsignfoldertypeName) {
    this.objEzsignfoldertypeName = objEzsignfoldertypeName;
  }


  public EzsignfoldertypeRequestCompound fkiBrandingID(Integer fkiBrandingID) {
    
    this.fkiBrandingID = fkiBrandingID;
    return this;
  }

   /**
   * The unique ID of the Branding
   * minimum: 0
   * @return fkiBrandingID
  **/
  @javax.annotation.Nonnull
  public Integer getFkiBrandingID() {
    return fkiBrandingID;
  }


  public void setFkiBrandingID(Integer fkiBrandingID) {
    this.fkiBrandingID = fkiBrandingID;
  }


  public EzsignfoldertypeRequestCompound fkiBillingentityinternalID(Integer fkiBillingentityinternalID) {
    
    this.fkiBillingentityinternalID = fkiBillingentityinternalID;
    return this;
  }

   /**
   * The unique ID of the Billingentityinternal.
   * minimum: 0
   * @return fkiBillingentityinternalID
  **/
  @javax.annotation.Nullable
  public Integer getFkiBillingentityinternalID() {
    return fkiBillingentityinternalID;
  }


  public void setFkiBillingentityinternalID(Integer fkiBillingentityinternalID) {
    this.fkiBillingentityinternalID = fkiBillingentityinternalID;
  }


  public EzsignfoldertypeRequestCompound fkiUsergroupID(Integer fkiUsergroupID) {
    
    this.fkiUsergroupID = fkiUsergroupID;
    return this;
  }

   /**
   * The unique ID of the Usergroup
   * minimum: 0
   * maximum: 255
   * @return fkiUsergroupID
  **/
  @javax.annotation.Nullable
  public Integer getFkiUsergroupID() {
    return fkiUsergroupID;
  }


  public void setFkiUsergroupID(Integer fkiUsergroupID) {
    this.fkiUsergroupID = fkiUsergroupID;
  }


  public EzsignfoldertypeRequestCompound fkiUsergroupIDRestricted(Integer fkiUsergroupIDRestricted) {
    
    this.fkiUsergroupIDRestricted = fkiUsergroupIDRestricted;
    return this;
  }

   /**
   * The unique ID of the Usergroup
   * minimum: 0
   * maximum: 255
   * @return fkiUsergroupIDRestricted
  **/
  @javax.annotation.Nullable
  public Integer getFkiUsergroupIDRestricted() {
    return fkiUsergroupIDRestricted;
  }


  public void setFkiUsergroupIDRestricted(Integer fkiUsergroupIDRestricted) {
    this.fkiUsergroupIDRestricted = fkiUsergroupIDRestricted;
  }


  public EzsignfoldertypeRequestCompound fkiEzsigntsarequirementID(Integer fkiEzsigntsarequirementID) {
    
    this.fkiEzsigntsarequirementID = fkiEzsigntsarequirementID;
    return this;
  }

   /**
   * The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server&#39;s time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server&#39;s time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
   * minimum: 1
   * maximum: 3
   * @return fkiEzsigntsarequirementID
  **/
  @javax.annotation.Nullable
  public Integer getFkiEzsigntsarequirementID() {
    return fkiEzsigntsarequirementID;
  }


  public void setFkiEzsigntsarequirementID(Integer fkiEzsigntsarequirementID) {
    this.fkiEzsigntsarequirementID = fkiEzsigntsarequirementID;
  }


  public EzsignfoldertypeRequestCompound sEmailAddressSigned(String sEmailAddressSigned) {
    
    this.sEmailAddressSigned = sEmailAddressSigned;
    return this;
  }

   /**
   * The email address.
   * @return sEmailAddressSigned
  **/
  @javax.annotation.Nullable
  public String getsEmailAddressSigned() {
    return sEmailAddressSigned;
  }


  public void setsEmailAddressSigned(String sEmailAddressSigned) {
    this.sEmailAddressSigned = sEmailAddressSigned;
  }


  public EzsignfoldertypeRequestCompound sEmailAddressSummary(String sEmailAddressSummary) {
    
    this.sEmailAddressSummary = sEmailAddressSummary;
    return this;
  }

   /**
   * The email address.
   * @return sEmailAddressSummary
  **/
  @javax.annotation.Nullable
  public String getsEmailAddressSummary() {
    return sEmailAddressSummary;
  }


  public void setsEmailAddressSummary(String sEmailAddressSummary) {
    this.sEmailAddressSummary = sEmailAddressSummary;
  }


  public EzsignfoldertypeRequestCompound eEzsignfoldertypePrivacylevel(FieldEEzsignfoldertypePrivacylevel eEzsignfoldertypePrivacylevel) {
    
    this.eEzsignfoldertypePrivacylevel = eEzsignfoldertypePrivacylevel;
    return this;
  }

   /**
   * Get eEzsignfoldertypePrivacylevel
   * @return eEzsignfoldertypePrivacylevel
  **/
  @javax.annotation.Nonnull
  public FieldEEzsignfoldertypePrivacylevel geteEzsignfoldertypePrivacylevel() {
    return eEzsignfoldertypePrivacylevel;
  }


  public void seteEzsignfoldertypePrivacylevel(FieldEEzsignfoldertypePrivacylevel eEzsignfoldertypePrivacylevel) {
    this.eEzsignfoldertypePrivacylevel = eEzsignfoldertypePrivacylevel;
  }


  public EzsignfoldertypeRequestCompound eEzsignfoldertypeSendreminderfrequency(FieldEEzsignfoldertypeSendreminderfrequency eEzsignfoldertypeSendreminderfrequency) {
    
    this.eEzsignfoldertypeSendreminderfrequency = eEzsignfoldertypeSendreminderfrequency;
    return this;
  }

   /**
   * Get eEzsignfoldertypeSendreminderfrequency
   * @return eEzsignfoldertypeSendreminderfrequency
  **/
  @javax.annotation.Nullable
  public FieldEEzsignfoldertypeSendreminderfrequency geteEzsignfoldertypeSendreminderfrequency() {
    return eEzsignfoldertypeSendreminderfrequency;
  }


  public void seteEzsignfoldertypeSendreminderfrequency(FieldEEzsignfoldertypeSendreminderfrequency eEzsignfoldertypeSendreminderfrequency) {
    this.eEzsignfoldertypeSendreminderfrequency = eEzsignfoldertypeSendreminderfrequency;
  }


  public EzsignfoldertypeRequestCompound iEzsignfoldertypeArchivaldays(Integer iEzsignfoldertypeArchivaldays) {
    
    this.iEzsignfoldertypeArchivaldays = iEzsignfoldertypeArchivaldays;
    return this;
  }

   /**
   * The number of days before the archival of Ezsignfolders created using this Ezsignfoldertype
   * minimum: 0
   * maximum: 180
   * @return iEzsignfoldertypeArchivaldays
  **/
  @javax.annotation.Nonnull
  public Integer getiEzsignfoldertypeArchivaldays() {
    return iEzsignfoldertypeArchivaldays;
  }


  public void setiEzsignfoldertypeArchivaldays(Integer iEzsignfoldertypeArchivaldays) {
    this.iEzsignfoldertypeArchivaldays = iEzsignfoldertypeArchivaldays;
  }


  public EzsignfoldertypeRequestCompound eEzsignfoldertypeDisposal(FieldEEzsignfoldertypeDisposal eEzsignfoldertypeDisposal) {
    
    this.eEzsignfoldertypeDisposal = eEzsignfoldertypeDisposal;
    return this;
  }

   /**
   * Get eEzsignfoldertypeDisposal
   * @return eEzsignfoldertypeDisposal
  **/
  @javax.annotation.Nonnull
  public FieldEEzsignfoldertypeDisposal geteEzsignfoldertypeDisposal() {
    return eEzsignfoldertypeDisposal;
  }


  public void seteEzsignfoldertypeDisposal(FieldEEzsignfoldertypeDisposal eEzsignfoldertypeDisposal) {
    this.eEzsignfoldertypeDisposal = eEzsignfoldertypeDisposal;
  }


  public EzsignfoldertypeRequestCompound iEzsignfoldertypeDisposaldays(Integer iEzsignfoldertypeDisposaldays) {
    
    this.iEzsignfoldertypeDisposaldays = iEzsignfoldertypeDisposaldays;
    return this;
  }

   /**
   * The number of days after the archival before the disposal of the Ezsignfolder
   * minimum: 0
   * maximum: 9999
   * @return iEzsignfoldertypeDisposaldays
  **/
  @javax.annotation.Nullable
  public Integer getiEzsignfoldertypeDisposaldays() {
    return iEzsignfoldertypeDisposaldays;
  }


  public void setiEzsignfoldertypeDisposaldays(Integer iEzsignfoldertypeDisposaldays) {
    this.iEzsignfoldertypeDisposaldays = iEzsignfoldertypeDisposaldays;
  }


  public EzsignfoldertypeRequestCompound iEzsignfoldertypeDeadlinedays(Integer iEzsignfoldertypeDeadlinedays) {
    
    this.iEzsignfoldertypeDeadlinedays = iEzsignfoldertypeDeadlinedays;
    return this;
  }

   /**
   * The number of days to get all Ezsignsignatures
   * minimum: 1
   * maximum: 60
   * @return iEzsignfoldertypeDeadlinedays
  **/
  @javax.annotation.Nonnull
  public Integer getiEzsignfoldertypeDeadlinedays() {
    return iEzsignfoldertypeDeadlinedays;
  }


  public void setiEzsignfoldertypeDeadlinedays(Integer iEzsignfoldertypeDeadlinedays) {
    this.iEzsignfoldertypeDeadlinedays = iEzsignfoldertypeDeadlinedays;
  }


  public EzsignfoldertypeRequestCompound bEzsignfoldertypeDelegate(Boolean bEzsignfoldertypeDelegate) {
    
    this.bEzsignfoldertypeDelegate = bEzsignfoldertypeDelegate;
    return this;
  }

   /**
   * Wheter if delegation of signature is allowed to another user or not
   * @return bEzsignfoldertypeDelegate
  **/
  @javax.annotation.Nullable
  public Boolean getbEzsignfoldertypeDelegate() {
    return bEzsignfoldertypeDelegate;
  }


  public void setbEzsignfoldertypeDelegate(Boolean bEzsignfoldertypeDelegate) {
    this.bEzsignfoldertypeDelegate = bEzsignfoldertypeDelegate;
  }


  public EzsignfoldertypeRequestCompound bEzsignfoldertypeReassign(Boolean bEzsignfoldertypeReassign) {
    
    this.bEzsignfoldertypeReassign = bEzsignfoldertypeReassign;
    return this;
  }

   /**
   * Wheter if Reassignment of signature is allowed to another signatory or not
   * @return bEzsignfoldertypeReassign
  **/
  @javax.annotation.Nullable
  public Boolean getbEzsignfoldertypeReassign() {
    return bEzsignfoldertypeReassign;
  }


  public void setbEzsignfoldertypeReassign(Boolean bEzsignfoldertypeReassign) {
    this.bEzsignfoldertypeReassign = bEzsignfoldertypeReassign;
  }


  public EzsignfoldertypeRequestCompound bEzsignfoldertypeSendattatchmentsigner(Boolean bEzsignfoldertypeSendattatchmentsigner) {
    
    this.bEzsignfoldertypeSendattatchmentsigner = bEzsignfoldertypeSendattatchmentsigner;
    return this;
  }

   /**
   * Whether we send the Ezsigndocument and the proof as attachment in the email
   * @return bEzsignfoldertypeSendattatchmentsigner
  **/
  @javax.annotation.Nonnull
  public Boolean getbEzsignfoldertypeSendattatchmentsigner() {
    return bEzsignfoldertypeSendattatchmentsigner;
  }


  public void setbEzsignfoldertypeSendattatchmentsigner(Boolean bEzsignfoldertypeSendattatchmentsigner) {
    this.bEzsignfoldertypeSendattatchmentsigner = bEzsignfoldertypeSendattatchmentsigner;
  }


  public EzsignfoldertypeRequestCompound bEzsignfoldertypeSendsignedtodocumentowner(Boolean bEzsignfoldertypeSendsignedtodocumentowner) {
    
    this.bEzsignfoldertypeSendsignedtodocumentowner = bEzsignfoldertypeSendsignedtodocumentowner;
    return this;
  }

   /**
   * Whether we send the signed Ezsigndocument to the Ezsigndocument&#39;s owner
   * @return bEzsignfoldertypeSendsignedtodocumentowner
  **/
  @javax.annotation.Nonnull
  public Boolean getbEzsignfoldertypeSendsignedtodocumentowner() {
    return bEzsignfoldertypeSendsignedtodocumentowner;
  }


  public void setbEzsignfoldertypeSendsignedtodocumentowner(Boolean bEzsignfoldertypeSendsignedtodocumentowner) {
    this.bEzsignfoldertypeSendsignedtodocumentowner = bEzsignfoldertypeSendsignedtodocumentowner;
  }


  public EzsignfoldertypeRequestCompound bEzsignfoldertypeSendsignedtofolderowner(Boolean bEzsignfoldertypeSendsignedtofolderowner) {
    
    this.bEzsignfoldertypeSendsignedtofolderowner = bEzsignfoldertypeSendsignedtofolderowner;
    return this;
  }

   /**
   * Whether we send the signed Ezsigndocument to the Ezsignfolder&#39;s owner
   * @return bEzsignfoldertypeSendsignedtofolderowner
  **/
  @javax.annotation.Nonnull
  public Boolean getbEzsignfoldertypeSendsignedtofolderowner() {
    return bEzsignfoldertypeSendsignedtofolderowner;
  }


  public void setbEzsignfoldertypeSendsignedtofolderowner(Boolean bEzsignfoldertypeSendsignedtofolderowner) {
    this.bEzsignfoldertypeSendsignedtofolderowner = bEzsignfoldertypeSendsignedtofolderowner;
  }


  public EzsignfoldertypeRequestCompound bEzsignfoldertypeSendsignedtofullgroup(Boolean bEzsignfoldertypeSendsignedtofullgroup) {
    
    this.bEzsignfoldertypeSendsignedtofullgroup = bEzsignfoldertypeSendsignedtofullgroup;
    return this;
  }

   /**
   * Whether we send the signed Ezsigndocument to the Usergroup that has acces to all Ezsignfolders
   * @return bEzsignfoldertypeSendsignedtofullgroup
  **/
  @javax.annotation.Nullable
  public Boolean getbEzsignfoldertypeSendsignedtofullgroup() {
    return bEzsignfoldertypeSendsignedtofullgroup;
  }


  public void setbEzsignfoldertypeSendsignedtofullgroup(Boolean bEzsignfoldertypeSendsignedtofullgroup) {
    this.bEzsignfoldertypeSendsignedtofullgroup = bEzsignfoldertypeSendsignedtofullgroup;
  }


  public EzsignfoldertypeRequestCompound bEzsignfoldertypeSendsignedtolimitedgroup(Boolean bEzsignfoldertypeSendsignedtolimitedgroup) {
    
    this.bEzsignfoldertypeSendsignedtolimitedgroup = bEzsignfoldertypeSendsignedtolimitedgroup;
    return this;
  }

   /**
   * Whether we send the signed Ezsigndocument to the Usergroup that has acces to only their own Ezsignfolders
   * @return bEzsignfoldertypeSendsignedtolimitedgroup
  **/
  @javax.annotation.Nullable
  public Boolean getbEzsignfoldertypeSendsignedtolimitedgroup() {
    return bEzsignfoldertypeSendsignedtolimitedgroup;
  }


  public void setbEzsignfoldertypeSendsignedtolimitedgroup(Boolean bEzsignfoldertypeSendsignedtolimitedgroup) {
    this.bEzsignfoldertypeSendsignedtolimitedgroup = bEzsignfoldertypeSendsignedtolimitedgroup;
  }


  public EzsignfoldertypeRequestCompound bEzsignfoldertypeSendsignedtocolleague(Boolean bEzsignfoldertypeSendsignedtocolleague) {
    
    this.bEzsignfoldertypeSendsignedtocolleague = bEzsignfoldertypeSendsignedtocolleague;
    return this;
  }

   /**
   * Whether we send the signed Ezsigndocument to the colleagues
   * @return bEzsignfoldertypeSendsignedtocolleague
  **/
  @javax.annotation.Nonnull
  public Boolean getbEzsignfoldertypeSendsignedtocolleague() {
    return bEzsignfoldertypeSendsignedtocolleague;
  }


  public void setbEzsignfoldertypeSendsignedtocolleague(Boolean bEzsignfoldertypeSendsignedtocolleague) {
    this.bEzsignfoldertypeSendsignedtocolleague = bEzsignfoldertypeSendsignedtocolleague;
  }


  public EzsignfoldertypeRequestCompound bEzsignfoldertypeSendsummarytodocumentowner(Boolean bEzsignfoldertypeSendsummarytodocumentowner) {
    
    this.bEzsignfoldertypeSendsummarytodocumentowner = bEzsignfoldertypeSendsummarytodocumentowner;
    return this;
  }

   /**
   * Whether we send the summary to the Ezsigndocument&#39;s owner
   * @return bEzsignfoldertypeSendsummarytodocumentowner
  **/
  @javax.annotation.Nonnull
  public Boolean getbEzsignfoldertypeSendsummarytodocumentowner() {
    return bEzsignfoldertypeSendsummarytodocumentowner;
  }


  public void setbEzsignfoldertypeSendsummarytodocumentowner(Boolean bEzsignfoldertypeSendsummarytodocumentowner) {
    this.bEzsignfoldertypeSendsummarytodocumentowner = bEzsignfoldertypeSendsummarytodocumentowner;
  }


  public EzsignfoldertypeRequestCompound bEzsignfoldertypeSendsummarytofolderowner(Boolean bEzsignfoldertypeSendsummarytofolderowner) {
    
    this.bEzsignfoldertypeSendsummarytofolderowner = bEzsignfoldertypeSendsummarytofolderowner;
    return this;
  }

   /**
   * Whether we send the summary to the Ezsignfolder&#39;s owner
   * @return bEzsignfoldertypeSendsummarytofolderowner
  **/
  @javax.annotation.Nonnull
  public Boolean getbEzsignfoldertypeSendsummarytofolderowner() {
    return bEzsignfoldertypeSendsummarytofolderowner;
  }


  public void setbEzsignfoldertypeSendsummarytofolderowner(Boolean bEzsignfoldertypeSendsummarytofolderowner) {
    this.bEzsignfoldertypeSendsummarytofolderowner = bEzsignfoldertypeSendsummarytofolderowner;
  }


  public EzsignfoldertypeRequestCompound bEzsignfoldertypeSendsummarytofullgroup(Boolean bEzsignfoldertypeSendsummarytofullgroup) {
    
    this.bEzsignfoldertypeSendsummarytofullgroup = bEzsignfoldertypeSendsummarytofullgroup;
    return this;
  }

   /**
   * Whether we send the summary to the Usergroup that has acces to all Ezsignfolders
   * @return bEzsignfoldertypeSendsummarytofullgroup
  **/
  @javax.annotation.Nullable
  public Boolean getbEzsignfoldertypeSendsummarytofullgroup() {
    return bEzsignfoldertypeSendsummarytofullgroup;
  }


  public void setbEzsignfoldertypeSendsummarytofullgroup(Boolean bEzsignfoldertypeSendsummarytofullgroup) {
    this.bEzsignfoldertypeSendsummarytofullgroup = bEzsignfoldertypeSendsummarytofullgroup;
  }


  public EzsignfoldertypeRequestCompound bEzsignfoldertypeSendsummarytolimitedgroup(Boolean bEzsignfoldertypeSendsummarytolimitedgroup) {
    
    this.bEzsignfoldertypeSendsummarytolimitedgroup = bEzsignfoldertypeSendsummarytolimitedgroup;
    return this;
  }

   /**
   * Whether we send the summary to the Usergroup that has acces to only their own Ezsignfolders
   * @return bEzsignfoldertypeSendsummarytolimitedgroup
  **/
  @javax.annotation.Nullable
  public Boolean getbEzsignfoldertypeSendsummarytolimitedgroup() {
    return bEzsignfoldertypeSendsummarytolimitedgroup;
  }


  public void setbEzsignfoldertypeSendsummarytolimitedgroup(Boolean bEzsignfoldertypeSendsummarytolimitedgroup) {
    this.bEzsignfoldertypeSendsummarytolimitedgroup = bEzsignfoldertypeSendsummarytolimitedgroup;
  }


  public EzsignfoldertypeRequestCompound bEzsignfoldertypeSendsummarytocolleague(Boolean bEzsignfoldertypeSendsummarytocolleague) {
    
    this.bEzsignfoldertypeSendsummarytocolleague = bEzsignfoldertypeSendsummarytocolleague;
    return this;
  }

   /**
   * Whether we send the summary to the colleagues
   * @return bEzsignfoldertypeSendsummarytocolleague
  **/
  @javax.annotation.Nonnull
  public Boolean getbEzsignfoldertypeSendsummarytocolleague() {
    return bEzsignfoldertypeSendsummarytocolleague;
  }


  public void setbEzsignfoldertypeSendsummarytocolleague(Boolean bEzsignfoldertypeSendsummarytocolleague) {
    this.bEzsignfoldertypeSendsummarytocolleague = bEzsignfoldertypeSendsummarytocolleague;
  }


  public EzsignfoldertypeRequestCompound bEzsignfoldertypeIncludeproofsigner(Boolean bEzsignfoldertypeIncludeproofsigner) {
    
    this.bEzsignfoldertypeIncludeproofsigner = bEzsignfoldertypeIncludeproofsigner;
    return this;
  }

   /**
   * Whether we include the proof with the signed Ezsigndocument for Ezsignsigners
   * @return bEzsignfoldertypeIncludeproofsigner
  **/
  @javax.annotation.Nonnull
  public Boolean getbEzsignfoldertypeIncludeproofsigner() {
    return bEzsignfoldertypeIncludeproofsigner;
  }


  public void setbEzsignfoldertypeIncludeproofsigner(Boolean bEzsignfoldertypeIncludeproofsigner) {
    this.bEzsignfoldertypeIncludeproofsigner = bEzsignfoldertypeIncludeproofsigner;
  }


  public EzsignfoldertypeRequestCompound bEzsignfoldertypeIncludeproofuser(Boolean bEzsignfoldertypeIncludeproofuser) {
    
    this.bEzsignfoldertypeIncludeproofuser = bEzsignfoldertypeIncludeproofuser;
    return this;
  }

   /**
   * Whether we include the proof with the signed Ezsigndocument for users
   * @return bEzsignfoldertypeIncludeproofuser
  **/
  @javax.annotation.Nonnull
  public Boolean getbEzsignfoldertypeIncludeproofuser() {
    return bEzsignfoldertypeIncludeproofuser;
  }


  public void setbEzsignfoldertypeIncludeproofuser(Boolean bEzsignfoldertypeIncludeproofuser) {
    this.bEzsignfoldertypeIncludeproofuser = bEzsignfoldertypeIncludeproofuser;
  }


  public EzsignfoldertypeRequestCompound bEzsignfoldertypeIsactive(Boolean bEzsignfoldertypeIsactive) {
    
    this.bEzsignfoldertypeIsactive = bEzsignfoldertypeIsactive;
    return this;
  }

   /**
   * Whether the Ezsignfoldertype is active or not
   * @return bEzsignfoldertypeIsactive
  **/
  @javax.annotation.Nonnull
  public Boolean getbEzsignfoldertypeIsactive() {
    return bEzsignfoldertypeIsactive;
  }


  public void setbEzsignfoldertypeIsactive(Boolean bEzsignfoldertypeIsactive) {
    this.bEzsignfoldertypeIsactive = bEzsignfoldertypeIsactive;
  }


  public EzsignfoldertypeRequestCompound aFkiUserIDSigned(List<Integer> aFkiUserIDSigned) {
    
    this.aFkiUserIDSigned = aFkiUserIDSigned;
    return this;
  }

  public EzsignfoldertypeRequestCompound addAFkiUserIDSignedItem(Integer aFkiUserIDSignedItem) {
    if (this.aFkiUserIDSigned == null) {
      this.aFkiUserIDSigned = new ArrayList<>();
    }
    this.aFkiUserIDSigned.add(aFkiUserIDSignedItem);
    return this;
  }

   /**
   * Get aFkiUserIDSigned
   * @return aFkiUserIDSigned
  **/
  @javax.annotation.Nullable
  public List<Integer> getaFkiUserIDSigned() {
    return aFkiUserIDSigned;
  }


  public void setaFkiUserIDSigned(List<Integer> aFkiUserIDSigned) {
    this.aFkiUserIDSigned = aFkiUserIDSigned;
  }


  public EzsignfoldertypeRequestCompound aFkiUserIDSummary(List<Integer> aFkiUserIDSummary) {
    
    this.aFkiUserIDSummary = aFkiUserIDSummary;
    return this;
  }

  public EzsignfoldertypeRequestCompound addAFkiUserIDSummaryItem(Integer aFkiUserIDSummaryItem) {
    if (this.aFkiUserIDSummary == null) {
      this.aFkiUserIDSummary = new ArrayList<>();
    }
    this.aFkiUserIDSummary.add(aFkiUserIDSummaryItem);
    return this;
  }

   /**
   * Get aFkiUserIDSummary
   * @return aFkiUserIDSummary
  **/
  @javax.annotation.Nullable
  public List<Integer> getaFkiUserIDSummary() {
    return aFkiUserIDSummary;
  }


  public void setaFkiUserIDSummary(List<Integer> aFkiUserIDSummary) {
    this.aFkiUserIDSummary = aFkiUserIDSummary;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsignfoldertypeRequestCompound ezsignfoldertypeRequestCompound = (EzsignfoldertypeRequestCompound) o;
    return Objects.equals(this.pkiEzsignfoldertypeID, ezsignfoldertypeRequestCompound.pkiEzsignfoldertypeID) &&
        Objects.equals(this.objEzsignfoldertypeName, ezsignfoldertypeRequestCompound.objEzsignfoldertypeName) &&
        Objects.equals(this.fkiBrandingID, ezsignfoldertypeRequestCompound.fkiBrandingID) &&
        Objects.equals(this.fkiBillingentityinternalID, ezsignfoldertypeRequestCompound.fkiBillingentityinternalID) &&
        Objects.equals(this.fkiUsergroupID, ezsignfoldertypeRequestCompound.fkiUsergroupID) &&
        Objects.equals(this.fkiUsergroupIDRestricted, ezsignfoldertypeRequestCompound.fkiUsergroupIDRestricted) &&
        Objects.equals(this.fkiEzsigntsarequirementID, ezsignfoldertypeRequestCompound.fkiEzsigntsarequirementID) &&
        Objects.equals(this.sEmailAddressSigned, ezsignfoldertypeRequestCompound.sEmailAddressSigned) &&
        Objects.equals(this.sEmailAddressSummary, ezsignfoldertypeRequestCompound.sEmailAddressSummary) &&
        Objects.equals(this.eEzsignfoldertypePrivacylevel, ezsignfoldertypeRequestCompound.eEzsignfoldertypePrivacylevel) &&
        Objects.equals(this.eEzsignfoldertypeSendreminderfrequency, ezsignfoldertypeRequestCompound.eEzsignfoldertypeSendreminderfrequency) &&
        Objects.equals(this.iEzsignfoldertypeArchivaldays, ezsignfoldertypeRequestCompound.iEzsignfoldertypeArchivaldays) &&
        Objects.equals(this.eEzsignfoldertypeDisposal, ezsignfoldertypeRequestCompound.eEzsignfoldertypeDisposal) &&
        Objects.equals(this.iEzsignfoldertypeDisposaldays, ezsignfoldertypeRequestCompound.iEzsignfoldertypeDisposaldays) &&
        Objects.equals(this.iEzsignfoldertypeDeadlinedays, ezsignfoldertypeRequestCompound.iEzsignfoldertypeDeadlinedays) &&
        Objects.equals(this.bEzsignfoldertypeDelegate, ezsignfoldertypeRequestCompound.bEzsignfoldertypeDelegate) &&
        Objects.equals(this.bEzsignfoldertypeReassign, ezsignfoldertypeRequestCompound.bEzsignfoldertypeReassign) &&
        Objects.equals(this.bEzsignfoldertypeSendattatchmentsigner, ezsignfoldertypeRequestCompound.bEzsignfoldertypeSendattatchmentsigner) &&
        Objects.equals(this.bEzsignfoldertypeSendsignedtodocumentowner, ezsignfoldertypeRequestCompound.bEzsignfoldertypeSendsignedtodocumentowner) &&
        Objects.equals(this.bEzsignfoldertypeSendsignedtofolderowner, ezsignfoldertypeRequestCompound.bEzsignfoldertypeSendsignedtofolderowner) &&
        Objects.equals(this.bEzsignfoldertypeSendsignedtofullgroup, ezsignfoldertypeRequestCompound.bEzsignfoldertypeSendsignedtofullgroup) &&
        Objects.equals(this.bEzsignfoldertypeSendsignedtolimitedgroup, ezsignfoldertypeRequestCompound.bEzsignfoldertypeSendsignedtolimitedgroup) &&
        Objects.equals(this.bEzsignfoldertypeSendsignedtocolleague, ezsignfoldertypeRequestCompound.bEzsignfoldertypeSendsignedtocolleague) &&
        Objects.equals(this.bEzsignfoldertypeSendsummarytodocumentowner, ezsignfoldertypeRequestCompound.bEzsignfoldertypeSendsummarytodocumentowner) &&
        Objects.equals(this.bEzsignfoldertypeSendsummarytofolderowner, ezsignfoldertypeRequestCompound.bEzsignfoldertypeSendsummarytofolderowner) &&
        Objects.equals(this.bEzsignfoldertypeSendsummarytofullgroup, ezsignfoldertypeRequestCompound.bEzsignfoldertypeSendsummarytofullgroup) &&
        Objects.equals(this.bEzsignfoldertypeSendsummarytolimitedgroup, ezsignfoldertypeRequestCompound.bEzsignfoldertypeSendsummarytolimitedgroup) &&
        Objects.equals(this.bEzsignfoldertypeSendsummarytocolleague, ezsignfoldertypeRequestCompound.bEzsignfoldertypeSendsummarytocolleague) &&
        Objects.equals(this.bEzsignfoldertypeIncludeproofsigner, ezsignfoldertypeRequestCompound.bEzsignfoldertypeIncludeproofsigner) &&
        Objects.equals(this.bEzsignfoldertypeIncludeproofuser, ezsignfoldertypeRequestCompound.bEzsignfoldertypeIncludeproofuser) &&
        Objects.equals(this.bEzsignfoldertypeIsactive, ezsignfoldertypeRequestCompound.bEzsignfoldertypeIsactive) &&
        Objects.equals(this.aFkiUserIDSigned, ezsignfoldertypeRequestCompound.aFkiUserIDSigned) &&
        Objects.equals(this.aFkiUserIDSummary, ezsignfoldertypeRequestCompound.aFkiUserIDSummary);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiEzsignfoldertypeID, objEzsignfoldertypeName, fkiBrandingID, fkiBillingentityinternalID, fkiUsergroupID, fkiUsergroupIDRestricted, fkiEzsigntsarequirementID, sEmailAddressSigned, sEmailAddressSummary, eEzsignfoldertypePrivacylevel, eEzsignfoldertypeSendreminderfrequency, iEzsignfoldertypeArchivaldays, eEzsignfoldertypeDisposal, iEzsignfoldertypeDisposaldays, iEzsignfoldertypeDeadlinedays, bEzsignfoldertypeDelegate, bEzsignfoldertypeReassign, bEzsignfoldertypeSendattatchmentsigner, bEzsignfoldertypeSendsignedtodocumentowner, bEzsignfoldertypeSendsignedtofolderowner, bEzsignfoldertypeSendsignedtofullgroup, bEzsignfoldertypeSendsignedtolimitedgroup, bEzsignfoldertypeSendsignedtocolleague, bEzsignfoldertypeSendsummarytodocumentowner, bEzsignfoldertypeSendsummarytofolderowner, bEzsignfoldertypeSendsummarytofullgroup, bEzsignfoldertypeSendsummarytolimitedgroup, bEzsignfoldertypeSendsummarytocolleague, bEzsignfoldertypeIncludeproofsigner, bEzsignfoldertypeIncludeproofuser, bEzsignfoldertypeIsactive, aFkiUserIDSigned, aFkiUserIDSummary);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsignfoldertypeRequestCompound {\n");
    sb.append("    pkiEzsignfoldertypeID: ").append(toIndentedString(pkiEzsignfoldertypeID)).append("\n");
    sb.append("    objEzsignfoldertypeName: ").append(toIndentedString(objEzsignfoldertypeName)).append("\n");
    sb.append("    fkiBrandingID: ").append(toIndentedString(fkiBrandingID)).append("\n");
    sb.append("    fkiBillingentityinternalID: ").append(toIndentedString(fkiBillingentityinternalID)).append("\n");
    sb.append("    fkiUsergroupID: ").append(toIndentedString(fkiUsergroupID)).append("\n");
    sb.append("    fkiUsergroupIDRestricted: ").append(toIndentedString(fkiUsergroupIDRestricted)).append("\n");
    sb.append("    fkiEzsigntsarequirementID: ").append(toIndentedString(fkiEzsigntsarequirementID)).append("\n");
    sb.append("    sEmailAddressSigned: ").append(toIndentedString(sEmailAddressSigned)).append("\n");
    sb.append("    sEmailAddressSummary: ").append(toIndentedString(sEmailAddressSummary)).append("\n");
    sb.append("    eEzsignfoldertypePrivacylevel: ").append(toIndentedString(eEzsignfoldertypePrivacylevel)).append("\n");
    sb.append("    eEzsignfoldertypeSendreminderfrequency: ").append(toIndentedString(eEzsignfoldertypeSendreminderfrequency)).append("\n");
    sb.append("    iEzsignfoldertypeArchivaldays: ").append(toIndentedString(iEzsignfoldertypeArchivaldays)).append("\n");
    sb.append("    eEzsignfoldertypeDisposal: ").append(toIndentedString(eEzsignfoldertypeDisposal)).append("\n");
    sb.append("    iEzsignfoldertypeDisposaldays: ").append(toIndentedString(iEzsignfoldertypeDisposaldays)).append("\n");
    sb.append("    iEzsignfoldertypeDeadlinedays: ").append(toIndentedString(iEzsignfoldertypeDeadlinedays)).append("\n");
    sb.append("    bEzsignfoldertypeDelegate: ").append(toIndentedString(bEzsignfoldertypeDelegate)).append("\n");
    sb.append("    bEzsignfoldertypeReassign: ").append(toIndentedString(bEzsignfoldertypeReassign)).append("\n");
    sb.append("    bEzsignfoldertypeSendattatchmentsigner: ").append(toIndentedString(bEzsignfoldertypeSendattatchmentsigner)).append("\n");
    sb.append("    bEzsignfoldertypeSendsignedtodocumentowner: ").append(toIndentedString(bEzsignfoldertypeSendsignedtodocumentowner)).append("\n");
    sb.append("    bEzsignfoldertypeSendsignedtofolderowner: ").append(toIndentedString(bEzsignfoldertypeSendsignedtofolderowner)).append("\n");
    sb.append("    bEzsignfoldertypeSendsignedtofullgroup: ").append(toIndentedString(bEzsignfoldertypeSendsignedtofullgroup)).append("\n");
    sb.append("    bEzsignfoldertypeSendsignedtolimitedgroup: ").append(toIndentedString(bEzsignfoldertypeSendsignedtolimitedgroup)).append("\n");
    sb.append("    bEzsignfoldertypeSendsignedtocolleague: ").append(toIndentedString(bEzsignfoldertypeSendsignedtocolleague)).append("\n");
    sb.append("    bEzsignfoldertypeSendsummarytodocumentowner: ").append(toIndentedString(bEzsignfoldertypeSendsummarytodocumentowner)).append("\n");
    sb.append("    bEzsignfoldertypeSendsummarytofolderowner: ").append(toIndentedString(bEzsignfoldertypeSendsummarytofolderowner)).append("\n");
    sb.append("    bEzsignfoldertypeSendsummarytofullgroup: ").append(toIndentedString(bEzsignfoldertypeSendsummarytofullgroup)).append("\n");
    sb.append("    bEzsignfoldertypeSendsummarytolimitedgroup: ").append(toIndentedString(bEzsignfoldertypeSendsummarytolimitedgroup)).append("\n");
    sb.append("    bEzsignfoldertypeSendsummarytocolleague: ").append(toIndentedString(bEzsignfoldertypeSendsummarytocolleague)).append("\n");
    sb.append("    bEzsignfoldertypeIncludeproofsigner: ").append(toIndentedString(bEzsignfoldertypeIncludeproofsigner)).append("\n");
    sb.append("    bEzsignfoldertypeIncludeproofuser: ").append(toIndentedString(bEzsignfoldertypeIncludeproofuser)).append("\n");
    sb.append("    bEzsignfoldertypeIsactive: ").append(toIndentedString(bEzsignfoldertypeIsactive)).append("\n");
    sb.append("    aFkiUserIDSigned: ").append(toIndentedString(aFkiUserIDSigned)).append("\n");
    sb.append("    aFkiUserIDSummary: ").append(toIndentedString(aFkiUserIDSummary)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiEzsignfoldertypeID");
    openapiFields.add("objEzsignfoldertypeName");
    openapiFields.add("fkiBrandingID");
    openapiFields.add("fkiBillingentityinternalID");
    openapiFields.add("fkiUsergroupID");
    openapiFields.add("fkiUsergroupIDRestricted");
    openapiFields.add("fkiEzsigntsarequirementID");
    openapiFields.add("sEmailAddressSigned");
    openapiFields.add("sEmailAddressSummary");
    openapiFields.add("eEzsignfoldertypePrivacylevel");
    openapiFields.add("eEzsignfoldertypeSendreminderfrequency");
    openapiFields.add("iEzsignfoldertypeArchivaldays");
    openapiFields.add("eEzsignfoldertypeDisposal");
    openapiFields.add("iEzsignfoldertypeDisposaldays");
    openapiFields.add("iEzsignfoldertypeDeadlinedays");
    openapiFields.add("bEzsignfoldertypeDelegate");
    openapiFields.add("bEzsignfoldertypeReassign");
    openapiFields.add("bEzsignfoldertypeSendattatchmentsigner");
    openapiFields.add("bEzsignfoldertypeSendsignedtodocumentowner");
    openapiFields.add("bEzsignfoldertypeSendsignedtofolderowner");
    openapiFields.add("bEzsignfoldertypeSendsignedtofullgroup");
    openapiFields.add("bEzsignfoldertypeSendsignedtolimitedgroup");
    openapiFields.add("bEzsignfoldertypeSendsignedtocolleague");
    openapiFields.add("bEzsignfoldertypeSendsummarytodocumentowner");
    openapiFields.add("bEzsignfoldertypeSendsummarytofolderowner");
    openapiFields.add("bEzsignfoldertypeSendsummarytofullgroup");
    openapiFields.add("bEzsignfoldertypeSendsummarytolimitedgroup");
    openapiFields.add("bEzsignfoldertypeSendsummarytocolleague");
    openapiFields.add("bEzsignfoldertypeIncludeproofsigner");
    openapiFields.add("bEzsignfoldertypeIncludeproofuser");
    openapiFields.add("bEzsignfoldertypeIsactive");
    openapiFields.add("a_fkiUserIDSigned");
    openapiFields.add("a_fkiUserIDSummary");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("objEzsignfoldertypeName");
    openapiRequiredFields.add("fkiBrandingID");
    openapiRequiredFields.add("eEzsignfoldertypePrivacylevel");
    openapiRequiredFields.add("iEzsignfoldertypeArchivaldays");
    openapiRequiredFields.add("eEzsignfoldertypeDisposal");
    openapiRequiredFields.add("iEzsignfoldertypeDeadlinedays");
    openapiRequiredFields.add("bEzsignfoldertypeSendattatchmentsigner");
    openapiRequiredFields.add("bEzsignfoldertypeSendsignedtodocumentowner");
    openapiRequiredFields.add("bEzsignfoldertypeSendsignedtofolderowner");
    openapiRequiredFields.add("bEzsignfoldertypeSendsignedtocolleague");
    openapiRequiredFields.add("bEzsignfoldertypeSendsummarytodocumentowner");
    openapiRequiredFields.add("bEzsignfoldertypeSendsummarytofolderowner");
    openapiRequiredFields.add("bEzsignfoldertypeSendsummarytocolleague");
    openapiRequiredFields.add("bEzsignfoldertypeIncludeproofsigner");
    openapiRequiredFields.add("bEzsignfoldertypeIncludeproofuser");
    openapiRequiredFields.add("bEzsignfoldertypeIsactive");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EzsignfoldertypeRequestCompound
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EzsignfoldertypeRequestCompound.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsignfoldertypeRequestCompound is not found in the empty JSON string", EzsignfoldertypeRequestCompound.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EzsignfoldertypeRequestCompound.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsignfoldertypeRequestCompound` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EzsignfoldertypeRequestCompound.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `objEzsignfoldertypeName`
      MultilingualEzsignfoldertypeName.validateJsonElement(jsonObj.get("objEzsignfoldertypeName"));
      if ((jsonObj.get("sEmailAddressSigned") != null && !jsonObj.get("sEmailAddressSigned").isJsonNull()) && !jsonObj.get("sEmailAddressSigned").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEmailAddressSigned` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEmailAddressSigned").toString()));
      }
      if ((jsonObj.get("sEmailAddressSummary") != null && !jsonObj.get("sEmailAddressSummary").isJsonNull()) && !jsonObj.get("sEmailAddressSummary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEmailAddressSummary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEmailAddressSummary").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("a_fkiUserIDSigned") != null && !jsonObj.get("a_fkiUserIDSigned").isJsonNull() && !jsonObj.get("a_fkiUserIDSigned").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_fkiUserIDSigned` to be an array in the JSON string but got `%s`", jsonObj.get("a_fkiUserIDSigned").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("a_fkiUserIDSummary") != null && !jsonObj.get("a_fkiUserIDSummary").isJsonNull() && !jsonObj.get("a_fkiUserIDSummary").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_fkiUserIDSummary` to be an array in the JSON string but got `%s`", jsonObj.get("a_fkiUserIDSummary").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsignfoldertypeRequestCompound.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsignfoldertypeRequestCompound' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsignfoldertypeRequestCompound> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsignfoldertypeRequestCompound.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsignfoldertypeRequestCompound>() {
           @Override
           public void write(JsonWriter out, EzsignfoldertypeRequestCompound value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsignfoldertypeRequestCompound read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EzsignfoldertypeRequestCompound given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EzsignfoldertypeRequestCompound
  * @throws IOException if the JSON string is invalid with respect to EzsignfoldertypeRequestCompound
  */
  public static EzsignfoldertypeRequestCompound fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsignfoldertypeRequestCompound.class);
  }

 /**
  * Convert an instance of EzsignfoldertypeRequestCompound to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

