/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.17
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * An Ezsigntemplatesignaturecustomdate Object
 */
@ApiModel(description = "An Ezsigntemplatesignaturecustomdate Object")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-03T19:05:29.285156139Z[Etc/UTC]")
public class EzsigntemplatesignaturecustomdateRequest {
  public static final String SERIALIZED_NAME_PKI_EZSIGNTEMPLATESIGNATURECUSTOMDATE_I_D = "pkiEzsigntemplatesignaturecustomdateID";
  @SerializedName(SERIALIZED_NAME_PKI_EZSIGNTEMPLATESIGNATURECUSTOMDATE_I_D)
  private Integer pkiEzsigntemplatesignaturecustomdateID;

  public static final String SERIALIZED_NAME_I_EZSIGNTEMPLATESIGNATURECUSTOMDATE_X = "iEzsigntemplatesignaturecustomdateX";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNTEMPLATESIGNATURECUSTOMDATE_X)
  private Integer iEzsigntemplatesignaturecustomdateX;

  public static final String SERIALIZED_NAME_I_EZSIGNTEMPLATESIGNATURECUSTOMDATE_Y = "iEzsigntemplatesignaturecustomdateY";
  @SerializedName(SERIALIZED_NAME_I_EZSIGNTEMPLATESIGNATURECUSTOMDATE_Y)
  private Integer iEzsigntemplatesignaturecustomdateY;

  public static final String SERIALIZED_NAME_S_EZSIGNTEMPLATESIGNATURECUSTOMDATE_FORMAT = "sEzsigntemplatesignaturecustomdateFormat";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNTEMPLATESIGNATURECUSTOMDATE_FORMAT)
  private String sEzsigntemplatesignaturecustomdateFormat;

  public EzsigntemplatesignaturecustomdateRequest() {
  }

  public EzsigntemplatesignaturecustomdateRequest pkiEzsigntemplatesignaturecustomdateID(Integer pkiEzsigntemplatesignaturecustomdateID) {
    
    this.pkiEzsigntemplatesignaturecustomdateID = pkiEzsigntemplatesignaturecustomdateID;
    return this;
  }

   /**
   * The unique ID of the Ezsigntemplatesignaturecustomdate
   * minimum: 0
   * @return pkiEzsigntemplatesignaturecustomdateID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "58", value = "The unique ID of the Ezsigntemplatesignaturecustomdate")

  public Integer getPkiEzsigntemplatesignaturecustomdateID() {
    return pkiEzsigntemplatesignaturecustomdateID;
  }


  public void setPkiEzsigntemplatesignaturecustomdateID(Integer pkiEzsigntemplatesignaturecustomdateID) {
    this.pkiEzsigntemplatesignaturecustomdateID = pkiEzsigntemplatesignaturecustomdateID;
  }


  public EzsigntemplatesignaturecustomdateRequest iEzsigntemplatesignaturecustomdateX(Integer iEzsigntemplatesignaturecustomdateX) {
    
    this.iEzsigntemplatesignaturecustomdateX = iEzsigntemplatesignaturecustomdateX;
    return this;
  }

   /**
   * The X coordinate (Horizontal) where to put the Ezsigntemplatesignaturecustomdate on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignaturecustomdate 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate.
   * minimum: 0
   * @return iEzsigntemplatesignaturecustomdateX
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "200", required = true, value = "The X coordinate (Horizontal) where to put the Ezsigntemplatesignaturecustomdate on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignaturecustomdate 2 inches from the left border of the page, you would use \"200\" for the X coordinate.")

  public Integer getiEzsigntemplatesignaturecustomdateX() {
    return iEzsigntemplatesignaturecustomdateX;
  }


  public void setiEzsigntemplatesignaturecustomdateX(Integer iEzsigntemplatesignaturecustomdateX) {
    this.iEzsigntemplatesignaturecustomdateX = iEzsigntemplatesignaturecustomdateX;
  }


  public EzsigntemplatesignaturecustomdateRequest iEzsigntemplatesignaturecustomdateY(Integer iEzsigntemplatesignaturecustomdateY) {
    
    this.iEzsigntemplatesignaturecustomdateY = iEzsigntemplatesignaturecustomdateY;
    return this;
  }

   /**
   * The Y coordinate (Vertical) where to put the Ezsigntemplatesignaturecustomdate on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignaturecustomdate 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate.
   * minimum: 0
   * @return iEzsigntemplatesignaturecustomdateY
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "300", required = true, value = "The Y coordinate (Vertical) where to put the Ezsigntemplatesignaturecustomdate on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignaturecustomdate 3 inches from the top border of the page, you would use \"300\" for the Y coordinate.")

  public Integer getiEzsigntemplatesignaturecustomdateY() {
    return iEzsigntemplatesignaturecustomdateY;
  }


  public void setiEzsigntemplatesignaturecustomdateY(Integer iEzsigntemplatesignaturecustomdateY) {
    this.iEzsigntemplatesignaturecustomdateY = iEzsigntemplatesignaturecustomdateY;
  }


  public EzsigntemplatesignaturecustomdateRequest sEzsigntemplatesignaturecustomdateFormat(String sEzsigntemplatesignaturecustomdateFormat) {
    
    this.sEzsigntemplatesignaturecustomdateFormat = sEzsigntemplatesignaturecustomdateFormat;
    return this;
  }

   /**
   * The custom date format to use  You can use the codes below and they will be replaced at signature time. Text values like month and day names will be rendered in the proper language. Other text will be left as-is.  The codes examples below are based on the following datetime: Thursday, January 6, 2022 at 08:07:09 EST  For example, the format \&quot;Signature date: {MM}/{DD}/{YYYY} {hh}:{mm}\&quot; would become \&quot;Signature date: 01/06/2022 08:07\&quot;  **Year**  | Code | Example | | - | - | | {YYYY} | 2022 | | {YY} | 22 |  **Month**  | Code | Example | | - | - | | {MonthCapitalize} | Janvier | | {Month} | janvier | | {MM} | 01 | | {M} | 1 |  **Day**  | Code | Example | | - | - | | {DayCapitalize} | Jeudi | | {Day} | jeudi | | {DD} | 06 | | {D} | 6 |  **Hour**  | Code | Example | | - | - | | {hh} | 08 |  **Minute**  | Code | Example | | - | - | | {mm} | 07 |  **Second**  | Code | Example | | - | - | | {ss} | 09 |        **Timezone**  | Code | Example | | - | - | | {Z} | EST |       **Time**  | Code | Example | | - | - | | {Time} | 08:07:09 |   | {TimeZ} | 08:07:09 EST |     **Date**  | Code | Example | | - | - | | {Date} | 2022-01-06 |   | {DateText} | 1er Janvier 2022 |  **Full**  | Code | Example | | - | - | | {DateTime} | 2022-01-06 08:07:09 |   | {DateTimeZ} | 2022-01-06 08:07:09 EST | 
   * @return sEzsigntemplatesignaturecustomdateFormat
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Signature date: {YYYY}/{MM}/{DD} {hh}:{mm}{ss} {Z}", required = true, value = "The custom date format to use  You can use the codes below and they will be replaced at signature time. Text values like month and day names will be rendered in the proper language. Other text will be left as-is.  The codes examples below are based on the following datetime: Thursday, January 6, 2022 at 08:07:09 EST  For example, the format \"Signature date: {MM}/{DD}/{YYYY} {hh}:{mm}\" would become \"Signature date: 01/06/2022 08:07\"  **Year**  | Code | Example | | - | - | | {YYYY} | 2022 | | {YY} | 22 |  **Month**  | Code | Example | | - | - | | {MonthCapitalize} | Janvier | | {Month} | janvier | | {MM} | 01 | | {M} | 1 |  **Day**  | Code | Example | | - | - | | {DayCapitalize} | Jeudi | | {Day} | jeudi | | {DD} | 06 | | {D} | 6 |  **Hour**  | Code | Example | | - | - | | {hh} | 08 |  **Minute**  | Code | Example | | - | - | | {mm} | 07 |  **Second**  | Code | Example | | - | - | | {ss} | 09 |        **Timezone**  | Code | Example | | - | - | | {Z} | EST |       **Time**  | Code | Example | | - | - | | {Time} | 08:07:09 |   | {TimeZ} | 08:07:09 EST |     **Date**  | Code | Example | | - | - | | {Date} | 2022-01-06 |   | {DateText} | 1er Janvier 2022 |  **Full**  | Code | Example | | - | - | | {DateTime} | 2022-01-06 08:07:09 |   | {DateTimeZ} | 2022-01-06 08:07:09 EST | ")

  public String getsEzsigntemplatesignaturecustomdateFormat() {
    return sEzsigntemplatesignaturecustomdateFormat;
  }


  public void setsEzsigntemplatesignaturecustomdateFormat(String sEzsigntemplatesignaturecustomdateFormat) {
    this.sEzsigntemplatesignaturecustomdateFormat = sEzsigntemplatesignaturecustomdateFormat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsigntemplatesignaturecustomdateRequest ezsigntemplatesignaturecustomdateRequest = (EzsigntemplatesignaturecustomdateRequest) o;
    return Objects.equals(this.pkiEzsigntemplatesignaturecustomdateID, ezsigntemplatesignaturecustomdateRequest.pkiEzsigntemplatesignaturecustomdateID) &&
        Objects.equals(this.iEzsigntemplatesignaturecustomdateX, ezsigntemplatesignaturecustomdateRequest.iEzsigntemplatesignaturecustomdateX) &&
        Objects.equals(this.iEzsigntemplatesignaturecustomdateY, ezsigntemplatesignaturecustomdateRequest.iEzsigntemplatesignaturecustomdateY) &&
        Objects.equals(this.sEzsigntemplatesignaturecustomdateFormat, ezsigntemplatesignaturecustomdateRequest.sEzsigntemplatesignaturecustomdateFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiEzsigntemplatesignaturecustomdateID, iEzsigntemplatesignaturecustomdateX, iEzsigntemplatesignaturecustomdateY, sEzsigntemplatesignaturecustomdateFormat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsigntemplatesignaturecustomdateRequest {\n");
    sb.append("    pkiEzsigntemplatesignaturecustomdateID: ").append(toIndentedString(pkiEzsigntemplatesignaturecustomdateID)).append("\n");
    sb.append("    iEzsigntemplatesignaturecustomdateX: ").append(toIndentedString(iEzsigntemplatesignaturecustomdateX)).append("\n");
    sb.append("    iEzsigntemplatesignaturecustomdateY: ").append(toIndentedString(iEzsigntemplatesignaturecustomdateY)).append("\n");
    sb.append("    sEzsigntemplatesignaturecustomdateFormat: ").append(toIndentedString(sEzsigntemplatesignaturecustomdateFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiEzsigntemplatesignaturecustomdateID");
    openapiFields.add("iEzsigntemplatesignaturecustomdateX");
    openapiFields.add("iEzsigntemplatesignaturecustomdateY");
    openapiFields.add("sEzsigntemplatesignaturecustomdateFormat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("iEzsigntemplatesignaturecustomdateX");
    openapiRequiredFields.add("iEzsigntemplatesignaturecustomdateY");
    openapiRequiredFields.add("sEzsigntemplatesignaturecustomdateFormat");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EzsigntemplatesignaturecustomdateRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EzsigntemplatesignaturecustomdateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsigntemplatesignaturecustomdateRequest is not found in the empty JSON string", EzsigntemplatesignaturecustomdateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EzsigntemplatesignaturecustomdateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsigntemplatesignaturecustomdateRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EzsigntemplatesignaturecustomdateRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("sEzsigntemplatesignaturecustomdateFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsigntemplatesignaturecustomdateFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsigntemplatesignaturecustomdateFormat").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsigntemplatesignaturecustomdateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsigntemplatesignaturecustomdateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsigntemplatesignaturecustomdateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsigntemplatesignaturecustomdateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsigntemplatesignaturecustomdateRequest>() {
           @Override
           public void write(JsonWriter out, EzsigntemplatesignaturecustomdateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsigntemplatesignaturecustomdateRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EzsigntemplatesignaturecustomdateRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EzsigntemplatesignaturecustomdateRequest
  * @throws IOException if the JSON string is invalid with respect to EzsigntemplatesignaturecustomdateRequest
  */
  public static EzsigntemplatesignaturecustomdateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsigntemplatesignaturecustomdateRequest.class);
  }

 /**
  * Convert an instance of EzsigntemplatesignaturecustomdateRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

