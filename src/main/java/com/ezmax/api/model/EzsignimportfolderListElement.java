/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api.model;

import java.util.Objects;
import com.ezmax.api.model.ComputedEEzsignimportfolderStatus;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eZmaxAPI.JSON;

/**
 * A Ezsignimportfolder List Element
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-07T19:20:13.445471985Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class EzsignimportfolderListElement {
  public static final String SERIALIZED_NAME_PKI_EZSIGNIMPORTFOLDER_I_D = "pkiEzsignimportfolderID";
  @SerializedName(SERIALIZED_NAME_PKI_EZSIGNIMPORTFOLDER_I_D)
  @javax.annotation.Nonnull
  private Integer pkiEzsignimportfolderID;

  public static final String SERIALIZED_NAME_S_EZSIGNIMPORTFOLDER_NAME = "sEzsignimportfolderName";
  @SerializedName(SERIALIZED_NAME_S_EZSIGNIMPORTFOLDER_NAME)
  @javax.annotation.Nonnull
  private String sEzsignimportfolderName;

  public static final String SERIALIZED_NAME_DT_CREATED_DATE = "dtCreatedDate";
  @SerializedName(SERIALIZED_NAME_DT_CREATED_DATE)
  @javax.annotation.Nullable
  private String dtCreatedDate;

  public static final String SERIALIZED_NAME_DT_MODIFIED_DATE = "dtModifiedDate";
  @SerializedName(SERIALIZED_NAME_DT_MODIFIED_DATE)
  @javax.annotation.Nullable
  private String dtModifiedDate;

  public static final String SERIALIZED_NAME_I_TOTAL_EZSIGNIMPORTDOCUMENT = "iTotalEzsignimportdocument";
  @SerializedName(SERIALIZED_NAME_I_TOTAL_EZSIGNIMPORTDOCUMENT)
  @javax.annotation.Nullable
  private Integer iTotalEzsignimportdocument;

  public static final String SERIALIZED_NAME_I_TOTAL_EZSIGNIMPORTDOCUMENT_NOT_IMPORTED = "iTotalEzsignimportdocumentNotImported";
  @SerializedName(SERIALIZED_NAME_I_TOTAL_EZSIGNIMPORTDOCUMENT_NOT_IMPORTED)
  @javax.annotation.Nullable
  private Integer iTotalEzsignimportdocumentNotImported;

  public static final String SERIALIZED_NAME_E_EZSIGNIMPORTFOLDER_STATUS = "eEzsignimportfolderStatus";
  @SerializedName(SERIALIZED_NAME_E_EZSIGNIMPORTFOLDER_STATUS)
  @javax.annotation.Nullable
  private ComputedEEzsignimportfolderStatus eEzsignimportfolderStatus;

  public EzsignimportfolderListElement() {
  }

  public EzsignimportfolderListElement pkiEzsignimportfolderID(@javax.annotation.Nonnull Integer pkiEzsignimportfolderID) {
    this.pkiEzsignimportfolderID = pkiEzsignimportfolderID;
    return this;
  }

  /**
   * The unique ID of the Ezsignimportfolder
   * minimum: 0
   * maximum: 16777215
   * @return pkiEzsignimportfolderID
   */
  @javax.annotation.Nonnull
  public Integer getPkiEzsignimportfolderID() {
    return pkiEzsignimportfolderID;
  }

  public void setPkiEzsignimportfolderID(@javax.annotation.Nonnull Integer pkiEzsignimportfolderID) {
    this.pkiEzsignimportfolderID = pkiEzsignimportfolderID;
  }


  public EzsignimportfolderListElement sEzsignimportfolderName(@javax.annotation.Nonnull String sEzsignimportfolderName) {
    this.sEzsignimportfolderName = sEzsignimportfolderName;
    return this;
  }

  /**
   * The name of the Ezsignimportfolder
   * @return sEzsignimportfolderName
   */
  @javax.annotation.Nonnull
  public String getsEzsignimportfolderName() {
    return sEzsignimportfolderName;
  }

  public void setsEzsignimportfolderName(@javax.annotation.Nonnull String sEzsignimportfolderName) {
    this.sEzsignimportfolderName = sEzsignimportfolderName;
  }


  public EzsignimportfolderListElement dtCreatedDate(@javax.annotation.Nullable String dtCreatedDate) {
    this.dtCreatedDate = dtCreatedDate;
    return this;
  }

  /**
   * The date and time at which the object was created
   * @return dtCreatedDate
   */
  @javax.annotation.Nullable
  public String getDtCreatedDate() {
    return dtCreatedDate;
  }

  public void setDtCreatedDate(@javax.annotation.Nullable String dtCreatedDate) {
    this.dtCreatedDate = dtCreatedDate;
  }


  public EzsignimportfolderListElement dtModifiedDate(@javax.annotation.Nullable String dtModifiedDate) {
    this.dtModifiedDate = dtModifiedDate;
    return this;
  }

  /**
   * The date and time at which the object was last modified
   * @return dtModifiedDate
   */
  @javax.annotation.Nullable
  public String getDtModifiedDate() {
    return dtModifiedDate;
  }

  public void setDtModifiedDate(@javax.annotation.Nullable String dtModifiedDate) {
    this.dtModifiedDate = dtModifiedDate;
  }


  public EzsignimportfolderListElement iTotalEzsignimportdocument(@javax.annotation.Nullable Integer iTotalEzsignimportdocument) {
    this.iTotalEzsignimportdocument = iTotalEzsignimportdocument;
    return this;
  }

  /**
   * The count of Ezsignimportdocument.
   * @return iTotalEzsignimportdocument
   */
  @javax.annotation.Nullable
  public Integer getiTotalEzsignimportdocument() {
    return iTotalEzsignimportdocument;
  }

  public void setiTotalEzsignimportdocument(@javax.annotation.Nullable Integer iTotalEzsignimportdocument) {
    this.iTotalEzsignimportdocument = iTotalEzsignimportdocument;
  }


  public EzsignimportfolderListElement iTotalEzsignimportdocumentNotImported(@javax.annotation.Nullable Integer iTotalEzsignimportdocumentNotImported) {
    this.iTotalEzsignimportdocumentNotImported = iTotalEzsignimportdocumentNotImported;
    return this;
  }

  /**
   * The count of Ezsignimportdocument not imported in an Ezsignfolder.
   * @return iTotalEzsignimportdocumentNotImported
   */
  @javax.annotation.Nullable
  public Integer getiTotalEzsignimportdocumentNotImported() {
    return iTotalEzsignimportdocumentNotImported;
  }

  public void setiTotalEzsignimportdocumentNotImported(@javax.annotation.Nullable Integer iTotalEzsignimportdocumentNotImported) {
    this.iTotalEzsignimportdocumentNotImported = iTotalEzsignimportdocumentNotImported;
  }


  public EzsignimportfolderListElement eEzsignimportfolderStatus(@javax.annotation.Nullable ComputedEEzsignimportfolderStatus eEzsignimportfolderStatus) {
    this.eEzsignimportfolderStatus = eEzsignimportfolderStatus;
    return this;
  }

  /**
   * Get eEzsignimportfolderStatus
   * @return eEzsignimportfolderStatus
   */
  @javax.annotation.Nullable
  public ComputedEEzsignimportfolderStatus geteEzsignimportfolderStatus() {
    return eEzsignimportfolderStatus;
  }

  public void seteEzsignimportfolderStatus(@javax.annotation.Nullable ComputedEEzsignimportfolderStatus eEzsignimportfolderStatus) {
    this.eEzsignimportfolderStatus = eEzsignimportfolderStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EzsignimportfolderListElement ezsignimportfolderListElement = (EzsignimportfolderListElement) o;
    return Objects.equals(this.pkiEzsignimportfolderID, ezsignimportfolderListElement.pkiEzsignimportfolderID) &&
        Objects.equals(this.sEzsignimportfolderName, ezsignimportfolderListElement.sEzsignimportfolderName) &&
        Objects.equals(this.dtCreatedDate, ezsignimportfolderListElement.dtCreatedDate) &&
        Objects.equals(this.dtModifiedDate, ezsignimportfolderListElement.dtModifiedDate) &&
        Objects.equals(this.iTotalEzsignimportdocument, ezsignimportfolderListElement.iTotalEzsignimportdocument) &&
        Objects.equals(this.iTotalEzsignimportdocumentNotImported, ezsignimportfolderListElement.iTotalEzsignimportdocumentNotImported) &&
        Objects.equals(this.eEzsignimportfolderStatus, ezsignimportfolderListElement.eEzsignimportfolderStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiEzsignimportfolderID, sEzsignimportfolderName, dtCreatedDate, dtModifiedDate, iTotalEzsignimportdocument, iTotalEzsignimportdocumentNotImported, eEzsignimportfolderStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EzsignimportfolderListElement {\n");
    sb.append("    pkiEzsignimportfolderID: ").append(toIndentedString(pkiEzsignimportfolderID)).append("\n");
    sb.append("    sEzsignimportfolderName: ").append(toIndentedString(sEzsignimportfolderName)).append("\n");
    sb.append("    dtCreatedDate: ").append(toIndentedString(dtCreatedDate)).append("\n");
    sb.append("    dtModifiedDate: ").append(toIndentedString(dtModifiedDate)).append("\n");
    sb.append("    iTotalEzsignimportdocument: ").append(toIndentedString(iTotalEzsignimportdocument)).append("\n");
    sb.append("    iTotalEzsignimportdocumentNotImported: ").append(toIndentedString(iTotalEzsignimportdocumentNotImported)).append("\n");
    sb.append("    eEzsignimportfolderStatus: ").append(toIndentedString(eEzsignimportfolderStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pkiEzsignimportfolderID");
    openapiFields.add("sEzsignimportfolderName");
    openapiFields.add("dtCreatedDate");
    openapiFields.add("dtModifiedDate");
    openapiFields.add("iTotalEzsignimportdocument");
    openapiFields.add("iTotalEzsignimportdocumentNotImported");
    openapiFields.add("eEzsignimportfolderStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pkiEzsignimportfolderID");
    openapiRequiredFields.add("sEzsignimportfolderName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EzsignimportfolderListElement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EzsignimportfolderListElement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EzsignimportfolderListElement is not found in the empty JSON string", EzsignimportfolderListElement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EzsignimportfolderListElement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EzsignimportfolderListElement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EzsignimportfolderListElement.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("sEzsignimportfolderName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sEzsignimportfolderName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sEzsignimportfolderName").toString()));
      }
      if ((jsonObj.get("dtCreatedDate") != null && !jsonObj.get("dtCreatedDate").isJsonNull()) && !jsonObj.get("dtCreatedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dtCreatedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dtCreatedDate").toString()));
      }
      if ((jsonObj.get("dtModifiedDate") != null && !jsonObj.get("dtModifiedDate").isJsonNull()) && !jsonObj.get("dtModifiedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dtModifiedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dtModifiedDate").toString()));
      }
      // validate the optional field `eEzsignimportfolderStatus`
      if (jsonObj.get("eEzsignimportfolderStatus") != null && !jsonObj.get("eEzsignimportfolderStatus").isJsonNull()) {
        ComputedEEzsignimportfolderStatus.validateJsonElement(jsonObj.get("eEzsignimportfolderStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EzsignimportfolderListElement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EzsignimportfolderListElement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EzsignimportfolderListElement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EzsignimportfolderListElement.class));

       return (TypeAdapter<T>) new TypeAdapter<EzsignimportfolderListElement>() {
           @Override
           public void write(JsonWriter out, EzsignimportfolderListElement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EzsignimportfolderListElement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EzsignimportfolderListElement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EzsignimportfolderListElement
   * @throws IOException if the JSON string is invalid with respect to EzsignimportfolderListElement
   */
  public static EzsignimportfolderListElement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EzsignimportfolderListElement.class);
  }

  /**
   * Convert an instance of EzsignimportfolderListElement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

