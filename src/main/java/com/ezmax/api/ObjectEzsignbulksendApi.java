/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api;

import eZmaxAPI.ApiCallback;
import eZmaxAPI.ApiClient;
import eZmaxAPI.ApiException;
import eZmaxAPI.ApiResponse;
import eZmaxAPI.Configuration;
import eZmaxAPI.Pair;
import eZmaxAPI.ProgressRequestBody;
import eZmaxAPI.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ezmax.api.model.CommonResponseError;
import com.ezmax.api.model.EzsignbulksendCreateEzsignbulksendtransmissionV1Request;
import com.ezmax.api.model.EzsignbulksendCreateEzsignbulksendtransmissionV1Response;
import com.ezmax.api.model.EzsignbulksendCreateObjectV1Request;
import com.ezmax.api.model.EzsignbulksendCreateObjectV1Response;
import com.ezmax.api.model.EzsignbulksendDeleteObjectV1Response;
import com.ezmax.api.model.EzsignbulksendEditObjectV1Request;
import com.ezmax.api.model.EzsignbulksendEditObjectV1Response;
import com.ezmax.api.model.EzsignbulksendGetEzsignbulksendtransmissionsV1Response;
import com.ezmax.api.model.EzsignbulksendGetEzsignsignaturesAutomaticV1Response;
import com.ezmax.api.model.EzsignbulksendGetFormsDataV1Response;
import com.ezmax.api.model.EzsignbulksendGetListV1Response;
import com.ezmax.api.model.EzsignbulksendGetObjectV2Response;
import com.ezmax.api.model.EzsignbulksendReorderV1Request;
import com.ezmax.api.model.EzsignbulksendReorderV1Response;
import java.io.File;
import com.ezmax.api.model.HeaderAcceptLanguage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ObjectEzsignbulksendApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ObjectEzsignbulksendApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ObjectEzsignbulksendApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for ezsignbulksendCreateEzsignbulksendtransmissionV1
     * @param pkiEzsignbulksendID  (required)
     * @param ezsignbulksendCreateEzsignbulksendtransmissionV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignbulksendCreateEzsignbulksendtransmissionV1Call(Integer pkiEzsignbulksendID, EzsignbulksendCreateEzsignbulksendtransmissionV1Request ezsignbulksendCreateEzsignbulksendtransmissionV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezsignbulksendCreateEzsignbulksendtransmissionV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezsignbulksend/{pkiEzsignbulksendID}/createEzsignbulksendtransmission"
            .replace("{" + "pkiEzsignbulksendID" + "}", localVarApiClient.escapeString(pkiEzsignbulksendID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsignbulksendCreateEzsignbulksendtransmissionV1ValidateBeforeCall(Integer pkiEzsignbulksendID, EzsignbulksendCreateEzsignbulksendtransmissionV1Request ezsignbulksendCreateEzsignbulksendtransmissionV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiEzsignbulksendID' is set
        if (pkiEzsignbulksendID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsignbulksendID' when calling ezsignbulksendCreateEzsignbulksendtransmissionV1(Async)");
        }

        // verify the required parameter 'ezsignbulksendCreateEzsignbulksendtransmissionV1Request' is set
        if (ezsignbulksendCreateEzsignbulksendtransmissionV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezsignbulksendCreateEzsignbulksendtransmissionV1Request' when calling ezsignbulksendCreateEzsignbulksendtransmissionV1(Async)");
        }

        return ezsignbulksendCreateEzsignbulksendtransmissionV1Call(pkiEzsignbulksendID, ezsignbulksendCreateEzsignbulksendtransmissionV1Request, _callback);

    }

    /**
     * Create a new Ezsignbulksendtransmission in the Ezsignbulksend
     * 
     * @param pkiEzsignbulksendID  (required)
     * @param ezsignbulksendCreateEzsignbulksendtransmissionV1Request  (required)
     * @return EzsignbulksendCreateEzsignbulksendtransmissionV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsignbulksendCreateEzsignbulksendtransmissionV1Response ezsignbulksendCreateEzsignbulksendtransmissionV1(Integer pkiEzsignbulksendID, EzsignbulksendCreateEzsignbulksendtransmissionV1Request ezsignbulksendCreateEzsignbulksendtransmissionV1Request) throws ApiException {
        ApiResponse<EzsignbulksendCreateEzsignbulksendtransmissionV1Response> localVarResp = ezsignbulksendCreateEzsignbulksendtransmissionV1WithHttpInfo(pkiEzsignbulksendID, ezsignbulksendCreateEzsignbulksendtransmissionV1Request);
        return localVarResp.getData();
    }

    /**
     * Create a new Ezsignbulksendtransmission in the Ezsignbulksend
     * 
     * @param pkiEzsignbulksendID  (required)
     * @param ezsignbulksendCreateEzsignbulksendtransmissionV1Request  (required)
     * @return ApiResponse&lt;EzsignbulksendCreateEzsignbulksendtransmissionV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsignbulksendCreateEzsignbulksendtransmissionV1Response> ezsignbulksendCreateEzsignbulksendtransmissionV1WithHttpInfo(Integer pkiEzsignbulksendID, EzsignbulksendCreateEzsignbulksendtransmissionV1Request ezsignbulksendCreateEzsignbulksendtransmissionV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezsignbulksendCreateEzsignbulksendtransmissionV1ValidateBeforeCall(pkiEzsignbulksendID, ezsignbulksendCreateEzsignbulksendtransmissionV1Request, null);
        Type localVarReturnType = new TypeToken<EzsignbulksendCreateEzsignbulksendtransmissionV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Ezsignbulksendtransmission in the Ezsignbulksend (asynchronously)
     * 
     * @param pkiEzsignbulksendID  (required)
     * @param ezsignbulksendCreateEzsignbulksendtransmissionV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignbulksendCreateEzsignbulksendtransmissionV1Async(Integer pkiEzsignbulksendID, EzsignbulksendCreateEzsignbulksendtransmissionV1Request ezsignbulksendCreateEzsignbulksendtransmissionV1Request, final ApiCallback<EzsignbulksendCreateEzsignbulksendtransmissionV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsignbulksendCreateEzsignbulksendtransmissionV1ValidateBeforeCall(pkiEzsignbulksendID, ezsignbulksendCreateEzsignbulksendtransmissionV1Request, _callback);
        Type localVarReturnType = new TypeToken<EzsignbulksendCreateEzsignbulksendtransmissionV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsignbulksendCreateObjectV1
     * @param ezsignbulksendCreateObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignbulksendCreateObjectV1Call(EzsignbulksendCreateObjectV1Request ezsignbulksendCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezsignbulksendCreateObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezsignbulksend";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsignbulksendCreateObjectV1ValidateBeforeCall(EzsignbulksendCreateObjectV1Request ezsignbulksendCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ezsignbulksendCreateObjectV1Request' is set
        if (ezsignbulksendCreateObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezsignbulksendCreateObjectV1Request' when calling ezsignbulksendCreateObjectV1(Async)");
        }

        return ezsignbulksendCreateObjectV1Call(ezsignbulksendCreateObjectV1Request, _callback);

    }

    /**
     * Create a new Ezsignbulksend
     * The endpoint allows to create one or many elements at once.
     * @param ezsignbulksendCreateObjectV1Request  (required)
     * @return EzsignbulksendCreateObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EzsignbulksendCreateObjectV1Response ezsignbulksendCreateObjectV1(EzsignbulksendCreateObjectV1Request ezsignbulksendCreateObjectV1Request) throws ApiException {
        ApiResponse<EzsignbulksendCreateObjectV1Response> localVarResp = ezsignbulksendCreateObjectV1WithHttpInfo(ezsignbulksendCreateObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Create a new Ezsignbulksend
     * The endpoint allows to create one or many elements at once.
     * @param ezsignbulksendCreateObjectV1Request  (required)
     * @return ApiResponse&lt;EzsignbulksendCreateObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsignbulksendCreateObjectV1Response> ezsignbulksendCreateObjectV1WithHttpInfo(EzsignbulksendCreateObjectV1Request ezsignbulksendCreateObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezsignbulksendCreateObjectV1ValidateBeforeCall(ezsignbulksendCreateObjectV1Request, null);
        Type localVarReturnType = new TypeToken<EzsignbulksendCreateObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Ezsignbulksend (asynchronously)
     * The endpoint allows to create one or many elements at once.
     * @param ezsignbulksendCreateObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignbulksendCreateObjectV1Async(EzsignbulksendCreateObjectV1Request ezsignbulksendCreateObjectV1Request, final ApiCallback<EzsignbulksendCreateObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsignbulksendCreateObjectV1ValidateBeforeCall(ezsignbulksendCreateObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<EzsignbulksendCreateObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsignbulksendDeleteObjectV1
     * @param pkiEzsignbulksendID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignbulksendDeleteObjectV1Call(Integer pkiEzsignbulksendID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/ezsignbulksend/{pkiEzsignbulksendID}"
            .replace("{" + "pkiEzsignbulksendID" + "}", localVarApiClient.escapeString(pkiEzsignbulksendID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsignbulksendDeleteObjectV1ValidateBeforeCall(Integer pkiEzsignbulksendID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiEzsignbulksendID' is set
        if (pkiEzsignbulksendID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsignbulksendID' when calling ezsignbulksendDeleteObjectV1(Async)");
        }

        return ezsignbulksendDeleteObjectV1Call(pkiEzsignbulksendID, _callback);

    }

    /**
     * Delete an existing Ezsignbulksend
     * 
     * @param pkiEzsignbulksendID  (required)
     * @return EzsignbulksendDeleteObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsignbulksendDeleteObjectV1Response ezsignbulksendDeleteObjectV1(Integer pkiEzsignbulksendID) throws ApiException {
        ApiResponse<EzsignbulksendDeleteObjectV1Response> localVarResp = ezsignbulksendDeleteObjectV1WithHttpInfo(pkiEzsignbulksendID);
        return localVarResp.getData();
    }

    /**
     * Delete an existing Ezsignbulksend
     * 
     * @param pkiEzsignbulksendID  (required)
     * @return ApiResponse&lt;EzsignbulksendDeleteObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsignbulksendDeleteObjectV1Response> ezsignbulksendDeleteObjectV1WithHttpInfo(Integer pkiEzsignbulksendID) throws ApiException {
        okhttp3.Call localVarCall = ezsignbulksendDeleteObjectV1ValidateBeforeCall(pkiEzsignbulksendID, null);
        Type localVarReturnType = new TypeToken<EzsignbulksendDeleteObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an existing Ezsignbulksend (asynchronously)
     * 
     * @param pkiEzsignbulksendID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignbulksendDeleteObjectV1Async(Integer pkiEzsignbulksendID, final ApiCallback<EzsignbulksendDeleteObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsignbulksendDeleteObjectV1ValidateBeforeCall(pkiEzsignbulksendID, _callback);
        Type localVarReturnType = new TypeToken<EzsignbulksendDeleteObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsignbulksendEditObjectV1
     * @param pkiEzsignbulksendID  (required)
     * @param ezsignbulksendEditObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignbulksendEditObjectV1Call(Integer pkiEzsignbulksendID, EzsignbulksendEditObjectV1Request ezsignbulksendEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezsignbulksendEditObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezsignbulksend/{pkiEzsignbulksendID}"
            .replace("{" + "pkiEzsignbulksendID" + "}", localVarApiClient.escapeString(pkiEzsignbulksendID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsignbulksendEditObjectV1ValidateBeforeCall(Integer pkiEzsignbulksendID, EzsignbulksendEditObjectV1Request ezsignbulksendEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiEzsignbulksendID' is set
        if (pkiEzsignbulksendID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsignbulksendID' when calling ezsignbulksendEditObjectV1(Async)");
        }

        // verify the required parameter 'ezsignbulksendEditObjectV1Request' is set
        if (ezsignbulksendEditObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezsignbulksendEditObjectV1Request' when calling ezsignbulksendEditObjectV1(Async)");
        }

        return ezsignbulksendEditObjectV1Call(pkiEzsignbulksendID, ezsignbulksendEditObjectV1Request, _callback);

    }

    /**
     * Edit an existing Ezsignbulksend
     * 
     * @param pkiEzsignbulksendID  (required)
     * @param ezsignbulksendEditObjectV1Request  (required)
     * @return EzsignbulksendEditObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsignbulksendEditObjectV1Response ezsignbulksendEditObjectV1(Integer pkiEzsignbulksendID, EzsignbulksendEditObjectV1Request ezsignbulksendEditObjectV1Request) throws ApiException {
        ApiResponse<EzsignbulksendEditObjectV1Response> localVarResp = ezsignbulksendEditObjectV1WithHttpInfo(pkiEzsignbulksendID, ezsignbulksendEditObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Edit an existing Ezsignbulksend
     * 
     * @param pkiEzsignbulksendID  (required)
     * @param ezsignbulksendEditObjectV1Request  (required)
     * @return ApiResponse&lt;EzsignbulksendEditObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsignbulksendEditObjectV1Response> ezsignbulksendEditObjectV1WithHttpInfo(Integer pkiEzsignbulksendID, EzsignbulksendEditObjectV1Request ezsignbulksendEditObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezsignbulksendEditObjectV1ValidateBeforeCall(pkiEzsignbulksendID, ezsignbulksendEditObjectV1Request, null);
        Type localVarReturnType = new TypeToken<EzsignbulksendEditObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit an existing Ezsignbulksend (asynchronously)
     * 
     * @param pkiEzsignbulksendID  (required)
     * @param ezsignbulksendEditObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignbulksendEditObjectV1Async(Integer pkiEzsignbulksendID, EzsignbulksendEditObjectV1Request ezsignbulksendEditObjectV1Request, final ApiCallback<EzsignbulksendEditObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsignbulksendEditObjectV1ValidateBeforeCall(pkiEzsignbulksendID, ezsignbulksendEditObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<EzsignbulksendEditObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsignbulksendGetCsvTemplateV1
     * @param pkiEzsignbulksendID  (required)
     * @param eCsvSeparator Separator that will be used to separate fields (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignbulksendGetCsvTemplateV1Call(Integer pkiEzsignbulksendID, String eCsvSeparator, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/ezsignbulksend/{pkiEzsignbulksendID}/getCsvTemplate"
            .replace("{" + "pkiEzsignbulksendID" + "}", localVarApiClient.escapeString(pkiEzsignbulksendID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eCsvSeparator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eCsvSeparator", eCsvSeparator));
        }

        final String[] localVarAccepts = {
            "text/csv",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsignbulksendGetCsvTemplateV1ValidateBeforeCall(Integer pkiEzsignbulksendID, String eCsvSeparator, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiEzsignbulksendID' is set
        if (pkiEzsignbulksendID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsignbulksendID' when calling ezsignbulksendGetCsvTemplateV1(Async)");
        }

        // verify the required parameter 'eCsvSeparator' is set
        if (eCsvSeparator == null) {
            throw new ApiException("Missing the required parameter 'eCsvSeparator' when calling ezsignbulksendGetCsvTemplateV1(Async)");
        }

        return ezsignbulksendGetCsvTemplateV1Call(pkiEzsignbulksendID, eCsvSeparator, _callback);

    }

    /**
     * Retrieve an existing Ezsignbulksend&#39;s empty Csv template
     * 
     * @param pkiEzsignbulksendID  (required)
     * @param eCsvSeparator Separator that will be used to separate fields (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public String ezsignbulksendGetCsvTemplateV1(Integer pkiEzsignbulksendID, String eCsvSeparator) throws ApiException {
        ApiResponse<String> localVarResp = ezsignbulksendGetCsvTemplateV1WithHttpInfo(pkiEzsignbulksendID, eCsvSeparator);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Ezsignbulksend&#39;s empty Csv template
     * 
     * @param pkiEzsignbulksendID  (required)
     * @param eCsvSeparator Separator that will be used to separate fields (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> ezsignbulksendGetCsvTemplateV1WithHttpInfo(Integer pkiEzsignbulksendID, String eCsvSeparator) throws ApiException {
        okhttp3.Call localVarCall = ezsignbulksendGetCsvTemplateV1ValidateBeforeCall(pkiEzsignbulksendID, eCsvSeparator, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Ezsignbulksend&#39;s empty Csv template (asynchronously)
     * 
     * @param pkiEzsignbulksendID  (required)
     * @param eCsvSeparator Separator that will be used to separate fields (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignbulksendGetCsvTemplateV1Async(Integer pkiEzsignbulksendID, String eCsvSeparator, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsignbulksendGetCsvTemplateV1ValidateBeforeCall(pkiEzsignbulksendID, eCsvSeparator, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsignbulksendGetEzsignbulksendtransmissionsV1
     * @param pkiEzsignbulksendID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignbulksendGetEzsignbulksendtransmissionsV1Call(Integer pkiEzsignbulksendID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/ezsignbulksend/{pkiEzsignbulksendID}/getEzsignbulksendtransmissions"
            .replace("{" + "pkiEzsignbulksendID" + "}", localVarApiClient.escapeString(pkiEzsignbulksendID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsignbulksendGetEzsignbulksendtransmissionsV1ValidateBeforeCall(Integer pkiEzsignbulksendID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiEzsignbulksendID' is set
        if (pkiEzsignbulksendID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsignbulksendID' when calling ezsignbulksendGetEzsignbulksendtransmissionsV1(Async)");
        }

        return ezsignbulksendGetEzsignbulksendtransmissionsV1Call(pkiEzsignbulksendID, _callback);

    }

    /**
     * Retrieve an existing Ezsignbulksend&#39;s Ezsignbulksendtransmissions
     * 
     * @param pkiEzsignbulksendID  (required)
     * @return EzsignbulksendGetEzsignbulksendtransmissionsV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsignbulksendGetEzsignbulksendtransmissionsV1Response ezsignbulksendGetEzsignbulksendtransmissionsV1(Integer pkiEzsignbulksendID) throws ApiException {
        ApiResponse<EzsignbulksendGetEzsignbulksendtransmissionsV1Response> localVarResp = ezsignbulksendGetEzsignbulksendtransmissionsV1WithHttpInfo(pkiEzsignbulksendID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Ezsignbulksend&#39;s Ezsignbulksendtransmissions
     * 
     * @param pkiEzsignbulksendID  (required)
     * @return ApiResponse&lt;EzsignbulksendGetEzsignbulksendtransmissionsV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsignbulksendGetEzsignbulksendtransmissionsV1Response> ezsignbulksendGetEzsignbulksendtransmissionsV1WithHttpInfo(Integer pkiEzsignbulksendID) throws ApiException {
        okhttp3.Call localVarCall = ezsignbulksendGetEzsignbulksendtransmissionsV1ValidateBeforeCall(pkiEzsignbulksendID, null);
        Type localVarReturnType = new TypeToken<EzsignbulksendGetEzsignbulksendtransmissionsV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Ezsignbulksend&#39;s Ezsignbulksendtransmissions (asynchronously)
     * 
     * @param pkiEzsignbulksendID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignbulksendGetEzsignbulksendtransmissionsV1Async(Integer pkiEzsignbulksendID, final ApiCallback<EzsignbulksendGetEzsignbulksendtransmissionsV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsignbulksendGetEzsignbulksendtransmissionsV1ValidateBeforeCall(pkiEzsignbulksendID, _callback);
        Type localVarReturnType = new TypeToken<EzsignbulksendGetEzsignbulksendtransmissionsV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsignbulksendGetEzsignsignaturesAutomaticV1
     * @param pkiEzsignbulksendID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignbulksendGetEzsignsignaturesAutomaticV1Call(Integer pkiEzsignbulksendID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/ezsignbulksend/{pkiEzsignbulksendID}/getEzsignsignaturesAutomatic"
            .replace("{" + "pkiEzsignbulksendID" + "}", localVarApiClient.escapeString(pkiEzsignbulksendID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsignbulksendGetEzsignsignaturesAutomaticV1ValidateBeforeCall(Integer pkiEzsignbulksendID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiEzsignbulksendID' is set
        if (pkiEzsignbulksendID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsignbulksendID' when calling ezsignbulksendGetEzsignsignaturesAutomaticV1(Async)");
        }

        return ezsignbulksendGetEzsignsignaturesAutomaticV1Call(pkiEzsignbulksendID, _callback);

    }

    /**
     * Retrieve an existing Ezsignbulksend&#39;s automatic Ezsignsignatures
     * Return the Ezsignsignatures that can be signed by the current user at the current step in the process
     * @param pkiEzsignbulksendID  (required)
     * @return EzsignbulksendGetEzsignsignaturesAutomaticV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsignbulksendGetEzsignsignaturesAutomaticV1Response ezsignbulksendGetEzsignsignaturesAutomaticV1(Integer pkiEzsignbulksendID) throws ApiException {
        ApiResponse<EzsignbulksendGetEzsignsignaturesAutomaticV1Response> localVarResp = ezsignbulksendGetEzsignsignaturesAutomaticV1WithHttpInfo(pkiEzsignbulksendID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Ezsignbulksend&#39;s automatic Ezsignsignatures
     * Return the Ezsignsignatures that can be signed by the current user at the current step in the process
     * @param pkiEzsignbulksendID  (required)
     * @return ApiResponse&lt;EzsignbulksendGetEzsignsignaturesAutomaticV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsignbulksendGetEzsignsignaturesAutomaticV1Response> ezsignbulksendGetEzsignsignaturesAutomaticV1WithHttpInfo(Integer pkiEzsignbulksendID) throws ApiException {
        okhttp3.Call localVarCall = ezsignbulksendGetEzsignsignaturesAutomaticV1ValidateBeforeCall(pkiEzsignbulksendID, null);
        Type localVarReturnType = new TypeToken<EzsignbulksendGetEzsignsignaturesAutomaticV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Ezsignbulksend&#39;s automatic Ezsignsignatures (asynchronously)
     * Return the Ezsignsignatures that can be signed by the current user at the current step in the process
     * @param pkiEzsignbulksendID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignbulksendGetEzsignsignaturesAutomaticV1Async(Integer pkiEzsignbulksendID, final ApiCallback<EzsignbulksendGetEzsignsignaturesAutomaticV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsignbulksendGetEzsignsignaturesAutomaticV1ValidateBeforeCall(pkiEzsignbulksendID, _callback);
        Type localVarReturnType = new TypeToken<EzsignbulksendGetEzsignsignaturesAutomaticV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsignbulksendGetFormsDataV1
     * @param pkiEzsignbulksendID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignbulksendGetFormsDataV1Call(Integer pkiEzsignbulksendID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/ezsignbulksend/{pkiEzsignbulksendID}/getFormsData"
            .replace("{" + "pkiEzsignbulksendID" + "}", localVarApiClient.escapeString(pkiEzsignbulksendID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/zip"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsignbulksendGetFormsDataV1ValidateBeforeCall(Integer pkiEzsignbulksendID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiEzsignbulksendID' is set
        if (pkiEzsignbulksendID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsignbulksendID' when calling ezsignbulksendGetFormsDataV1(Async)");
        }

        return ezsignbulksendGetFormsDataV1Call(pkiEzsignbulksendID, _callback);

    }

    /**
     * Retrieve an existing Ezsignbulksend&#39;s forms data
     * 
     * @param pkiEzsignbulksendID  (required)
     * @return EzsignbulksendGetFormsDataV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsignbulksendGetFormsDataV1Response ezsignbulksendGetFormsDataV1(Integer pkiEzsignbulksendID) throws ApiException {
        ApiResponse<EzsignbulksendGetFormsDataV1Response> localVarResp = ezsignbulksendGetFormsDataV1WithHttpInfo(pkiEzsignbulksendID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Ezsignbulksend&#39;s forms data
     * 
     * @param pkiEzsignbulksendID  (required)
     * @return ApiResponse&lt;EzsignbulksendGetFormsDataV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsignbulksendGetFormsDataV1Response> ezsignbulksendGetFormsDataV1WithHttpInfo(Integer pkiEzsignbulksendID) throws ApiException {
        okhttp3.Call localVarCall = ezsignbulksendGetFormsDataV1ValidateBeforeCall(pkiEzsignbulksendID, null);
        Type localVarReturnType = new TypeToken<EzsignbulksendGetFormsDataV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Ezsignbulksend&#39;s forms data (asynchronously)
     * 
     * @param pkiEzsignbulksendID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignbulksendGetFormsDataV1Async(Integer pkiEzsignbulksendID, final ApiCallback<EzsignbulksendGetFormsDataV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsignbulksendGetFormsDataV1ValidateBeforeCall(pkiEzsignbulksendID, _callback);
        Type localVarReturnType = new TypeToken<EzsignbulksendGetFormsDataV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsignbulksendGetListV1
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignbulksendGetListV1Call(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/ezsignbulksend/getList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eOrderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eOrderBy", eOrderBy));
        }

        if (iRowMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iRowMax", iRowMax));
        }

        if (iRowOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iRowOffset", iRowOffset));
        }

        if (sFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sFilter", sFilter));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsignbulksendGetListV1ValidateBeforeCall(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter, final ApiCallback _callback) throws ApiException {
        return ezsignbulksendGetListV1Call(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, _callback);

    }

    /**
     * Retrieve Ezsignbulksend list
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsignfoldertypePrivacylevel | User&lt;br&gt;Usergroup |
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return EzsignbulksendGetListV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public EzsignbulksendGetListV1Response ezsignbulksendGetListV1(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter) throws ApiException {
        ApiResponse<EzsignbulksendGetListV1Response> localVarResp = ezsignbulksendGetListV1WithHttpInfo(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter);
        return localVarResp.getData();
    }

    /**
     * Retrieve Ezsignbulksend list
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsignfoldertypePrivacylevel | User&lt;br&gt;Usergroup |
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return ApiResponse&lt;EzsignbulksendGetListV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsignbulksendGetListV1Response> ezsignbulksendGetListV1WithHttpInfo(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter) throws ApiException {
        okhttp3.Call localVarCall = ezsignbulksendGetListV1ValidateBeforeCall(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, null);
        Type localVarReturnType = new TypeToken<EzsignbulksendGetListV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Ezsignbulksend list (asynchronously)
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsignfoldertypePrivacylevel | User&lt;br&gt;Usergroup |
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignbulksendGetListV1Async(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter, final ApiCallback<EzsignbulksendGetListV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsignbulksendGetListV1ValidateBeforeCall(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, _callback);
        Type localVarReturnType = new TypeToken<EzsignbulksendGetListV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsignbulksendGetObjectV2
     * @param pkiEzsignbulksendID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignbulksendGetObjectV2Call(Integer pkiEzsignbulksendID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/object/ezsignbulksend/{pkiEzsignbulksendID}"
            .replace("{" + "pkiEzsignbulksendID" + "}", localVarApiClient.escapeString(pkiEzsignbulksendID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsignbulksendGetObjectV2ValidateBeforeCall(Integer pkiEzsignbulksendID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiEzsignbulksendID' is set
        if (pkiEzsignbulksendID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsignbulksendID' when calling ezsignbulksendGetObjectV2(Async)");
        }

        return ezsignbulksendGetObjectV2Call(pkiEzsignbulksendID, _callback);

    }

    /**
     * Retrieve an existing Ezsignbulksend
     * 
     * @param pkiEzsignbulksendID  (required)
     * @return EzsignbulksendGetObjectV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsignbulksendGetObjectV2Response ezsignbulksendGetObjectV2(Integer pkiEzsignbulksendID) throws ApiException {
        ApiResponse<EzsignbulksendGetObjectV2Response> localVarResp = ezsignbulksendGetObjectV2WithHttpInfo(pkiEzsignbulksendID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Ezsignbulksend
     * 
     * @param pkiEzsignbulksendID  (required)
     * @return ApiResponse&lt;EzsignbulksendGetObjectV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsignbulksendGetObjectV2Response> ezsignbulksendGetObjectV2WithHttpInfo(Integer pkiEzsignbulksendID) throws ApiException {
        okhttp3.Call localVarCall = ezsignbulksendGetObjectV2ValidateBeforeCall(pkiEzsignbulksendID, null);
        Type localVarReturnType = new TypeToken<EzsignbulksendGetObjectV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Ezsignbulksend (asynchronously)
     * 
     * @param pkiEzsignbulksendID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignbulksendGetObjectV2Async(Integer pkiEzsignbulksendID, final ApiCallback<EzsignbulksendGetObjectV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsignbulksendGetObjectV2ValidateBeforeCall(pkiEzsignbulksendID, _callback);
        Type localVarReturnType = new TypeToken<EzsignbulksendGetObjectV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsignbulksendReorderV1
     * @param pkiEzsignbulksendID  (required)
     * @param ezsignbulksendReorderV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignbulksendReorderV1Call(Integer pkiEzsignbulksendID, EzsignbulksendReorderV1Request ezsignbulksendReorderV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezsignbulksendReorderV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezsignbulksend/{pkiEzsignbulksendID}/reorder"
            .replace("{" + "pkiEzsignbulksendID" + "}", localVarApiClient.escapeString(pkiEzsignbulksendID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsignbulksendReorderV1ValidateBeforeCall(Integer pkiEzsignbulksendID, EzsignbulksendReorderV1Request ezsignbulksendReorderV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiEzsignbulksendID' is set
        if (pkiEzsignbulksendID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsignbulksendID' when calling ezsignbulksendReorderV1(Async)");
        }

        // verify the required parameter 'ezsignbulksendReorderV1Request' is set
        if (ezsignbulksendReorderV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezsignbulksendReorderV1Request' when calling ezsignbulksendReorderV1(Async)");
        }

        return ezsignbulksendReorderV1Call(pkiEzsignbulksendID, ezsignbulksendReorderV1Request, _callback);

    }

    /**
     * Reorder Ezsignbulksenddocumentmappings in the Ezsignbulksend
     * 
     * @param pkiEzsignbulksendID  (required)
     * @param ezsignbulksendReorderV1Request  (required)
     * @return EzsignbulksendReorderV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsignbulksendReorderV1Response ezsignbulksendReorderV1(Integer pkiEzsignbulksendID, EzsignbulksendReorderV1Request ezsignbulksendReorderV1Request) throws ApiException {
        ApiResponse<EzsignbulksendReorderV1Response> localVarResp = ezsignbulksendReorderV1WithHttpInfo(pkiEzsignbulksendID, ezsignbulksendReorderV1Request);
        return localVarResp.getData();
    }

    /**
     * Reorder Ezsignbulksenddocumentmappings in the Ezsignbulksend
     * 
     * @param pkiEzsignbulksendID  (required)
     * @param ezsignbulksendReorderV1Request  (required)
     * @return ApiResponse&lt;EzsignbulksendReorderV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsignbulksendReorderV1Response> ezsignbulksendReorderV1WithHttpInfo(Integer pkiEzsignbulksendID, EzsignbulksendReorderV1Request ezsignbulksendReorderV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezsignbulksendReorderV1ValidateBeforeCall(pkiEzsignbulksendID, ezsignbulksendReorderV1Request, null);
        Type localVarReturnType = new TypeToken<EzsignbulksendReorderV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reorder Ezsignbulksenddocumentmappings in the Ezsignbulksend (asynchronously)
     * 
     * @param pkiEzsignbulksendID  (required)
     * @param ezsignbulksendReorderV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsignbulksendReorderV1Async(Integer pkiEzsignbulksendID, EzsignbulksendReorderV1Request ezsignbulksendReorderV1Request, final ApiCallback<EzsignbulksendReorderV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsignbulksendReorderV1ValidateBeforeCall(pkiEzsignbulksendID, ezsignbulksendReorderV1Request, _callback);
        Type localVarReturnType = new TypeToken<EzsignbulksendReorderV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
