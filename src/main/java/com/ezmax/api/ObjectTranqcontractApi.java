/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api;

import eZmaxAPI.ApiCallback;
import eZmaxAPI.ApiClient;
import eZmaxAPI.ApiException;
import eZmaxAPI.ApiResponse;
import eZmaxAPI.Configuration;
import eZmaxAPI.Pair;
import eZmaxAPI.ProgressRequestBody;
import eZmaxAPI.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ezmax.api.model.CommonResponseError;
import com.ezmax.api.model.TranqcontractGetCommunicationCountV1Response;
import com.ezmax.api.model.TranqcontractGetCommunicationListV1Response;
import com.ezmax.api.model.TranqcontractGetCommunicationrecipientsV1Response;
import com.ezmax.api.model.TranqcontractGetCommunicationsendersV1Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ObjectTranqcontractApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ObjectTranqcontractApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ObjectTranqcontractApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for tranqcontractGetCommunicationCountV1
     * @param pkiTranqcontractID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tranqcontractGetCommunicationCountV1Call(Integer pkiTranqcontractID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/tranqcontract/{pkiTranqcontractID}/getCommunicationCount"
            .replace("{" + "pkiTranqcontractID" + "}", localVarApiClient.escapeString(pkiTranqcontractID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tranqcontractGetCommunicationCountV1ValidateBeforeCall(Integer pkiTranqcontractID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiTranqcontractID' is set
        if (pkiTranqcontractID == null) {
            throw new ApiException("Missing the required parameter 'pkiTranqcontractID' when calling tranqcontractGetCommunicationCountV1(Async)");
        }

        return tranqcontractGetCommunicationCountV1Call(pkiTranqcontractID, _callback);

    }

    /**
     * Retrieve Communication count
     * 
     * @param pkiTranqcontractID  (required)
     * @return TranqcontractGetCommunicationCountV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public TranqcontractGetCommunicationCountV1Response tranqcontractGetCommunicationCountV1(Integer pkiTranqcontractID) throws ApiException {
        ApiResponse<TranqcontractGetCommunicationCountV1Response> localVarResp = tranqcontractGetCommunicationCountV1WithHttpInfo(pkiTranqcontractID);
        return localVarResp.getData();
    }

    /**
     * Retrieve Communication count
     * 
     * @param pkiTranqcontractID  (required)
     * @return ApiResponse&lt;TranqcontractGetCommunicationCountV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TranqcontractGetCommunicationCountV1Response> tranqcontractGetCommunicationCountV1WithHttpInfo(Integer pkiTranqcontractID) throws ApiException {
        okhttp3.Call localVarCall = tranqcontractGetCommunicationCountV1ValidateBeforeCall(pkiTranqcontractID, null);
        Type localVarReturnType = new TypeToken<TranqcontractGetCommunicationCountV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Communication count (asynchronously)
     * 
     * @param pkiTranqcontractID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tranqcontractGetCommunicationCountV1Async(Integer pkiTranqcontractID, final ApiCallback<TranqcontractGetCommunicationCountV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tranqcontractGetCommunicationCountV1ValidateBeforeCall(pkiTranqcontractID, _callback);
        Type localVarReturnType = new TypeToken<TranqcontractGetCommunicationCountV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tranqcontractGetCommunicationListV1
     * @param pkiTranqcontractID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tranqcontractGetCommunicationListV1Call(Integer pkiTranqcontractID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/tranqcontract/{pkiTranqcontractID}/getCommunicationList"
            .replace("{" + "pkiTranqcontractID" + "}", localVarApiClient.escapeString(pkiTranqcontractID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tranqcontractGetCommunicationListV1ValidateBeforeCall(Integer pkiTranqcontractID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiTranqcontractID' is set
        if (pkiTranqcontractID == null) {
            throw new ApiException("Missing the required parameter 'pkiTranqcontractID' when calling tranqcontractGetCommunicationListV1(Async)");
        }

        return tranqcontractGetCommunicationListV1Call(pkiTranqcontractID, _callback);

    }

    /**
     * Retrieve Communication list
     * 
     * @param pkiTranqcontractID  (required)
     * @return TranqcontractGetCommunicationListV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public TranqcontractGetCommunicationListV1Response tranqcontractGetCommunicationListV1(Integer pkiTranqcontractID) throws ApiException {
        ApiResponse<TranqcontractGetCommunicationListV1Response> localVarResp = tranqcontractGetCommunicationListV1WithHttpInfo(pkiTranqcontractID);
        return localVarResp.getData();
    }

    /**
     * Retrieve Communication list
     * 
     * @param pkiTranqcontractID  (required)
     * @return ApiResponse&lt;TranqcontractGetCommunicationListV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TranqcontractGetCommunicationListV1Response> tranqcontractGetCommunicationListV1WithHttpInfo(Integer pkiTranqcontractID) throws ApiException {
        okhttp3.Call localVarCall = tranqcontractGetCommunicationListV1ValidateBeforeCall(pkiTranqcontractID, null);
        Type localVarReturnType = new TypeToken<TranqcontractGetCommunicationListV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Communication list (asynchronously)
     * 
     * @param pkiTranqcontractID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tranqcontractGetCommunicationListV1Async(Integer pkiTranqcontractID, final ApiCallback<TranqcontractGetCommunicationListV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tranqcontractGetCommunicationListV1ValidateBeforeCall(pkiTranqcontractID, _callback);
        Type localVarReturnType = new TypeToken<TranqcontractGetCommunicationListV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tranqcontractGetCommunicationrecipientsV1
     * @param pkiTranqcontractID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tranqcontractGetCommunicationrecipientsV1Call(Integer pkiTranqcontractID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/tranqcontract/{pkiTranqcontractID}/getCommunicationrecipients"
            .replace("{" + "pkiTranqcontractID" + "}", localVarApiClient.escapeString(pkiTranqcontractID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tranqcontractGetCommunicationrecipientsV1ValidateBeforeCall(Integer pkiTranqcontractID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiTranqcontractID' is set
        if (pkiTranqcontractID == null) {
            throw new ApiException("Missing the required parameter 'pkiTranqcontractID' when calling tranqcontractGetCommunicationrecipientsV1(Async)");
        }

        return tranqcontractGetCommunicationrecipientsV1Call(pkiTranqcontractID, _callback);

    }

    /**
     * Retrieve Tranqcontract&#39;s Communicationrecipient
     * 
     * @param pkiTranqcontractID  (required)
     * @return TranqcontractGetCommunicationrecipientsV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public TranqcontractGetCommunicationrecipientsV1Response tranqcontractGetCommunicationrecipientsV1(Integer pkiTranqcontractID) throws ApiException {
        ApiResponse<TranqcontractGetCommunicationrecipientsV1Response> localVarResp = tranqcontractGetCommunicationrecipientsV1WithHttpInfo(pkiTranqcontractID);
        return localVarResp.getData();
    }

    /**
     * Retrieve Tranqcontract&#39;s Communicationrecipient
     * 
     * @param pkiTranqcontractID  (required)
     * @return ApiResponse&lt;TranqcontractGetCommunicationrecipientsV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TranqcontractGetCommunicationrecipientsV1Response> tranqcontractGetCommunicationrecipientsV1WithHttpInfo(Integer pkiTranqcontractID) throws ApiException {
        okhttp3.Call localVarCall = tranqcontractGetCommunicationrecipientsV1ValidateBeforeCall(pkiTranqcontractID, null);
        Type localVarReturnType = new TypeToken<TranqcontractGetCommunicationrecipientsV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Tranqcontract&#39;s Communicationrecipient (asynchronously)
     * 
     * @param pkiTranqcontractID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tranqcontractGetCommunicationrecipientsV1Async(Integer pkiTranqcontractID, final ApiCallback<TranqcontractGetCommunicationrecipientsV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tranqcontractGetCommunicationrecipientsV1ValidateBeforeCall(pkiTranqcontractID, _callback);
        Type localVarReturnType = new TypeToken<TranqcontractGetCommunicationrecipientsV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tranqcontractGetCommunicationsendersV1
     * @param pkiTranqcontractID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tranqcontractGetCommunicationsendersV1Call(Integer pkiTranqcontractID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/tranqcontract/{pkiTranqcontractID}/getCommunicationsenders"
            .replace("{" + "pkiTranqcontractID" + "}", localVarApiClient.escapeString(pkiTranqcontractID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tranqcontractGetCommunicationsendersV1ValidateBeforeCall(Integer pkiTranqcontractID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiTranqcontractID' is set
        if (pkiTranqcontractID == null) {
            throw new ApiException("Missing the required parameter 'pkiTranqcontractID' when calling tranqcontractGetCommunicationsendersV1(Async)");
        }

        return tranqcontractGetCommunicationsendersV1Call(pkiTranqcontractID, _callback);

    }

    /**
     * Retrieve Tranqcontract&#39;s Communicationsender
     * 
     * @param pkiTranqcontractID  (required)
     * @return TranqcontractGetCommunicationsendersV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public TranqcontractGetCommunicationsendersV1Response tranqcontractGetCommunicationsendersV1(Integer pkiTranqcontractID) throws ApiException {
        ApiResponse<TranqcontractGetCommunicationsendersV1Response> localVarResp = tranqcontractGetCommunicationsendersV1WithHttpInfo(pkiTranqcontractID);
        return localVarResp.getData();
    }

    /**
     * Retrieve Tranqcontract&#39;s Communicationsender
     * 
     * @param pkiTranqcontractID  (required)
     * @return ApiResponse&lt;TranqcontractGetCommunicationsendersV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TranqcontractGetCommunicationsendersV1Response> tranqcontractGetCommunicationsendersV1WithHttpInfo(Integer pkiTranqcontractID) throws ApiException {
        okhttp3.Call localVarCall = tranqcontractGetCommunicationsendersV1ValidateBeforeCall(pkiTranqcontractID, null);
        Type localVarReturnType = new TypeToken<TranqcontractGetCommunicationsendersV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Tranqcontract&#39;s Communicationsender (asynchronously)
     * 
     * @param pkiTranqcontractID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tranqcontractGetCommunicationsendersV1Async(Integer pkiTranqcontractID, final ApiCallback<TranqcontractGetCommunicationsendersV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tranqcontractGetCommunicationsendersV1ValidateBeforeCall(pkiTranqcontractID, _callback);
        Type localVarReturnType = new TypeToken<TranqcontractGetCommunicationsendersV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
