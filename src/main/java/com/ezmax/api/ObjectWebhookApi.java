/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api;

import eZmaxAPI.ApiCallback;
import eZmaxAPI.ApiClient;
import eZmaxAPI.ApiException;
import eZmaxAPI.ApiResponse;
import eZmaxAPI.Configuration;
import eZmaxAPI.Pair;
import eZmaxAPI.ProgressRequestBody;
import eZmaxAPI.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ezmax.api.model.CommonResponseError;
import com.ezmax.api.model.CommonResponseErrorTooManyRequests;
import java.io.File;
import com.ezmax.api.model.HeaderAcceptLanguage;
import com.ezmax.api.model.WebhookCreateObjectV1Request;
import com.ezmax.api.model.WebhookCreateObjectV1Response;
import com.ezmax.api.model.WebhookDeleteObjectV1Response;
import com.ezmax.api.model.WebhookEditObjectV1Request;
import com.ezmax.api.model.WebhookEditObjectV1Response;
import com.ezmax.api.model.WebhookGetHistoryV1Response;
import com.ezmax.api.model.WebhookGetListV1Response;
import com.ezmax.api.model.WebhookGetObjectV2Response;
import com.ezmax.api.model.WebhookTestV1Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ObjectWebhookApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ObjectWebhookApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ObjectWebhookApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for webhookCreateObjectV1
     * @param webhookCreateObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookCreateObjectV1Call(WebhookCreateObjectV1Request webhookCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webhookCreateObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/webhook";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhookCreateObjectV1ValidateBeforeCall(WebhookCreateObjectV1Request webhookCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookCreateObjectV1Request' is set
        if (webhookCreateObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'webhookCreateObjectV1Request' when calling webhookCreateObjectV1(Async)");
        }

        return webhookCreateObjectV1Call(webhookCreateObjectV1Request, _callback);

    }

    /**
     * Create a new Webhook
     * The endpoint allows to create one or many elements at once.
     * @param webhookCreateObjectV1Request  (required)
     * @return WebhookCreateObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public WebhookCreateObjectV1Response webhookCreateObjectV1(WebhookCreateObjectV1Request webhookCreateObjectV1Request) throws ApiException {
        ApiResponse<WebhookCreateObjectV1Response> localVarResp = webhookCreateObjectV1WithHttpInfo(webhookCreateObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Create a new Webhook
     * The endpoint allows to create one or many elements at once.
     * @param webhookCreateObjectV1Request  (required)
     * @return ApiResponse&lt;WebhookCreateObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebhookCreateObjectV1Response> webhookCreateObjectV1WithHttpInfo(WebhookCreateObjectV1Request webhookCreateObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = webhookCreateObjectV1ValidateBeforeCall(webhookCreateObjectV1Request, null);
        Type localVarReturnType = new TypeToken<WebhookCreateObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Webhook (asynchronously)
     * The endpoint allows to create one or many elements at once.
     * @param webhookCreateObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookCreateObjectV1Async(WebhookCreateObjectV1Request webhookCreateObjectV1Request, final ApiCallback<WebhookCreateObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhookCreateObjectV1ValidateBeforeCall(webhookCreateObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<WebhookCreateObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhookDeleteObjectV1
     * @param pkiWebhookID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookDeleteObjectV1Call(Integer pkiWebhookID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/webhook/{pkiWebhookID}"
            .replace("{" + "pkiWebhookID" + "}", localVarApiClient.escapeString(pkiWebhookID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhookDeleteObjectV1ValidateBeforeCall(Integer pkiWebhookID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiWebhookID' is set
        if (pkiWebhookID == null) {
            throw new ApiException("Missing the required parameter 'pkiWebhookID' when calling webhookDeleteObjectV1(Async)");
        }

        return webhookDeleteObjectV1Call(pkiWebhookID, _callback);

    }

    /**
     * Delete an existing Webhook
     * 
     * @param pkiWebhookID  (required)
     * @return WebhookDeleteObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public WebhookDeleteObjectV1Response webhookDeleteObjectV1(Integer pkiWebhookID) throws ApiException {
        ApiResponse<WebhookDeleteObjectV1Response> localVarResp = webhookDeleteObjectV1WithHttpInfo(pkiWebhookID);
        return localVarResp.getData();
    }

    /**
     * Delete an existing Webhook
     * 
     * @param pkiWebhookID  (required)
     * @return ApiResponse&lt;WebhookDeleteObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebhookDeleteObjectV1Response> webhookDeleteObjectV1WithHttpInfo(Integer pkiWebhookID) throws ApiException {
        okhttp3.Call localVarCall = webhookDeleteObjectV1ValidateBeforeCall(pkiWebhookID, null);
        Type localVarReturnType = new TypeToken<WebhookDeleteObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an existing Webhook (asynchronously)
     * 
     * @param pkiWebhookID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookDeleteObjectV1Async(Integer pkiWebhookID, final ApiCallback<WebhookDeleteObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhookDeleteObjectV1ValidateBeforeCall(pkiWebhookID, _callback);
        Type localVarReturnType = new TypeToken<WebhookDeleteObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhookEditObjectV1
     * @param pkiWebhookID  (required)
     * @param webhookEditObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookEditObjectV1Call(Integer pkiWebhookID, WebhookEditObjectV1Request webhookEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webhookEditObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/webhook/{pkiWebhookID}"
            .replace("{" + "pkiWebhookID" + "}", localVarApiClient.escapeString(pkiWebhookID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhookEditObjectV1ValidateBeforeCall(Integer pkiWebhookID, WebhookEditObjectV1Request webhookEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiWebhookID' is set
        if (pkiWebhookID == null) {
            throw new ApiException("Missing the required parameter 'pkiWebhookID' when calling webhookEditObjectV1(Async)");
        }

        // verify the required parameter 'webhookEditObjectV1Request' is set
        if (webhookEditObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'webhookEditObjectV1Request' when calling webhookEditObjectV1(Async)");
        }

        return webhookEditObjectV1Call(pkiWebhookID, webhookEditObjectV1Request, _callback);

    }

    /**
     * Edit an existing Webhook
     * 
     * @param pkiWebhookID  (required)
     * @param webhookEditObjectV1Request  (required)
     * @return WebhookEditObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public WebhookEditObjectV1Response webhookEditObjectV1(Integer pkiWebhookID, WebhookEditObjectV1Request webhookEditObjectV1Request) throws ApiException {
        ApiResponse<WebhookEditObjectV1Response> localVarResp = webhookEditObjectV1WithHttpInfo(pkiWebhookID, webhookEditObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Edit an existing Webhook
     * 
     * @param pkiWebhookID  (required)
     * @param webhookEditObjectV1Request  (required)
     * @return ApiResponse&lt;WebhookEditObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebhookEditObjectV1Response> webhookEditObjectV1WithHttpInfo(Integer pkiWebhookID, WebhookEditObjectV1Request webhookEditObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = webhookEditObjectV1ValidateBeforeCall(pkiWebhookID, webhookEditObjectV1Request, null);
        Type localVarReturnType = new TypeToken<WebhookEditObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit an existing Webhook (asynchronously)
     * 
     * @param pkiWebhookID  (required)
     * @param webhookEditObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookEditObjectV1Async(Integer pkiWebhookID, WebhookEditObjectV1Request webhookEditObjectV1Request, final ApiCallback<WebhookEditObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhookEditObjectV1ValidateBeforeCall(pkiWebhookID, webhookEditObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<WebhookEditObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhookGetHistoryV1
     * @param pkiWebhookID  (required)
     * @param eWebhookHistoryinterval The number of days to return (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookGetHistoryV1Call(Integer pkiWebhookID, String eWebhookHistoryinterval, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/webhook/{pkiWebhookID}/getHistory"
            .replace("{" + "pkiWebhookID" + "}", localVarApiClient.escapeString(pkiWebhookID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eWebhookHistoryinterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eWebhookHistoryinterval", eWebhookHistoryinterval));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhookGetHistoryV1ValidateBeforeCall(Integer pkiWebhookID, String eWebhookHistoryinterval, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiWebhookID' is set
        if (pkiWebhookID == null) {
            throw new ApiException("Missing the required parameter 'pkiWebhookID' when calling webhookGetHistoryV1(Async)");
        }

        // verify the required parameter 'eWebhookHistoryinterval' is set
        if (eWebhookHistoryinterval == null) {
            throw new ApiException("Missing the required parameter 'eWebhookHistoryinterval' when calling webhookGetHistoryV1(Async)");
        }

        return webhookGetHistoryV1Call(pkiWebhookID, eWebhookHistoryinterval, _callback);

    }

    /**
     * Retrieve the logs for recent Webhook calls
     * 
     * @param pkiWebhookID  (required)
     * @param eWebhookHistoryinterval The number of days to return (required)
     * @return WebhookGetHistoryV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public WebhookGetHistoryV1Response webhookGetHistoryV1(Integer pkiWebhookID, String eWebhookHistoryinterval) throws ApiException {
        ApiResponse<WebhookGetHistoryV1Response> localVarResp = webhookGetHistoryV1WithHttpInfo(pkiWebhookID, eWebhookHistoryinterval);
        return localVarResp.getData();
    }

    /**
     * Retrieve the logs for recent Webhook calls
     * 
     * @param pkiWebhookID  (required)
     * @param eWebhookHistoryinterval The number of days to return (required)
     * @return ApiResponse&lt;WebhookGetHistoryV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebhookGetHistoryV1Response> webhookGetHistoryV1WithHttpInfo(Integer pkiWebhookID, String eWebhookHistoryinterval) throws ApiException {
        okhttp3.Call localVarCall = webhookGetHistoryV1ValidateBeforeCall(pkiWebhookID, eWebhookHistoryinterval, null);
        Type localVarReturnType = new TypeToken<WebhookGetHistoryV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the logs for recent Webhook calls (asynchronously)
     * 
     * @param pkiWebhookID  (required)
     * @param eWebhookHistoryinterval The number of days to return (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookGetHistoryV1Async(Integer pkiWebhookID, String eWebhookHistoryinterval, final ApiCallback<WebhookGetHistoryV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhookGetHistoryV1ValidateBeforeCall(pkiWebhookID, eWebhookHistoryinterval, _callback);
        Type localVarReturnType = new TypeToken<WebhookGetHistoryV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhookGetListV1
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional, default to 10000)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookGetListV1Call(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/webhook/getList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eOrderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eOrderBy", eOrderBy));
        }

        if (iRowMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iRowMax", iRowMax));
        }

        if (iRowOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iRowOffset", iRowOffset));
        }

        if (sFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sFilter", sFilter));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhookGetListV1ValidateBeforeCall(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter, final ApiCallback _callback) throws ApiException {
        return webhookGetListV1Call(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, _callback);

    }

    /**
     * Retrieve Webhook list
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eWebhookModule | Ezsign&lt;br&gt;Management | | eWebhookEzsignevent | DocumentCompleted&lt;br&gt;FolderCompleted | | eWebhookManagementevent | UserCreated |
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional, default to 10000)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return WebhookGetListV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public WebhookGetListV1Response webhookGetListV1(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter) throws ApiException {
        ApiResponse<WebhookGetListV1Response> localVarResp = webhookGetListV1WithHttpInfo(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter);
        return localVarResp.getData();
    }

    /**
     * Retrieve Webhook list
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eWebhookModule | Ezsign&lt;br&gt;Management | | eWebhookEzsignevent | DocumentCompleted&lt;br&gt;FolderCompleted | | eWebhookManagementevent | UserCreated |
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional, default to 10000)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return ApiResponse&lt;WebhookGetListV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebhookGetListV1Response> webhookGetListV1WithHttpInfo(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter) throws ApiException {
        okhttp3.Call localVarCall = webhookGetListV1ValidateBeforeCall(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, null);
        Type localVarReturnType = new TypeToken<WebhookGetListV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Webhook list (asynchronously)
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eWebhookModule | Ezsign&lt;br&gt;Management | | eWebhookEzsignevent | DocumentCompleted&lt;br&gt;FolderCompleted | | eWebhookManagementevent | UserCreated |
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional, default to 10000)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookGetListV1Async(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter, final ApiCallback<WebhookGetListV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhookGetListV1ValidateBeforeCall(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, _callback);
        Type localVarReturnType = new TypeToken<WebhookGetListV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhookGetObjectV2
     * @param pkiWebhookID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookGetObjectV2Call(Integer pkiWebhookID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/object/webhook/{pkiWebhookID}"
            .replace("{" + "pkiWebhookID" + "}", localVarApiClient.escapeString(pkiWebhookID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhookGetObjectV2ValidateBeforeCall(Integer pkiWebhookID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiWebhookID' is set
        if (pkiWebhookID == null) {
            throw new ApiException("Missing the required parameter 'pkiWebhookID' when calling webhookGetObjectV2(Async)");
        }

        return webhookGetObjectV2Call(pkiWebhookID, _callback);

    }

    /**
     * Retrieve an existing Webhook
     * 
     * @param pkiWebhookID  (required)
     * @return WebhookGetObjectV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public WebhookGetObjectV2Response webhookGetObjectV2(Integer pkiWebhookID) throws ApiException {
        ApiResponse<WebhookGetObjectV2Response> localVarResp = webhookGetObjectV2WithHttpInfo(pkiWebhookID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Webhook
     * 
     * @param pkiWebhookID  (required)
     * @return ApiResponse&lt;WebhookGetObjectV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebhookGetObjectV2Response> webhookGetObjectV2WithHttpInfo(Integer pkiWebhookID) throws ApiException {
        okhttp3.Call localVarCall = webhookGetObjectV2ValidateBeforeCall(pkiWebhookID, null);
        Type localVarReturnType = new TypeToken<WebhookGetObjectV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Webhook (asynchronously)
     * 
     * @param pkiWebhookID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookGetObjectV2Async(Integer pkiWebhookID, final ApiCallback<WebhookGetObjectV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhookGetObjectV2ValidateBeforeCall(pkiWebhookID, _callback);
        Type localVarReturnType = new TypeToken<WebhookGetObjectV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhookTestV1
     * @param pkiWebhookID  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookTestV1Call(Integer pkiWebhookID, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/1/object/webhook/{pkiWebhookID}/test"
            .replace("{" + "pkiWebhookID" + "}", localVarApiClient.escapeString(pkiWebhookID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhookTestV1ValidateBeforeCall(Integer pkiWebhookID, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiWebhookID' is set
        if (pkiWebhookID == null) {
            throw new ApiException("Missing the required parameter 'pkiWebhookID' when calling webhookTestV1(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling webhookTestV1(Async)");
        }

        return webhookTestV1Call(pkiWebhookID, body, _callback);

    }

    /**
     * Test the Webhook by calling the Url
     * 
     * @param pkiWebhookID  (required)
     * @param body  (required)
     * @return WebhookTestV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public WebhookTestV1Response webhookTestV1(Integer pkiWebhookID, Object body) throws ApiException {
        ApiResponse<WebhookTestV1Response> localVarResp = webhookTestV1WithHttpInfo(pkiWebhookID, body);
        return localVarResp.getData();
    }

    /**
     * Test the Webhook by calling the Url
     * 
     * @param pkiWebhookID  (required)
     * @param body  (required)
     * @return ApiResponse&lt;WebhookTestV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebhookTestV1Response> webhookTestV1WithHttpInfo(Integer pkiWebhookID, Object body) throws ApiException {
        okhttp3.Call localVarCall = webhookTestV1ValidateBeforeCall(pkiWebhookID, body, null);
        Type localVarReturnType = new TypeToken<WebhookTestV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Test the Webhook by calling the Url (asynchronously)
     * 
     * @param pkiWebhookID  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookTestV1Async(Integer pkiWebhookID, Object body, final ApiCallback<WebhookTestV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhookTestV1ValidateBeforeCall(pkiWebhookID, body, _callback);
        Type localVarReturnType = new TypeToken<WebhookTestV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
