/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api;

import eZmaxAPI.ApiCallback;
import eZmaxAPI.ApiClient;
import eZmaxAPI.ApiException;
import eZmaxAPI.ApiResponse;
import eZmaxAPI.Configuration;
import eZmaxAPI.Pair;
import eZmaxAPI.ProgressRequestBody;
import eZmaxAPI.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ezmax.api.model.CommonResponseError;
import com.ezmax.api.model.DiscussionCreateObjectV1Request;
import com.ezmax.api.model.DiscussionCreateObjectV1Response;
import com.ezmax.api.model.DiscussionDeleteObjectV1Response;
import com.ezmax.api.model.DiscussionGetObjectV2Response;
import com.ezmax.api.model.DiscussionPatchObjectV1Request;
import com.ezmax.api.model.DiscussionPatchObjectV1Response;
import com.ezmax.api.model.DiscussionUpdateDiscussionreadstatusV1Request;
import com.ezmax.api.model.DiscussionUpdateDiscussionreadstatusV1Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ObjectDiscussionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ObjectDiscussionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ObjectDiscussionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for discussionCreateObjectV1
     * @param discussionCreateObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call discussionCreateObjectV1Call(DiscussionCreateObjectV1Request discussionCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = discussionCreateObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/discussion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call discussionCreateObjectV1ValidateBeforeCall(DiscussionCreateObjectV1Request discussionCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'discussionCreateObjectV1Request' is set
        if (discussionCreateObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'discussionCreateObjectV1Request' when calling discussionCreateObjectV1(Async)");
        }

        return discussionCreateObjectV1Call(discussionCreateObjectV1Request, _callback);

    }

    /**
     * Create a new Discussion
     * The endpoint allows to create one or many elements at once.
     * @param discussionCreateObjectV1Request  (required)
     * @return DiscussionCreateObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public DiscussionCreateObjectV1Response discussionCreateObjectV1(DiscussionCreateObjectV1Request discussionCreateObjectV1Request) throws ApiException {
        ApiResponse<DiscussionCreateObjectV1Response> localVarResp = discussionCreateObjectV1WithHttpInfo(discussionCreateObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Create a new Discussion
     * The endpoint allows to create one or many elements at once.
     * @param discussionCreateObjectV1Request  (required)
     * @return ApiResponse&lt;DiscussionCreateObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiscussionCreateObjectV1Response> discussionCreateObjectV1WithHttpInfo(DiscussionCreateObjectV1Request discussionCreateObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = discussionCreateObjectV1ValidateBeforeCall(discussionCreateObjectV1Request, null);
        Type localVarReturnType = new TypeToken<DiscussionCreateObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Discussion (asynchronously)
     * The endpoint allows to create one or many elements at once.
     * @param discussionCreateObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call discussionCreateObjectV1Async(DiscussionCreateObjectV1Request discussionCreateObjectV1Request, final ApiCallback<DiscussionCreateObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = discussionCreateObjectV1ValidateBeforeCall(discussionCreateObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<DiscussionCreateObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for discussionDeleteObjectV1
     * @param pkiDiscussionID The unique ID of the Discussion (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call discussionDeleteObjectV1Call(Integer pkiDiscussionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/discussion/{pkiDiscussionID}"
            .replace("{" + "pkiDiscussionID" + "}", localVarApiClient.escapeString(pkiDiscussionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call discussionDeleteObjectV1ValidateBeforeCall(Integer pkiDiscussionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiDiscussionID' is set
        if (pkiDiscussionID == null) {
            throw new ApiException("Missing the required parameter 'pkiDiscussionID' when calling discussionDeleteObjectV1(Async)");
        }

        return discussionDeleteObjectV1Call(pkiDiscussionID, _callback);

    }

    /**
     * Delete an existing Discussion
     * 
     * @param pkiDiscussionID The unique ID of the Discussion (required)
     * @return DiscussionDeleteObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public DiscussionDeleteObjectV1Response discussionDeleteObjectV1(Integer pkiDiscussionID) throws ApiException {
        ApiResponse<DiscussionDeleteObjectV1Response> localVarResp = discussionDeleteObjectV1WithHttpInfo(pkiDiscussionID);
        return localVarResp.getData();
    }

    /**
     * Delete an existing Discussion
     * 
     * @param pkiDiscussionID The unique ID of the Discussion (required)
     * @return ApiResponse&lt;DiscussionDeleteObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiscussionDeleteObjectV1Response> discussionDeleteObjectV1WithHttpInfo(Integer pkiDiscussionID) throws ApiException {
        okhttp3.Call localVarCall = discussionDeleteObjectV1ValidateBeforeCall(pkiDiscussionID, null);
        Type localVarReturnType = new TypeToken<DiscussionDeleteObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an existing Discussion (asynchronously)
     * 
     * @param pkiDiscussionID The unique ID of the Discussion (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call discussionDeleteObjectV1Async(Integer pkiDiscussionID, final ApiCallback<DiscussionDeleteObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = discussionDeleteObjectV1ValidateBeforeCall(pkiDiscussionID, _callback);
        Type localVarReturnType = new TypeToken<DiscussionDeleteObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for discussionGetObjectV2
     * @param pkiDiscussionID The unique ID of the Discussion (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call discussionGetObjectV2Call(Integer pkiDiscussionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/object/discussion/{pkiDiscussionID}"
            .replace("{" + "pkiDiscussionID" + "}", localVarApiClient.escapeString(pkiDiscussionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call discussionGetObjectV2ValidateBeforeCall(Integer pkiDiscussionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiDiscussionID' is set
        if (pkiDiscussionID == null) {
            throw new ApiException("Missing the required parameter 'pkiDiscussionID' when calling discussionGetObjectV2(Async)");
        }

        return discussionGetObjectV2Call(pkiDiscussionID, _callback);

    }

    /**
     * Retrieve an existing Discussion
     * 
     * @param pkiDiscussionID The unique ID of the Discussion (required)
     * @return DiscussionGetObjectV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public DiscussionGetObjectV2Response discussionGetObjectV2(Integer pkiDiscussionID) throws ApiException {
        ApiResponse<DiscussionGetObjectV2Response> localVarResp = discussionGetObjectV2WithHttpInfo(pkiDiscussionID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Discussion
     * 
     * @param pkiDiscussionID The unique ID of the Discussion (required)
     * @return ApiResponse&lt;DiscussionGetObjectV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiscussionGetObjectV2Response> discussionGetObjectV2WithHttpInfo(Integer pkiDiscussionID) throws ApiException {
        okhttp3.Call localVarCall = discussionGetObjectV2ValidateBeforeCall(pkiDiscussionID, null);
        Type localVarReturnType = new TypeToken<DiscussionGetObjectV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Discussion (asynchronously)
     * 
     * @param pkiDiscussionID The unique ID of the Discussion (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call discussionGetObjectV2Async(Integer pkiDiscussionID, final ApiCallback<DiscussionGetObjectV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = discussionGetObjectV2ValidateBeforeCall(pkiDiscussionID, _callback);
        Type localVarReturnType = new TypeToken<DiscussionGetObjectV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for discussionPatchObjectV1
     * @param pkiDiscussionID The unique ID of the Discussion (required)
     * @param discussionPatchObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call discussionPatchObjectV1Call(Integer pkiDiscussionID, DiscussionPatchObjectV1Request discussionPatchObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = discussionPatchObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/discussion/{pkiDiscussionID}"
            .replace("{" + "pkiDiscussionID" + "}", localVarApiClient.escapeString(pkiDiscussionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call discussionPatchObjectV1ValidateBeforeCall(Integer pkiDiscussionID, DiscussionPatchObjectV1Request discussionPatchObjectV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiDiscussionID' is set
        if (pkiDiscussionID == null) {
            throw new ApiException("Missing the required parameter 'pkiDiscussionID' when calling discussionPatchObjectV1(Async)");
        }

        // verify the required parameter 'discussionPatchObjectV1Request' is set
        if (discussionPatchObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'discussionPatchObjectV1Request' when calling discussionPatchObjectV1(Async)");
        }

        return discussionPatchObjectV1Call(pkiDiscussionID, discussionPatchObjectV1Request, _callback);

    }

    /**
     * Patch an existing Discussion
     * 
     * @param pkiDiscussionID The unique ID of the Discussion (required)
     * @param discussionPatchObjectV1Request  (required)
     * @return DiscussionPatchObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public DiscussionPatchObjectV1Response discussionPatchObjectV1(Integer pkiDiscussionID, DiscussionPatchObjectV1Request discussionPatchObjectV1Request) throws ApiException {
        ApiResponse<DiscussionPatchObjectV1Response> localVarResp = discussionPatchObjectV1WithHttpInfo(pkiDiscussionID, discussionPatchObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Patch an existing Discussion
     * 
     * @param pkiDiscussionID The unique ID of the Discussion (required)
     * @param discussionPatchObjectV1Request  (required)
     * @return ApiResponse&lt;DiscussionPatchObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiscussionPatchObjectV1Response> discussionPatchObjectV1WithHttpInfo(Integer pkiDiscussionID, DiscussionPatchObjectV1Request discussionPatchObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = discussionPatchObjectV1ValidateBeforeCall(pkiDiscussionID, discussionPatchObjectV1Request, null);
        Type localVarReturnType = new TypeToken<DiscussionPatchObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch an existing Discussion (asynchronously)
     * 
     * @param pkiDiscussionID The unique ID of the Discussion (required)
     * @param discussionPatchObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call discussionPatchObjectV1Async(Integer pkiDiscussionID, DiscussionPatchObjectV1Request discussionPatchObjectV1Request, final ApiCallback<DiscussionPatchObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = discussionPatchObjectV1ValidateBeforeCall(pkiDiscussionID, discussionPatchObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<DiscussionPatchObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for discussionUpdateDiscussionreadstatusV1
     * @param pkiDiscussionID  (required)
     * @param discussionUpdateDiscussionreadstatusV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call discussionUpdateDiscussionreadstatusV1Call(Integer pkiDiscussionID, DiscussionUpdateDiscussionreadstatusV1Request discussionUpdateDiscussionreadstatusV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = discussionUpdateDiscussionreadstatusV1Request;

        // create path and map variables
        String localVarPath = "/1/object/discussion/{pkiDiscussionID}/updateDiscussionreadstatus"
            .replace("{" + "pkiDiscussionID" + "}", localVarApiClient.escapeString(pkiDiscussionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call discussionUpdateDiscussionreadstatusV1ValidateBeforeCall(Integer pkiDiscussionID, DiscussionUpdateDiscussionreadstatusV1Request discussionUpdateDiscussionreadstatusV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiDiscussionID' is set
        if (pkiDiscussionID == null) {
            throw new ApiException("Missing the required parameter 'pkiDiscussionID' when calling discussionUpdateDiscussionreadstatusV1(Async)");
        }

        // verify the required parameter 'discussionUpdateDiscussionreadstatusV1Request' is set
        if (discussionUpdateDiscussionreadstatusV1Request == null) {
            throw new ApiException("Missing the required parameter 'discussionUpdateDiscussionreadstatusV1Request' when calling discussionUpdateDiscussionreadstatusV1(Async)");
        }

        return discussionUpdateDiscussionreadstatusV1Call(pkiDiscussionID, discussionUpdateDiscussionreadstatusV1Request, _callback);

    }

    /**
     * Update the read status of the discussion
     * 
     * @param pkiDiscussionID  (required)
     * @param discussionUpdateDiscussionreadstatusV1Request  (required)
     * @return DiscussionUpdateDiscussionreadstatusV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public DiscussionUpdateDiscussionreadstatusV1Response discussionUpdateDiscussionreadstatusV1(Integer pkiDiscussionID, DiscussionUpdateDiscussionreadstatusV1Request discussionUpdateDiscussionreadstatusV1Request) throws ApiException {
        ApiResponse<DiscussionUpdateDiscussionreadstatusV1Response> localVarResp = discussionUpdateDiscussionreadstatusV1WithHttpInfo(pkiDiscussionID, discussionUpdateDiscussionreadstatusV1Request);
        return localVarResp.getData();
    }

    /**
     * Update the read status of the discussion
     * 
     * @param pkiDiscussionID  (required)
     * @param discussionUpdateDiscussionreadstatusV1Request  (required)
     * @return ApiResponse&lt;DiscussionUpdateDiscussionreadstatusV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiscussionUpdateDiscussionreadstatusV1Response> discussionUpdateDiscussionreadstatusV1WithHttpInfo(Integer pkiDiscussionID, DiscussionUpdateDiscussionreadstatusV1Request discussionUpdateDiscussionreadstatusV1Request) throws ApiException {
        okhttp3.Call localVarCall = discussionUpdateDiscussionreadstatusV1ValidateBeforeCall(pkiDiscussionID, discussionUpdateDiscussionreadstatusV1Request, null);
        Type localVarReturnType = new TypeToken<DiscussionUpdateDiscussionreadstatusV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the read status of the discussion (asynchronously)
     * 
     * @param pkiDiscussionID  (required)
     * @param discussionUpdateDiscussionreadstatusV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call discussionUpdateDiscussionreadstatusV1Async(Integer pkiDiscussionID, DiscussionUpdateDiscussionreadstatusV1Request discussionUpdateDiscussionreadstatusV1Request, final ApiCallback<DiscussionUpdateDiscussionreadstatusV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = discussionUpdateDiscussionreadstatusV1ValidateBeforeCall(pkiDiscussionID, discussionUpdateDiscussionreadstatusV1Request, _callback);
        Type localVarReturnType = new TypeToken<DiscussionUpdateDiscussionreadstatusV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
