/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api;

import eZmaxAPI.ApiCallback;
import eZmaxAPI.ApiClient;
import eZmaxAPI.ApiException;
import eZmaxAPI.ApiResponse;
import eZmaxAPI.Configuration;
import eZmaxAPI.Pair;
import eZmaxAPI.ProgressRequestBody;
import eZmaxAPI.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ezmax.api.model.CommonResponse;
import com.ezmax.api.model.CommonResponseError;
import com.ezmax.api.model.EzsigntemplatepublicCreateEzsignfolderV1Request;
import com.ezmax.api.model.EzsigntemplatepublicCreateEzsignfolderV1Response;
import com.ezmax.api.model.EzsigntemplatepublicCreateObjectV1Request;
import com.ezmax.api.model.EzsigntemplatepublicCreateObjectV1Response;
import com.ezmax.api.model.EzsigntemplatepublicEditObjectV1Request;
import com.ezmax.api.model.EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request;
import com.ezmax.api.model.EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response;
import com.ezmax.api.model.EzsigntemplatepublicGetFormsDataV1Response;
import com.ezmax.api.model.EzsigntemplatepublicGetListV1Response;
import com.ezmax.api.model.EzsigntemplatepublicGetObjectV2Response;
import com.ezmax.api.model.EzsigntemplatepublicResetLimitExceededCounterV1Response;
import com.ezmax.api.model.EzsigntemplatepublicResetUrlV1Response;
import java.io.File;
import com.ezmax.api.model.HeaderAcceptLanguage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ObjectEzsigntemplatepublicApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ObjectEzsigntemplatepublicApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ObjectEzsigntemplatepublicApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for ezsigntemplatepublicCreateEzsignfolderV1
     * @param ezsigntemplatepublicCreateEzsignfolderV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatepublicCreateEzsignfolderV1Call(EzsigntemplatepublicCreateEzsignfolderV1Request ezsigntemplatepublicCreateEzsignfolderV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezsigntemplatepublicCreateEzsignfolderV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezsigntemplatepublic/createEzsignfolder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigntemplatepublicCreateEzsignfolderV1ValidateBeforeCall(EzsigntemplatepublicCreateEzsignfolderV1Request ezsigntemplatepublicCreateEzsignfolderV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ezsigntemplatepublicCreateEzsignfolderV1Request' is set
        if (ezsigntemplatepublicCreateEzsignfolderV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezsigntemplatepublicCreateEzsignfolderV1Request' when calling ezsigntemplatepublicCreateEzsignfolderV1(Async)");
        }

        return ezsigntemplatepublicCreateEzsignfolderV1Call(ezsigntemplatepublicCreateEzsignfolderV1Request, _callback);

    }

    /**
     * Create an Ezsignfolder
     * Create an Ezsignfolder
     * @param ezsigntemplatepublicCreateEzsignfolderV1Request  (required)
     * @return EzsigntemplatepublicCreateEzsignfolderV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsigntemplatepublicCreateEzsignfolderV1Response ezsigntemplatepublicCreateEzsignfolderV1(EzsigntemplatepublicCreateEzsignfolderV1Request ezsigntemplatepublicCreateEzsignfolderV1Request) throws ApiException {
        ApiResponse<EzsigntemplatepublicCreateEzsignfolderV1Response> localVarResp = ezsigntemplatepublicCreateEzsignfolderV1WithHttpInfo(ezsigntemplatepublicCreateEzsignfolderV1Request);
        return localVarResp.getData();
    }

    /**
     * Create an Ezsignfolder
     * Create an Ezsignfolder
     * @param ezsigntemplatepublicCreateEzsignfolderV1Request  (required)
     * @return ApiResponse&lt;EzsigntemplatepublicCreateEzsignfolderV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigntemplatepublicCreateEzsignfolderV1Response> ezsigntemplatepublicCreateEzsignfolderV1WithHttpInfo(EzsigntemplatepublicCreateEzsignfolderV1Request ezsigntemplatepublicCreateEzsignfolderV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezsigntemplatepublicCreateEzsignfolderV1ValidateBeforeCall(ezsigntemplatepublicCreateEzsignfolderV1Request, null);
        Type localVarReturnType = new TypeToken<EzsigntemplatepublicCreateEzsignfolderV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an Ezsignfolder (asynchronously)
     * Create an Ezsignfolder
     * @param ezsigntemplatepublicCreateEzsignfolderV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatepublicCreateEzsignfolderV1Async(EzsigntemplatepublicCreateEzsignfolderV1Request ezsigntemplatepublicCreateEzsignfolderV1Request, final ApiCallback<EzsigntemplatepublicCreateEzsignfolderV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigntemplatepublicCreateEzsignfolderV1ValidateBeforeCall(ezsigntemplatepublicCreateEzsignfolderV1Request, _callback);
        Type localVarReturnType = new TypeToken<EzsigntemplatepublicCreateEzsignfolderV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigntemplatepublicCreateObjectV1
     * @param ezsigntemplatepublicCreateObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatepublicCreateObjectV1Call(EzsigntemplatepublicCreateObjectV1Request ezsigntemplatepublicCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezsigntemplatepublicCreateObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezsigntemplatepublic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigntemplatepublicCreateObjectV1ValidateBeforeCall(EzsigntemplatepublicCreateObjectV1Request ezsigntemplatepublicCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ezsigntemplatepublicCreateObjectV1Request' is set
        if (ezsigntemplatepublicCreateObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezsigntemplatepublicCreateObjectV1Request' when calling ezsigntemplatepublicCreateObjectV1(Async)");
        }

        return ezsigntemplatepublicCreateObjectV1Call(ezsigntemplatepublicCreateObjectV1Request, _callback);

    }

    /**
     * Create a new Ezsigntemplatepublic
     * The endpoint allows to create one or many elements at once.
     * @param ezsigntemplatepublicCreateObjectV1Request  (required)
     * @return EzsigntemplatepublicCreateObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EzsigntemplatepublicCreateObjectV1Response ezsigntemplatepublicCreateObjectV1(EzsigntemplatepublicCreateObjectV1Request ezsigntemplatepublicCreateObjectV1Request) throws ApiException {
        ApiResponse<EzsigntemplatepublicCreateObjectV1Response> localVarResp = ezsigntemplatepublicCreateObjectV1WithHttpInfo(ezsigntemplatepublicCreateObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Create a new Ezsigntemplatepublic
     * The endpoint allows to create one or many elements at once.
     * @param ezsigntemplatepublicCreateObjectV1Request  (required)
     * @return ApiResponse&lt;EzsigntemplatepublicCreateObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigntemplatepublicCreateObjectV1Response> ezsigntemplatepublicCreateObjectV1WithHttpInfo(EzsigntemplatepublicCreateObjectV1Request ezsigntemplatepublicCreateObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezsigntemplatepublicCreateObjectV1ValidateBeforeCall(ezsigntemplatepublicCreateObjectV1Request, null);
        Type localVarReturnType = new TypeToken<EzsigntemplatepublicCreateObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Ezsigntemplatepublic (asynchronously)
     * The endpoint allows to create one or many elements at once.
     * @param ezsigntemplatepublicCreateObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatepublicCreateObjectV1Async(EzsigntemplatepublicCreateObjectV1Request ezsigntemplatepublicCreateObjectV1Request, final ApiCallback<EzsigntemplatepublicCreateObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigntemplatepublicCreateObjectV1ValidateBeforeCall(ezsigntemplatepublicCreateObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<EzsigntemplatepublicCreateObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigntemplatepublicEditObjectV1
     * @param pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic (required)
     * @param ezsigntemplatepublicEditObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatepublicEditObjectV1Call(Integer pkiEzsigntemplatepublicID, EzsigntemplatepublicEditObjectV1Request ezsigntemplatepublicEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezsigntemplatepublicEditObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}"
            .replace("{" + "pkiEzsigntemplatepublicID" + "}", localVarApiClient.escapeString(pkiEzsigntemplatepublicID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigntemplatepublicEditObjectV1ValidateBeforeCall(Integer pkiEzsigntemplatepublicID, EzsigntemplatepublicEditObjectV1Request ezsigntemplatepublicEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiEzsigntemplatepublicID' is set
        if (pkiEzsigntemplatepublicID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigntemplatepublicID' when calling ezsigntemplatepublicEditObjectV1(Async)");
        }

        // verify the required parameter 'ezsigntemplatepublicEditObjectV1Request' is set
        if (ezsigntemplatepublicEditObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezsigntemplatepublicEditObjectV1Request' when calling ezsigntemplatepublicEditObjectV1(Async)");
        }

        return ezsigntemplatepublicEditObjectV1Call(pkiEzsigntemplatepublicID, ezsigntemplatepublicEditObjectV1Request, _callback);

    }

    /**
     * Edit an existing Ezsigntemplatepublic
     * 
     * @param pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic (required)
     * @param ezsigntemplatepublicEditObjectV1Request  (required)
     * @return CommonResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public CommonResponse ezsigntemplatepublicEditObjectV1(Integer pkiEzsigntemplatepublicID, EzsigntemplatepublicEditObjectV1Request ezsigntemplatepublicEditObjectV1Request) throws ApiException {
        ApiResponse<CommonResponse> localVarResp = ezsigntemplatepublicEditObjectV1WithHttpInfo(pkiEzsigntemplatepublicID, ezsigntemplatepublicEditObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Edit an existing Ezsigntemplatepublic
     * 
     * @param pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic (required)
     * @param ezsigntemplatepublicEditObjectV1Request  (required)
     * @return ApiResponse&lt;CommonResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommonResponse> ezsigntemplatepublicEditObjectV1WithHttpInfo(Integer pkiEzsigntemplatepublicID, EzsigntemplatepublicEditObjectV1Request ezsigntemplatepublicEditObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezsigntemplatepublicEditObjectV1ValidateBeforeCall(pkiEzsigntemplatepublicID, ezsigntemplatepublicEditObjectV1Request, null);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit an existing Ezsigntemplatepublic (asynchronously)
     * 
     * @param pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic (required)
     * @param ezsigntemplatepublicEditObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatepublicEditObjectV1Async(Integer pkiEzsigntemplatepublicID, EzsigntemplatepublicEditObjectV1Request ezsigntemplatepublicEditObjectV1Request, final ApiCallback<CommonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigntemplatepublicEditObjectV1ValidateBeforeCall(pkiEzsigntemplatepublicID, ezsigntemplatepublicEditObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<CommonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1
     * @param ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Call(EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezsigntemplatepublic/getEzsigntemplatepublicDetails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1ValidateBeforeCall(EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request' is set
        if (ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request' when calling ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1(Async)");
        }

        return ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Call(ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request, _callback);

    }

    /**
     * Retrieve the Ezsigntemplatepublic details
     * Retrieve the Ezsigntemplatepublic details
     * @param ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request  (required)
     * @return EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1(EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request) throws ApiException {
        ApiResponse<EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response> localVarResp = ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1WithHttpInfo(ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request);
        return localVarResp.getData();
    }

    /**
     * Retrieve the Ezsigntemplatepublic details
     * Retrieve the Ezsigntemplatepublic details
     * @param ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request  (required)
     * @return ApiResponse&lt;EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response> ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1WithHttpInfo(EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1ValidateBeforeCall(ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request, null);
        Type localVarReturnType = new TypeToken<EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the Ezsigntemplatepublic details (asynchronously)
     * Retrieve the Ezsigntemplatepublic details
     * @param ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Async(EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request, final ApiCallback<EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1ValidateBeforeCall(ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request, _callback);
        Type localVarReturnType = new TypeToken<EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigntemplatepublicGetFormsDataV1
     * @param pkiEzsigntemplatepublicID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatepublicGetFormsDataV1Call(Integer pkiEzsigntemplatepublicID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}/getFormsData"
            .replace("{" + "pkiEzsigntemplatepublicID" + "}", localVarApiClient.escapeString(pkiEzsigntemplatepublicID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/zip"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigntemplatepublicGetFormsDataV1ValidateBeforeCall(Integer pkiEzsigntemplatepublicID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiEzsigntemplatepublicID' is set
        if (pkiEzsigntemplatepublicID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigntemplatepublicID' when calling ezsigntemplatepublicGetFormsDataV1(Async)");
        }

        return ezsigntemplatepublicGetFormsDataV1Call(pkiEzsigntemplatepublicID, _callback);

    }

    /**
     * Retrieve an existing Ezsigntemplatepublic&#39;s forms data
     * 
     * @param pkiEzsigntemplatepublicID  (required)
     * @return EzsigntemplatepublicGetFormsDataV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsigntemplatepublicGetFormsDataV1Response ezsigntemplatepublicGetFormsDataV1(Integer pkiEzsigntemplatepublicID) throws ApiException {
        ApiResponse<EzsigntemplatepublicGetFormsDataV1Response> localVarResp = ezsigntemplatepublicGetFormsDataV1WithHttpInfo(pkiEzsigntemplatepublicID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Ezsigntemplatepublic&#39;s forms data
     * 
     * @param pkiEzsigntemplatepublicID  (required)
     * @return ApiResponse&lt;EzsigntemplatepublicGetFormsDataV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigntemplatepublicGetFormsDataV1Response> ezsigntemplatepublicGetFormsDataV1WithHttpInfo(Integer pkiEzsigntemplatepublicID) throws ApiException {
        okhttp3.Call localVarCall = ezsigntemplatepublicGetFormsDataV1ValidateBeforeCall(pkiEzsigntemplatepublicID, null);
        Type localVarReturnType = new TypeToken<EzsigntemplatepublicGetFormsDataV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Ezsigntemplatepublic&#39;s forms data (asynchronously)
     * 
     * @param pkiEzsigntemplatepublicID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatepublicGetFormsDataV1Async(Integer pkiEzsigntemplatepublicID, final ApiCallback<EzsigntemplatepublicGetFormsDataV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigntemplatepublicGetFormsDataV1ValidateBeforeCall(pkiEzsigntemplatepublicID, _callback);
        Type localVarReturnType = new TypeToken<EzsigntemplatepublicGetFormsDataV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigntemplatepublicGetListV1
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatepublicGetListV1Call(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/ezsigntemplatepublic/getList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eOrderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eOrderBy", eOrderBy));
        }

        if (iRowMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iRowMax", iRowMax));
        }

        if (iRowOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iRowOffset", iRowOffset));
        }

        if (sFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sFilter", sFilter));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigntemplatepublicGetListV1ValidateBeforeCall(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter, final ApiCallback _callback) throws ApiException {
        return ezsigntemplatepublicGetListV1Call(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, _callback);

    }

    /**
     * Retrieve Ezsigntemplatepublic list
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsigntemplatepublicLimittype | Hour&lt;br&gt;Day&lt;br&gt;Month&lt;br&gt;Total |
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return EzsigntemplatepublicGetListV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public EzsigntemplatepublicGetListV1Response ezsigntemplatepublicGetListV1(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter) throws ApiException {
        ApiResponse<EzsigntemplatepublicGetListV1Response> localVarResp = ezsigntemplatepublicGetListV1WithHttpInfo(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter);
        return localVarResp.getData();
    }

    /**
     * Retrieve Ezsigntemplatepublic list
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsigntemplatepublicLimittype | Hour&lt;br&gt;Day&lt;br&gt;Month&lt;br&gt;Total |
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return ApiResponse&lt;EzsigntemplatepublicGetListV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigntemplatepublicGetListV1Response> ezsigntemplatepublicGetListV1WithHttpInfo(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter) throws ApiException {
        okhttp3.Call localVarCall = ezsigntemplatepublicGetListV1ValidateBeforeCall(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, null);
        Type localVarReturnType = new TypeToken<EzsigntemplatepublicGetListV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Ezsigntemplatepublic list (asynchronously)
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsigntemplatepublicLimittype | Hour&lt;br&gt;Day&lt;br&gt;Month&lt;br&gt;Total |
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatepublicGetListV1Async(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter, final ApiCallback<EzsigntemplatepublicGetListV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigntemplatepublicGetListV1ValidateBeforeCall(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, _callback);
        Type localVarReturnType = new TypeToken<EzsigntemplatepublicGetListV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigntemplatepublicGetObjectV2
     * @param pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatepublicGetObjectV2Call(Integer pkiEzsigntemplatepublicID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}"
            .replace("{" + "pkiEzsigntemplatepublicID" + "}", localVarApiClient.escapeString(pkiEzsigntemplatepublicID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigntemplatepublicGetObjectV2ValidateBeforeCall(Integer pkiEzsigntemplatepublicID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiEzsigntemplatepublicID' is set
        if (pkiEzsigntemplatepublicID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigntemplatepublicID' when calling ezsigntemplatepublicGetObjectV2(Async)");
        }

        return ezsigntemplatepublicGetObjectV2Call(pkiEzsigntemplatepublicID, _callback);

    }

    /**
     * Retrieve an existing Ezsigntemplatepublic
     * 
     * @param pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic (required)
     * @return EzsigntemplatepublicGetObjectV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsigntemplatepublicGetObjectV2Response ezsigntemplatepublicGetObjectV2(Integer pkiEzsigntemplatepublicID) throws ApiException {
        ApiResponse<EzsigntemplatepublicGetObjectV2Response> localVarResp = ezsigntemplatepublicGetObjectV2WithHttpInfo(pkiEzsigntemplatepublicID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Ezsigntemplatepublic
     * 
     * @param pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic (required)
     * @return ApiResponse&lt;EzsigntemplatepublicGetObjectV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigntemplatepublicGetObjectV2Response> ezsigntemplatepublicGetObjectV2WithHttpInfo(Integer pkiEzsigntemplatepublicID) throws ApiException {
        okhttp3.Call localVarCall = ezsigntemplatepublicGetObjectV2ValidateBeforeCall(pkiEzsigntemplatepublicID, null);
        Type localVarReturnType = new TypeToken<EzsigntemplatepublicGetObjectV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Ezsigntemplatepublic (asynchronously)
     * 
     * @param pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatepublicGetObjectV2Async(Integer pkiEzsigntemplatepublicID, final ApiCallback<EzsigntemplatepublicGetObjectV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigntemplatepublicGetObjectV2ValidateBeforeCall(pkiEzsigntemplatepublicID, _callback);
        Type localVarReturnType = new TypeToken<EzsigntemplatepublicGetObjectV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigntemplatepublicResetLimitExceededCounterV1
     * @param pkiEzsigntemplatepublicID  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatepublicResetLimitExceededCounterV1Call(Integer pkiEzsigntemplatepublicID, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}/resetLimitExceededCounter"
            .replace("{" + "pkiEzsigntemplatepublicID" + "}", localVarApiClient.escapeString(pkiEzsigntemplatepublicID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigntemplatepublicResetLimitExceededCounterV1ValidateBeforeCall(Integer pkiEzsigntemplatepublicID, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiEzsigntemplatepublicID' is set
        if (pkiEzsigntemplatepublicID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigntemplatepublicID' when calling ezsigntemplatepublicResetLimitExceededCounterV1(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling ezsigntemplatepublicResetLimitExceededCounterV1(Async)");
        }

        return ezsigntemplatepublicResetLimitExceededCounterV1Call(pkiEzsigntemplatepublicID, body, _callback);

    }

    /**
     * Reset the limit exceeded counter
     * 
     * @param pkiEzsigntemplatepublicID  (required)
     * @param body  (required)
     * @return EzsigntemplatepublicResetLimitExceededCounterV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EzsigntemplatepublicResetLimitExceededCounterV1Response ezsigntemplatepublicResetLimitExceededCounterV1(Integer pkiEzsigntemplatepublicID, Object body) throws ApiException {
        ApiResponse<EzsigntemplatepublicResetLimitExceededCounterV1Response> localVarResp = ezsigntemplatepublicResetLimitExceededCounterV1WithHttpInfo(pkiEzsigntemplatepublicID, body);
        return localVarResp.getData();
    }

    /**
     * Reset the limit exceeded counter
     * 
     * @param pkiEzsigntemplatepublicID  (required)
     * @param body  (required)
     * @return ApiResponse&lt;EzsigntemplatepublicResetLimitExceededCounterV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigntemplatepublicResetLimitExceededCounterV1Response> ezsigntemplatepublicResetLimitExceededCounterV1WithHttpInfo(Integer pkiEzsigntemplatepublicID, Object body) throws ApiException {
        okhttp3.Call localVarCall = ezsigntemplatepublicResetLimitExceededCounterV1ValidateBeforeCall(pkiEzsigntemplatepublicID, body, null);
        Type localVarReturnType = new TypeToken<EzsigntemplatepublicResetLimitExceededCounterV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reset the limit exceeded counter (asynchronously)
     * 
     * @param pkiEzsigntemplatepublicID  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatepublicResetLimitExceededCounterV1Async(Integer pkiEzsigntemplatepublicID, Object body, final ApiCallback<EzsigntemplatepublicResetLimitExceededCounterV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigntemplatepublicResetLimitExceededCounterV1ValidateBeforeCall(pkiEzsigntemplatepublicID, body, _callback);
        Type localVarReturnType = new TypeToken<EzsigntemplatepublicResetLimitExceededCounterV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigntemplatepublicResetUrlV1
     * @param pkiEzsigntemplatepublicID  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatepublicResetUrlV1Call(Integer pkiEzsigntemplatepublicID, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}/resetUrl"
            .replace("{" + "pkiEzsigntemplatepublicID" + "}", localVarApiClient.escapeString(pkiEzsigntemplatepublicID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigntemplatepublicResetUrlV1ValidateBeforeCall(Integer pkiEzsigntemplatepublicID, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiEzsigntemplatepublicID' is set
        if (pkiEzsigntemplatepublicID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigntemplatepublicID' when calling ezsigntemplatepublicResetUrlV1(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling ezsigntemplatepublicResetUrlV1(Async)");
        }

        return ezsigntemplatepublicResetUrlV1Call(pkiEzsigntemplatepublicID, body, _callback);

    }

    /**
     * Reset the Ezsigntemplatepublic url
     * 
     * @param pkiEzsigntemplatepublicID  (required)
     * @param body  (required)
     * @return EzsigntemplatepublicResetUrlV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EzsigntemplatepublicResetUrlV1Response ezsigntemplatepublicResetUrlV1(Integer pkiEzsigntemplatepublicID, Object body) throws ApiException {
        ApiResponse<EzsigntemplatepublicResetUrlV1Response> localVarResp = ezsigntemplatepublicResetUrlV1WithHttpInfo(pkiEzsigntemplatepublicID, body);
        return localVarResp.getData();
    }

    /**
     * Reset the Ezsigntemplatepublic url
     * 
     * @param pkiEzsigntemplatepublicID  (required)
     * @param body  (required)
     * @return ApiResponse&lt;EzsigntemplatepublicResetUrlV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigntemplatepublicResetUrlV1Response> ezsigntemplatepublicResetUrlV1WithHttpInfo(Integer pkiEzsigntemplatepublicID, Object body) throws ApiException {
        okhttp3.Call localVarCall = ezsigntemplatepublicResetUrlV1ValidateBeforeCall(pkiEzsigntemplatepublicID, body, null);
        Type localVarReturnType = new TypeToken<EzsigntemplatepublicResetUrlV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reset the Ezsigntemplatepublic url (asynchronously)
     * 
     * @param pkiEzsigntemplatepublicID  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatepublicResetUrlV1Async(Integer pkiEzsigntemplatepublicID, Object body, final ApiCallback<EzsigntemplatepublicResetUrlV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigntemplatepublicResetUrlV1ValidateBeforeCall(pkiEzsigntemplatepublicID, body, _callback);
        Type localVarReturnType = new TypeToken<EzsigntemplatepublicResetUrlV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
