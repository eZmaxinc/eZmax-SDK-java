/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api;

import eZmaxAPI.ApiCallback;
import eZmaxAPI.ApiClient;
import eZmaxAPI.ApiException;
import eZmaxAPI.ApiResponse;
import eZmaxAPI.Configuration;
import eZmaxAPI.Pair;
import eZmaxAPI.ProgressRequestBody;
import eZmaxAPI.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ezmax.api.model.CommonResponseError;
import com.ezmax.api.model.CommonResponseErrorCreditcardValidation;
import com.ezmax.api.model.CreditcardclientCreateObjectV1Request;
import com.ezmax.api.model.CreditcardclientCreateObjectV1Response;
import com.ezmax.api.model.CreditcardclientDeleteObjectV1Response;
import com.ezmax.api.model.CreditcardclientEditObjectV1Request;
import com.ezmax.api.model.CreditcardclientEditObjectV1Response;
import com.ezmax.api.model.CreditcardclientGetAutocompleteV2Response;
import com.ezmax.api.model.CreditcardclientGetListV1Response;
import com.ezmax.api.model.CreditcardclientGetObjectV2Response;
import com.ezmax.api.model.CreditcardclientPatchObjectV1Request;
import com.ezmax.api.model.CreditcardclientPatchObjectV1Response;
import java.io.File;
import com.ezmax.api.model.HeaderAcceptLanguage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ObjectCreditcardclientApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ObjectCreditcardclientApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ObjectCreditcardclientApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for creditcardclientCreateObjectV1
     * @param creditcardclientCreateObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creditcardclientCreateObjectV1Call(CreditcardclientCreateObjectV1Request creditcardclientCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creditcardclientCreateObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/creditcardclient";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creditcardclientCreateObjectV1ValidateBeforeCall(CreditcardclientCreateObjectV1Request creditcardclientCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditcardclientCreateObjectV1Request' is set
        if (creditcardclientCreateObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'creditcardclientCreateObjectV1Request' when calling creditcardclientCreateObjectV1(Async)");
        }

        return creditcardclientCreateObjectV1Call(creditcardclientCreateObjectV1Request, _callback);

    }

    /**
     * Create a new Creditcardclient
     * The endpoint allows to create one or many elements at once.
     * @param creditcardclientCreateObjectV1Request  (required)
     * @return CreditcardclientCreateObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body. </td><td>  -  </td></tr>
     </table>
     */
    public CreditcardclientCreateObjectV1Response creditcardclientCreateObjectV1(CreditcardclientCreateObjectV1Request creditcardclientCreateObjectV1Request) throws ApiException {
        ApiResponse<CreditcardclientCreateObjectV1Response> localVarResp = creditcardclientCreateObjectV1WithHttpInfo(creditcardclientCreateObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Create a new Creditcardclient
     * The endpoint allows to create one or many elements at once.
     * @param creditcardclientCreateObjectV1Request  (required)
     * @return ApiResponse&lt;CreditcardclientCreateObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreditcardclientCreateObjectV1Response> creditcardclientCreateObjectV1WithHttpInfo(CreditcardclientCreateObjectV1Request creditcardclientCreateObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = creditcardclientCreateObjectV1ValidateBeforeCall(creditcardclientCreateObjectV1Request, null);
        Type localVarReturnType = new TypeToken<CreditcardclientCreateObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Creditcardclient (asynchronously)
     * The endpoint allows to create one or many elements at once.
     * @param creditcardclientCreateObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creditcardclientCreateObjectV1Async(CreditcardclientCreateObjectV1Request creditcardclientCreateObjectV1Request, final ApiCallback<CreditcardclientCreateObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = creditcardclientCreateObjectV1ValidateBeforeCall(creditcardclientCreateObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<CreditcardclientCreateObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for creditcardclientDeleteObjectV1
     * @param pkiCreditcardclientID The unique ID of the Creditcardclient (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creditcardclientDeleteObjectV1Call(Integer pkiCreditcardclientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/creditcardclient/{pkiCreditcardclientID}"
            .replace("{" + "pkiCreditcardclientID" + "}", localVarApiClient.escapeString(pkiCreditcardclientID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creditcardclientDeleteObjectV1ValidateBeforeCall(Integer pkiCreditcardclientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiCreditcardclientID' is set
        if (pkiCreditcardclientID == null) {
            throw new ApiException("Missing the required parameter 'pkiCreditcardclientID' when calling creditcardclientDeleteObjectV1(Async)");
        }

        return creditcardclientDeleteObjectV1Call(pkiCreditcardclientID, _callback);

    }

    /**
     * Delete an existing Creditcardclient
     * 
     * @param pkiCreditcardclientID The unique ID of the Creditcardclient (required)
     * @return CreditcardclientDeleteObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public CreditcardclientDeleteObjectV1Response creditcardclientDeleteObjectV1(Integer pkiCreditcardclientID) throws ApiException {
        ApiResponse<CreditcardclientDeleteObjectV1Response> localVarResp = creditcardclientDeleteObjectV1WithHttpInfo(pkiCreditcardclientID);
        return localVarResp.getData();
    }

    /**
     * Delete an existing Creditcardclient
     * 
     * @param pkiCreditcardclientID The unique ID of the Creditcardclient (required)
     * @return ApiResponse&lt;CreditcardclientDeleteObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreditcardclientDeleteObjectV1Response> creditcardclientDeleteObjectV1WithHttpInfo(Integer pkiCreditcardclientID) throws ApiException {
        okhttp3.Call localVarCall = creditcardclientDeleteObjectV1ValidateBeforeCall(pkiCreditcardclientID, null);
        Type localVarReturnType = new TypeToken<CreditcardclientDeleteObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an existing Creditcardclient (asynchronously)
     * 
     * @param pkiCreditcardclientID The unique ID of the Creditcardclient (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creditcardclientDeleteObjectV1Async(Integer pkiCreditcardclientID, final ApiCallback<CreditcardclientDeleteObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = creditcardclientDeleteObjectV1ValidateBeforeCall(pkiCreditcardclientID, _callback);
        Type localVarReturnType = new TypeToken<CreditcardclientDeleteObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for creditcardclientEditObjectV1
     * @param pkiCreditcardclientID The unique ID of the Creditcardclient (required)
     * @param creditcardclientEditObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creditcardclientEditObjectV1Call(Integer pkiCreditcardclientID, CreditcardclientEditObjectV1Request creditcardclientEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creditcardclientEditObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/creditcardclient/{pkiCreditcardclientID}"
            .replace("{" + "pkiCreditcardclientID" + "}", localVarApiClient.escapeString(pkiCreditcardclientID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creditcardclientEditObjectV1ValidateBeforeCall(Integer pkiCreditcardclientID, CreditcardclientEditObjectV1Request creditcardclientEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiCreditcardclientID' is set
        if (pkiCreditcardclientID == null) {
            throw new ApiException("Missing the required parameter 'pkiCreditcardclientID' when calling creditcardclientEditObjectV1(Async)");
        }

        // verify the required parameter 'creditcardclientEditObjectV1Request' is set
        if (creditcardclientEditObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'creditcardclientEditObjectV1Request' when calling creditcardclientEditObjectV1(Async)");
        }

        return creditcardclientEditObjectV1Call(pkiCreditcardclientID, creditcardclientEditObjectV1Request, _callback);

    }

    /**
     * Edit an existing Creditcardclient
     * 
     * @param pkiCreditcardclientID The unique ID of the Creditcardclient (required)
     * @param creditcardclientEditObjectV1Request  (required)
     * @return CreditcardclientEditObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body. </td><td>  -  </td></tr>
     </table>
     */
    public CreditcardclientEditObjectV1Response creditcardclientEditObjectV1(Integer pkiCreditcardclientID, CreditcardclientEditObjectV1Request creditcardclientEditObjectV1Request) throws ApiException {
        ApiResponse<CreditcardclientEditObjectV1Response> localVarResp = creditcardclientEditObjectV1WithHttpInfo(pkiCreditcardclientID, creditcardclientEditObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Edit an existing Creditcardclient
     * 
     * @param pkiCreditcardclientID The unique ID of the Creditcardclient (required)
     * @param creditcardclientEditObjectV1Request  (required)
     * @return ApiResponse&lt;CreditcardclientEditObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreditcardclientEditObjectV1Response> creditcardclientEditObjectV1WithHttpInfo(Integer pkiCreditcardclientID, CreditcardclientEditObjectV1Request creditcardclientEditObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = creditcardclientEditObjectV1ValidateBeforeCall(pkiCreditcardclientID, creditcardclientEditObjectV1Request, null);
        Type localVarReturnType = new TypeToken<CreditcardclientEditObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit an existing Creditcardclient (asynchronously)
     * 
     * @param pkiCreditcardclientID The unique ID of the Creditcardclient (required)
     * @param creditcardclientEditObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creditcardclientEditObjectV1Async(Integer pkiCreditcardclientID, CreditcardclientEditObjectV1Request creditcardclientEditObjectV1Request, final ApiCallback<CreditcardclientEditObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = creditcardclientEditObjectV1ValidateBeforeCall(pkiCreditcardclientID, creditcardclientEditObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<CreditcardclientEditObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for creditcardclientGetAutocompleteV2
     * @param sSelector The type of Creditcardclients to return (required)
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creditcardclientGetAutocompleteV2Call(String sSelector, String eFilterActive, String sQuery, HeaderAcceptLanguage acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/object/creditcardclient/getAutocomplete/{sSelector}"
            .replace("{" + "sSelector" + "}", localVarApiClient.escapeString(sSelector.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eFilterActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eFilterActive", eFilterActive));
        }

        if (sQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sQuery", sQuery));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creditcardclientGetAutocompleteV2ValidateBeforeCall(String sSelector, String eFilterActive, String sQuery, HeaderAcceptLanguage acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sSelector' is set
        if (sSelector == null) {
            throw new ApiException("Missing the required parameter 'sSelector' when calling creditcardclientGetAutocompleteV2(Async)");
        }

        return creditcardclientGetAutocompleteV2Call(sSelector, eFilterActive, sQuery, acceptLanguage, _callback);

    }

    /**
     * Retrieve Creditcardclients and IDs
     * Get the list of Creditcardclient to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Creditcardclients to return (required)
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return CreditcardclientGetAutocompleteV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public CreditcardclientGetAutocompleteV2Response creditcardclientGetAutocompleteV2(String sSelector, String eFilterActive, String sQuery, HeaderAcceptLanguage acceptLanguage) throws ApiException {
        ApiResponse<CreditcardclientGetAutocompleteV2Response> localVarResp = creditcardclientGetAutocompleteV2WithHttpInfo(sSelector, eFilterActive, sQuery, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Retrieve Creditcardclients and IDs
     * Get the list of Creditcardclient to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Creditcardclients to return (required)
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return ApiResponse&lt;CreditcardclientGetAutocompleteV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreditcardclientGetAutocompleteV2Response> creditcardclientGetAutocompleteV2WithHttpInfo(String sSelector, String eFilterActive, String sQuery, HeaderAcceptLanguage acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = creditcardclientGetAutocompleteV2ValidateBeforeCall(sSelector, eFilterActive, sQuery, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<CreditcardclientGetAutocompleteV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Creditcardclients and IDs (asynchronously)
     * Get the list of Creditcardclient to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Creditcardclients to return (required)
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creditcardclientGetAutocompleteV2Async(String sSelector, String eFilterActive, String sQuery, HeaderAcceptLanguage acceptLanguage, final ApiCallback<CreditcardclientGetAutocompleteV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = creditcardclientGetAutocompleteV2ValidateBeforeCall(sSelector, eFilterActive, sQuery, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<CreditcardclientGetAutocompleteV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for creditcardclientGetListV1
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creditcardclientGetListV1Call(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/creditcardclient/getList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eOrderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eOrderBy", eOrderBy));
        }

        if (iRowMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iRowMax", iRowMax));
        }

        if (iRowOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iRowOffset", iRowOffset));
        }

        if (sFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sFilter", sFilter));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }


        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creditcardclientGetListV1ValidateBeforeCall(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter, final ApiCallback _callback) throws ApiException {
        return creditcardclientGetListV1Call(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, _callback);

    }

    /**
     * Retrieve Creditcardclient list
     * 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return CreditcardclientGetListV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public CreditcardclientGetListV1Response creditcardclientGetListV1(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter) throws ApiException {
        ApiResponse<CreditcardclientGetListV1Response> localVarResp = creditcardclientGetListV1WithHttpInfo(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter);
        return localVarResp.getData();
    }

    /**
     * Retrieve Creditcardclient list
     * 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return ApiResponse&lt;CreditcardclientGetListV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreditcardclientGetListV1Response> creditcardclientGetListV1WithHttpInfo(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter) throws ApiException {
        okhttp3.Call localVarCall = creditcardclientGetListV1ValidateBeforeCall(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, null);
        Type localVarReturnType = new TypeToken<CreditcardclientGetListV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Creditcardclient list (asynchronously)
     * 
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional, default to 0)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creditcardclientGetListV1Async(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter, final ApiCallback<CreditcardclientGetListV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = creditcardclientGetListV1ValidateBeforeCall(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, _callback);
        Type localVarReturnType = new TypeToken<CreditcardclientGetListV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for creditcardclientGetObjectV2
     * @param pkiCreditcardclientID The unique ID of the Creditcardclient (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creditcardclientGetObjectV2Call(Integer pkiCreditcardclientID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/object/creditcardclient/{pkiCreditcardclientID}"
            .replace("{" + "pkiCreditcardclientID" + "}", localVarApiClient.escapeString(pkiCreditcardclientID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creditcardclientGetObjectV2ValidateBeforeCall(Integer pkiCreditcardclientID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiCreditcardclientID' is set
        if (pkiCreditcardclientID == null) {
            throw new ApiException("Missing the required parameter 'pkiCreditcardclientID' when calling creditcardclientGetObjectV2(Async)");
        }

        return creditcardclientGetObjectV2Call(pkiCreditcardclientID, _callback);

    }

    /**
     * Retrieve an existing Creditcardclient
     * 
     * @param pkiCreditcardclientID The unique ID of the Creditcardclient (required)
     * @return CreditcardclientGetObjectV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public CreditcardclientGetObjectV2Response creditcardclientGetObjectV2(Integer pkiCreditcardclientID) throws ApiException {
        ApiResponse<CreditcardclientGetObjectV2Response> localVarResp = creditcardclientGetObjectV2WithHttpInfo(pkiCreditcardclientID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Creditcardclient
     * 
     * @param pkiCreditcardclientID The unique ID of the Creditcardclient (required)
     * @return ApiResponse&lt;CreditcardclientGetObjectV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreditcardclientGetObjectV2Response> creditcardclientGetObjectV2WithHttpInfo(Integer pkiCreditcardclientID) throws ApiException {
        okhttp3.Call localVarCall = creditcardclientGetObjectV2ValidateBeforeCall(pkiCreditcardclientID, null);
        Type localVarReturnType = new TypeToken<CreditcardclientGetObjectV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Creditcardclient (asynchronously)
     * 
     * @param pkiCreditcardclientID The unique ID of the Creditcardclient (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creditcardclientGetObjectV2Async(Integer pkiCreditcardclientID, final ApiCallback<CreditcardclientGetObjectV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = creditcardclientGetObjectV2ValidateBeforeCall(pkiCreditcardclientID, _callback);
        Type localVarReturnType = new TypeToken<CreditcardclientGetObjectV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for creditcardclientPatchObjectV1
     * @param pkiCreditcardclientID The unique ID of the Creditcardclient (required)
     * @param creditcardclientPatchObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creditcardclientPatchObjectV1Call(Integer pkiCreditcardclientID, CreditcardclientPatchObjectV1Request creditcardclientPatchObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creditcardclientPatchObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/creditcardclient/{pkiCreditcardclientID}"
            .replace("{" + "pkiCreditcardclientID" + "}", localVarApiClient.escapeString(pkiCreditcardclientID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creditcardclientPatchObjectV1ValidateBeforeCall(Integer pkiCreditcardclientID, CreditcardclientPatchObjectV1Request creditcardclientPatchObjectV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiCreditcardclientID' is set
        if (pkiCreditcardclientID == null) {
            throw new ApiException("Missing the required parameter 'pkiCreditcardclientID' when calling creditcardclientPatchObjectV1(Async)");
        }

        // verify the required parameter 'creditcardclientPatchObjectV1Request' is set
        if (creditcardclientPatchObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'creditcardclientPatchObjectV1Request' when calling creditcardclientPatchObjectV1(Async)");
        }

        return creditcardclientPatchObjectV1Call(pkiCreditcardclientID, creditcardclientPatchObjectV1Request, _callback);

    }

    /**
     * Patch an existing Creditcardclient
     * 
     * @param pkiCreditcardclientID The unique ID of the Creditcardclient (required)
     * @param creditcardclientPatchObjectV1Request  (required)
     * @return CreditcardclientPatchObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public CreditcardclientPatchObjectV1Response creditcardclientPatchObjectV1(Integer pkiCreditcardclientID, CreditcardclientPatchObjectV1Request creditcardclientPatchObjectV1Request) throws ApiException {
        ApiResponse<CreditcardclientPatchObjectV1Response> localVarResp = creditcardclientPatchObjectV1WithHttpInfo(pkiCreditcardclientID, creditcardclientPatchObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Patch an existing Creditcardclient
     * 
     * @param pkiCreditcardclientID The unique ID of the Creditcardclient (required)
     * @param creditcardclientPatchObjectV1Request  (required)
     * @return ApiResponse&lt;CreditcardclientPatchObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreditcardclientPatchObjectV1Response> creditcardclientPatchObjectV1WithHttpInfo(Integer pkiCreditcardclientID, CreditcardclientPatchObjectV1Request creditcardclientPatchObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = creditcardclientPatchObjectV1ValidateBeforeCall(pkiCreditcardclientID, creditcardclientPatchObjectV1Request, null);
        Type localVarReturnType = new TypeToken<CreditcardclientPatchObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch an existing Creditcardclient (asynchronously)
     * 
     * @param pkiCreditcardclientID The unique ID of the Creditcardclient (required)
     * @param creditcardclientPatchObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creditcardclientPatchObjectV1Async(Integer pkiCreditcardclientID, CreditcardclientPatchObjectV1Request creditcardclientPatchObjectV1Request, final ApiCallback<CreditcardclientPatchObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = creditcardclientPatchObjectV1ValidateBeforeCall(pkiCreditcardclientID, creditcardclientPatchObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<CreditcardclientPatchObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
