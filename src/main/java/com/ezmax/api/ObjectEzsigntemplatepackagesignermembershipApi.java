/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.14
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api;

import eZmaxAPI.ApiCallback;
import eZmaxAPI.ApiClient;
import eZmaxAPI.ApiException;
import eZmaxAPI.ApiResponse;
import eZmaxAPI.Configuration;
import eZmaxAPI.Pair;
import eZmaxAPI.ProgressRequestBody;
import eZmaxAPI.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ezmax.api.model.CommonResponseError;
import com.ezmax.api.model.EzsigntemplatepackagesignermembershipCreateObjectV1Request;
import com.ezmax.api.model.EzsigntemplatepackagesignermembershipCreateObjectV1Response;
import com.ezmax.api.model.EzsigntemplatepackagesignermembershipDeleteObjectV1Response;
import com.ezmax.api.model.EzsigntemplatepackagesignermembershipGetObjectV1Response;
import com.ezmax.api.model.EzsigntemplatepackagesignermembershipGetObjectV2Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ObjectEzsigntemplatepackagesignermembershipApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ObjectEzsigntemplatepackagesignermembershipApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ObjectEzsigntemplatepackagesignermembershipApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for ezsigntemplatepackagesignermembershipCreateObjectV1
     * @param ezsigntemplatepackagesignermembershipCreateObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatepackagesignermembershipCreateObjectV1Call(EzsigntemplatepackagesignermembershipCreateObjectV1Request ezsigntemplatepackagesignermembershipCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezsigntemplatepackagesignermembershipCreateObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezsigntemplatepackagesignermembership";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigntemplatepackagesignermembershipCreateObjectV1ValidateBeforeCall(EzsigntemplatepackagesignermembershipCreateObjectV1Request ezsigntemplatepackagesignermembershipCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ezsigntemplatepackagesignermembershipCreateObjectV1Request' is set
        if (ezsigntemplatepackagesignermembershipCreateObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezsigntemplatepackagesignermembershipCreateObjectV1Request' when calling ezsigntemplatepackagesignermembershipCreateObjectV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsigntemplatepackagesignermembershipCreateObjectV1Call(ezsigntemplatepackagesignermembershipCreateObjectV1Request, _callback);
        return localVarCall;

    }

    /**
     * Create a new Ezsigntemplatepackagesignermembership
     * The endpoint allows to create one or many elements at once.
     * @param ezsigntemplatepackagesignermembershipCreateObjectV1Request  (required)
     * @return EzsigntemplatepackagesignermembershipCreateObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsigntemplatepackagesignermembershipCreateObjectV1Response ezsigntemplatepackagesignermembershipCreateObjectV1(EzsigntemplatepackagesignermembershipCreateObjectV1Request ezsigntemplatepackagesignermembershipCreateObjectV1Request) throws ApiException {
        ApiResponse<EzsigntemplatepackagesignermembershipCreateObjectV1Response> localVarResp = ezsigntemplatepackagesignermembershipCreateObjectV1WithHttpInfo(ezsigntemplatepackagesignermembershipCreateObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Create a new Ezsigntemplatepackagesignermembership
     * The endpoint allows to create one or many elements at once.
     * @param ezsigntemplatepackagesignermembershipCreateObjectV1Request  (required)
     * @return ApiResponse&lt;EzsigntemplatepackagesignermembershipCreateObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigntemplatepackagesignermembershipCreateObjectV1Response> ezsigntemplatepackagesignermembershipCreateObjectV1WithHttpInfo(EzsigntemplatepackagesignermembershipCreateObjectV1Request ezsigntemplatepackagesignermembershipCreateObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezsigntemplatepackagesignermembershipCreateObjectV1ValidateBeforeCall(ezsigntemplatepackagesignermembershipCreateObjectV1Request, null);
        Type localVarReturnType = new TypeToken<EzsigntemplatepackagesignermembershipCreateObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Ezsigntemplatepackagesignermembership (asynchronously)
     * The endpoint allows to create one or many elements at once.
     * @param ezsigntemplatepackagesignermembershipCreateObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatepackagesignermembershipCreateObjectV1Async(EzsigntemplatepackagesignermembershipCreateObjectV1Request ezsigntemplatepackagesignermembershipCreateObjectV1Request, final ApiCallback<EzsigntemplatepackagesignermembershipCreateObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigntemplatepackagesignermembershipCreateObjectV1ValidateBeforeCall(ezsigntemplatepackagesignermembershipCreateObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<EzsigntemplatepackagesignermembershipCreateObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigntemplatepackagesignermembershipDeleteObjectV1
     * @param pkiEzsigntemplatepackagesignermembershipID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatepackagesignermembershipDeleteObjectV1Call(Integer pkiEzsigntemplatepackagesignermembershipID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/ezsigntemplatepackagesignermembership/{pkiEzsigntemplatepackagesignermembershipID}"
            .replaceAll("\\{" + "pkiEzsigntemplatepackagesignermembershipID" + "\\}", localVarApiClient.escapeString(pkiEzsigntemplatepackagesignermembershipID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigntemplatepackagesignermembershipDeleteObjectV1ValidateBeforeCall(Integer pkiEzsigntemplatepackagesignermembershipID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pkiEzsigntemplatepackagesignermembershipID' is set
        if (pkiEzsigntemplatepackagesignermembershipID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigntemplatepackagesignermembershipID' when calling ezsigntemplatepackagesignermembershipDeleteObjectV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsigntemplatepackagesignermembershipDeleteObjectV1Call(pkiEzsigntemplatepackagesignermembershipID, _callback);
        return localVarCall;

    }

    /**
     * Delete an existing Ezsigntemplatepackagesignermembership
     * 
     * @param pkiEzsigntemplatepackagesignermembershipID  (required)
     * @return EzsigntemplatepackagesignermembershipDeleteObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsigntemplatepackagesignermembershipDeleteObjectV1Response ezsigntemplatepackagesignermembershipDeleteObjectV1(Integer pkiEzsigntemplatepackagesignermembershipID) throws ApiException {
        ApiResponse<EzsigntemplatepackagesignermembershipDeleteObjectV1Response> localVarResp = ezsigntemplatepackagesignermembershipDeleteObjectV1WithHttpInfo(pkiEzsigntemplatepackagesignermembershipID);
        return localVarResp.getData();
    }

    /**
     * Delete an existing Ezsigntemplatepackagesignermembership
     * 
     * @param pkiEzsigntemplatepackagesignermembershipID  (required)
     * @return ApiResponse&lt;EzsigntemplatepackagesignermembershipDeleteObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigntemplatepackagesignermembershipDeleteObjectV1Response> ezsigntemplatepackagesignermembershipDeleteObjectV1WithHttpInfo(Integer pkiEzsigntemplatepackagesignermembershipID) throws ApiException {
        okhttp3.Call localVarCall = ezsigntemplatepackagesignermembershipDeleteObjectV1ValidateBeforeCall(pkiEzsigntemplatepackagesignermembershipID, null);
        Type localVarReturnType = new TypeToken<EzsigntemplatepackagesignermembershipDeleteObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an existing Ezsigntemplatepackagesignermembership (asynchronously)
     * 
     * @param pkiEzsigntemplatepackagesignermembershipID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatepackagesignermembershipDeleteObjectV1Async(Integer pkiEzsigntemplatepackagesignermembershipID, final ApiCallback<EzsigntemplatepackagesignermembershipDeleteObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigntemplatepackagesignermembershipDeleteObjectV1ValidateBeforeCall(pkiEzsigntemplatepackagesignermembershipID, _callback);
        Type localVarReturnType = new TypeToken<EzsigntemplatepackagesignermembershipDeleteObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigntemplatepackagesignermembershipGetObjectV1
     * @param pkiEzsigntemplatepackagesignermembershipID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call ezsigntemplatepackagesignermembershipGetObjectV1Call(Integer pkiEzsigntemplatepackagesignermembershipID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/ezsigntemplatepackagesignermembership/{pkiEzsigntemplatepackagesignermembershipID}"
            .replaceAll("\\{" + "pkiEzsigntemplatepackagesignermembershipID" + "\\}", localVarApiClient.escapeString(pkiEzsigntemplatepackagesignermembershipID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigntemplatepackagesignermembershipGetObjectV1ValidateBeforeCall(Integer pkiEzsigntemplatepackagesignermembershipID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pkiEzsigntemplatepackagesignermembershipID' is set
        if (pkiEzsigntemplatepackagesignermembershipID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigntemplatepackagesignermembershipID' when calling ezsigntemplatepackagesignermembershipGetObjectV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsigntemplatepackagesignermembershipGetObjectV1Call(pkiEzsigntemplatepackagesignermembershipID, _callback);
        return localVarCall;

    }

    /**
     * Retrieve an existing Ezsigntemplatepackagesignermembership
     * 
     * @param pkiEzsigntemplatepackagesignermembershipID  (required)
     * @return EzsigntemplatepackagesignermembershipGetObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public EzsigntemplatepackagesignermembershipGetObjectV1Response ezsigntemplatepackagesignermembershipGetObjectV1(Integer pkiEzsigntemplatepackagesignermembershipID) throws ApiException {
        ApiResponse<EzsigntemplatepackagesignermembershipGetObjectV1Response> localVarResp = ezsigntemplatepackagesignermembershipGetObjectV1WithHttpInfo(pkiEzsigntemplatepackagesignermembershipID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Ezsigntemplatepackagesignermembership
     * 
     * @param pkiEzsigntemplatepackagesignermembershipID  (required)
     * @return ApiResponse&lt;EzsigntemplatepackagesignermembershipGetObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<EzsigntemplatepackagesignermembershipGetObjectV1Response> ezsigntemplatepackagesignermembershipGetObjectV1WithHttpInfo(Integer pkiEzsigntemplatepackagesignermembershipID) throws ApiException {
        okhttp3.Call localVarCall = ezsigntemplatepackagesignermembershipGetObjectV1ValidateBeforeCall(pkiEzsigntemplatepackagesignermembershipID, null);
        Type localVarReturnType = new TypeToken<EzsigntemplatepackagesignermembershipGetObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Ezsigntemplatepackagesignermembership (asynchronously)
     * 
     * @param pkiEzsigntemplatepackagesignermembershipID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call ezsigntemplatepackagesignermembershipGetObjectV1Async(Integer pkiEzsigntemplatepackagesignermembershipID, final ApiCallback<EzsigntemplatepackagesignermembershipGetObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigntemplatepackagesignermembershipGetObjectV1ValidateBeforeCall(pkiEzsigntemplatepackagesignermembershipID, _callback);
        Type localVarReturnType = new TypeToken<EzsigntemplatepackagesignermembershipGetObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigntemplatepackagesignermembershipGetObjectV2
     * @param pkiEzsigntemplatepackagesignermembershipID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatepackagesignermembershipGetObjectV2Call(Integer pkiEzsigntemplatepackagesignermembershipID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/object/ezsigntemplatepackagesignermembership/{pkiEzsigntemplatepackagesignermembershipID}"
            .replaceAll("\\{" + "pkiEzsigntemplatepackagesignermembershipID" + "\\}", localVarApiClient.escapeString(pkiEzsigntemplatepackagesignermembershipID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigntemplatepackagesignermembershipGetObjectV2ValidateBeforeCall(Integer pkiEzsigntemplatepackagesignermembershipID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pkiEzsigntemplatepackagesignermembershipID' is set
        if (pkiEzsigntemplatepackagesignermembershipID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigntemplatepackagesignermembershipID' when calling ezsigntemplatepackagesignermembershipGetObjectV2(Async)");
        }
        

        okhttp3.Call localVarCall = ezsigntemplatepackagesignermembershipGetObjectV2Call(pkiEzsigntemplatepackagesignermembershipID, _callback);
        return localVarCall;

    }

    /**
     * Retrieve an existing Ezsigntemplatepackagesignermembership
     * 
     * @param pkiEzsigntemplatepackagesignermembershipID  (required)
     * @return EzsigntemplatepackagesignermembershipGetObjectV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsigntemplatepackagesignermembershipGetObjectV2Response ezsigntemplatepackagesignermembershipGetObjectV2(Integer pkiEzsigntemplatepackagesignermembershipID) throws ApiException {
        ApiResponse<EzsigntemplatepackagesignermembershipGetObjectV2Response> localVarResp = ezsigntemplatepackagesignermembershipGetObjectV2WithHttpInfo(pkiEzsigntemplatepackagesignermembershipID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Ezsigntemplatepackagesignermembership
     * 
     * @param pkiEzsigntemplatepackagesignermembershipID  (required)
     * @return ApiResponse&lt;EzsigntemplatepackagesignermembershipGetObjectV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigntemplatepackagesignermembershipGetObjectV2Response> ezsigntemplatepackagesignermembershipGetObjectV2WithHttpInfo(Integer pkiEzsigntemplatepackagesignermembershipID) throws ApiException {
        okhttp3.Call localVarCall = ezsigntemplatepackagesignermembershipGetObjectV2ValidateBeforeCall(pkiEzsigntemplatepackagesignermembershipID, null);
        Type localVarReturnType = new TypeToken<EzsigntemplatepackagesignermembershipGetObjectV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Ezsigntemplatepackagesignermembership (asynchronously)
     * 
     * @param pkiEzsigntemplatepackagesignermembershipID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatepackagesignermembershipGetObjectV2Async(Integer pkiEzsigntemplatepackagesignermembershipID, final ApiCallback<EzsigntemplatepackagesignermembershipGetObjectV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigntemplatepackagesignermembershipGetObjectV2ValidateBeforeCall(pkiEzsigntemplatepackagesignermembershipID, _callback);
        Type localVarReturnType = new TypeToken<EzsigntemplatepackagesignermembershipGetObjectV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
