/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api;

import eZmaxAPI.ApiCallback;
import eZmaxAPI.ApiClient;
import eZmaxAPI.ApiException;
import eZmaxAPI.ApiResponse;
import eZmaxAPI.Configuration;
import eZmaxAPI.Pair;
import eZmaxAPI.ProgressRequestBody;
import eZmaxAPI.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ezmax.api.model.CommonResponseError;
import com.ezmax.api.model.PermissionCreateObjectV1Request;
import com.ezmax.api.model.PermissionCreateObjectV1Response;
import com.ezmax.api.model.PermissionDeleteObjectV1Response;
import com.ezmax.api.model.PermissionEditObjectV1Request;
import com.ezmax.api.model.PermissionEditObjectV1Response;
import com.ezmax.api.model.PermissionGetObjectV2Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ObjectPermissionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ObjectPermissionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ObjectPermissionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for permissionCreateObjectV1
     * @param permissionCreateObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call permissionCreateObjectV1Call(PermissionCreateObjectV1Request permissionCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = permissionCreateObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/permission";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call permissionCreateObjectV1ValidateBeforeCall(PermissionCreateObjectV1Request permissionCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'permissionCreateObjectV1Request' is set
        if (permissionCreateObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'permissionCreateObjectV1Request' when calling permissionCreateObjectV1(Async)");
        }

        return permissionCreateObjectV1Call(permissionCreateObjectV1Request, _callback);

    }

    /**
     * Create a new Permission
     * The endpoint allows to create one or many elements at once.
     * @param permissionCreateObjectV1Request  (required)
     * @return PermissionCreateObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public PermissionCreateObjectV1Response permissionCreateObjectV1(PermissionCreateObjectV1Request permissionCreateObjectV1Request) throws ApiException {
        ApiResponse<PermissionCreateObjectV1Response> localVarResp = permissionCreateObjectV1WithHttpInfo(permissionCreateObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Create a new Permission
     * The endpoint allows to create one or many elements at once.
     * @param permissionCreateObjectV1Request  (required)
     * @return ApiResponse&lt;PermissionCreateObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PermissionCreateObjectV1Response> permissionCreateObjectV1WithHttpInfo(PermissionCreateObjectV1Request permissionCreateObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = permissionCreateObjectV1ValidateBeforeCall(permissionCreateObjectV1Request, null);
        Type localVarReturnType = new TypeToken<PermissionCreateObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Permission (asynchronously)
     * The endpoint allows to create one or many elements at once.
     * @param permissionCreateObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call permissionCreateObjectV1Async(PermissionCreateObjectV1Request permissionCreateObjectV1Request, final ApiCallback<PermissionCreateObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = permissionCreateObjectV1ValidateBeforeCall(permissionCreateObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<PermissionCreateObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for permissionDeleteObjectV1
     * @param pkiPermissionID The unique ID of the Permission (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call permissionDeleteObjectV1Call(Integer pkiPermissionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/permission/{pkiPermissionID}"
            .replace("{" + "pkiPermissionID" + "}", localVarApiClient.escapeString(pkiPermissionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call permissionDeleteObjectV1ValidateBeforeCall(Integer pkiPermissionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiPermissionID' is set
        if (pkiPermissionID == null) {
            throw new ApiException("Missing the required parameter 'pkiPermissionID' when calling permissionDeleteObjectV1(Async)");
        }

        return permissionDeleteObjectV1Call(pkiPermissionID, _callback);

    }

    /**
     * Delete an existing Permission
     * 
     * @param pkiPermissionID The unique ID of the Permission (required)
     * @return PermissionDeleteObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public PermissionDeleteObjectV1Response permissionDeleteObjectV1(Integer pkiPermissionID) throws ApiException {
        ApiResponse<PermissionDeleteObjectV1Response> localVarResp = permissionDeleteObjectV1WithHttpInfo(pkiPermissionID);
        return localVarResp.getData();
    }

    /**
     * Delete an existing Permission
     * 
     * @param pkiPermissionID The unique ID of the Permission (required)
     * @return ApiResponse&lt;PermissionDeleteObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PermissionDeleteObjectV1Response> permissionDeleteObjectV1WithHttpInfo(Integer pkiPermissionID) throws ApiException {
        okhttp3.Call localVarCall = permissionDeleteObjectV1ValidateBeforeCall(pkiPermissionID, null);
        Type localVarReturnType = new TypeToken<PermissionDeleteObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an existing Permission (asynchronously)
     * 
     * @param pkiPermissionID The unique ID of the Permission (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call permissionDeleteObjectV1Async(Integer pkiPermissionID, final ApiCallback<PermissionDeleteObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = permissionDeleteObjectV1ValidateBeforeCall(pkiPermissionID, _callback);
        Type localVarReturnType = new TypeToken<PermissionDeleteObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for permissionEditObjectV1
     * @param pkiPermissionID The unique ID of the Permission (required)
     * @param permissionEditObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call permissionEditObjectV1Call(Integer pkiPermissionID, PermissionEditObjectV1Request permissionEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = permissionEditObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/permission/{pkiPermissionID}"
            .replace("{" + "pkiPermissionID" + "}", localVarApiClient.escapeString(pkiPermissionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call permissionEditObjectV1ValidateBeforeCall(Integer pkiPermissionID, PermissionEditObjectV1Request permissionEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiPermissionID' is set
        if (pkiPermissionID == null) {
            throw new ApiException("Missing the required parameter 'pkiPermissionID' when calling permissionEditObjectV1(Async)");
        }

        // verify the required parameter 'permissionEditObjectV1Request' is set
        if (permissionEditObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'permissionEditObjectV1Request' when calling permissionEditObjectV1(Async)");
        }

        return permissionEditObjectV1Call(pkiPermissionID, permissionEditObjectV1Request, _callback);

    }

    /**
     * Edit an existing Permission
     * 
     * @param pkiPermissionID The unique ID of the Permission (required)
     * @param permissionEditObjectV1Request  (required)
     * @return PermissionEditObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public PermissionEditObjectV1Response permissionEditObjectV1(Integer pkiPermissionID, PermissionEditObjectV1Request permissionEditObjectV1Request) throws ApiException {
        ApiResponse<PermissionEditObjectV1Response> localVarResp = permissionEditObjectV1WithHttpInfo(pkiPermissionID, permissionEditObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Edit an existing Permission
     * 
     * @param pkiPermissionID The unique ID of the Permission (required)
     * @param permissionEditObjectV1Request  (required)
     * @return ApiResponse&lt;PermissionEditObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PermissionEditObjectV1Response> permissionEditObjectV1WithHttpInfo(Integer pkiPermissionID, PermissionEditObjectV1Request permissionEditObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = permissionEditObjectV1ValidateBeforeCall(pkiPermissionID, permissionEditObjectV1Request, null);
        Type localVarReturnType = new TypeToken<PermissionEditObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit an existing Permission (asynchronously)
     * 
     * @param pkiPermissionID The unique ID of the Permission (required)
     * @param permissionEditObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call permissionEditObjectV1Async(Integer pkiPermissionID, PermissionEditObjectV1Request permissionEditObjectV1Request, final ApiCallback<PermissionEditObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = permissionEditObjectV1ValidateBeforeCall(pkiPermissionID, permissionEditObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<PermissionEditObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for permissionGetObjectV2
     * @param pkiPermissionID The unique ID of the Permission (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call permissionGetObjectV2Call(Integer pkiPermissionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/object/permission/{pkiPermissionID}"
            .replace("{" + "pkiPermissionID" + "}", localVarApiClient.escapeString(pkiPermissionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call permissionGetObjectV2ValidateBeforeCall(Integer pkiPermissionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiPermissionID' is set
        if (pkiPermissionID == null) {
            throw new ApiException("Missing the required parameter 'pkiPermissionID' when calling permissionGetObjectV2(Async)");
        }

        return permissionGetObjectV2Call(pkiPermissionID, _callback);

    }

    /**
     * Retrieve an existing Permission
     * 
     * @param pkiPermissionID The unique ID of the Permission (required)
     * @return PermissionGetObjectV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public PermissionGetObjectV2Response permissionGetObjectV2(Integer pkiPermissionID) throws ApiException {
        ApiResponse<PermissionGetObjectV2Response> localVarResp = permissionGetObjectV2WithHttpInfo(pkiPermissionID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Permission
     * 
     * @param pkiPermissionID The unique ID of the Permission (required)
     * @return ApiResponse&lt;PermissionGetObjectV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PermissionGetObjectV2Response> permissionGetObjectV2WithHttpInfo(Integer pkiPermissionID) throws ApiException {
        okhttp3.Call localVarCall = permissionGetObjectV2ValidateBeforeCall(pkiPermissionID, null);
        Type localVarReturnType = new TypeToken<PermissionGetObjectV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Permission (asynchronously)
     * 
     * @param pkiPermissionID The unique ID of the Permission (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call permissionGetObjectV2Async(Integer pkiPermissionID, final ApiCallback<PermissionGetObjectV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = permissionGetObjectV2ValidateBeforeCall(pkiPermissionID, _callback);
        Type localVarReturnType = new TypeToken<PermissionGetObjectV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
