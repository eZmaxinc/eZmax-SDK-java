/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.10
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api;

import eZmaxAPI.ApiCallback;
import eZmaxAPI.ApiClient;
import eZmaxAPI.ApiException;
import eZmaxAPI.ApiResponse;
import eZmaxAPI.Configuration;
import eZmaxAPI.Pair;
import eZmaxAPI.ProgressRequestBody;
import eZmaxAPI.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ezmax.api.model.CommonResponseError;
import com.ezmax.api.model.CommonResponseErrorSTemporaryFileUrl;
import com.ezmax.api.model.EzsigntemplatedocumentCreateObjectV1Request;
import com.ezmax.api.model.EzsigntemplatedocumentCreateObjectV1Response;
import com.ezmax.api.model.EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request;
import com.ezmax.api.model.EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response;
import com.ezmax.api.model.EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request;
import com.ezmax.api.model.EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response;
import com.ezmax.api.model.EzsigntemplatedocumentEditObjectV1Request;
import com.ezmax.api.model.EzsigntemplatedocumentEditObjectV1Response;
import com.ezmax.api.model.EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response;
import com.ezmax.api.model.EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response;
import com.ezmax.api.model.EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response;
import com.ezmax.api.model.EzsigntemplatedocumentGetObjectV1Response;
import com.ezmax.api.model.EzsigntemplatedocumentGetWordsPositionsV1Request;
import com.ezmax.api.model.EzsigntemplatedocumentGetWordsPositionsV1Response;
import com.ezmax.api.model.EzsigntemplatedocumentPatchObjectV1Request;
import com.ezmax.api.model.EzsigntemplatedocumentPatchObjectV1Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ObjectEzsigntemplatedocumentApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ObjectEzsigntemplatedocumentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ObjectEzsigntemplatedocumentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for ezsigntemplatedocumentCreateObjectV1
     * @param ezsigntemplatedocumentCreateObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body. If the error is recoverable sTemporaryFileUrl will be set and you can use this url to try a new request without sending the file over again </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatedocumentCreateObjectV1Call(EzsigntemplatedocumentCreateObjectV1Request ezsigntemplatedocumentCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezsigntemplatedocumentCreateObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezsigntemplatedocument";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigntemplatedocumentCreateObjectV1ValidateBeforeCall(EzsigntemplatedocumentCreateObjectV1Request ezsigntemplatedocumentCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ezsigntemplatedocumentCreateObjectV1Request' is set
        if (ezsigntemplatedocumentCreateObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezsigntemplatedocumentCreateObjectV1Request' when calling ezsigntemplatedocumentCreateObjectV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsigntemplatedocumentCreateObjectV1Call(ezsigntemplatedocumentCreateObjectV1Request, _callback);
        return localVarCall;

    }

    /**
     * Create a new Ezsigntemplatedocument
     * The endpoint allows to create one or many elements at once.
     * @param ezsigntemplatedocumentCreateObjectV1Request  (required)
     * @return EzsigntemplatedocumentCreateObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body. If the error is recoverable sTemporaryFileUrl will be set and you can use this url to try a new request without sending the file over again </td><td>  -  </td></tr>
     </table>
     */
    public EzsigntemplatedocumentCreateObjectV1Response ezsigntemplatedocumentCreateObjectV1(EzsigntemplatedocumentCreateObjectV1Request ezsigntemplatedocumentCreateObjectV1Request) throws ApiException {
        ApiResponse<EzsigntemplatedocumentCreateObjectV1Response> localVarResp = ezsigntemplatedocumentCreateObjectV1WithHttpInfo(ezsigntemplatedocumentCreateObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Create a new Ezsigntemplatedocument
     * The endpoint allows to create one or many elements at once.
     * @param ezsigntemplatedocumentCreateObjectV1Request  (required)
     * @return ApiResponse&lt;EzsigntemplatedocumentCreateObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body. If the error is recoverable sTemporaryFileUrl will be set and you can use this url to try a new request without sending the file over again </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigntemplatedocumentCreateObjectV1Response> ezsigntemplatedocumentCreateObjectV1WithHttpInfo(EzsigntemplatedocumentCreateObjectV1Request ezsigntemplatedocumentCreateObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezsigntemplatedocumentCreateObjectV1ValidateBeforeCall(ezsigntemplatedocumentCreateObjectV1Request, null);
        Type localVarReturnType = new TypeToken<EzsigntemplatedocumentCreateObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Ezsigntemplatedocument (asynchronously)
     * The endpoint allows to create one or many elements at once.
     * @param ezsigntemplatedocumentCreateObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body. If the error is recoverable sTemporaryFileUrl will be set and you can use this url to try a new request without sending the file over again </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatedocumentCreateObjectV1Async(EzsigntemplatedocumentCreateObjectV1Request ezsigntemplatedocumentCreateObjectV1Request, final ApiCallback<EzsigntemplatedocumentCreateObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigntemplatedocumentCreateObjectV1ValidateBeforeCall(ezsigntemplatedocumentCreateObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<EzsigntemplatedocumentCreateObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1
     * @param pkiEzsigntemplatedocumentID  (required)
     * @param ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Call(Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/editEzsigntemplateformfieldgroups"
            .replaceAll("\\{" + "pkiEzsigntemplatedocumentID" + "\\}", localVarApiClient.escapeString(pkiEzsigntemplatedocumentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1ValidateBeforeCall(Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
        if (pkiEzsigntemplatedocumentID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1(Async)");
        }
        
        // verify the required parameter 'ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request' is set
        if (ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request' when calling ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Call(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request, _callback);
        return localVarCall;

    }

    /**
     * Edit multiple Ezsigntemplateformfieldgroups
     * Using this endpoint, you can edit multiple Ezsigntemplateformfieldgroups at the same time.
     * @param pkiEzsigntemplatedocumentID  (required)
     * @param ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request  (required)
     * @return EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1(Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request) throws ApiException {
        ApiResponse<EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response> localVarResp = ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1WithHttpInfo(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request);
        return localVarResp.getData();
    }

    /**
     * Edit multiple Ezsigntemplateformfieldgroups
     * Using this endpoint, you can edit multiple Ezsigntemplateformfieldgroups at the same time.
     * @param pkiEzsigntemplatedocumentID  (required)
     * @param ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request  (required)
     * @return ApiResponse&lt;EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response> ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1WithHttpInfo(Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1ValidateBeforeCall(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request, null);
        Type localVarReturnType = new TypeToken<EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit multiple Ezsigntemplateformfieldgroups (asynchronously)
     * Using this endpoint, you can edit multiple Ezsigntemplateformfieldgroups at the same time.
     * @param pkiEzsigntemplatedocumentID  (required)
     * @param ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Async(Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request, final ApiCallback<EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1ValidateBeforeCall(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request, _callback);
        Type localVarReturnType = new TypeToken<EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigntemplatedocumentEditEzsigntemplatesignaturesV1
     * @param pkiEzsigntemplatedocumentID  (required)
     * @param ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Call(Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/editEzsigntemplatesignatures"
            .replaceAll("\\{" + "pkiEzsigntemplatedocumentID" + "\\}", localVarApiClient.escapeString(pkiEzsigntemplatedocumentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigntemplatedocumentEditEzsigntemplatesignaturesV1ValidateBeforeCall(Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
        if (pkiEzsigntemplatedocumentID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentEditEzsigntemplatesignaturesV1(Async)");
        }
        
        // verify the required parameter 'ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request' is set
        if (ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request' when calling ezsigntemplatedocumentEditEzsigntemplatesignaturesV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Call(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request, _callback);
        return localVarCall;

    }

    /**
     * Edit multiple Ezsigntemplatesignatures
     * Using this endpoint, you can edit multiple Ezsigntemplatesignatures at the same time.
     * @param pkiEzsigntemplatedocumentID  (required)
     * @param ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request  (required)
     * @return EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response ezsigntemplatedocumentEditEzsigntemplatesignaturesV1(Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request) throws ApiException {
        ApiResponse<EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response> localVarResp = ezsigntemplatedocumentEditEzsigntemplatesignaturesV1WithHttpInfo(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request);
        return localVarResp.getData();
    }

    /**
     * Edit multiple Ezsigntemplatesignatures
     * Using this endpoint, you can edit multiple Ezsigntemplatesignatures at the same time.
     * @param pkiEzsigntemplatedocumentID  (required)
     * @param ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request  (required)
     * @return ApiResponse&lt;EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response> ezsigntemplatedocumentEditEzsigntemplatesignaturesV1WithHttpInfo(Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezsigntemplatedocumentEditEzsigntemplatesignaturesV1ValidateBeforeCall(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request, null);
        Type localVarReturnType = new TypeToken<EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit multiple Ezsigntemplatesignatures (asynchronously)
     * Using this endpoint, you can edit multiple Ezsigntemplatesignatures at the same time.
     * @param pkiEzsigntemplatedocumentID  (required)
     * @param ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Async(Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request, final ApiCallback<EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigntemplatedocumentEditEzsigntemplatesignaturesV1ValidateBeforeCall(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request, _callback);
        Type localVarReturnType = new TypeToken<EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigntemplatedocumentEditObjectV1
     * @param pkiEzsigntemplatedocumentID  (required)
     * @param ezsigntemplatedocumentEditObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body. If the error is recoverable sTemporaryFileUrl will be set and you can use this url to try a new request without sending the file over again </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatedocumentEditObjectV1Call(Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditObjectV1Request ezsigntemplatedocumentEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezsigntemplatedocumentEditObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}"
            .replaceAll("\\{" + "pkiEzsigntemplatedocumentID" + "\\}", localVarApiClient.escapeString(pkiEzsigntemplatedocumentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigntemplatedocumentEditObjectV1ValidateBeforeCall(Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditObjectV1Request ezsigntemplatedocumentEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
        if (pkiEzsigntemplatedocumentID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentEditObjectV1(Async)");
        }
        
        // verify the required parameter 'ezsigntemplatedocumentEditObjectV1Request' is set
        if (ezsigntemplatedocumentEditObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezsigntemplatedocumentEditObjectV1Request' when calling ezsigntemplatedocumentEditObjectV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsigntemplatedocumentEditObjectV1Call(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditObjectV1Request, _callback);
        return localVarCall;

    }

    /**
     * Edit an existing Ezsigntemplatedocument
     * 
     * @param pkiEzsigntemplatedocumentID  (required)
     * @param ezsigntemplatedocumentEditObjectV1Request  (required)
     * @return EzsigntemplatedocumentEditObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body. If the error is recoverable sTemporaryFileUrl will be set and you can use this url to try a new request without sending the file over again </td><td>  -  </td></tr>
     </table>
     */
    public EzsigntemplatedocumentEditObjectV1Response ezsigntemplatedocumentEditObjectV1(Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditObjectV1Request ezsigntemplatedocumentEditObjectV1Request) throws ApiException {
        ApiResponse<EzsigntemplatedocumentEditObjectV1Response> localVarResp = ezsigntemplatedocumentEditObjectV1WithHttpInfo(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Edit an existing Ezsigntemplatedocument
     * 
     * @param pkiEzsigntemplatedocumentID  (required)
     * @param ezsigntemplatedocumentEditObjectV1Request  (required)
     * @return ApiResponse&lt;EzsigntemplatedocumentEditObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body. If the error is recoverable sTemporaryFileUrl will be set and you can use this url to try a new request without sending the file over again </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigntemplatedocumentEditObjectV1Response> ezsigntemplatedocumentEditObjectV1WithHttpInfo(Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditObjectV1Request ezsigntemplatedocumentEditObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezsigntemplatedocumentEditObjectV1ValidateBeforeCall(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditObjectV1Request, null);
        Type localVarReturnType = new TypeToken<EzsigntemplatedocumentEditObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit an existing Ezsigntemplatedocument (asynchronously)
     * 
     * @param pkiEzsigntemplatedocumentID  (required)
     * @param ezsigntemplatedocumentEditObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body. If the error is recoverable sTemporaryFileUrl will be set and you can use this url to try a new request without sending the file over again </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatedocumentEditObjectV1Async(Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditObjectV1Request ezsigntemplatedocumentEditObjectV1Request, final ApiCallback<EzsigntemplatedocumentEditObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigntemplatedocumentEditObjectV1ValidateBeforeCall(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<EzsigntemplatedocumentEditObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigntemplatedocumentGetEzsigntemplatedocumentpagesV1
     * @param pkiEzsigntemplatedocumentID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Call(Integer pkiEzsigntemplatedocumentID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplatedocumentpages"
            .replaceAll("\\{" + "pkiEzsigntemplatedocumentID" + "\\}", localVarApiClient.escapeString(pkiEzsigntemplatedocumentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigntemplatedocumentGetEzsigntemplatedocumentpagesV1ValidateBeforeCall(Integer pkiEzsigntemplatedocumentID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
        if (pkiEzsigntemplatedocumentID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentGetEzsigntemplatedocumentpagesV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Call(pkiEzsigntemplatedocumentID, _callback);
        return localVarCall;

    }

    /**
     * Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatedocumentpages
     * 
     * @param pkiEzsigntemplatedocumentID  (required)
     * @return EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response ezsigntemplatedocumentGetEzsigntemplatedocumentpagesV1(Integer pkiEzsigntemplatedocumentID) throws ApiException {
        ApiResponse<EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response> localVarResp = ezsigntemplatedocumentGetEzsigntemplatedocumentpagesV1WithHttpInfo(pkiEzsigntemplatedocumentID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatedocumentpages
     * 
     * @param pkiEzsigntemplatedocumentID  (required)
     * @return ApiResponse&lt;EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response> ezsigntemplatedocumentGetEzsigntemplatedocumentpagesV1WithHttpInfo(Integer pkiEzsigntemplatedocumentID) throws ApiException {
        okhttp3.Call localVarCall = ezsigntemplatedocumentGetEzsigntemplatedocumentpagesV1ValidateBeforeCall(pkiEzsigntemplatedocumentID, null);
        Type localVarReturnType = new TypeToken<EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatedocumentpages (asynchronously)
     * 
     * @param pkiEzsigntemplatedocumentID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Async(Integer pkiEzsigntemplatedocumentID, final ApiCallback<EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigntemplatedocumentGetEzsigntemplatedocumentpagesV1ValidateBeforeCall(pkiEzsigntemplatedocumentID, _callback);
        Type localVarReturnType = new TypeToken<EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1
     * @param pkiEzsigntemplatedocumentID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Call(Integer pkiEzsigntemplatedocumentID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplateformfieldgroups"
            .replaceAll("\\{" + "pkiEzsigntemplatedocumentID" + "\\}", localVarApiClient.escapeString(pkiEzsigntemplatedocumentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1ValidateBeforeCall(Integer pkiEzsigntemplatedocumentID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
        if (pkiEzsigntemplatedocumentID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Call(pkiEzsigntemplatedocumentID, _callback);
        return localVarCall;

    }

    /**
     * Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplateformfieldgroups
     * 
     * @param pkiEzsigntemplatedocumentID  (required)
     * @return EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response ezsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1(Integer pkiEzsigntemplatedocumentID) throws ApiException {
        ApiResponse<EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response> localVarResp = ezsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1WithHttpInfo(pkiEzsigntemplatedocumentID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplateformfieldgroups
     * 
     * @param pkiEzsigntemplatedocumentID  (required)
     * @return ApiResponse&lt;EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response> ezsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1WithHttpInfo(Integer pkiEzsigntemplatedocumentID) throws ApiException {
        okhttp3.Call localVarCall = ezsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1ValidateBeforeCall(pkiEzsigntemplatedocumentID, null);
        Type localVarReturnType = new TypeToken<EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplateformfieldgroups (asynchronously)
     * 
     * @param pkiEzsigntemplatedocumentID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Async(Integer pkiEzsigntemplatedocumentID, final ApiCallback<EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1ValidateBeforeCall(pkiEzsigntemplatedocumentID, _callback);
        Type localVarReturnType = new TypeToken<EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigntemplatedocumentGetEzsigntemplatesignaturesV1
     * @param pkiEzsigntemplatedocumentID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatedocumentGetEzsigntemplatesignaturesV1Call(Integer pkiEzsigntemplatedocumentID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplatesignatures"
            .replaceAll("\\{" + "pkiEzsigntemplatedocumentID" + "\\}", localVarApiClient.escapeString(pkiEzsigntemplatedocumentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigntemplatedocumentGetEzsigntemplatesignaturesV1ValidateBeforeCall(Integer pkiEzsigntemplatedocumentID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
        if (pkiEzsigntemplatedocumentID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentGetEzsigntemplatesignaturesV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsigntemplatedocumentGetEzsigntemplatesignaturesV1Call(pkiEzsigntemplatedocumentID, _callback);
        return localVarCall;

    }

    /**
     * Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatesignatures
     * 
     * @param pkiEzsigntemplatedocumentID  (required)
     * @return EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response ezsigntemplatedocumentGetEzsigntemplatesignaturesV1(Integer pkiEzsigntemplatedocumentID) throws ApiException {
        ApiResponse<EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response> localVarResp = ezsigntemplatedocumentGetEzsigntemplatesignaturesV1WithHttpInfo(pkiEzsigntemplatedocumentID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatesignatures
     * 
     * @param pkiEzsigntemplatedocumentID  (required)
     * @return ApiResponse&lt;EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response> ezsigntemplatedocumentGetEzsigntemplatesignaturesV1WithHttpInfo(Integer pkiEzsigntemplatedocumentID) throws ApiException {
        okhttp3.Call localVarCall = ezsigntemplatedocumentGetEzsigntemplatesignaturesV1ValidateBeforeCall(pkiEzsigntemplatedocumentID, null);
        Type localVarReturnType = new TypeToken<EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatesignatures (asynchronously)
     * 
     * @param pkiEzsigntemplatedocumentID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatedocumentGetEzsigntemplatesignaturesV1Async(Integer pkiEzsigntemplatedocumentID, final ApiCallback<EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigntemplatedocumentGetEzsigntemplatesignaturesV1ValidateBeforeCall(pkiEzsigntemplatedocumentID, _callback);
        Type localVarReturnType = new TypeToken<EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigntemplatedocumentGetObjectV1
     * @param pkiEzsigntemplatedocumentID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatedocumentGetObjectV1Call(Integer pkiEzsigntemplatedocumentID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}"
            .replaceAll("\\{" + "pkiEzsigntemplatedocumentID" + "\\}", localVarApiClient.escapeString(pkiEzsigntemplatedocumentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigntemplatedocumentGetObjectV1ValidateBeforeCall(Integer pkiEzsigntemplatedocumentID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
        if (pkiEzsigntemplatedocumentID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentGetObjectV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsigntemplatedocumentGetObjectV1Call(pkiEzsigntemplatedocumentID, _callback);
        return localVarCall;

    }

    /**
     * Retrieve an existing Ezsigntemplatedocument
     * 
     * @param pkiEzsigntemplatedocumentID  (required)
     * @return EzsigntemplatedocumentGetObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsigntemplatedocumentGetObjectV1Response ezsigntemplatedocumentGetObjectV1(Integer pkiEzsigntemplatedocumentID) throws ApiException {
        ApiResponse<EzsigntemplatedocumentGetObjectV1Response> localVarResp = ezsigntemplatedocumentGetObjectV1WithHttpInfo(pkiEzsigntemplatedocumentID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Ezsigntemplatedocument
     * 
     * @param pkiEzsigntemplatedocumentID  (required)
     * @return ApiResponse&lt;EzsigntemplatedocumentGetObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigntemplatedocumentGetObjectV1Response> ezsigntemplatedocumentGetObjectV1WithHttpInfo(Integer pkiEzsigntemplatedocumentID) throws ApiException {
        okhttp3.Call localVarCall = ezsigntemplatedocumentGetObjectV1ValidateBeforeCall(pkiEzsigntemplatedocumentID, null);
        Type localVarReturnType = new TypeToken<EzsigntemplatedocumentGetObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Ezsigntemplatedocument (asynchronously)
     * 
     * @param pkiEzsigntemplatedocumentID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatedocumentGetObjectV1Async(Integer pkiEzsigntemplatedocumentID, final ApiCallback<EzsigntemplatedocumentGetObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigntemplatedocumentGetObjectV1ValidateBeforeCall(pkiEzsigntemplatedocumentID, _callback);
        Type localVarReturnType = new TypeToken<EzsigntemplatedocumentGetObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigntemplatedocumentGetWordsPositionsV1
     * @param pkiEzsigntemplatedocumentID  (required)
     * @param ezsigntemplatedocumentGetWordsPositionsV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatedocumentGetWordsPositionsV1Call(Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentGetWordsPositionsV1Request ezsigntemplatedocumentGetWordsPositionsV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezsigntemplatedocumentGetWordsPositionsV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getWordsPositions"
            .replaceAll("\\{" + "pkiEzsigntemplatedocumentID" + "\\}", localVarApiClient.escapeString(pkiEzsigntemplatedocumentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigntemplatedocumentGetWordsPositionsV1ValidateBeforeCall(Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentGetWordsPositionsV1Request ezsigntemplatedocumentGetWordsPositionsV1Request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
        if (pkiEzsigntemplatedocumentID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentGetWordsPositionsV1(Async)");
        }
        
        // verify the required parameter 'ezsigntemplatedocumentGetWordsPositionsV1Request' is set
        if (ezsigntemplatedocumentGetWordsPositionsV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezsigntemplatedocumentGetWordsPositionsV1Request' when calling ezsigntemplatedocumentGetWordsPositionsV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsigntemplatedocumentGetWordsPositionsV1Call(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentGetWordsPositionsV1Request, _callback);
        return localVarCall;

    }

    /**
     * Retrieve positions X,Y of given words from a Ezsigntemplatedocument
     * 
     * @param pkiEzsigntemplatedocumentID  (required)
     * @param ezsigntemplatedocumentGetWordsPositionsV1Request  (required)
     * @return EzsigntemplatedocumentGetWordsPositionsV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsigntemplatedocumentGetWordsPositionsV1Response ezsigntemplatedocumentGetWordsPositionsV1(Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentGetWordsPositionsV1Request ezsigntemplatedocumentGetWordsPositionsV1Request) throws ApiException {
        ApiResponse<EzsigntemplatedocumentGetWordsPositionsV1Response> localVarResp = ezsigntemplatedocumentGetWordsPositionsV1WithHttpInfo(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentGetWordsPositionsV1Request);
        return localVarResp.getData();
    }

    /**
     * Retrieve positions X,Y of given words from a Ezsigntemplatedocument
     * 
     * @param pkiEzsigntemplatedocumentID  (required)
     * @param ezsigntemplatedocumentGetWordsPositionsV1Request  (required)
     * @return ApiResponse&lt;EzsigntemplatedocumentGetWordsPositionsV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigntemplatedocumentGetWordsPositionsV1Response> ezsigntemplatedocumentGetWordsPositionsV1WithHttpInfo(Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentGetWordsPositionsV1Request ezsigntemplatedocumentGetWordsPositionsV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezsigntemplatedocumentGetWordsPositionsV1ValidateBeforeCall(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentGetWordsPositionsV1Request, null);
        Type localVarReturnType = new TypeToken<EzsigntemplatedocumentGetWordsPositionsV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve positions X,Y of given words from a Ezsigntemplatedocument (asynchronously)
     * 
     * @param pkiEzsigntemplatedocumentID  (required)
     * @param ezsigntemplatedocumentGetWordsPositionsV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatedocumentGetWordsPositionsV1Async(Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentGetWordsPositionsV1Request ezsigntemplatedocumentGetWordsPositionsV1Request, final ApiCallback<EzsigntemplatedocumentGetWordsPositionsV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigntemplatedocumentGetWordsPositionsV1ValidateBeforeCall(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentGetWordsPositionsV1Request, _callback);
        Type localVarReturnType = new TypeToken<EzsigntemplatedocumentGetWordsPositionsV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigntemplatedocumentPatchObjectV1
     * @param pkiEzsigntemplatedocumentID  (required)
     * @param ezsigntemplatedocumentPatchObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatedocumentPatchObjectV1Call(Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentPatchObjectV1Request ezsigntemplatedocumentPatchObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezsigntemplatedocumentPatchObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}"
            .replaceAll("\\{" + "pkiEzsigntemplatedocumentID" + "\\}", localVarApiClient.escapeString(pkiEzsigntemplatedocumentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigntemplatedocumentPatchObjectV1ValidateBeforeCall(Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentPatchObjectV1Request ezsigntemplatedocumentPatchObjectV1Request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
        if (pkiEzsigntemplatedocumentID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigntemplatedocumentID' when calling ezsigntemplatedocumentPatchObjectV1(Async)");
        }
        
        // verify the required parameter 'ezsigntemplatedocumentPatchObjectV1Request' is set
        if (ezsigntemplatedocumentPatchObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezsigntemplatedocumentPatchObjectV1Request' when calling ezsigntemplatedocumentPatchObjectV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsigntemplatedocumentPatchObjectV1Call(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentPatchObjectV1Request, _callback);
        return localVarCall;

    }

    /**
     * Patch an existing Ezsigntemplatedocument
     * 
     * @param pkiEzsigntemplatedocumentID  (required)
     * @param ezsigntemplatedocumentPatchObjectV1Request  (required)
     * @return EzsigntemplatedocumentPatchObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsigntemplatedocumentPatchObjectV1Response ezsigntemplatedocumentPatchObjectV1(Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentPatchObjectV1Request ezsigntemplatedocumentPatchObjectV1Request) throws ApiException {
        ApiResponse<EzsigntemplatedocumentPatchObjectV1Response> localVarResp = ezsigntemplatedocumentPatchObjectV1WithHttpInfo(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentPatchObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Patch an existing Ezsigntemplatedocument
     * 
     * @param pkiEzsigntemplatedocumentID  (required)
     * @param ezsigntemplatedocumentPatchObjectV1Request  (required)
     * @return ApiResponse&lt;EzsigntemplatedocumentPatchObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigntemplatedocumentPatchObjectV1Response> ezsigntemplatedocumentPatchObjectV1WithHttpInfo(Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentPatchObjectV1Request ezsigntemplatedocumentPatchObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezsigntemplatedocumentPatchObjectV1ValidateBeforeCall(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentPatchObjectV1Request, null);
        Type localVarReturnType = new TypeToken<EzsigntemplatedocumentPatchObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch an existing Ezsigntemplatedocument (asynchronously)
     * 
     * @param pkiEzsigntemplatedocumentID  (required)
     * @param ezsigntemplatedocumentPatchObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatedocumentPatchObjectV1Async(Integer pkiEzsigntemplatedocumentID, EzsigntemplatedocumentPatchObjectV1Request ezsigntemplatedocumentPatchObjectV1Request, final ApiCallback<EzsigntemplatedocumentPatchObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigntemplatedocumentPatchObjectV1ValidateBeforeCall(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentPatchObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<EzsigntemplatedocumentPatchObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
