/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.17
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api;

import eZmaxAPI.ApiCallback;
import eZmaxAPI.ApiClient;
import eZmaxAPI.ApiException;
import eZmaxAPI.ApiResponse;
import eZmaxAPI.Configuration;
import eZmaxAPI.Pair;
import eZmaxAPI.ProgressRequestBody;
import eZmaxAPI.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ezmax.api.model.CommonResponseError;
import java.io.File;
import com.ezmax.api.model.HeaderAcceptLanguage;
import com.ezmax.api.model.VariableexpenseCreateObjectV1Request;
import com.ezmax.api.model.VariableexpenseCreateObjectV1Response;
import com.ezmax.api.model.VariableexpenseDeleteObjectV1Response;
import com.ezmax.api.model.VariableexpenseEditObjectV1Request;
import com.ezmax.api.model.VariableexpenseEditObjectV1Response;
import com.ezmax.api.model.VariableexpenseGetAutocompleteV2Response;
import com.ezmax.api.model.VariableexpenseGetListV1Response;
import com.ezmax.api.model.VariableexpenseGetObjectV2Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ObjectVariableexpenseApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ObjectVariableexpenseApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ObjectVariableexpenseApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for variableexpenseCreateObjectV1
     * @param variableexpenseCreateObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call variableexpenseCreateObjectV1Call(VariableexpenseCreateObjectV1Request variableexpenseCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = variableexpenseCreateObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/variableexpense";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call variableexpenseCreateObjectV1ValidateBeforeCall(VariableexpenseCreateObjectV1Request variableexpenseCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'variableexpenseCreateObjectV1Request' is set
        if (variableexpenseCreateObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'variableexpenseCreateObjectV1Request' when calling variableexpenseCreateObjectV1(Async)");
        }

        return variableexpenseCreateObjectV1Call(variableexpenseCreateObjectV1Request, _callback);

    }

    /**
     * Create a new Variableexpense
     * The endpoint allows to create one or many elements at once.
     * @param variableexpenseCreateObjectV1Request  (required)
     * @return VariableexpenseCreateObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public VariableexpenseCreateObjectV1Response variableexpenseCreateObjectV1(VariableexpenseCreateObjectV1Request variableexpenseCreateObjectV1Request) throws ApiException {
        ApiResponse<VariableexpenseCreateObjectV1Response> localVarResp = variableexpenseCreateObjectV1WithHttpInfo(variableexpenseCreateObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Create a new Variableexpense
     * The endpoint allows to create one or many elements at once.
     * @param variableexpenseCreateObjectV1Request  (required)
     * @return ApiResponse&lt;VariableexpenseCreateObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VariableexpenseCreateObjectV1Response> variableexpenseCreateObjectV1WithHttpInfo(VariableexpenseCreateObjectV1Request variableexpenseCreateObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = variableexpenseCreateObjectV1ValidateBeforeCall(variableexpenseCreateObjectV1Request, null);
        Type localVarReturnType = new TypeToken<VariableexpenseCreateObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Variableexpense (asynchronously)
     * The endpoint allows to create one or many elements at once.
     * @param variableexpenseCreateObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call variableexpenseCreateObjectV1Async(VariableexpenseCreateObjectV1Request variableexpenseCreateObjectV1Request, final ApiCallback<VariableexpenseCreateObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = variableexpenseCreateObjectV1ValidateBeforeCall(variableexpenseCreateObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<VariableexpenseCreateObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for variableexpenseDeleteObjectV1
     * @param pkiVariableexpenseID The unique ID of the Variableexpense (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call variableexpenseDeleteObjectV1Call(Integer pkiVariableexpenseID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/variableexpense/{pkiVariableexpenseID}"
            .replace("{" + "pkiVariableexpenseID" + "}", localVarApiClient.escapeString(pkiVariableexpenseID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call variableexpenseDeleteObjectV1ValidateBeforeCall(Integer pkiVariableexpenseID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiVariableexpenseID' is set
        if (pkiVariableexpenseID == null) {
            throw new ApiException("Missing the required parameter 'pkiVariableexpenseID' when calling variableexpenseDeleteObjectV1(Async)");
        }

        return variableexpenseDeleteObjectV1Call(pkiVariableexpenseID, _callback);

    }

    /**
     * Delete an existing Variableexpense
     * 
     * @param pkiVariableexpenseID The unique ID of the Variableexpense (required)
     * @return VariableexpenseDeleteObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public VariableexpenseDeleteObjectV1Response variableexpenseDeleteObjectV1(Integer pkiVariableexpenseID) throws ApiException {
        ApiResponse<VariableexpenseDeleteObjectV1Response> localVarResp = variableexpenseDeleteObjectV1WithHttpInfo(pkiVariableexpenseID);
        return localVarResp.getData();
    }

    /**
     * Delete an existing Variableexpense
     * 
     * @param pkiVariableexpenseID The unique ID of the Variableexpense (required)
     * @return ApiResponse&lt;VariableexpenseDeleteObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VariableexpenseDeleteObjectV1Response> variableexpenseDeleteObjectV1WithHttpInfo(Integer pkiVariableexpenseID) throws ApiException {
        okhttp3.Call localVarCall = variableexpenseDeleteObjectV1ValidateBeforeCall(pkiVariableexpenseID, null);
        Type localVarReturnType = new TypeToken<VariableexpenseDeleteObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an existing Variableexpense (asynchronously)
     * 
     * @param pkiVariableexpenseID The unique ID of the Variableexpense (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call variableexpenseDeleteObjectV1Async(Integer pkiVariableexpenseID, final ApiCallback<VariableexpenseDeleteObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = variableexpenseDeleteObjectV1ValidateBeforeCall(pkiVariableexpenseID, _callback);
        Type localVarReturnType = new TypeToken<VariableexpenseDeleteObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for variableexpenseEditObjectV1
     * @param pkiVariableexpenseID The unique ID of the Variableexpense (required)
     * @param variableexpenseEditObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call variableexpenseEditObjectV1Call(Integer pkiVariableexpenseID, VariableexpenseEditObjectV1Request variableexpenseEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = variableexpenseEditObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/variableexpense/{pkiVariableexpenseID}"
            .replace("{" + "pkiVariableexpenseID" + "}", localVarApiClient.escapeString(pkiVariableexpenseID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call variableexpenseEditObjectV1ValidateBeforeCall(Integer pkiVariableexpenseID, VariableexpenseEditObjectV1Request variableexpenseEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiVariableexpenseID' is set
        if (pkiVariableexpenseID == null) {
            throw new ApiException("Missing the required parameter 'pkiVariableexpenseID' when calling variableexpenseEditObjectV1(Async)");
        }

        // verify the required parameter 'variableexpenseEditObjectV1Request' is set
        if (variableexpenseEditObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'variableexpenseEditObjectV1Request' when calling variableexpenseEditObjectV1(Async)");
        }

        return variableexpenseEditObjectV1Call(pkiVariableexpenseID, variableexpenseEditObjectV1Request, _callback);

    }

    /**
     * Edit an existing Variableexpense
     * 
     * @param pkiVariableexpenseID The unique ID of the Variableexpense (required)
     * @param variableexpenseEditObjectV1Request  (required)
     * @return VariableexpenseEditObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public VariableexpenseEditObjectV1Response variableexpenseEditObjectV1(Integer pkiVariableexpenseID, VariableexpenseEditObjectV1Request variableexpenseEditObjectV1Request) throws ApiException {
        ApiResponse<VariableexpenseEditObjectV1Response> localVarResp = variableexpenseEditObjectV1WithHttpInfo(pkiVariableexpenseID, variableexpenseEditObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Edit an existing Variableexpense
     * 
     * @param pkiVariableexpenseID The unique ID of the Variableexpense (required)
     * @param variableexpenseEditObjectV1Request  (required)
     * @return ApiResponse&lt;VariableexpenseEditObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VariableexpenseEditObjectV1Response> variableexpenseEditObjectV1WithHttpInfo(Integer pkiVariableexpenseID, VariableexpenseEditObjectV1Request variableexpenseEditObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = variableexpenseEditObjectV1ValidateBeforeCall(pkiVariableexpenseID, variableexpenseEditObjectV1Request, null);
        Type localVarReturnType = new TypeToken<VariableexpenseEditObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit an existing Variableexpense (asynchronously)
     * 
     * @param pkiVariableexpenseID The unique ID of the Variableexpense (required)
     * @param variableexpenseEditObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call variableexpenseEditObjectV1Async(Integer pkiVariableexpenseID, VariableexpenseEditObjectV1Request variableexpenseEditObjectV1Request, final ApiCallback<VariableexpenseEditObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = variableexpenseEditObjectV1ValidateBeforeCall(pkiVariableexpenseID, variableexpenseEditObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<VariableexpenseEditObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for variableexpenseGetAutocompleteV2
     * @param sSelector The type of Variableexpenses to return (required)
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call variableexpenseGetAutocompleteV2Call(String sSelector, String eFilterActive, String sQuery, HeaderAcceptLanguage acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/object/variableexpense/getAutocomplete/{sSelector}"
            .replace("{" + "sSelector" + "}", localVarApiClient.escapeString(sSelector.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eFilterActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eFilterActive", eFilterActive));
        }

        if (sQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sQuery", sQuery));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call variableexpenseGetAutocompleteV2ValidateBeforeCall(String sSelector, String eFilterActive, String sQuery, HeaderAcceptLanguage acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sSelector' is set
        if (sSelector == null) {
            throw new ApiException("Missing the required parameter 'sSelector' when calling variableexpenseGetAutocompleteV2(Async)");
        }

        return variableexpenseGetAutocompleteV2Call(sSelector, eFilterActive, sQuery, acceptLanguage, _callback);

    }

    /**
     * Retrieve Variableexpenses and IDs
     * Get the list of Variableexpense to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Variableexpenses to return (required)
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return VariableexpenseGetAutocompleteV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public VariableexpenseGetAutocompleteV2Response variableexpenseGetAutocompleteV2(String sSelector, String eFilterActive, String sQuery, HeaderAcceptLanguage acceptLanguage) throws ApiException {
        ApiResponse<VariableexpenseGetAutocompleteV2Response> localVarResp = variableexpenseGetAutocompleteV2WithHttpInfo(sSelector, eFilterActive, sQuery, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Retrieve Variableexpenses and IDs
     * Get the list of Variableexpense to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Variableexpenses to return (required)
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @return ApiResponse&lt;VariableexpenseGetAutocompleteV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VariableexpenseGetAutocompleteV2Response> variableexpenseGetAutocompleteV2WithHttpInfo(String sSelector, String eFilterActive, String sQuery, HeaderAcceptLanguage acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = variableexpenseGetAutocompleteV2ValidateBeforeCall(sSelector, eFilterActive, sQuery, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<VariableexpenseGetAutocompleteV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Variableexpenses and IDs (asynchronously)
     * Get the list of Variableexpense to be used in a dropdown or autocomplete control.
     * @param sSelector The type of Variableexpenses to return (required)
     * @param eFilterActive Specify which results we want to display. (optional, default to Active)
     * @param sQuery Allow to filter the returned results (optional)
     * @param acceptLanguage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call variableexpenseGetAutocompleteV2Async(String sSelector, String eFilterActive, String sQuery, HeaderAcceptLanguage acceptLanguage, final ApiCallback<VariableexpenseGetAutocompleteV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = variableexpenseGetAutocompleteV2ValidateBeforeCall(sSelector, eFilterActive, sQuery, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<VariableexpenseGetAutocompleteV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for variableexpenseGetListV1
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call variableexpenseGetListV1Call(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/variableexpense/getList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eOrderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eOrderBy", eOrderBy));
        }

        if (iRowMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iRowMax", iRowMax));
        }

        if (iRowOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iRowOffset", iRowOffset));
        }

        if (sFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sFilter", sFilter));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call variableexpenseGetListV1ValidateBeforeCall(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter, final ApiCallback _callback) throws ApiException {
        return variableexpenseGetListV1Call(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, _callback);

    }

    /**
     * Retrieve Variableexpense list
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eVariableexpenseTaxable | Yes&lt;br&gt;No&lt;br&gt;Included |
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return VariableexpenseGetListV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public VariableexpenseGetListV1Response variableexpenseGetListV1(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter) throws ApiException {
        ApiResponse<VariableexpenseGetListV1Response> localVarResp = variableexpenseGetListV1WithHttpInfo(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter);
        return localVarResp.getData();
    }

    /**
     * Retrieve Variableexpense list
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eVariableexpenseTaxable | Yes&lt;br&gt;No&lt;br&gt;Included |
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @return ApiResponse&lt;VariableexpenseGetListV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VariableexpenseGetListV1Response> variableexpenseGetListV1WithHttpInfo(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter) throws ApiException {
        okhttp3.Call localVarCall = variableexpenseGetListV1ValidateBeforeCall(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, null);
        Type localVarReturnType = new TypeToken<VariableexpenseGetListV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Variableexpense list (asynchronously)
     * Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eVariableexpenseTaxable | Yes&lt;br&gt;No&lt;br&gt;Included |
     * @param eOrderBy Specify how you want the results to be sorted (optional)
     * @param iRowMax  (optional)
     * @param iRowOffset  (optional)
     * @param acceptLanguage  (optional)
     * @param sFilter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The URL is valid, but one of the Accept header is not defined or invalid. For example, you set the header \&quot;Accept: application/json\&quot; but the function can only return \&quot;Content-type: image/png\&quot; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call variableexpenseGetListV1Async(String eOrderBy, Integer iRowMax, Integer iRowOffset, HeaderAcceptLanguage acceptLanguage, String sFilter, final ApiCallback<VariableexpenseGetListV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = variableexpenseGetListV1ValidateBeforeCall(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, _callback);
        Type localVarReturnType = new TypeToken<VariableexpenseGetListV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for variableexpenseGetObjectV2
     * @param pkiVariableexpenseID The unique ID of the Variableexpense (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call variableexpenseGetObjectV2Call(Integer pkiVariableexpenseID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/object/variableexpense/{pkiVariableexpenseID}"
            .replace("{" + "pkiVariableexpenseID" + "}", localVarApiClient.escapeString(pkiVariableexpenseID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call variableexpenseGetObjectV2ValidateBeforeCall(Integer pkiVariableexpenseID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiVariableexpenseID' is set
        if (pkiVariableexpenseID == null) {
            throw new ApiException("Missing the required parameter 'pkiVariableexpenseID' when calling variableexpenseGetObjectV2(Async)");
        }

        return variableexpenseGetObjectV2Call(pkiVariableexpenseID, _callback);

    }

    /**
     * Retrieve an existing Variableexpense
     * 
     * @param pkiVariableexpenseID The unique ID of the Variableexpense (required)
     * @return VariableexpenseGetObjectV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public VariableexpenseGetObjectV2Response variableexpenseGetObjectV2(Integer pkiVariableexpenseID) throws ApiException {
        ApiResponse<VariableexpenseGetObjectV2Response> localVarResp = variableexpenseGetObjectV2WithHttpInfo(pkiVariableexpenseID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Variableexpense
     * 
     * @param pkiVariableexpenseID The unique ID of the Variableexpense (required)
     * @return ApiResponse&lt;VariableexpenseGetObjectV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VariableexpenseGetObjectV2Response> variableexpenseGetObjectV2WithHttpInfo(Integer pkiVariableexpenseID) throws ApiException {
        okhttp3.Call localVarCall = variableexpenseGetObjectV2ValidateBeforeCall(pkiVariableexpenseID, null);
        Type localVarReturnType = new TypeToken<VariableexpenseGetObjectV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Variableexpense (asynchronously)
     * 
     * @param pkiVariableexpenseID The unique ID of the Variableexpense (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call variableexpenseGetObjectV2Async(Integer pkiVariableexpenseID, final ApiCallback<VariableexpenseGetObjectV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = variableexpenseGetObjectV2ValidateBeforeCall(pkiVariableexpenseID, _callback);
        Type localVarReturnType = new TypeToken<VariableexpenseGetObjectV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
