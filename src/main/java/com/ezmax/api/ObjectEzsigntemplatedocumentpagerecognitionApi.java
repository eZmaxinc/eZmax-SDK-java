/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api;

import eZmaxAPI.ApiCallback;
import eZmaxAPI.ApiClient;
import eZmaxAPI.ApiException;
import eZmaxAPI.ApiResponse;
import eZmaxAPI.Configuration;
import eZmaxAPI.Pair;
import eZmaxAPI.ProgressRequestBody;
import eZmaxAPI.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ezmax.api.model.CommonResponseError;
import com.ezmax.api.model.EzsigntemplatedocumentpagerecognitionCreateObjectV1Request;
import com.ezmax.api.model.EzsigntemplatedocumentpagerecognitionCreateObjectV1Response;
import com.ezmax.api.model.EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response;
import com.ezmax.api.model.EzsigntemplatedocumentpagerecognitionEditObjectV1Request;
import com.ezmax.api.model.EzsigntemplatedocumentpagerecognitionEditObjectV1Response;
import com.ezmax.api.model.EzsigntemplatedocumentpagerecognitionGetObjectV2Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ObjectEzsigntemplatedocumentpagerecognitionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ObjectEzsigntemplatedocumentpagerecognitionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ObjectEzsigntemplatedocumentpagerecognitionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for ezsigntemplatedocumentpagerecognitionCreateObjectV1
     * @param ezsigntemplatedocumentpagerecognitionCreateObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatedocumentpagerecognitionCreateObjectV1Call(EzsigntemplatedocumentpagerecognitionCreateObjectV1Request ezsigntemplatedocumentpagerecognitionCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezsigntemplatedocumentpagerecognitionCreateObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezsigntemplatedocumentpagerecognition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigntemplatedocumentpagerecognitionCreateObjectV1ValidateBeforeCall(EzsigntemplatedocumentpagerecognitionCreateObjectV1Request ezsigntemplatedocumentpagerecognitionCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ezsigntemplatedocumentpagerecognitionCreateObjectV1Request' is set
        if (ezsigntemplatedocumentpagerecognitionCreateObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezsigntemplatedocumentpagerecognitionCreateObjectV1Request' when calling ezsigntemplatedocumentpagerecognitionCreateObjectV1(Async)");
        }

        return ezsigntemplatedocumentpagerecognitionCreateObjectV1Call(ezsigntemplatedocumentpagerecognitionCreateObjectV1Request, _callback);

    }

    /**
     * Create a new Ezsigntemplatedocumentpagerecognition
     * The endpoint allows to create one or many elements at once.
     * @param ezsigntemplatedocumentpagerecognitionCreateObjectV1Request  (required)
     * @return EzsigntemplatedocumentpagerecognitionCreateObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EzsigntemplatedocumentpagerecognitionCreateObjectV1Response ezsigntemplatedocumentpagerecognitionCreateObjectV1(EzsigntemplatedocumentpagerecognitionCreateObjectV1Request ezsigntemplatedocumentpagerecognitionCreateObjectV1Request) throws ApiException {
        ApiResponse<EzsigntemplatedocumentpagerecognitionCreateObjectV1Response> localVarResp = ezsigntemplatedocumentpagerecognitionCreateObjectV1WithHttpInfo(ezsigntemplatedocumentpagerecognitionCreateObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Create a new Ezsigntemplatedocumentpagerecognition
     * The endpoint allows to create one or many elements at once.
     * @param ezsigntemplatedocumentpagerecognitionCreateObjectV1Request  (required)
     * @return ApiResponse&lt;EzsigntemplatedocumentpagerecognitionCreateObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigntemplatedocumentpagerecognitionCreateObjectV1Response> ezsigntemplatedocumentpagerecognitionCreateObjectV1WithHttpInfo(EzsigntemplatedocumentpagerecognitionCreateObjectV1Request ezsigntemplatedocumentpagerecognitionCreateObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezsigntemplatedocumentpagerecognitionCreateObjectV1ValidateBeforeCall(ezsigntemplatedocumentpagerecognitionCreateObjectV1Request, null);
        Type localVarReturnType = new TypeToken<EzsigntemplatedocumentpagerecognitionCreateObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Ezsigntemplatedocumentpagerecognition (asynchronously)
     * The endpoint allows to create one or many elements at once.
     * @param ezsigntemplatedocumentpagerecognitionCreateObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatedocumentpagerecognitionCreateObjectV1Async(EzsigntemplatedocumentpagerecognitionCreateObjectV1Request ezsigntemplatedocumentpagerecognitionCreateObjectV1Request, final ApiCallback<EzsigntemplatedocumentpagerecognitionCreateObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigntemplatedocumentpagerecognitionCreateObjectV1ValidateBeforeCall(ezsigntemplatedocumentpagerecognitionCreateObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<EzsigntemplatedocumentpagerecognitionCreateObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigntemplatedocumentpagerecognitionDeleteObjectV1
     * @param pkiEzsigntemplatedocumentpagerecognitionID The unique ID of the Ezsigntemplatedocumentpagerecognition (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatedocumentpagerecognitionDeleteObjectV1Call(Integer pkiEzsigntemplatedocumentpagerecognitionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/ezsigntemplatedocumentpagerecognition/{pkiEzsigntemplatedocumentpagerecognitionID}"
            .replace("{" + "pkiEzsigntemplatedocumentpagerecognitionID" + "}", localVarApiClient.escapeString(pkiEzsigntemplatedocumentpagerecognitionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigntemplatedocumentpagerecognitionDeleteObjectV1ValidateBeforeCall(Integer pkiEzsigntemplatedocumentpagerecognitionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiEzsigntemplatedocumentpagerecognitionID' is set
        if (pkiEzsigntemplatedocumentpagerecognitionID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigntemplatedocumentpagerecognitionID' when calling ezsigntemplatedocumentpagerecognitionDeleteObjectV1(Async)");
        }

        return ezsigntemplatedocumentpagerecognitionDeleteObjectV1Call(pkiEzsigntemplatedocumentpagerecognitionID, _callback);

    }

    /**
     * Delete an existing Ezsigntemplatedocumentpagerecognition
     * 
     * @param pkiEzsigntemplatedocumentpagerecognitionID The unique ID of the Ezsigntemplatedocumentpagerecognition (required)
     * @return EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response ezsigntemplatedocumentpagerecognitionDeleteObjectV1(Integer pkiEzsigntemplatedocumentpagerecognitionID) throws ApiException {
        ApiResponse<EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response> localVarResp = ezsigntemplatedocumentpagerecognitionDeleteObjectV1WithHttpInfo(pkiEzsigntemplatedocumentpagerecognitionID);
        return localVarResp.getData();
    }

    /**
     * Delete an existing Ezsigntemplatedocumentpagerecognition
     * 
     * @param pkiEzsigntemplatedocumentpagerecognitionID The unique ID of the Ezsigntemplatedocumentpagerecognition (required)
     * @return ApiResponse&lt;EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response> ezsigntemplatedocumentpagerecognitionDeleteObjectV1WithHttpInfo(Integer pkiEzsigntemplatedocumentpagerecognitionID) throws ApiException {
        okhttp3.Call localVarCall = ezsigntemplatedocumentpagerecognitionDeleteObjectV1ValidateBeforeCall(pkiEzsigntemplatedocumentpagerecognitionID, null);
        Type localVarReturnType = new TypeToken<EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an existing Ezsigntemplatedocumentpagerecognition (asynchronously)
     * 
     * @param pkiEzsigntemplatedocumentpagerecognitionID The unique ID of the Ezsigntemplatedocumentpagerecognition (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatedocumentpagerecognitionDeleteObjectV1Async(Integer pkiEzsigntemplatedocumentpagerecognitionID, final ApiCallback<EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigntemplatedocumentpagerecognitionDeleteObjectV1ValidateBeforeCall(pkiEzsigntemplatedocumentpagerecognitionID, _callback);
        Type localVarReturnType = new TypeToken<EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigntemplatedocumentpagerecognitionEditObjectV1
     * @param pkiEzsigntemplatedocumentpagerecognitionID The unique ID of the Ezsigntemplatedocumentpagerecognition (required)
     * @param ezsigntemplatedocumentpagerecognitionEditObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatedocumentpagerecognitionEditObjectV1Call(Integer pkiEzsigntemplatedocumentpagerecognitionID, EzsigntemplatedocumentpagerecognitionEditObjectV1Request ezsigntemplatedocumentpagerecognitionEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezsigntemplatedocumentpagerecognitionEditObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezsigntemplatedocumentpagerecognition/{pkiEzsigntemplatedocumentpagerecognitionID}"
            .replace("{" + "pkiEzsigntemplatedocumentpagerecognitionID" + "}", localVarApiClient.escapeString(pkiEzsigntemplatedocumentpagerecognitionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigntemplatedocumentpagerecognitionEditObjectV1ValidateBeforeCall(Integer pkiEzsigntemplatedocumentpagerecognitionID, EzsigntemplatedocumentpagerecognitionEditObjectV1Request ezsigntemplatedocumentpagerecognitionEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiEzsigntemplatedocumentpagerecognitionID' is set
        if (pkiEzsigntemplatedocumentpagerecognitionID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigntemplatedocumentpagerecognitionID' when calling ezsigntemplatedocumentpagerecognitionEditObjectV1(Async)");
        }

        // verify the required parameter 'ezsigntemplatedocumentpagerecognitionEditObjectV1Request' is set
        if (ezsigntemplatedocumentpagerecognitionEditObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezsigntemplatedocumentpagerecognitionEditObjectV1Request' when calling ezsigntemplatedocumentpagerecognitionEditObjectV1(Async)");
        }

        return ezsigntemplatedocumentpagerecognitionEditObjectV1Call(pkiEzsigntemplatedocumentpagerecognitionID, ezsigntemplatedocumentpagerecognitionEditObjectV1Request, _callback);

    }

    /**
     * Edit an existing Ezsigntemplatedocumentpagerecognition
     * 
     * @param pkiEzsigntemplatedocumentpagerecognitionID The unique ID of the Ezsigntemplatedocumentpagerecognition (required)
     * @param ezsigntemplatedocumentpagerecognitionEditObjectV1Request  (required)
     * @return EzsigntemplatedocumentpagerecognitionEditObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsigntemplatedocumentpagerecognitionEditObjectV1Response ezsigntemplatedocumentpagerecognitionEditObjectV1(Integer pkiEzsigntemplatedocumentpagerecognitionID, EzsigntemplatedocumentpagerecognitionEditObjectV1Request ezsigntemplatedocumentpagerecognitionEditObjectV1Request) throws ApiException {
        ApiResponse<EzsigntemplatedocumentpagerecognitionEditObjectV1Response> localVarResp = ezsigntemplatedocumentpagerecognitionEditObjectV1WithHttpInfo(pkiEzsigntemplatedocumentpagerecognitionID, ezsigntemplatedocumentpagerecognitionEditObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Edit an existing Ezsigntemplatedocumentpagerecognition
     * 
     * @param pkiEzsigntemplatedocumentpagerecognitionID The unique ID of the Ezsigntemplatedocumentpagerecognition (required)
     * @param ezsigntemplatedocumentpagerecognitionEditObjectV1Request  (required)
     * @return ApiResponse&lt;EzsigntemplatedocumentpagerecognitionEditObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigntemplatedocumentpagerecognitionEditObjectV1Response> ezsigntemplatedocumentpagerecognitionEditObjectV1WithHttpInfo(Integer pkiEzsigntemplatedocumentpagerecognitionID, EzsigntemplatedocumentpagerecognitionEditObjectV1Request ezsigntemplatedocumentpagerecognitionEditObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezsigntemplatedocumentpagerecognitionEditObjectV1ValidateBeforeCall(pkiEzsigntemplatedocumentpagerecognitionID, ezsigntemplatedocumentpagerecognitionEditObjectV1Request, null);
        Type localVarReturnType = new TypeToken<EzsigntemplatedocumentpagerecognitionEditObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit an existing Ezsigntemplatedocumentpagerecognition (asynchronously)
     * 
     * @param pkiEzsigntemplatedocumentpagerecognitionID The unique ID of the Ezsigntemplatedocumentpagerecognition (required)
     * @param ezsigntemplatedocumentpagerecognitionEditObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatedocumentpagerecognitionEditObjectV1Async(Integer pkiEzsigntemplatedocumentpagerecognitionID, EzsigntemplatedocumentpagerecognitionEditObjectV1Request ezsigntemplatedocumentpagerecognitionEditObjectV1Request, final ApiCallback<EzsigntemplatedocumentpagerecognitionEditObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigntemplatedocumentpagerecognitionEditObjectV1ValidateBeforeCall(pkiEzsigntemplatedocumentpagerecognitionID, ezsigntemplatedocumentpagerecognitionEditObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<EzsigntemplatedocumentpagerecognitionEditObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigntemplatedocumentpagerecognitionGetObjectV2
     * @param pkiEzsigntemplatedocumentpagerecognitionID The unique ID of the Ezsigntemplatedocumentpagerecognition (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatedocumentpagerecognitionGetObjectV2Call(Integer pkiEzsigntemplatedocumentpagerecognitionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/object/ezsigntemplatedocumentpagerecognition/{pkiEzsigntemplatedocumentpagerecognitionID}"
            .replace("{" + "pkiEzsigntemplatedocumentpagerecognitionID" + "}", localVarApiClient.escapeString(pkiEzsigntemplatedocumentpagerecognitionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigntemplatedocumentpagerecognitionGetObjectV2ValidateBeforeCall(Integer pkiEzsigntemplatedocumentpagerecognitionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiEzsigntemplatedocumentpagerecognitionID' is set
        if (pkiEzsigntemplatedocumentpagerecognitionID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigntemplatedocumentpagerecognitionID' when calling ezsigntemplatedocumentpagerecognitionGetObjectV2(Async)");
        }

        return ezsigntemplatedocumentpagerecognitionGetObjectV2Call(pkiEzsigntemplatedocumentpagerecognitionID, _callback);

    }

    /**
     * Retrieve an existing Ezsigntemplatedocumentpagerecognition
     * 
     * @param pkiEzsigntemplatedocumentpagerecognitionID The unique ID of the Ezsigntemplatedocumentpagerecognition (required)
     * @return EzsigntemplatedocumentpagerecognitionGetObjectV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public EzsigntemplatedocumentpagerecognitionGetObjectV2Response ezsigntemplatedocumentpagerecognitionGetObjectV2(Integer pkiEzsigntemplatedocumentpagerecognitionID) throws ApiException {
        ApiResponse<EzsigntemplatedocumentpagerecognitionGetObjectV2Response> localVarResp = ezsigntemplatedocumentpagerecognitionGetObjectV2WithHttpInfo(pkiEzsigntemplatedocumentpagerecognitionID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Ezsigntemplatedocumentpagerecognition
     * 
     * @param pkiEzsigntemplatedocumentpagerecognitionID The unique ID of the Ezsigntemplatedocumentpagerecognition (required)
     * @return ApiResponse&lt;EzsigntemplatedocumentpagerecognitionGetObjectV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigntemplatedocumentpagerecognitionGetObjectV2Response> ezsigntemplatedocumentpagerecognitionGetObjectV2WithHttpInfo(Integer pkiEzsigntemplatedocumentpagerecognitionID) throws ApiException {
        okhttp3.Call localVarCall = ezsigntemplatedocumentpagerecognitionGetObjectV2ValidateBeforeCall(pkiEzsigntemplatedocumentpagerecognitionID, null);
        Type localVarReturnType = new TypeToken<EzsigntemplatedocumentpagerecognitionGetObjectV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Ezsigntemplatedocumentpagerecognition (asynchronously)
     * 
     * @param pkiEzsigntemplatedocumentpagerecognitionID The unique ID of the Ezsigntemplatedocumentpagerecognition (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigntemplatedocumentpagerecognitionGetObjectV2Async(Integer pkiEzsigntemplatedocumentpagerecognitionID, final ApiCallback<EzsigntemplatedocumentpagerecognitionGetObjectV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigntemplatedocumentpagerecognitionGetObjectV2ValidateBeforeCall(pkiEzsigntemplatedocumentpagerecognitionID, _callback);
        Type localVarReturnType = new TypeToken<EzsigntemplatedocumentpagerecognitionGetObjectV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
