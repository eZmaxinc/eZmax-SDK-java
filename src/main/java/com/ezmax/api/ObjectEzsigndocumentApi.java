/*
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign application.  We provide SDKs for customers. They are generated using OpenAPI codegen, we encourage customers to use them as we also provide samples for them.  You can choose to build your own implementation manually or can use any compatible OpenAPI 3.0 generator like Swagger Codegen, OpenAPI codegen or any commercial generators.  If you need helping understanding how to use this API, don't waste too much time looking for it. Contact support-api@ezmax.ca, we're here to help. We are developpers so we know programmers don't like bad documentation. If you don't find what you need in the documentation, let us know, we'll improve it and put you rapidly up on track.
 *
 * The version of the OpenAPI document: 1.0.27
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api;

import eZmaxAPI.ApiCallback;
import eZmaxAPI.ApiClient;
import eZmaxAPI.ApiException;
import eZmaxAPI.ApiResponse;
import eZmaxAPI.Configuration;
import eZmaxAPI.Pair;
import eZmaxAPI.ProgressRequestBody;
import eZmaxAPI.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ezmax.api.model.CommonResponseError;
import com.ezmax.api.model.EzsigndocumentApplyEzsigntemplateV1Request;
import com.ezmax.api.model.EzsigndocumentApplyEzsigntemplateV1Response;
import com.ezmax.api.model.EzsigndocumentCreateObjectV1Request;
import com.ezmax.api.model.EzsigndocumentCreateObjectV1Response;
import com.ezmax.api.model.EzsigndocumentDeleteObjectV1Response;
import com.ezmax.api.model.EzsigndocumentEditObjectV1Request;
import com.ezmax.api.model.EzsigndocumentEditObjectV1Response;
import com.ezmax.api.model.EzsigndocumentGetDownloadUrlV1Response;
import com.ezmax.api.model.EzsigndocumentGetObjectV1Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ObjectEzsigndocumentApi {
    private ApiClient localVarApiClient;

    public ObjectEzsigndocumentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ObjectEzsigndocumentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for ezsigndocumentApplyEzsigntemplateV1
     * @param pkiEzsigndocumentID The unique ID of the Ezsigndocument (required)
     * @param ezsigndocumentApplyEzsigntemplateV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigndocumentApplyEzsigntemplateV1Call(Integer pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV1Request ezsigndocumentApplyEzsigntemplateV1Request, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = ezsigndocumentApplyEzsigntemplateV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezsigndocument/{pkiEzsigndocumentID}/applyezsigntemplate"
            .replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", localVarApiClient.escapeString(pkiEzsigndocumentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigndocumentApplyEzsigntemplateV1ValidateBeforeCall(Integer pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV1Request ezsigndocumentApplyEzsigntemplateV1Request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pkiEzsigndocumentID' is set
        if (pkiEzsigndocumentID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentApplyEzsigntemplateV1(Async)");
        }
        
        // verify the required parameter 'ezsigndocumentApplyEzsigntemplateV1Request' is set
        if (ezsigndocumentApplyEzsigntemplateV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezsigndocumentApplyEzsigntemplateV1Request' when calling ezsigndocumentApplyEzsigntemplateV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsigndocumentApplyEzsigntemplateV1Call(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateV1Request, _callback);
        return localVarCall;

    }

    /**
     * Apply an Ezsign Template to the Ezsigndocument.
     * This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
     * @param pkiEzsigndocumentID The unique ID of the Ezsigndocument (required)
     * @param ezsigndocumentApplyEzsigntemplateV1Request  (required)
     * @return EzsigndocumentApplyEzsigntemplateV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public EzsigndocumentApplyEzsigntemplateV1Response ezsigndocumentApplyEzsigntemplateV1(Integer pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV1Request ezsigndocumentApplyEzsigntemplateV1Request) throws ApiException {
        ApiResponse<EzsigndocumentApplyEzsigntemplateV1Response> localVarResp = ezsigndocumentApplyEzsigntemplateV1WithHttpInfo(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateV1Request);
        return localVarResp.getData();
    }

    /**
     * Apply an Ezsign Template to the Ezsigndocument.
     * This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
     * @param pkiEzsigndocumentID The unique ID of the Ezsigndocument (required)
     * @param ezsigndocumentApplyEzsigntemplateV1Request  (required)
     * @return ApiResponse&lt;EzsigndocumentApplyEzsigntemplateV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigndocumentApplyEzsigntemplateV1Response> ezsigndocumentApplyEzsigntemplateV1WithHttpInfo(Integer pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV1Request ezsigndocumentApplyEzsigntemplateV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezsigndocumentApplyEzsigntemplateV1ValidateBeforeCall(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateV1Request, null);
        Type localVarReturnType = new TypeToken<EzsigndocumentApplyEzsigntemplateV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Apply an Ezsign Template to the Ezsigndocument. (asynchronously)
     * This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
     * @param pkiEzsigndocumentID The unique ID of the Ezsigndocument (required)
     * @param ezsigndocumentApplyEzsigntemplateV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigndocumentApplyEzsigntemplateV1Async(Integer pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV1Request ezsigndocumentApplyEzsigntemplateV1Request, final ApiCallback<EzsigndocumentApplyEzsigntemplateV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigndocumentApplyEzsigntemplateV1ValidateBeforeCall(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateV1Request, _callback);
        Type localVarReturnType = new TypeToken<EzsigndocumentApplyEzsigntemplateV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigndocumentCreateObjectV1
     * @param ezsigndocumentCreateObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigndocumentCreateObjectV1Call(List<EzsigndocumentCreateObjectV1Request> ezsigndocumentCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = ezsigndocumentCreateObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezsigndocument";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigndocumentCreateObjectV1ValidateBeforeCall(List<EzsigndocumentCreateObjectV1Request> ezsigndocumentCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ezsigndocumentCreateObjectV1Request' is set
        if (ezsigndocumentCreateObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezsigndocumentCreateObjectV1Request' when calling ezsigndocumentCreateObjectV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsigndocumentCreateObjectV1Call(ezsigndocumentCreateObjectV1Request, _callback);
        return localVarCall;

    }

    /**
     * Create a new Ezsigndocument
     * The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
     * @param ezsigndocumentCreateObjectV1Request  (required)
     * @return EzsigndocumentCreateObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EzsigndocumentCreateObjectV1Response ezsigndocumentCreateObjectV1(List<EzsigndocumentCreateObjectV1Request> ezsigndocumentCreateObjectV1Request) throws ApiException {
        ApiResponse<EzsigndocumentCreateObjectV1Response> localVarResp = ezsigndocumentCreateObjectV1WithHttpInfo(ezsigndocumentCreateObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Create a new Ezsigndocument
     * The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
     * @param ezsigndocumentCreateObjectV1Request  (required)
     * @return ApiResponse&lt;EzsigndocumentCreateObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigndocumentCreateObjectV1Response> ezsigndocumentCreateObjectV1WithHttpInfo(List<EzsigndocumentCreateObjectV1Request> ezsigndocumentCreateObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezsigndocumentCreateObjectV1ValidateBeforeCall(ezsigndocumentCreateObjectV1Request, null);
        Type localVarReturnType = new TypeToken<EzsigndocumentCreateObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Ezsigndocument (asynchronously)
     * The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
     * @param ezsigndocumentCreateObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigndocumentCreateObjectV1Async(List<EzsigndocumentCreateObjectV1Request> ezsigndocumentCreateObjectV1Request, final ApiCallback<EzsigndocumentCreateObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigndocumentCreateObjectV1ValidateBeforeCall(ezsigndocumentCreateObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<EzsigndocumentCreateObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigndocumentDeleteObjectV1
     * @param pkiEzsigndocumentID The unique ID of the Ezsigndocument (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigndocumentDeleteObjectV1Call(Integer pkiEzsigndocumentID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/ezsigndocument/{pkiEzsigndocumentID}"
            .replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", localVarApiClient.escapeString(pkiEzsigndocumentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigndocumentDeleteObjectV1ValidateBeforeCall(Integer pkiEzsigndocumentID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pkiEzsigndocumentID' is set
        if (pkiEzsigndocumentID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentDeleteObjectV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsigndocumentDeleteObjectV1Call(pkiEzsigndocumentID, _callback);
        return localVarCall;

    }

    /**
     * Delete an existing Ezsigndocument
     * 
     * @param pkiEzsigndocumentID The unique ID of the Ezsigndocument (required)
     * @return EzsigndocumentDeleteObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public EzsigndocumentDeleteObjectV1Response ezsigndocumentDeleteObjectV1(Integer pkiEzsigndocumentID) throws ApiException {
        ApiResponse<EzsigndocumentDeleteObjectV1Response> localVarResp = ezsigndocumentDeleteObjectV1WithHttpInfo(pkiEzsigndocumentID);
        return localVarResp.getData();
    }

    /**
     * Delete an existing Ezsigndocument
     * 
     * @param pkiEzsigndocumentID The unique ID of the Ezsigndocument (required)
     * @return ApiResponse&lt;EzsigndocumentDeleteObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigndocumentDeleteObjectV1Response> ezsigndocumentDeleteObjectV1WithHttpInfo(Integer pkiEzsigndocumentID) throws ApiException {
        okhttp3.Call localVarCall = ezsigndocumentDeleteObjectV1ValidateBeforeCall(pkiEzsigndocumentID, null);
        Type localVarReturnType = new TypeToken<EzsigndocumentDeleteObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an existing Ezsigndocument (asynchronously)
     * 
     * @param pkiEzsigndocumentID The unique ID of the Ezsigndocument (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigndocumentDeleteObjectV1Async(Integer pkiEzsigndocumentID, final ApiCallback<EzsigndocumentDeleteObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigndocumentDeleteObjectV1ValidateBeforeCall(pkiEzsigndocumentID, _callback);
        Type localVarReturnType = new TypeToken<EzsigndocumentDeleteObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigndocumentEditObjectV1
     * @param pkiEzsigndocumentID The unique ID of the Ezsigndocument (required)
     * @param ezsigndocumentEditObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigndocumentEditObjectV1Call(Integer pkiEzsigndocumentID, EzsigndocumentEditObjectV1Request ezsigndocumentEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = ezsigndocumentEditObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezsigndocument/{pkiEzsigndocumentID}"
            .replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", localVarApiClient.escapeString(pkiEzsigndocumentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigndocumentEditObjectV1ValidateBeforeCall(Integer pkiEzsigndocumentID, EzsigndocumentEditObjectV1Request ezsigndocumentEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pkiEzsigndocumentID' is set
        if (pkiEzsigndocumentID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentEditObjectV1(Async)");
        }
        
        // verify the required parameter 'ezsigndocumentEditObjectV1Request' is set
        if (ezsigndocumentEditObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezsigndocumentEditObjectV1Request' when calling ezsigndocumentEditObjectV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsigndocumentEditObjectV1Call(pkiEzsigndocumentID, ezsigndocumentEditObjectV1Request, _callback);
        return localVarCall;

    }

    /**
     * Modify an existing Ezsigndocument
     * 
     * @param pkiEzsigndocumentID The unique ID of the Ezsigndocument (required)
     * @param ezsigndocumentEditObjectV1Request  (required)
     * @return EzsigndocumentEditObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
     </table>
     */
    public EzsigndocumentEditObjectV1Response ezsigndocumentEditObjectV1(Integer pkiEzsigndocumentID, EzsigndocumentEditObjectV1Request ezsigndocumentEditObjectV1Request) throws ApiException {
        ApiResponse<EzsigndocumentEditObjectV1Response> localVarResp = ezsigndocumentEditObjectV1WithHttpInfo(pkiEzsigndocumentID, ezsigndocumentEditObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Modify an existing Ezsigndocument
     * 
     * @param pkiEzsigndocumentID The unique ID of the Ezsigndocument (required)
     * @param ezsigndocumentEditObjectV1Request  (required)
     * @return ApiResponse&lt;EzsigndocumentEditObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigndocumentEditObjectV1Response> ezsigndocumentEditObjectV1WithHttpInfo(Integer pkiEzsigndocumentID, EzsigndocumentEditObjectV1Request ezsigndocumentEditObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezsigndocumentEditObjectV1ValidateBeforeCall(pkiEzsigndocumentID, ezsigndocumentEditObjectV1Request, null);
        Type localVarReturnType = new TypeToken<EzsigndocumentEditObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify an existing Ezsigndocument (asynchronously)
     * 
     * @param pkiEzsigndocumentID The unique ID of the Ezsigndocument (required)
     * @param ezsigndocumentEditObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigndocumentEditObjectV1Async(Integer pkiEzsigndocumentID, EzsigndocumentEditObjectV1Request ezsigndocumentEditObjectV1Request, final ApiCallback<EzsigndocumentEditObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigndocumentEditObjectV1ValidateBeforeCall(pkiEzsigndocumentID, ezsigndocumentEditObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<EzsigndocumentEditObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigndocumentGetDownloadUrlV1
     * @param pkiEzsigndocumentID The unique ID of the Ezsigndocument (required)
     * @param eDocumentType The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **Signed** Is the final document once all signatures were applied. 3. **Proofdocument** Is the evidence report. 4. **Proof** Is the complete evidence archive including all of the above and more.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigndocumentGetDownloadUrlV1Call(Integer pkiEzsigndocumentID, String eDocumentType, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/ezsigndocument/{pkiEzsigndocumentID}/getDownloadUrl/{eDocumentType}"
            .replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", localVarApiClient.escapeString(pkiEzsigndocumentID.toString()))
            .replaceAll("\\{" + "eDocumentType" + "\\}", localVarApiClient.escapeString(eDocumentType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigndocumentGetDownloadUrlV1ValidateBeforeCall(Integer pkiEzsigndocumentID, String eDocumentType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pkiEzsigndocumentID' is set
        if (pkiEzsigndocumentID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentGetDownloadUrlV1(Async)");
        }
        
        // verify the required parameter 'eDocumentType' is set
        if (eDocumentType == null) {
            throw new ApiException("Missing the required parameter 'eDocumentType' when calling ezsigndocumentGetDownloadUrlV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsigndocumentGetDownloadUrlV1Call(pkiEzsigndocumentID, eDocumentType, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a URL to download documents.
     * This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
     * @param pkiEzsigndocumentID The unique ID of the Ezsigndocument (required)
     * @param eDocumentType The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **Signed** Is the final document once all signatures were applied. 3. **Proofdocument** Is the evidence report. 4. **Proof** Is the complete evidence archive including all of the above and more.  (required)
     * @return EzsigndocumentGetDownloadUrlV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public EzsigndocumentGetDownloadUrlV1Response ezsigndocumentGetDownloadUrlV1(Integer pkiEzsigndocumentID, String eDocumentType) throws ApiException {
        ApiResponse<EzsigndocumentGetDownloadUrlV1Response> localVarResp = ezsigndocumentGetDownloadUrlV1WithHttpInfo(pkiEzsigndocumentID, eDocumentType);
        return localVarResp.getData();
    }

    /**
     * Retrieve a URL to download documents.
     * This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
     * @param pkiEzsigndocumentID The unique ID of the Ezsigndocument (required)
     * @param eDocumentType The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **Signed** Is the final document once all signatures were applied. 3. **Proofdocument** Is the evidence report. 4. **Proof** Is the complete evidence archive including all of the above and more.  (required)
     * @return ApiResponse&lt;EzsigndocumentGetDownloadUrlV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigndocumentGetDownloadUrlV1Response> ezsigndocumentGetDownloadUrlV1WithHttpInfo(Integer pkiEzsigndocumentID, String eDocumentType) throws ApiException {
        okhttp3.Call localVarCall = ezsigndocumentGetDownloadUrlV1ValidateBeforeCall(pkiEzsigndocumentID, eDocumentType, null);
        Type localVarReturnType = new TypeToken<EzsigndocumentGetDownloadUrlV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a URL to download documents. (asynchronously)
     * This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
     * @param pkiEzsigndocumentID The unique ID of the Ezsigndocument (required)
     * @param eDocumentType The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **Signed** Is the final document once all signatures were applied. 3. **Proofdocument** Is the evidence report. 4. **Proof** Is the complete evidence archive including all of the above and more.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigndocumentGetDownloadUrlV1Async(Integer pkiEzsigndocumentID, String eDocumentType, final ApiCallback<EzsigndocumentGetDownloadUrlV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigndocumentGetDownloadUrlV1ValidateBeforeCall(pkiEzsigndocumentID, eDocumentType, _callback);
        Type localVarReturnType = new TypeToken<EzsigndocumentGetDownloadUrlV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigndocumentGetObjectGetChildrenV1
     * @param pkiEzsigndocumentID The unique ID of the Ezsigndocument (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigndocumentGetObjectGetChildrenV1Call(Integer pkiEzsigndocumentID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/ezsigndocument/{pkiEzsigndocumentID}/getChildren"
            .replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", localVarApiClient.escapeString(pkiEzsigndocumentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigndocumentGetObjectGetChildrenV1ValidateBeforeCall(Integer pkiEzsigndocumentID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pkiEzsigndocumentID' is set
        if (pkiEzsigndocumentID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentGetObjectGetChildrenV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsigndocumentGetObjectGetChildrenV1Call(pkiEzsigndocumentID, _callback);
        return localVarCall;

    }

    /**
     * Retrieve an existing Ezsigndocument&#39;s children IDs
     * 
     * @param pkiEzsigndocumentID The unique ID of the Ezsigndocument (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
     </table>
     */
    public void ezsigndocumentGetObjectGetChildrenV1(Integer pkiEzsigndocumentID) throws ApiException {
        ezsigndocumentGetObjectGetChildrenV1WithHttpInfo(pkiEzsigndocumentID);
    }

    /**
     * Retrieve an existing Ezsigndocument&#39;s children IDs
     * 
     * @param pkiEzsigndocumentID The unique ID of the Ezsigndocument (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ezsigndocumentGetObjectGetChildrenV1WithHttpInfo(Integer pkiEzsigndocumentID) throws ApiException {
        okhttp3.Call localVarCall = ezsigndocumentGetObjectGetChildrenV1ValidateBeforeCall(pkiEzsigndocumentID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve an existing Ezsigndocument&#39;s children IDs (asynchronously)
     * 
     * @param pkiEzsigndocumentID The unique ID of the Ezsigndocument (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigndocumentGetObjectGetChildrenV1Async(Integer pkiEzsigndocumentID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigndocumentGetObjectGetChildrenV1ValidateBeforeCall(pkiEzsigndocumentID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigndocumentGetObjectV1
     * @param pkiEzsigndocumentID The unique ID of the Ezsigndocument (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigndocumentGetObjectV1Call(Integer pkiEzsigndocumentID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/ezsigndocument/{pkiEzsigndocumentID}"
            .replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", localVarApiClient.escapeString(pkiEzsigndocumentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigndocumentGetObjectV1ValidateBeforeCall(Integer pkiEzsigndocumentID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pkiEzsigndocumentID' is set
        if (pkiEzsigndocumentID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentGetObjectV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsigndocumentGetObjectV1Call(pkiEzsigndocumentID, _callback);
        return localVarCall;

    }

    /**
     * Retrieve an existing Ezsigndocument
     * 
     * @param pkiEzsigndocumentID The unique ID of the Ezsigndocument (required)
     * @return EzsigndocumentGetObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
     </table>
     */
    public EzsigndocumentGetObjectV1Response ezsigndocumentGetObjectV1(Integer pkiEzsigndocumentID) throws ApiException {
        ApiResponse<EzsigndocumentGetObjectV1Response> localVarResp = ezsigndocumentGetObjectV1WithHttpInfo(pkiEzsigndocumentID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Ezsigndocument
     * 
     * @param pkiEzsigndocumentID The unique ID of the Ezsigndocument (required)
     * @return ApiResponse&lt;EzsigndocumentGetObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigndocumentGetObjectV1Response> ezsigndocumentGetObjectV1WithHttpInfo(Integer pkiEzsigndocumentID) throws ApiException {
        okhttp3.Call localVarCall = ezsigndocumentGetObjectV1ValidateBeforeCall(pkiEzsigndocumentID, null);
        Type localVarReturnType = new TypeToken<EzsigndocumentGetObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Ezsigndocument (asynchronously)
     * 
     * @param pkiEzsigndocumentID The unique ID of the Ezsigndocument (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigndocumentGetObjectV1Async(Integer pkiEzsigndocumentID, final ApiCallback<EzsigndocumentGetObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigndocumentGetObjectV1ValidateBeforeCall(pkiEzsigndocumentID, _callback);
        Type localVarReturnType = new TypeToken<EzsigndocumentGetObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
