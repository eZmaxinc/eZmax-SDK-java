/*
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api;

import eZmaxAPI.ApiCallback;
import eZmaxAPI.ApiClient;
import eZmaxAPI.ApiException;
import eZmaxAPI.ApiResponse;
import eZmaxAPI.Configuration;
import eZmaxAPI.Pair;
import eZmaxAPI.ProgressRequestBody;
import eZmaxAPI.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ezmax.api.model.CommonResponseError;
import com.ezmax.api.model.CommonResponseErrorSTemporaryFileUrl;
import com.ezmax.api.model.EzsigndocumentApplyEzsigntemplateV1Request;
import com.ezmax.api.model.EzsigndocumentApplyEzsigntemplateV1Response;
import com.ezmax.api.model.EzsigndocumentApplyEzsigntemplateV2Request;
import com.ezmax.api.model.EzsigndocumentApplyEzsigntemplateV2Response;
import com.ezmax.api.model.EzsigndocumentCreateObjectV1Request;
import com.ezmax.api.model.EzsigndocumentCreateObjectV1Response;
import com.ezmax.api.model.EzsigndocumentDeleteObjectV1Response;
import com.ezmax.api.model.EzsigndocumentEditEzsignsignaturesV1Response;
import com.ezmax.api.model.EzsigndocumentGetDownloadUrlV1Response;
import com.ezmax.api.model.EzsigndocumentGetEzsignpagesV1Response;
import com.ezmax.api.model.EzsigndocumentGetFormDataV1Response;
import com.ezmax.api.model.EzsigndocumentGetObjectV1Response;
import com.ezmax.api.model.EzsigndocumentGetWordsPositionsV1Request;
import com.ezmax.api.model.EzsigndocumentGetWordsPositionsV1Response;
import com.ezmax.api.model.EzsigndocumentPatchObjectV1Request;
import com.ezmax.api.model.EzsigndocumentPatchObjectV1Response;
import com.ezmax.api.model.EzsignsignatureRequestCompound;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ObjectEzsigndocumentApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ObjectEzsigndocumentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ObjectEzsigndocumentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for ezsigndocumentApplyEzsigntemplateV1
     * @param pkiEzsigndocumentID  (required)
     * @param ezsigndocumentApplyEzsigntemplateV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call ezsigndocumentApplyEzsigntemplateV1Call(Integer pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV1Request ezsigndocumentApplyEzsigntemplateV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezsigndocumentApplyEzsigntemplateV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezsigndocument/{pkiEzsigndocumentID}/applyezsigntemplate"
            .replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", localVarApiClient.escapeString(pkiEzsigndocumentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigndocumentApplyEzsigntemplateV1ValidateBeforeCall(Integer pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV1Request ezsigndocumentApplyEzsigntemplateV1Request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pkiEzsigndocumentID' is set
        if (pkiEzsigndocumentID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentApplyEzsigntemplateV1(Async)");
        }
        
        // verify the required parameter 'ezsigndocumentApplyEzsigntemplateV1Request' is set
        if (ezsigndocumentApplyEzsigntemplateV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezsigndocumentApplyEzsigntemplateV1Request' when calling ezsigndocumentApplyEzsigntemplateV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsigndocumentApplyEzsigntemplateV1Call(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateV1Request, _callback);
        return localVarCall;

    }

    /**
     * Apply an Ezsign Template to the Ezsigndocument.
     * This function is deprecated. Please use *applyEzsigntemplate* instead which is doing the same thing but with a capital \&quot;E\&quot; to normalize the nomenclature.  This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
     * @param pkiEzsigndocumentID  (required)
     * @param ezsigndocumentApplyEzsigntemplateV1Request  (required)
     * @return EzsigndocumentApplyEzsigntemplateV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public EzsigndocumentApplyEzsigntemplateV1Response ezsigndocumentApplyEzsigntemplateV1(Integer pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV1Request ezsigndocumentApplyEzsigntemplateV1Request) throws ApiException {
        ApiResponse<EzsigndocumentApplyEzsigntemplateV1Response> localVarResp = ezsigndocumentApplyEzsigntemplateV1WithHttpInfo(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateV1Request);
        return localVarResp.getData();
    }

    /**
     * Apply an Ezsign Template to the Ezsigndocument.
     * This function is deprecated. Please use *applyEzsigntemplate* instead which is doing the same thing but with a capital \&quot;E\&quot; to normalize the nomenclature.  This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
     * @param pkiEzsigndocumentID  (required)
     * @param ezsigndocumentApplyEzsigntemplateV1Request  (required)
     * @return ApiResponse&lt;EzsigndocumentApplyEzsigntemplateV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<EzsigndocumentApplyEzsigntemplateV1Response> ezsigndocumentApplyEzsigntemplateV1WithHttpInfo(Integer pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV1Request ezsigndocumentApplyEzsigntemplateV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezsigndocumentApplyEzsigntemplateV1ValidateBeforeCall(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateV1Request, null);
        try {
            Type localVarReturnType = new TypeToken<EzsigndocumentApplyEzsigntemplateV1Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<EzsigndocumentApplyEzsigntemplateV1Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<EzsigndocumentApplyEzsigntemplateV1Response>(){});
            throw e;
        }
    }

    /**
     * Apply an Ezsign Template to the Ezsigndocument. (asynchronously)
     * This function is deprecated. Please use *applyEzsigntemplate* instead which is doing the same thing but with a capital \&quot;E\&quot; to normalize the nomenclature.  This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
     * @param pkiEzsigndocumentID  (required)
     * @param ezsigndocumentApplyEzsigntemplateV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call ezsigndocumentApplyEzsigntemplateV1Async(Integer pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV1Request ezsigndocumentApplyEzsigntemplateV1Request, final ApiCallback<EzsigndocumentApplyEzsigntemplateV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigndocumentApplyEzsigntemplateV1ValidateBeforeCall(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateV1Request, _callback);
        Type localVarReturnType = new TypeToken<EzsigndocumentApplyEzsigntemplateV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigndocumentApplyEzsigntemplateV2
     * @param pkiEzsigndocumentID  (required)
     * @param ezsigndocumentApplyEzsigntemplateV2Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigndocumentApplyEzsigntemplateV2Call(Integer pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV2Request ezsigndocumentApplyEzsigntemplateV2Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezsigndocumentApplyEzsigntemplateV2Request;

        // create path and map variables
        String localVarPath = "/2/object/ezsigndocument/{pkiEzsigndocumentID}/applyEzsigntemplate"
            .replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", localVarApiClient.escapeString(pkiEzsigndocumentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigndocumentApplyEzsigntemplateV2ValidateBeforeCall(Integer pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV2Request ezsigndocumentApplyEzsigntemplateV2Request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pkiEzsigndocumentID' is set
        if (pkiEzsigndocumentID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentApplyEzsigntemplateV2(Async)");
        }
        
        // verify the required parameter 'ezsigndocumentApplyEzsigntemplateV2Request' is set
        if (ezsigndocumentApplyEzsigntemplateV2Request == null) {
            throw new ApiException("Missing the required parameter 'ezsigndocumentApplyEzsigntemplateV2Request' when calling ezsigndocumentApplyEzsigntemplateV2(Async)");
        }
        

        okhttp3.Call localVarCall = ezsigndocumentApplyEzsigntemplateV2Call(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateV2Request, _callback);
        return localVarCall;

    }

    /**
     * Apply an Ezsign Template to the Ezsigndocument.
     * This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
     * @param pkiEzsigndocumentID  (required)
     * @param ezsigndocumentApplyEzsigntemplateV2Request  (required)
     * @return EzsigndocumentApplyEzsigntemplateV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public EzsigndocumentApplyEzsigntemplateV2Response ezsigndocumentApplyEzsigntemplateV2(Integer pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV2Request ezsigndocumentApplyEzsigntemplateV2Request) throws ApiException {
        ApiResponse<EzsigndocumentApplyEzsigntemplateV2Response> localVarResp = ezsigndocumentApplyEzsigntemplateV2WithHttpInfo(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateV2Request);
        return localVarResp.getData();
    }

    /**
     * Apply an Ezsign Template to the Ezsigndocument.
     * This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
     * @param pkiEzsigndocumentID  (required)
     * @param ezsigndocumentApplyEzsigntemplateV2Request  (required)
     * @return ApiResponse&lt;EzsigndocumentApplyEzsigntemplateV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigndocumentApplyEzsigntemplateV2Response> ezsigndocumentApplyEzsigntemplateV2WithHttpInfo(Integer pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV2Request ezsigndocumentApplyEzsigntemplateV2Request) throws ApiException {
        okhttp3.Call localVarCall = ezsigndocumentApplyEzsigntemplateV2ValidateBeforeCall(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateV2Request, null);
        try {
            Type localVarReturnType = new TypeToken<EzsigndocumentApplyEzsigntemplateV2Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<EzsigndocumentApplyEzsigntemplateV2Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<EzsigndocumentApplyEzsigntemplateV2Response>(){});
            throw e;
        }
    }

    /**
     * Apply an Ezsign Template to the Ezsigndocument. (asynchronously)
     * This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
     * @param pkiEzsigndocumentID  (required)
     * @param ezsigndocumentApplyEzsigntemplateV2Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigndocumentApplyEzsigntemplateV2Async(Integer pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV2Request ezsigndocumentApplyEzsigntemplateV2Request, final ApiCallback<EzsigndocumentApplyEzsigntemplateV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigndocumentApplyEzsigntemplateV2ValidateBeforeCall(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateV2Request, _callback);
        Type localVarReturnType = new TypeToken<EzsigndocumentApplyEzsigntemplateV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigndocumentCreateObjectV1
     * @param ezsigndocumentCreateObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. If the error is recoverable sTemporaryFileUrl will be set and you can use this url to try a new request without sending the file over again </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigndocumentCreateObjectV1Call(List<EzsigndocumentCreateObjectV1Request> ezsigndocumentCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezsigndocumentCreateObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezsigndocument";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigndocumentCreateObjectV1ValidateBeforeCall(List<EzsigndocumentCreateObjectV1Request> ezsigndocumentCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ezsigndocumentCreateObjectV1Request' is set
        if (ezsigndocumentCreateObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezsigndocumentCreateObjectV1Request' when calling ezsigndocumentCreateObjectV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsigndocumentCreateObjectV1Call(ezsigndocumentCreateObjectV1Request, _callback);
        return localVarCall;

    }

    /**
     * Create a new Ezsigndocument
     * The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
     * @param ezsigndocumentCreateObjectV1Request  (required)
     * @return EzsigndocumentCreateObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. If the error is recoverable sTemporaryFileUrl will be set and you can use this url to try a new request without sending the file over again </td><td>  -  </td></tr>
     </table>
     */
    public EzsigndocumentCreateObjectV1Response ezsigndocumentCreateObjectV1(List<EzsigndocumentCreateObjectV1Request> ezsigndocumentCreateObjectV1Request) throws ApiException {
        ApiResponse<EzsigndocumentCreateObjectV1Response> localVarResp = ezsigndocumentCreateObjectV1WithHttpInfo(ezsigndocumentCreateObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Create a new Ezsigndocument
     * The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
     * @param ezsigndocumentCreateObjectV1Request  (required)
     * @return ApiResponse&lt;EzsigndocumentCreateObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. If the error is recoverable sTemporaryFileUrl will be set and you can use this url to try a new request without sending the file over again </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigndocumentCreateObjectV1Response> ezsigndocumentCreateObjectV1WithHttpInfo(List<EzsigndocumentCreateObjectV1Request> ezsigndocumentCreateObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezsigndocumentCreateObjectV1ValidateBeforeCall(ezsigndocumentCreateObjectV1Request, null);
        try {
            Type localVarReturnType = new TypeToken<EzsigndocumentCreateObjectV1Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<EzsigndocumentCreateObjectV1Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<EzsigndocumentCreateObjectV1Response>(){});
            throw e;
        }
    }

    /**
     * Create a new Ezsigndocument (asynchronously)
     * The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
     * @param ezsigndocumentCreateObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. If the error is recoverable sTemporaryFileUrl will be set and you can use this url to try a new request without sending the file over again </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigndocumentCreateObjectV1Async(List<EzsigndocumentCreateObjectV1Request> ezsigndocumentCreateObjectV1Request, final ApiCallback<EzsigndocumentCreateObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigndocumentCreateObjectV1ValidateBeforeCall(ezsigndocumentCreateObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<EzsigndocumentCreateObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigndocumentDeleteObjectV1
     * @param pkiEzsigndocumentID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigndocumentDeleteObjectV1Call(Integer pkiEzsigndocumentID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/ezsigndocument/{pkiEzsigndocumentID}"
            .replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", localVarApiClient.escapeString(pkiEzsigndocumentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigndocumentDeleteObjectV1ValidateBeforeCall(Integer pkiEzsigndocumentID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pkiEzsigndocumentID' is set
        if (pkiEzsigndocumentID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentDeleteObjectV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsigndocumentDeleteObjectV1Call(pkiEzsigndocumentID, _callback);
        return localVarCall;

    }

    /**
     * Delete an existing Ezsigndocument
     * 
     * @param pkiEzsigndocumentID  (required)
     * @return EzsigndocumentDeleteObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public EzsigndocumentDeleteObjectV1Response ezsigndocumentDeleteObjectV1(Integer pkiEzsigndocumentID) throws ApiException {
        ApiResponse<EzsigndocumentDeleteObjectV1Response> localVarResp = ezsigndocumentDeleteObjectV1WithHttpInfo(pkiEzsigndocumentID);
        return localVarResp.getData();
    }

    /**
     * Delete an existing Ezsigndocument
     * 
     * @param pkiEzsigndocumentID  (required)
     * @return ApiResponse&lt;EzsigndocumentDeleteObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigndocumentDeleteObjectV1Response> ezsigndocumentDeleteObjectV1WithHttpInfo(Integer pkiEzsigndocumentID) throws ApiException {
        okhttp3.Call localVarCall = ezsigndocumentDeleteObjectV1ValidateBeforeCall(pkiEzsigndocumentID, null);
        try {
            Type localVarReturnType = new TypeToken<EzsigndocumentDeleteObjectV1Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<EzsigndocumentDeleteObjectV1Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<EzsigndocumentDeleteObjectV1Response>(){});
            throw e;
        }
    }

    /**
     * Delete an existing Ezsigndocument (asynchronously)
     * 
     * @param pkiEzsigndocumentID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigndocumentDeleteObjectV1Async(Integer pkiEzsigndocumentID, final ApiCallback<EzsigndocumentDeleteObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigndocumentDeleteObjectV1ValidateBeforeCall(pkiEzsigndocumentID, _callback);
        Type localVarReturnType = new TypeToken<EzsigndocumentDeleteObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigndocumentEditEzsignsignaturesV1
     * @param pkiEzsigndocumentID  (required)
     * @param ezsignsignatureRequestCompound  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigndocumentEditEzsignsignaturesV1Call(Integer pkiEzsigndocumentID, List<EzsignsignatureRequestCompound> ezsignsignatureRequestCompound, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezsignsignatureRequestCompound;

        // create path and map variables
        String localVarPath = "/1/object/ezsigndocument/{pkiEzsigndocumentID}/editEzsignsignatures"
            .replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", localVarApiClient.escapeString(pkiEzsigndocumentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigndocumentEditEzsignsignaturesV1ValidateBeforeCall(Integer pkiEzsigndocumentID, List<EzsignsignatureRequestCompound> ezsignsignatureRequestCompound, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pkiEzsigndocumentID' is set
        if (pkiEzsigndocumentID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentEditEzsignsignaturesV1(Async)");
        }
        
        // verify the required parameter 'ezsignsignatureRequestCompound' is set
        if (ezsignsignatureRequestCompound == null) {
            throw new ApiException("Missing the required parameter 'ezsignsignatureRequestCompound' when calling ezsigndocumentEditEzsignsignaturesV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsigndocumentEditEzsignsignaturesV1Call(pkiEzsigndocumentID, ezsignsignatureRequestCompound, _callback);
        return localVarCall;

    }

    /**
     * Edit multiple ezsignsignatures
     * Using this endpoint, you can edit multiple ezsignsignatures at the same time.
     * @param pkiEzsigndocumentID  (required)
     * @param ezsignsignatureRequestCompound  (required)
     * @return EzsigndocumentEditEzsignsignaturesV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public EzsigndocumentEditEzsignsignaturesV1Response ezsigndocumentEditEzsignsignaturesV1(Integer pkiEzsigndocumentID, List<EzsignsignatureRequestCompound> ezsignsignatureRequestCompound) throws ApiException {
        ApiResponse<EzsigndocumentEditEzsignsignaturesV1Response> localVarResp = ezsigndocumentEditEzsignsignaturesV1WithHttpInfo(pkiEzsigndocumentID, ezsignsignatureRequestCompound);
        return localVarResp.getData();
    }

    /**
     * Edit multiple ezsignsignatures
     * Using this endpoint, you can edit multiple ezsignsignatures at the same time.
     * @param pkiEzsigndocumentID  (required)
     * @param ezsignsignatureRequestCompound  (required)
     * @return ApiResponse&lt;EzsigndocumentEditEzsignsignaturesV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigndocumentEditEzsignsignaturesV1Response> ezsigndocumentEditEzsignsignaturesV1WithHttpInfo(Integer pkiEzsigndocumentID, List<EzsignsignatureRequestCompound> ezsignsignatureRequestCompound) throws ApiException {
        okhttp3.Call localVarCall = ezsigndocumentEditEzsignsignaturesV1ValidateBeforeCall(pkiEzsigndocumentID, ezsignsignatureRequestCompound, null);
        try {
            Type localVarReturnType = new TypeToken<EzsigndocumentEditEzsignsignaturesV1Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<EzsigndocumentEditEzsignsignaturesV1Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<EzsigndocumentEditEzsignsignaturesV1Response>(){});
            throw e;
        }
    }

    /**
     * Edit multiple ezsignsignatures (asynchronously)
     * Using this endpoint, you can edit multiple ezsignsignatures at the same time.
     * @param pkiEzsigndocumentID  (required)
     * @param ezsignsignatureRequestCompound  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigndocumentEditEzsignsignaturesV1Async(Integer pkiEzsigndocumentID, List<EzsignsignatureRequestCompound> ezsignsignatureRequestCompound, final ApiCallback<EzsigndocumentEditEzsignsignaturesV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigndocumentEditEzsignsignaturesV1ValidateBeforeCall(pkiEzsigndocumentID, ezsignsignatureRequestCompound, _callback);
        Type localVarReturnType = new TypeToken<EzsigndocumentEditEzsignsignaturesV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigndocumentGetDownloadUrlV1
     * @param pkiEzsigndocumentID  (required)
     * @param eDocumentType The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **Signed** Is the final document once all signatures were applied. 3. **Proofdocument** Is the evidence report. 4. **Proof** Is the complete evidence archive including all of the above and more.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigndocumentGetDownloadUrlV1Call(Integer pkiEzsigndocumentID, String eDocumentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/ezsigndocument/{pkiEzsigndocumentID}/getDownloadUrl/{eDocumentType}"
            .replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", localVarApiClient.escapeString(pkiEzsigndocumentID.toString()))
            .replaceAll("\\{" + "eDocumentType" + "\\}", localVarApiClient.escapeString(eDocumentType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigndocumentGetDownloadUrlV1ValidateBeforeCall(Integer pkiEzsigndocumentID, String eDocumentType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pkiEzsigndocumentID' is set
        if (pkiEzsigndocumentID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentGetDownloadUrlV1(Async)");
        }
        
        // verify the required parameter 'eDocumentType' is set
        if (eDocumentType == null) {
            throw new ApiException("Missing the required parameter 'eDocumentType' when calling ezsigndocumentGetDownloadUrlV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsigndocumentGetDownloadUrlV1Call(pkiEzsigndocumentID, eDocumentType, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a URL to download documents.
     * This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
     * @param pkiEzsigndocumentID  (required)
     * @param eDocumentType The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **Signed** Is the final document once all signatures were applied. 3. **Proofdocument** Is the evidence report. 4. **Proof** Is the complete evidence archive including all of the above and more.  (required)
     * @return EzsigndocumentGetDownloadUrlV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public EzsigndocumentGetDownloadUrlV1Response ezsigndocumentGetDownloadUrlV1(Integer pkiEzsigndocumentID, String eDocumentType) throws ApiException {
        ApiResponse<EzsigndocumentGetDownloadUrlV1Response> localVarResp = ezsigndocumentGetDownloadUrlV1WithHttpInfo(pkiEzsigndocumentID, eDocumentType);
        return localVarResp.getData();
    }

    /**
     * Retrieve a URL to download documents.
     * This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
     * @param pkiEzsigndocumentID  (required)
     * @param eDocumentType The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **Signed** Is the final document once all signatures were applied. 3. **Proofdocument** Is the evidence report. 4. **Proof** Is the complete evidence archive including all of the above and more.  (required)
     * @return ApiResponse&lt;EzsigndocumentGetDownloadUrlV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigndocumentGetDownloadUrlV1Response> ezsigndocumentGetDownloadUrlV1WithHttpInfo(Integer pkiEzsigndocumentID, String eDocumentType) throws ApiException {
        okhttp3.Call localVarCall = ezsigndocumentGetDownloadUrlV1ValidateBeforeCall(pkiEzsigndocumentID, eDocumentType, null);
        try {
            Type localVarReturnType = new TypeToken<EzsigndocumentGetDownloadUrlV1Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<EzsigndocumentGetDownloadUrlV1Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<EzsigndocumentGetDownloadUrlV1Response>(){});
            throw e;
        }
    }

    /**
     * Retrieve a URL to download documents. (asynchronously)
     * This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
     * @param pkiEzsigndocumentID  (required)
     * @param eDocumentType The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **Signed** Is the final document once all signatures were applied. 3. **Proofdocument** Is the evidence report. 4. **Proof** Is the complete evidence archive including all of the above and more.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigndocumentGetDownloadUrlV1Async(Integer pkiEzsigndocumentID, String eDocumentType, final ApiCallback<EzsigndocumentGetDownloadUrlV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigndocumentGetDownloadUrlV1ValidateBeforeCall(pkiEzsigndocumentID, eDocumentType, _callback);
        Type localVarReturnType = new TypeToken<EzsigndocumentGetDownloadUrlV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigndocumentGetEzsignpagesV1
     * @param pkiEzsigndocumentID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigndocumentGetEzsignpagesV1Call(Integer pkiEzsigndocumentID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsignpages"
            .replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", localVarApiClient.escapeString(pkiEzsigndocumentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigndocumentGetEzsignpagesV1ValidateBeforeCall(Integer pkiEzsigndocumentID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pkiEzsigndocumentID' is set
        if (pkiEzsigndocumentID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentGetEzsignpagesV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsigndocumentGetEzsignpagesV1Call(pkiEzsigndocumentID, _callback);
        return localVarCall;

    }

    /**
     * Retrieve an existing Ezsigndocument&#39;s Ezsignpages
     * 
     * @param pkiEzsigndocumentID  (required)
     * @return EzsigndocumentGetEzsignpagesV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public EzsigndocumentGetEzsignpagesV1Response ezsigndocumentGetEzsignpagesV1(Integer pkiEzsigndocumentID) throws ApiException {
        ApiResponse<EzsigndocumentGetEzsignpagesV1Response> localVarResp = ezsigndocumentGetEzsignpagesV1WithHttpInfo(pkiEzsigndocumentID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Ezsigndocument&#39;s Ezsignpages
     * 
     * @param pkiEzsigndocumentID  (required)
     * @return ApiResponse&lt;EzsigndocumentGetEzsignpagesV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigndocumentGetEzsignpagesV1Response> ezsigndocumentGetEzsignpagesV1WithHttpInfo(Integer pkiEzsigndocumentID) throws ApiException {
        okhttp3.Call localVarCall = ezsigndocumentGetEzsignpagesV1ValidateBeforeCall(pkiEzsigndocumentID, null);
        try {
            Type localVarReturnType = new TypeToken<EzsigndocumentGetEzsignpagesV1Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<EzsigndocumentGetEzsignpagesV1Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<EzsigndocumentGetEzsignpagesV1Response>(){});
            throw e;
        }
    }

    /**
     * Retrieve an existing Ezsigndocument&#39;s Ezsignpages (asynchronously)
     * 
     * @param pkiEzsigndocumentID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigndocumentGetEzsignpagesV1Async(Integer pkiEzsigndocumentID, final ApiCallback<EzsigndocumentGetEzsignpagesV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigndocumentGetEzsignpagesV1ValidateBeforeCall(pkiEzsigndocumentID, _callback);
        Type localVarReturnType = new TypeToken<EzsigndocumentGetEzsignpagesV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigndocumentGetFormDataV1
     * @param pkiEzsigndocumentID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> One of the accept header is not defined or invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigndocumentGetFormDataV1Call(Integer pkiEzsigndocumentID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/ezsigndocument/{pkiEzsigndocumentID}/getFormData"
            .replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", localVarApiClient.escapeString(pkiEzsigndocumentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/zip", "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigndocumentGetFormDataV1ValidateBeforeCall(Integer pkiEzsigndocumentID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pkiEzsigndocumentID' is set
        if (pkiEzsigndocumentID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentGetFormDataV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsigndocumentGetFormDataV1Call(pkiEzsigndocumentID, _callback);
        return localVarCall;

    }

    /**
     * Retrieve an existing Ezsigndocument&#39;s Form Data
     * 
     * @param pkiEzsigndocumentID  (required)
     * @return EzsigndocumentGetFormDataV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> One of the accept header is not defined or invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public EzsigndocumentGetFormDataV1Response ezsigndocumentGetFormDataV1(Integer pkiEzsigndocumentID) throws ApiException {
        ApiResponse<EzsigndocumentGetFormDataV1Response> localVarResp = ezsigndocumentGetFormDataV1WithHttpInfo(pkiEzsigndocumentID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Ezsigndocument&#39;s Form Data
     * 
     * @param pkiEzsigndocumentID  (required)
     * @return ApiResponse&lt;EzsigndocumentGetFormDataV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> One of the accept header is not defined or invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigndocumentGetFormDataV1Response> ezsigndocumentGetFormDataV1WithHttpInfo(Integer pkiEzsigndocumentID) throws ApiException {
        okhttp3.Call localVarCall = ezsigndocumentGetFormDataV1ValidateBeforeCall(pkiEzsigndocumentID, null);
        try {
            Type localVarReturnType = new TypeToken<EzsigndocumentGetFormDataV1Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<EzsigndocumentGetFormDataV1Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<EzsigndocumentGetFormDataV1Response>(){});
            throw e;
        }
    }

    /**
     * Retrieve an existing Ezsigndocument&#39;s Form Data (asynchronously)
     * 
     * @param pkiEzsigndocumentID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> One of the accept header is not defined or invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigndocumentGetFormDataV1Async(Integer pkiEzsigndocumentID, final ApiCallback<EzsigndocumentGetFormDataV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigndocumentGetFormDataV1ValidateBeforeCall(pkiEzsigndocumentID, _callback);
        Type localVarReturnType = new TypeToken<EzsigndocumentGetFormDataV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigndocumentGetObjectV1
     * @param pkiEzsigndocumentID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigndocumentGetObjectV1Call(Integer pkiEzsigndocumentID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/ezsigndocument/{pkiEzsigndocumentID}"
            .replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", localVarApiClient.escapeString(pkiEzsigndocumentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigndocumentGetObjectV1ValidateBeforeCall(Integer pkiEzsigndocumentID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pkiEzsigndocumentID' is set
        if (pkiEzsigndocumentID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentGetObjectV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsigndocumentGetObjectV1Call(pkiEzsigndocumentID, _callback);
        return localVarCall;

    }

    /**
     * Retrieve an existing Ezsigndocument
     * ## ⚠️EARLY ADOPTERS WARNING  ### This endpoint is not officially released. Its definition might still change and it might not be available in every environment and region.
     * @param pkiEzsigndocumentID  (required)
     * @return EzsigndocumentGetObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
     </table>
     */
    public EzsigndocumentGetObjectV1Response ezsigndocumentGetObjectV1(Integer pkiEzsigndocumentID) throws ApiException {
        ApiResponse<EzsigndocumentGetObjectV1Response> localVarResp = ezsigndocumentGetObjectV1WithHttpInfo(pkiEzsigndocumentID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Ezsigndocument
     * ## ⚠️EARLY ADOPTERS WARNING  ### This endpoint is not officially released. Its definition might still change and it might not be available in every environment and region.
     * @param pkiEzsigndocumentID  (required)
     * @return ApiResponse&lt;EzsigndocumentGetObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigndocumentGetObjectV1Response> ezsigndocumentGetObjectV1WithHttpInfo(Integer pkiEzsigndocumentID) throws ApiException {
        okhttp3.Call localVarCall = ezsigndocumentGetObjectV1ValidateBeforeCall(pkiEzsigndocumentID, null);
        try {
            Type localVarReturnType = new TypeToken<EzsigndocumentGetObjectV1Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<EzsigndocumentGetObjectV1Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<EzsigndocumentGetObjectV1Response>(){});
            throw e;
        }
    }

    /**
     * Retrieve an existing Ezsigndocument (asynchronously)
     * ## ⚠️EARLY ADOPTERS WARNING  ### This endpoint is not officially released. Its definition might still change and it might not be available in every environment and region.
     * @param pkiEzsigndocumentID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigndocumentGetObjectV1Async(Integer pkiEzsigndocumentID, final ApiCallback<EzsigndocumentGetObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigndocumentGetObjectV1ValidateBeforeCall(pkiEzsigndocumentID, _callback);
        Type localVarReturnType = new TypeToken<EzsigndocumentGetObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigndocumentGetWordsPositionsV1
     * @param pkiEzsigndocumentID  (required)
     * @param ezsigndocumentGetWordsPositionsV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigndocumentGetWordsPositionsV1Call(Integer pkiEzsigndocumentID, EzsigndocumentGetWordsPositionsV1Request ezsigndocumentGetWordsPositionsV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezsigndocumentGetWordsPositionsV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezsigndocument/{pkiEzsigndocumentID}/getWordsPositions"
            .replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", localVarApiClient.escapeString(pkiEzsigndocumentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigndocumentGetWordsPositionsV1ValidateBeforeCall(Integer pkiEzsigndocumentID, EzsigndocumentGetWordsPositionsV1Request ezsigndocumentGetWordsPositionsV1Request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pkiEzsigndocumentID' is set
        if (pkiEzsigndocumentID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentGetWordsPositionsV1(Async)");
        }
        
        // verify the required parameter 'ezsigndocumentGetWordsPositionsV1Request' is set
        if (ezsigndocumentGetWordsPositionsV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezsigndocumentGetWordsPositionsV1Request' when calling ezsigndocumentGetWordsPositionsV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsigndocumentGetWordsPositionsV1Call(pkiEzsigndocumentID, ezsigndocumentGetWordsPositionsV1Request, _callback);
        return localVarCall;

    }

    /**
     * Retrieve positions X,Y of given words from a Ezsigndocument
     * 
     * @param pkiEzsigndocumentID  (required)
     * @param ezsigndocumentGetWordsPositionsV1Request  (required)
     * @return EzsigndocumentGetWordsPositionsV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public EzsigndocumentGetWordsPositionsV1Response ezsigndocumentGetWordsPositionsV1(Integer pkiEzsigndocumentID, EzsigndocumentGetWordsPositionsV1Request ezsigndocumentGetWordsPositionsV1Request) throws ApiException {
        ApiResponse<EzsigndocumentGetWordsPositionsV1Response> localVarResp = ezsigndocumentGetWordsPositionsV1WithHttpInfo(pkiEzsigndocumentID, ezsigndocumentGetWordsPositionsV1Request);
        return localVarResp.getData();
    }

    /**
     * Retrieve positions X,Y of given words from a Ezsigndocument
     * 
     * @param pkiEzsigndocumentID  (required)
     * @param ezsigndocumentGetWordsPositionsV1Request  (required)
     * @return ApiResponse&lt;EzsigndocumentGetWordsPositionsV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigndocumentGetWordsPositionsV1Response> ezsigndocumentGetWordsPositionsV1WithHttpInfo(Integer pkiEzsigndocumentID, EzsigndocumentGetWordsPositionsV1Request ezsigndocumentGetWordsPositionsV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezsigndocumentGetWordsPositionsV1ValidateBeforeCall(pkiEzsigndocumentID, ezsigndocumentGetWordsPositionsV1Request, null);
        try {
            Type localVarReturnType = new TypeToken<EzsigndocumentGetWordsPositionsV1Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<EzsigndocumentGetWordsPositionsV1Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<EzsigndocumentGetWordsPositionsV1Response>(){});
            throw e;
        }
    }

    /**
     * Retrieve positions X,Y of given words from a Ezsigndocument (asynchronously)
     * 
     * @param pkiEzsigndocumentID  (required)
     * @param ezsigndocumentGetWordsPositionsV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigndocumentGetWordsPositionsV1Async(Integer pkiEzsigndocumentID, EzsigndocumentGetWordsPositionsV1Request ezsigndocumentGetWordsPositionsV1Request, final ApiCallback<EzsigndocumentGetWordsPositionsV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigndocumentGetWordsPositionsV1ValidateBeforeCall(pkiEzsigndocumentID, ezsigndocumentGetWordsPositionsV1Request, _callback);
        Type localVarReturnType = new TypeToken<EzsigndocumentGetWordsPositionsV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ezsigndocumentPatchObjectV1
     * @param pkiEzsigndocumentID  (required)
     * @param ezsigndocumentPatchObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigndocumentPatchObjectV1Call(Integer pkiEzsigndocumentID, EzsigndocumentPatchObjectV1Request ezsigndocumentPatchObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ezsigndocumentPatchObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/ezsigndocument/{pkiEzsigndocumentID}"
            .replaceAll("\\{" + "pkiEzsigndocumentID" + "\\}", localVarApiClient.escapeString(pkiEzsigndocumentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ezsigndocumentPatchObjectV1ValidateBeforeCall(Integer pkiEzsigndocumentID, EzsigndocumentPatchObjectV1Request ezsigndocumentPatchObjectV1Request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pkiEzsigndocumentID' is set
        if (pkiEzsigndocumentID == null) {
            throw new ApiException("Missing the required parameter 'pkiEzsigndocumentID' when calling ezsigndocumentPatchObjectV1(Async)");
        }
        
        // verify the required parameter 'ezsigndocumentPatchObjectV1Request' is set
        if (ezsigndocumentPatchObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'ezsigndocumentPatchObjectV1Request' when calling ezsigndocumentPatchObjectV1(Async)");
        }
        

        okhttp3.Call localVarCall = ezsigndocumentPatchObjectV1Call(pkiEzsigndocumentID, ezsigndocumentPatchObjectV1Request, _callback);
        return localVarCall;

    }

    /**
     * Patch an existing Ezsigndocument
     * 
     * @param pkiEzsigndocumentID  (required)
     * @param ezsigndocumentPatchObjectV1Request  (required)
     * @return EzsigndocumentPatchObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public EzsigndocumentPatchObjectV1Response ezsigndocumentPatchObjectV1(Integer pkiEzsigndocumentID, EzsigndocumentPatchObjectV1Request ezsigndocumentPatchObjectV1Request) throws ApiException {
        ApiResponse<EzsigndocumentPatchObjectV1Response> localVarResp = ezsigndocumentPatchObjectV1WithHttpInfo(pkiEzsigndocumentID, ezsigndocumentPatchObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Patch an existing Ezsigndocument
     * 
     * @param pkiEzsigndocumentID  (required)
     * @param ezsigndocumentPatchObjectV1Request  (required)
     * @return ApiResponse&lt;EzsigndocumentPatchObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EzsigndocumentPatchObjectV1Response> ezsigndocumentPatchObjectV1WithHttpInfo(Integer pkiEzsigndocumentID, EzsigndocumentPatchObjectV1Request ezsigndocumentPatchObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = ezsigndocumentPatchObjectV1ValidateBeforeCall(pkiEzsigndocumentID, ezsigndocumentPatchObjectV1Request, null);
        try {
            Type localVarReturnType = new TypeToken<EzsigndocumentPatchObjectV1Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<EzsigndocumentPatchObjectV1Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<EzsigndocumentPatchObjectV1Response>(){});
            throw e;
        }
    }

    /**
     * Patch an existing Ezsigndocument (asynchronously)
     * 
     * @param pkiEzsigndocumentID  (required)
     * @param ezsigndocumentPatchObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The element you are trying to work on does not exist </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The syntax of the request is valid but the request cannot be completed. Look for detail in body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ezsigndocumentPatchObjectV1Async(Integer pkiEzsigndocumentID, EzsigndocumentPatchObjectV1Request ezsigndocumentPatchObjectV1Request, final ApiCallback<EzsigndocumentPatchObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ezsigndocumentPatchObjectV1ValidateBeforeCall(pkiEzsigndocumentID, ezsigndocumentPatchObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<EzsigndocumentPatchObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
