/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api;

import eZmaxAPI.ApiCallback;
import eZmaxAPI.ApiClient;
import eZmaxAPI.ApiException;
import eZmaxAPI.ApiResponse;
import eZmaxAPI.Configuration;
import eZmaxAPI.Pair;
import eZmaxAPI.ProgressRequestBody;
import eZmaxAPI.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ezmax.api.model.CommonResponseError;
import com.ezmax.api.model.SignatureCreateObjectV1Request;
import com.ezmax.api.model.SignatureCreateObjectV1Response;
import com.ezmax.api.model.SignatureDeleteObjectV1Response;
import com.ezmax.api.model.SignatureEditObjectV1Request;
import com.ezmax.api.model.SignatureEditObjectV1Response;
import com.ezmax.api.model.SignatureGetObjectV2Response;
import com.ezmax.api.model.SignatureGetObjectV3Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ObjectSignatureApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ObjectSignatureApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ObjectSignatureApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for signatureCreateObjectV1
     * @param signatureCreateObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signatureCreateObjectV1Call(SignatureCreateObjectV1Request signatureCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = signatureCreateObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/signature";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signatureCreateObjectV1ValidateBeforeCall(SignatureCreateObjectV1Request signatureCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'signatureCreateObjectV1Request' is set
        if (signatureCreateObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'signatureCreateObjectV1Request' when calling signatureCreateObjectV1(Async)");
        }

        return signatureCreateObjectV1Call(signatureCreateObjectV1Request, _callback);

    }

    /**
     * Create a new Signature
     * The endpoint allows to create one or many elements at once.
     * @param signatureCreateObjectV1Request  (required)
     * @return SignatureCreateObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public SignatureCreateObjectV1Response signatureCreateObjectV1(SignatureCreateObjectV1Request signatureCreateObjectV1Request) throws ApiException {
        ApiResponse<SignatureCreateObjectV1Response> localVarResp = signatureCreateObjectV1WithHttpInfo(signatureCreateObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Create a new Signature
     * The endpoint allows to create one or many elements at once.
     * @param signatureCreateObjectV1Request  (required)
     * @return ApiResponse&lt;SignatureCreateObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignatureCreateObjectV1Response> signatureCreateObjectV1WithHttpInfo(SignatureCreateObjectV1Request signatureCreateObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = signatureCreateObjectV1ValidateBeforeCall(signatureCreateObjectV1Request, null);
        Type localVarReturnType = new TypeToken<SignatureCreateObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Signature (asynchronously)
     * The endpoint allows to create one or many elements at once.
     * @param signatureCreateObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signatureCreateObjectV1Async(SignatureCreateObjectV1Request signatureCreateObjectV1Request, final ApiCallback<SignatureCreateObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = signatureCreateObjectV1ValidateBeforeCall(signatureCreateObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<SignatureCreateObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signatureDeleteObjectV1
     * @param pkiSignatureID The unique ID of the Signature (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signatureDeleteObjectV1Call(Integer pkiSignatureID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/signature/{pkiSignatureID}"
            .replace("{" + "pkiSignatureID" + "}", localVarApiClient.escapeString(pkiSignatureID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signatureDeleteObjectV1ValidateBeforeCall(Integer pkiSignatureID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiSignatureID' is set
        if (pkiSignatureID == null) {
            throw new ApiException("Missing the required parameter 'pkiSignatureID' when calling signatureDeleteObjectV1(Async)");
        }

        return signatureDeleteObjectV1Call(pkiSignatureID, _callback);

    }

    /**
     * Delete an existing Signature
     * 
     * @param pkiSignatureID The unique ID of the Signature (required)
     * @return SignatureDeleteObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public SignatureDeleteObjectV1Response signatureDeleteObjectV1(Integer pkiSignatureID) throws ApiException {
        ApiResponse<SignatureDeleteObjectV1Response> localVarResp = signatureDeleteObjectV1WithHttpInfo(pkiSignatureID);
        return localVarResp.getData();
    }

    /**
     * Delete an existing Signature
     * 
     * @param pkiSignatureID The unique ID of the Signature (required)
     * @return ApiResponse&lt;SignatureDeleteObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignatureDeleteObjectV1Response> signatureDeleteObjectV1WithHttpInfo(Integer pkiSignatureID) throws ApiException {
        okhttp3.Call localVarCall = signatureDeleteObjectV1ValidateBeforeCall(pkiSignatureID, null);
        Type localVarReturnType = new TypeToken<SignatureDeleteObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an existing Signature (asynchronously)
     * 
     * @param pkiSignatureID The unique ID of the Signature (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signatureDeleteObjectV1Async(Integer pkiSignatureID, final ApiCallback<SignatureDeleteObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = signatureDeleteObjectV1ValidateBeforeCall(pkiSignatureID, _callback);
        Type localVarReturnType = new TypeToken<SignatureDeleteObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signatureEditObjectV1
     * @param pkiSignatureID The unique ID of the Signature (required)
     * @param signatureEditObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signatureEditObjectV1Call(Integer pkiSignatureID, SignatureEditObjectV1Request signatureEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = signatureEditObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/signature/{pkiSignatureID}"
            .replace("{" + "pkiSignatureID" + "}", localVarApiClient.escapeString(pkiSignatureID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signatureEditObjectV1ValidateBeforeCall(Integer pkiSignatureID, SignatureEditObjectV1Request signatureEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiSignatureID' is set
        if (pkiSignatureID == null) {
            throw new ApiException("Missing the required parameter 'pkiSignatureID' when calling signatureEditObjectV1(Async)");
        }

        // verify the required parameter 'signatureEditObjectV1Request' is set
        if (signatureEditObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'signatureEditObjectV1Request' when calling signatureEditObjectV1(Async)");
        }

        return signatureEditObjectV1Call(pkiSignatureID, signatureEditObjectV1Request, _callback);

    }

    /**
     * Edit an existing Signature
     * 
     * @param pkiSignatureID The unique ID of the Signature (required)
     * @param signatureEditObjectV1Request  (required)
     * @return SignatureEditObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public SignatureEditObjectV1Response signatureEditObjectV1(Integer pkiSignatureID, SignatureEditObjectV1Request signatureEditObjectV1Request) throws ApiException {
        ApiResponse<SignatureEditObjectV1Response> localVarResp = signatureEditObjectV1WithHttpInfo(pkiSignatureID, signatureEditObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Edit an existing Signature
     * 
     * @param pkiSignatureID The unique ID of the Signature (required)
     * @param signatureEditObjectV1Request  (required)
     * @return ApiResponse&lt;SignatureEditObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignatureEditObjectV1Response> signatureEditObjectV1WithHttpInfo(Integer pkiSignatureID, SignatureEditObjectV1Request signatureEditObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = signatureEditObjectV1ValidateBeforeCall(pkiSignatureID, signatureEditObjectV1Request, null);
        Type localVarReturnType = new TypeToken<SignatureEditObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit an existing Signature (asynchronously)
     * 
     * @param pkiSignatureID The unique ID of the Signature (required)
     * @param signatureEditObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signatureEditObjectV1Async(Integer pkiSignatureID, SignatureEditObjectV1Request signatureEditObjectV1Request, final ApiCallback<SignatureEditObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = signatureEditObjectV1ValidateBeforeCall(pkiSignatureID, signatureEditObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<SignatureEditObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signatureGetObjectV2
     * @param pkiSignatureID The unique ID of the Signature (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call signatureGetObjectV2Call(Integer pkiSignatureID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/object/signature/{pkiSignatureID}"
            .replace("{" + "pkiSignatureID" + "}", localVarApiClient.escapeString(pkiSignatureID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call signatureGetObjectV2ValidateBeforeCall(Integer pkiSignatureID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiSignatureID' is set
        if (pkiSignatureID == null) {
            throw new ApiException("Missing the required parameter 'pkiSignatureID' when calling signatureGetObjectV2(Async)");
        }

        return signatureGetObjectV2Call(pkiSignatureID, _callback);

    }

    /**
     * Retrieve an existing Signature
     * 
     * @param pkiSignatureID The unique ID of the Signature (required)
     * @return SignatureGetObjectV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public SignatureGetObjectV2Response signatureGetObjectV2(Integer pkiSignatureID) throws ApiException {
        ApiResponse<SignatureGetObjectV2Response> localVarResp = signatureGetObjectV2WithHttpInfo(pkiSignatureID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Signature
     * 
     * @param pkiSignatureID The unique ID of the Signature (required)
     * @return ApiResponse&lt;SignatureGetObjectV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<SignatureGetObjectV2Response> signatureGetObjectV2WithHttpInfo(Integer pkiSignatureID) throws ApiException {
        okhttp3.Call localVarCall = signatureGetObjectV2ValidateBeforeCall(pkiSignatureID, null);
        Type localVarReturnType = new TypeToken<SignatureGetObjectV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Signature (asynchronously)
     * 
     * @param pkiSignatureID The unique ID of the Signature (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call signatureGetObjectV2Async(Integer pkiSignatureID, final ApiCallback<SignatureGetObjectV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = signatureGetObjectV2ValidateBeforeCall(pkiSignatureID, _callback);
        Type localVarReturnType = new TypeToken<SignatureGetObjectV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signatureGetObjectV3
     * @param pkiSignatureID The unique ID of the Signature (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signatureGetObjectV3Call(Integer pkiSignatureID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/3/object/signature/{pkiSignatureID}"
            .replace("{" + "pkiSignatureID" + "}", localVarApiClient.escapeString(pkiSignatureID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signatureGetObjectV3ValidateBeforeCall(Integer pkiSignatureID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiSignatureID' is set
        if (pkiSignatureID == null) {
            throw new ApiException("Missing the required parameter 'pkiSignatureID' when calling signatureGetObjectV3(Async)");
        }

        return signatureGetObjectV3Call(pkiSignatureID, _callback);

    }

    /**
     * Retrieve an existing Signature
     * 
     * @param pkiSignatureID The unique ID of the Signature (required)
     * @return SignatureGetObjectV3Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public SignatureGetObjectV3Response signatureGetObjectV3(Integer pkiSignatureID) throws ApiException {
        ApiResponse<SignatureGetObjectV3Response> localVarResp = signatureGetObjectV3WithHttpInfo(pkiSignatureID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Signature
     * 
     * @param pkiSignatureID The unique ID of the Signature (required)
     * @return ApiResponse&lt;SignatureGetObjectV3Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignatureGetObjectV3Response> signatureGetObjectV3WithHttpInfo(Integer pkiSignatureID) throws ApiException {
        okhttp3.Call localVarCall = signatureGetObjectV3ValidateBeforeCall(pkiSignatureID, null);
        Type localVarReturnType = new TypeToken<SignatureGetObjectV3Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Signature (asynchronously)
     * 
     * @param pkiSignatureID The unique ID of the Signature (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signatureGetObjectV3Async(Integer pkiSignatureID, final ApiCallback<SignatureGetObjectV3Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = signatureGetObjectV3ValidateBeforeCall(pkiSignatureID, _callback);
        Type localVarReturnType = new TypeToken<SignatureGetObjectV3Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signatureGetSVGInitialsV1
     * @param pkiSignatureID The unique ID of the Signature (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> The user has been redirected </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signatureGetSVGInitialsV1Call(Integer pkiSignatureID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/signature/{pkiSignatureID}/getSVGInitials"
            .replace("{" + "pkiSignatureID" + "}", localVarApiClient.escapeString(pkiSignatureID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signatureGetSVGInitialsV1ValidateBeforeCall(Integer pkiSignatureID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiSignatureID' is set
        if (pkiSignatureID == null) {
            throw new ApiException("Missing the required parameter 'pkiSignatureID' when calling signatureGetSVGInitialsV1(Async)");
        }

        return signatureGetSVGInitialsV1Call(pkiSignatureID, _callback);

    }

    /**
     * Retrieve an existing Signature initial SVG
     * 
     * @param pkiSignatureID The unique ID of the Signature (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> The user has been redirected </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public void signatureGetSVGInitialsV1(Integer pkiSignatureID) throws ApiException {
        signatureGetSVGInitialsV1WithHttpInfo(pkiSignatureID);
    }

    /**
     * Retrieve an existing Signature initial SVG
     * 
     * @param pkiSignatureID The unique ID of the Signature (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> The user has been redirected </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> signatureGetSVGInitialsV1WithHttpInfo(Integer pkiSignatureID) throws ApiException {
        okhttp3.Call localVarCall = signatureGetSVGInitialsV1ValidateBeforeCall(pkiSignatureID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve an existing Signature initial SVG (asynchronously)
     * 
     * @param pkiSignatureID The unique ID of the Signature (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> The user has been redirected </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signatureGetSVGInitialsV1Async(Integer pkiSignatureID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = signatureGetSVGInitialsV1ValidateBeforeCall(pkiSignatureID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for signatureGetSVGSignatureV1
     * @param pkiSignatureID The unique ID of the Signature (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> The user has been redirected </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signatureGetSVGSignatureV1Call(Integer pkiSignatureID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/signature/{pkiSignatureID}/getSVGSignature"
            .replace("{" + "pkiSignatureID" + "}", localVarApiClient.escapeString(pkiSignatureID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signatureGetSVGSignatureV1ValidateBeforeCall(Integer pkiSignatureID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiSignatureID' is set
        if (pkiSignatureID == null) {
            throw new ApiException("Missing the required parameter 'pkiSignatureID' when calling signatureGetSVGSignatureV1(Async)");
        }

        return signatureGetSVGSignatureV1Call(pkiSignatureID, _callback);

    }

    /**
     * Retrieve an existing Signature SVG
     * 
     * @param pkiSignatureID The unique ID of the Signature (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> The user has been redirected </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public void signatureGetSVGSignatureV1(Integer pkiSignatureID) throws ApiException {
        signatureGetSVGSignatureV1WithHttpInfo(pkiSignatureID);
    }

    /**
     * Retrieve an existing Signature SVG
     * 
     * @param pkiSignatureID The unique ID of the Signature (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> The user has been redirected </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> signatureGetSVGSignatureV1WithHttpInfo(Integer pkiSignatureID) throws ApiException {
        okhttp3.Call localVarCall = signatureGetSVGSignatureV1ValidateBeforeCall(pkiSignatureID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve an existing Signature SVG (asynchronously)
     * 
     * @param pkiSignatureID The unique ID of the Signature (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> The user has been redirected </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signatureGetSVGSignatureV1Async(Integer pkiSignatureID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = signatureGetSVGSignatureV1ValidateBeforeCall(pkiSignatureID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
