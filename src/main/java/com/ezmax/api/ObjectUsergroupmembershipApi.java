/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api;

import eZmaxAPI.ApiCallback;
import eZmaxAPI.ApiClient;
import eZmaxAPI.ApiException;
import eZmaxAPI.ApiResponse;
import eZmaxAPI.Configuration;
import eZmaxAPI.Pair;
import eZmaxAPI.ProgressRequestBody;
import eZmaxAPI.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ezmax.api.model.CommonResponseError;
import com.ezmax.api.model.UsergroupmembershipCreateObjectV1Request;
import com.ezmax.api.model.UsergroupmembershipCreateObjectV1Response;
import com.ezmax.api.model.UsergroupmembershipDeleteObjectV1Response;
import com.ezmax.api.model.UsergroupmembershipEditObjectV1Request;
import com.ezmax.api.model.UsergroupmembershipEditObjectV1Response;
import com.ezmax.api.model.UsergroupmembershipGetObjectV2Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ObjectUsergroupmembershipApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ObjectUsergroupmembershipApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ObjectUsergroupmembershipApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for usergroupmembershipCreateObjectV1
     * @param usergroupmembershipCreateObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupmembershipCreateObjectV1Call(UsergroupmembershipCreateObjectV1Request usergroupmembershipCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usergroupmembershipCreateObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/usergroupmembership";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usergroupmembershipCreateObjectV1ValidateBeforeCall(UsergroupmembershipCreateObjectV1Request usergroupmembershipCreateObjectV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'usergroupmembershipCreateObjectV1Request' is set
        if (usergroupmembershipCreateObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'usergroupmembershipCreateObjectV1Request' when calling usergroupmembershipCreateObjectV1(Async)");
        }

        return usergroupmembershipCreateObjectV1Call(usergroupmembershipCreateObjectV1Request, _callback);

    }

    /**
     * Create a new Usergroupmembership
     * The endpoint allows to create one or many elements at once.
     * @param usergroupmembershipCreateObjectV1Request  (required)
     * @return UsergroupmembershipCreateObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public UsergroupmembershipCreateObjectV1Response usergroupmembershipCreateObjectV1(UsergroupmembershipCreateObjectV1Request usergroupmembershipCreateObjectV1Request) throws ApiException {
        ApiResponse<UsergroupmembershipCreateObjectV1Response> localVarResp = usergroupmembershipCreateObjectV1WithHttpInfo(usergroupmembershipCreateObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Create a new Usergroupmembership
     * The endpoint allows to create one or many elements at once.
     * @param usergroupmembershipCreateObjectV1Request  (required)
     * @return ApiResponse&lt;UsergroupmembershipCreateObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsergroupmembershipCreateObjectV1Response> usergroupmembershipCreateObjectV1WithHttpInfo(UsergroupmembershipCreateObjectV1Request usergroupmembershipCreateObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = usergroupmembershipCreateObjectV1ValidateBeforeCall(usergroupmembershipCreateObjectV1Request, null);
        Type localVarReturnType = new TypeToken<UsergroupmembershipCreateObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Usergroupmembership (asynchronously)
     * The endpoint allows to create one or many elements at once.
     * @param usergroupmembershipCreateObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupmembershipCreateObjectV1Async(UsergroupmembershipCreateObjectV1Request usergroupmembershipCreateObjectV1Request, final ApiCallback<UsergroupmembershipCreateObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = usergroupmembershipCreateObjectV1ValidateBeforeCall(usergroupmembershipCreateObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<UsergroupmembershipCreateObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usergroupmembershipDeleteObjectV1
     * @param pkiUsergroupmembershipID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupmembershipDeleteObjectV1Call(Integer pkiUsergroupmembershipID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/object/usergroupmembership/{pkiUsergroupmembershipID}"
            .replace("{" + "pkiUsergroupmembershipID" + "}", localVarApiClient.escapeString(pkiUsergroupmembershipID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usergroupmembershipDeleteObjectV1ValidateBeforeCall(Integer pkiUsergroupmembershipID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiUsergroupmembershipID' is set
        if (pkiUsergroupmembershipID == null) {
            throw new ApiException("Missing the required parameter 'pkiUsergroupmembershipID' when calling usergroupmembershipDeleteObjectV1(Async)");
        }

        return usergroupmembershipDeleteObjectV1Call(pkiUsergroupmembershipID, _callback);

    }

    /**
     * Delete an existing Usergroupmembership
     * 
     * @param pkiUsergroupmembershipID  (required)
     * @return UsergroupmembershipDeleteObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public UsergroupmembershipDeleteObjectV1Response usergroupmembershipDeleteObjectV1(Integer pkiUsergroupmembershipID) throws ApiException {
        ApiResponse<UsergroupmembershipDeleteObjectV1Response> localVarResp = usergroupmembershipDeleteObjectV1WithHttpInfo(pkiUsergroupmembershipID);
        return localVarResp.getData();
    }

    /**
     * Delete an existing Usergroupmembership
     * 
     * @param pkiUsergroupmembershipID  (required)
     * @return ApiResponse&lt;UsergroupmembershipDeleteObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsergroupmembershipDeleteObjectV1Response> usergroupmembershipDeleteObjectV1WithHttpInfo(Integer pkiUsergroupmembershipID) throws ApiException {
        okhttp3.Call localVarCall = usergroupmembershipDeleteObjectV1ValidateBeforeCall(pkiUsergroupmembershipID, null);
        Type localVarReturnType = new TypeToken<UsergroupmembershipDeleteObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an existing Usergroupmembership (asynchronously)
     * 
     * @param pkiUsergroupmembershipID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupmembershipDeleteObjectV1Async(Integer pkiUsergroupmembershipID, final ApiCallback<UsergroupmembershipDeleteObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = usergroupmembershipDeleteObjectV1ValidateBeforeCall(pkiUsergroupmembershipID, _callback);
        Type localVarReturnType = new TypeToken<UsergroupmembershipDeleteObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usergroupmembershipEditObjectV1
     * @param pkiUsergroupmembershipID  (required)
     * @param usergroupmembershipEditObjectV1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupmembershipEditObjectV1Call(Integer pkiUsergroupmembershipID, UsergroupmembershipEditObjectV1Request usergroupmembershipEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usergroupmembershipEditObjectV1Request;

        // create path and map variables
        String localVarPath = "/1/object/usergroupmembership/{pkiUsergroupmembershipID}"
            .replace("{" + "pkiUsergroupmembershipID" + "}", localVarApiClient.escapeString(pkiUsergroupmembershipID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usergroupmembershipEditObjectV1ValidateBeforeCall(Integer pkiUsergroupmembershipID, UsergroupmembershipEditObjectV1Request usergroupmembershipEditObjectV1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiUsergroupmembershipID' is set
        if (pkiUsergroupmembershipID == null) {
            throw new ApiException("Missing the required parameter 'pkiUsergroupmembershipID' when calling usergroupmembershipEditObjectV1(Async)");
        }

        // verify the required parameter 'usergroupmembershipEditObjectV1Request' is set
        if (usergroupmembershipEditObjectV1Request == null) {
            throw new ApiException("Missing the required parameter 'usergroupmembershipEditObjectV1Request' when calling usergroupmembershipEditObjectV1(Async)");
        }

        return usergroupmembershipEditObjectV1Call(pkiUsergroupmembershipID, usergroupmembershipEditObjectV1Request, _callback);

    }

    /**
     * Edit an existing Usergroupmembership
     * 
     * @param pkiUsergroupmembershipID  (required)
     * @param usergroupmembershipEditObjectV1Request  (required)
     * @return UsergroupmembershipEditObjectV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public UsergroupmembershipEditObjectV1Response usergroupmembershipEditObjectV1(Integer pkiUsergroupmembershipID, UsergroupmembershipEditObjectV1Request usergroupmembershipEditObjectV1Request) throws ApiException {
        ApiResponse<UsergroupmembershipEditObjectV1Response> localVarResp = usergroupmembershipEditObjectV1WithHttpInfo(pkiUsergroupmembershipID, usergroupmembershipEditObjectV1Request);
        return localVarResp.getData();
    }

    /**
     * Edit an existing Usergroupmembership
     * 
     * @param pkiUsergroupmembershipID  (required)
     * @param usergroupmembershipEditObjectV1Request  (required)
     * @return ApiResponse&lt;UsergroupmembershipEditObjectV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsergroupmembershipEditObjectV1Response> usergroupmembershipEditObjectV1WithHttpInfo(Integer pkiUsergroupmembershipID, UsergroupmembershipEditObjectV1Request usergroupmembershipEditObjectV1Request) throws ApiException {
        okhttp3.Call localVarCall = usergroupmembershipEditObjectV1ValidateBeforeCall(pkiUsergroupmembershipID, usergroupmembershipEditObjectV1Request, null);
        Type localVarReturnType = new TypeToken<UsergroupmembershipEditObjectV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit an existing Usergroupmembership (asynchronously)
     * 
     * @param pkiUsergroupmembershipID  (required)
     * @param usergroupmembershipEditObjectV1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The request was syntactically valid but failed because of an interdependance condition. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupmembershipEditObjectV1Async(Integer pkiUsergroupmembershipID, UsergroupmembershipEditObjectV1Request usergroupmembershipEditObjectV1Request, final ApiCallback<UsergroupmembershipEditObjectV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = usergroupmembershipEditObjectV1ValidateBeforeCall(pkiUsergroupmembershipID, usergroupmembershipEditObjectV1Request, _callback);
        Type localVarReturnType = new TypeToken<UsergroupmembershipEditObjectV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usergroupmembershipGetObjectV2
     * @param pkiUsergroupmembershipID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupmembershipGetObjectV2Call(Integer pkiUsergroupmembershipID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2/object/usergroupmembership/{pkiUsergroupmembershipID}"
            .replace("{" + "pkiUsergroupmembershipID" + "}", localVarApiClient.escapeString(pkiUsergroupmembershipID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usergroupmembershipGetObjectV2ValidateBeforeCall(Integer pkiUsergroupmembershipID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pkiUsergroupmembershipID' is set
        if (pkiUsergroupmembershipID == null) {
            throw new ApiException("Missing the required parameter 'pkiUsergroupmembershipID' when calling usergroupmembershipGetObjectV2(Async)");
        }

        return usergroupmembershipGetObjectV2Call(pkiUsergroupmembershipID, _callback);

    }

    /**
     * Retrieve an existing Usergroupmembership
     * 
     * @param pkiUsergroupmembershipID  (required)
     * @return UsergroupmembershipGetObjectV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public UsergroupmembershipGetObjectV2Response usergroupmembershipGetObjectV2(Integer pkiUsergroupmembershipID) throws ApiException {
        ApiResponse<UsergroupmembershipGetObjectV2Response> localVarResp = usergroupmembershipGetObjectV2WithHttpInfo(pkiUsergroupmembershipID);
        return localVarResp.getData();
    }

    /**
     * Retrieve an existing Usergroupmembership
     * 
     * @param pkiUsergroupmembershipID  (required)
     * @return ApiResponse&lt;UsergroupmembershipGetObjectV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsergroupmembershipGetObjectV2Response> usergroupmembershipGetObjectV2WithHttpInfo(Integer pkiUsergroupmembershipID) throws ApiException {
        okhttp3.Call localVarCall = usergroupmembershipGetObjectV2ValidateBeforeCall(pkiUsergroupmembershipID, null);
        Type localVarReturnType = new TypeToken<UsergroupmembershipGetObjectV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an existing Usergroupmembership (asynchronously)
     * 
     * @param pkiUsergroupmembershipID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usergroupmembershipGetObjectV2Async(Integer pkiUsergroupmembershipID, final ApiCallback<UsergroupmembershipGetObjectV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = usergroupmembershipGetObjectV2ValidateBeforeCall(pkiUsergroupmembershipID, _callback);
        Type localVarReturnType = new TypeToken<UsergroupmembershipGetObjectV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
