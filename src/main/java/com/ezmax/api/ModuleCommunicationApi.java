/*
 * eZmax API Definition (Full)
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.17
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ezmax.api;

import eZmaxAPI.ApiCallback;
import eZmaxAPI.ApiClient;
import eZmaxAPI.ApiException;
import eZmaxAPI.ApiResponse;
import eZmaxAPI.Configuration;
import eZmaxAPI.Pair;
import eZmaxAPI.ProgressRequestBody;
import eZmaxAPI.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ezmax.api.model.CommonResponseError;
import com.ezmax.api.model.CommunicationGetCountV1Response;
import com.ezmax.api.model.CommunicationGetListV1Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ModuleCommunicationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ModuleCommunicationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ModuleCommunicationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for communicationGetCommunicationCountV1
     * @param eCommunicationModule Specify the requested module (required)
     * @param pkiEzsignfolderID The unique ID of the Ezsignfolder (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call communicationGetCommunicationCountV1Call(String eCommunicationModule, Integer pkiEzsignfolderID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/module/communication/getCommunicationCount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eCommunicationModule != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eCommunicationModule", eCommunicationModule));
        }

        if (pkiEzsignfolderID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pkiEzsignfolderID", pkiEzsignfolderID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call communicationGetCommunicationCountV1ValidateBeforeCall(String eCommunicationModule, Integer pkiEzsignfolderID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eCommunicationModule' is set
        if (eCommunicationModule == null) {
            throw new ApiException("Missing the required parameter 'eCommunicationModule' when calling communicationGetCommunicationCountV1(Async)");
        }

        return communicationGetCommunicationCountV1Call(eCommunicationModule, pkiEzsignfolderID, _callback);

    }

    /**
     * Get the number of communication
     * Get the number of communication in specified module
     * @param eCommunicationModule Specify the requested module (required)
     * @param pkiEzsignfolderID The unique ID of the Ezsignfolder (optional)
     * @return CommunicationGetCountV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public CommunicationGetCountV1Response communicationGetCommunicationCountV1(String eCommunicationModule, Integer pkiEzsignfolderID) throws ApiException {
        ApiResponse<CommunicationGetCountV1Response> localVarResp = communicationGetCommunicationCountV1WithHttpInfo(eCommunicationModule, pkiEzsignfolderID);
        return localVarResp.getData();
    }

    /**
     * Get the number of communication
     * Get the number of communication in specified module
     * @param eCommunicationModule Specify the requested module (required)
     * @param pkiEzsignfolderID The unique ID of the Ezsignfolder (optional)
     * @return ApiResponse&lt;CommunicationGetCountV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommunicationGetCountV1Response> communicationGetCommunicationCountV1WithHttpInfo(String eCommunicationModule, Integer pkiEzsignfolderID) throws ApiException {
        okhttp3.Call localVarCall = communicationGetCommunicationCountV1ValidateBeforeCall(eCommunicationModule, pkiEzsignfolderID, null);
        Type localVarReturnType = new TypeToken<CommunicationGetCountV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the number of communication (asynchronously)
     * Get the number of communication in specified module
     * @param eCommunicationModule Specify the requested module (required)
     * @param pkiEzsignfolderID The unique ID of the Ezsignfolder (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call communicationGetCommunicationCountV1Async(String eCommunicationModule, Integer pkiEzsignfolderID, final ApiCallback<CommunicationGetCountV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = communicationGetCommunicationCountV1ValidateBeforeCall(eCommunicationModule, pkiEzsignfolderID, _callback);
        Type localVarReturnType = new TypeToken<CommunicationGetCountV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for communicationGetCommunicationListV1
     * @param eCommunicationModule Specify the requested module (required)
     * @param pkiEzsignfolderID The unique ID of the Ezsignfolder (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call communicationGetCommunicationListV1Call(String eCommunicationModule, Integer pkiEzsignfolderID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/module/communication/getCommunicationList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eCommunicationModule != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eCommunicationModule", eCommunicationModule));
        }

        if (pkiEzsignfolderID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pkiEzsignfolderID", pkiEzsignfolderID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call communicationGetCommunicationListV1ValidateBeforeCall(String eCommunicationModule, Integer pkiEzsignfolderID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eCommunicationModule' is set
        if (eCommunicationModule == null) {
            throw new ApiException("Missing the required parameter 'eCommunicationModule' when calling communicationGetCommunicationListV1(Async)");
        }

        return communicationGetCommunicationListV1Call(eCommunicationModule, pkiEzsignfolderID, _callback);

    }

    /**
     * Retrieve communication list
     * Retrieve communication list
     * @param eCommunicationModule Specify the requested module (required)
     * @param pkiEzsignfolderID The unique ID of the Ezsignfolder (optional)
     * @return CommunicationGetListV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public CommunicationGetListV1Response communicationGetCommunicationListV1(String eCommunicationModule, Integer pkiEzsignfolderID) throws ApiException {
        ApiResponse<CommunicationGetListV1Response> localVarResp = communicationGetCommunicationListV1WithHttpInfo(eCommunicationModule, pkiEzsignfolderID);
        return localVarResp.getData();
    }

    /**
     * Retrieve communication list
     * Retrieve communication list
     * @param eCommunicationModule Specify the requested module (required)
     * @param pkiEzsignfolderID The unique ID of the Ezsignfolder (optional)
     * @return ApiResponse&lt;CommunicationGetListV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommunicationGetListV1Response> communicationGetCommunicationListV1WithHttpInfo(String eCommunicationModule, Integer pkiEzsignfolderID) throws ApiException {
        okhttp3.Call localVarCall = communicationGetCommunicationListV1ValidateBeforeCall(eCommunicationModule, pkiEzsignfolderID, null);
        Type localVarReturnType = new TypeToken<CommunicationGetListV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve communication list (asynchronously)
     * Retrieve communication list
     * @param eCommunicationModule Specify the requested module (required)
     * @param pkiEzsignfolderID The unique ID of the Ezsignfolder (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The request failed. The element on which you were trying to work does not exists. Look for detail about the error in the body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call communicationGetCommunicationListV1Async(String eCommunicationModule, Integer pkiEzsignfolderID, final ApiCallback<CommunicationGetListV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = communicationGetCommunicationListV1ValidateBeforeCall(eCommunicationModule, pkiEzsignfolderID, _callback);
        Type localVarReturnType = new TypeToken<CommunicationGetListV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
